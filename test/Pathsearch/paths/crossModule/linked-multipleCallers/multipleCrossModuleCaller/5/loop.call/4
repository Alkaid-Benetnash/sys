%multipleCrossModuleCaller_14 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_15 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_16 = add  nsw i32 %multipleCrossModuleCaller_14, %multipleCrossModuleCaller_15 
%multipleCrossModuleCaller_17 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_18 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_19 = sub  nsw i32 %multipleCrossModuleCaller_17, %multipleCrossModuleCaller_18 
%multipleCrossModuleCaller_20 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_21 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_22 = mul  nsw i32 %multipleCrossModuleCaller_20, %multipleCrossModuleCaller_21 
enter-call foo
%foo_0 = bitcast i32 %multipleCrossModuleCaller_16 to i32 
%foo_1 = bitcast i32 %multipleCrossModuleCaller_19 to i32 
%foo_2 = bitcast i32 %multipleCrossModuleCaller_22 to i32 
%foo_4 = alloca i32, align 4 
%foo_5 = alloca i32, align 4 
%foo_6 = alloca i32, align 4 
%foo_7 = alloca i32, align 4 
store  i32 %foo_0, i32* %foo_5, align 4 
store  i32 %foo_1, i32* %foo_6, align 4 
store  i32 %foo_2, i32* %foo_7, align 4 
%foo_8 = load  i32, i32* %foo_5, align 4 
%foo_9 = load  i32, i32* %foo_6, align 4 
%foo_10 = icmp slt i32 %foo_8, %foo_9 
path-eq %foo_10 = bitcast i1 0 to i1 
%foo_16 = load  i32, i32* %foo_5, align 4 
%foo_17 = load  i32, i32* %foo_7, align 4 
%foo_18 = sub  nsw i32 %foo_16, %foo_17 
store  i32 %foo_18, i32* %foo_4, align 4 
%foo_20 = load  i32, i32* %foo_4, align 4 
track-ops LocalReference (IntegerType {typeBits = 32}) (Name "foo_20")
%multipleCrossModuleCaller_23 = bitcast i32 %foo_20 to i32 
exit-call multipleCrossModuleCaller_23
store  i32 %multipleCrossModuleCaller_23, i32* %multipleCrossModuleCaller_3, align 4 
