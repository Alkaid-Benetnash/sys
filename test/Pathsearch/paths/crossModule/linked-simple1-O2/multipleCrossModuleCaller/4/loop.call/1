%multipleCrossModuleCaller_3 = alloca i32, align 4 
%multipleCrossModuleCaller_4 = alloca i32, align 4 
%multipleCrossModuleCaller_5 = alloca i32, align 4 
store  i32 %multipleCrossModuleCaller_0, i32* %multipleCrossModuleCaller_4, align 4 
store  i32 %multipleCrossModuleCaller_1, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_6 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_7 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_8 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_9 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_10 = sub  nsw i32 %multipleCrossModuleCaller_8, %multipleCrossModuleCaller_9 
enter-call foo
%foo_0 = bitcast i32 %multipleCrossModuleCaller_6 to i32 
%foo_1 = bitcast i32 %multipleCrossModuleCaller_7 to i32 
%foo_2 = bitcast i32 %multipleCrossModuleCaller_10 to i32 
%foo_4 = icmp sgt i32 %foo_0, %foo_1 
path-eq %foo_4 = bitcast i1 0 to i1 
%foo_6 = icmp sgt i32 %foo_0, 55 
path-eq %foo_6 = bitcast i1 1 to i1 
%foo_8 = mul  nsw i32 %foo_1, 3 
