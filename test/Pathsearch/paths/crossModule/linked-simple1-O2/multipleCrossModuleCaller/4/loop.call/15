%multipleCrossModuleCaller_41 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_42 = add  nsw i32 %multipleCrossModuleCaller_41, 2 
%multipleCrossModuleCaller_43 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_44 = mul  nsw i32 %multipleCrossModuleCaller_43, 2 
%multipleCrossModuleCaller_45 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_46 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_47 = sdiv  i32 %multipleCrossModuleCaller_45, %multipleCrossModuleCaller_46 
enter-call foo
%foo_0 = bitcast i32 %multipleCrossModuleCaller_42 to i32 
%foo_1 = bitcast i32 %multipleCrossModuleCaller_44 to i32 
%foo_2 = bitcast i32 %multipleCrossModuleCaller_47 to i32 
%foo_4 = icmp sgt i32 %foo_0, %foo_1 
path-eq %foo_4 = bitcast i1 1 to i1 
%foo_13 = bitcast i32 3 to i32 
track-ops LocalReference (IntegerType {typeBits = 32}) (Name "foo_13")
%multipleCrossModuleCaller_48 = bitcast i32 %foo_13 to i32 
exit-call multipleCrossModuleCaller_48
store  i32 %multipleCrossModuleCaller_48, i32* %multipleCrossModuleCaller_3, align 4 
