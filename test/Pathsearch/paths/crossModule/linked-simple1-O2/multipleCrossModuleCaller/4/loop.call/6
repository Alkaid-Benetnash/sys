%multipleCrossModuleCaller_14 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_15 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_16 = add  nsw i32 %multipleCrossModuleCaller_14, %multipleCrossModuleCaller_15 
%multipleCrossModuleCaller_17 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_18 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_19 = sub  nsw i32 %multipleCrossModuleCaller_17, %multipleCrossModuleCaller_18 
%multipleCrossModuleCaller_20 = load  i32, i32* %multipleCrossModuleCaller_4, align 4 
%multipleCrossModuleCaller_21 = load  i32, i32* %multipleCrossModuleCaller_5, align 4 
%multipleCrossModuleCaller_22 = mul  nsw i32 %multipleCrossModuleCaller_20, %multipleCrossModuleCaller_21 
enter-call foo
%foo_0 = bitcast i32 %multipleCrossModuleCaller_16 to i32 
%foo_1 = bitcast i32 %multipleCrossModuleCaller_19 to i32 
%foo_2 = bitcast i32 %multipleCrossModuleCaller_22 to i32 
%foo_4 = icmp sgt i32 %foo_0, %foo_1 
path-eq %foo_4 = bitcast i1 1 to i1 
%foo_13 = bitcast i32 3 to i32 
track-ops LocalReference (IntegerType {typeBits = 32}) (Name "foo_13")
%multipleCrossModuleCaller_23 = bitcast i32 %foo_13 to i32 
exit-call multipleCrossModuleCaller_23
store  i32 %multipleCrossModuleCaller_23, i32* %multipleCrossModuleCaller_3, align 4 
