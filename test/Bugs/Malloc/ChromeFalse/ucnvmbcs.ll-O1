; ModuleID = '../../third_party/icu/source/common/ucnvmbcs.cpp'
source_filename = "../../third_party/icu/source/common/ucnvmbcs.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.UConverterImpl = type { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }
%struct.UConverterSharedData = type { i32, i32, i8*, %struct.UConverterStaticData*, i8, i8, %struct.UConverterImpl*, i32, %struct.UConverterMBCSTable }
%struct.UConverterStaticData = type { i32, [60 x i8], i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }
%struct.UConverterMBCSTable = type { i8, i8, i8, i32, [256 x i32]*, [256 x i32]*, i16*, %struct._MBCSToUFallback*, i16*, i16*, [64 x i16], i8*, i8*, i32, i8, i8, i8, i16, i32, i8*, i8*, %struct.UConverterSharedData*, i32* }
%struct._MBCSToUFallback = type { i32, i32 }
%struct.UConverterLoadArgs = type { i32, i32, i8, i8, i16, i32, i8*, i8*, i8* }
%struct.UConverter = type { void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, i8*, i8*, i8*, %struct.UConverterSharedData*, i32, i8, i8, i8, i8, i8, [7 x i8], i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], [32 x i8], [2 x i16], [2 x i16], [32 x i16], i32, [19 x i16], [31 x i8], i8, i8, i8, i32 }
%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%struct.USetAdder = type { %struct.USet*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)*, void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)* }
%struct.USet = type opaque
%struct.UDataInfo = type { i16, i16, i8, i8, i8, i8, [4 x i8], [4 x i8], [4 x i8] }
%struct.UDataMemory = type opaque
%struct.UMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }

$_ZN6icu_634UTF812isValidTrailEihii = comdat any

@_ZL9_MBCSImpl = internal constant %struct.UConverterImpl { i32 2, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* @_ZL13ucnv_MBCSLoadP20UConverterSharedDataP18UConverterLoadArgsPKhP10UErrorCode, void (%struct.UConverterSharedData*)* @_ZL15ucnv_MBCSUnloadP20UConverterSharedData, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL13ucnv_MBCSOpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_63, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_63, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_63, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_63, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL21ucnv_MBCSGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* @_ZL20ucnv_MBCSGetStartersPK10UConverterPaP10UErrorCode, i8* (%struct.UConverter*)* @_ZL16ucnv_MBCSGetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* @_ZL17ucnv_MBCSWriteSubP25UConverterFromUnicodeArgsiP10UErrorCode, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @_ZL22ucnv_MBCSGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null }, align 8
@_MBCSData_63 = hidden local_unnamed_addr constant %struct.UConverterSharedData { i32 296, i32 1, i8* null, %struct.UConverterStaticData* null, i8 0, i8 1, %struct.UConverterImpl* @_ZL9_MBCSImpl, i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL13_SBCSUTF8Impl = internal constant %struct.UConverterImpl { i32 2, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* @_ZL13ucnv_MBCSLoadP20UConverterSharedDataP18UConverterLoadArgsPKhP10UErrorCode, void (%struct.UConverterSharedData*)* @_ZL15ucnv_MBCSUnloadP20UConverterSharedData, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL13ucnv_MBCSOpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_63, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_63, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_63, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_63, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL21ucnv_MBCSGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* @_ZL20ucnv_MBCSGetStartersPK10UConverterPaP10UErrorCode, i8* (%struct.UConverter*)* @_ZL16ucnv_MBCSGetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* @_ZL17ucnv_MBCSWriteSubP25UConverterFromUnicodeArgsiP10UErrorCode, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @_ZL22ucnv_MBCSGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* @_ZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode }, align 8
@_ZL13_DBCSUTF8Impl = internal constant %struct.UConverterImpl { i32 2, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* @_ZL13ucnv_MBCSLoadP20UConverterSharedDataP18UConverterLoadArgsPKhP10UErrorCode, void (%struct.UConverterSharedData*)* @_ZL15ucnv_MBCSUnloadP20UConverterSharedData, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL13ucnv_MBCSOpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_63, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_63, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_63, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_63, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL21ucnv_MBCSGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* @_ZL20ucnv_MBCSGetStartersPK10UConverterPaP10UErrorCode, i8* (%struct.UConverter*)* @_ZL16ucnv_MBCSGetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* @_ZL17ucnv_MBCSWriteSubP25UConverterFromUnicodeArgsiP10UErrorCode, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @_ZL22ucnv_MBCSGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* @_ZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode }, align 8
@.str = private unnamed_addr constant [17 x i8] c" 000000000000\1000\00", align 1
@_ZL12utf8_offsets = internal unnamed_addr constant [5 x i32] [i32 0, i32 0, i32 12416, i32 925824, i32 63447168], align 16
@_ZZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul = internal constant i16 0, align 2
@.str.1 = private unnamed_addr constant [17 x i8] c"\00\00\00\00\00\00\00\00\1E\0F\0F\0F\00\00\00\00\00", align 1
@_ZZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul = internal constant i16 0, align 2
@.str.2 = private unnamed_addr constant [6 x i8] c"18030\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"gb18030\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"KEIS\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"keis\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"JEF\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"jef\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"JIPS\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"jips\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c",swaplfnl\00", align 1
@_ZL13gb18030Ranges = internal unnamed_addr constant [14 x [4 x i32]] [[4 x i32] [i32 65536, i32 1114111, i32 1876218, i32 2924793], [4 x i32] [i32 40870, i32 55295, i32 1706261, i32 1720686], [4 x i32] [i32 1106, i32 7742, i32 1688038, i32 1694674], [4 x i32] [i32 7744, i32 8207, i32 1694676, i32 1695139], [4 x i32] [i32 59493, i32 63787, i32 1720768, i32 1725062], [4 x i32] [i32 9795, i32 11904, i32 1696437, i32 1698546], [4 x i32] [i32 64042, i32 65071, i32 1725296, i32 1726325], [4 x i32] [i32 15585, i32 16469, i32 1701916, i32 1702800], [4 x i32] [i32 13851, i32 14615, i32 1700191, i32 1700955], [4 x i32] [i32 18872, i32 19574, i32 1705179, i32 1705881], [4 x i32] [i32 16736, i32 17206, i32 1703065, i32 1703535], [4 x i32] [i32 18318, i32 18758, i32 1704636, i32 1705076], [4 x i32] [i32 17623, i32 17995, i32 1703947, i32 1704319], [4 x i32] [i32 65510, i32 65535, i32 1726612, i32 1726637]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_MBCSGetFilteredUnicodeSetForUnicode_63(%struct.UConverterSharedData*, %struct.USetAdder*, i32, i32, i32*) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 8
  %7 = load i16*, i16** %6, align 8
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i32 64, i32 1088
  %13 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  %14 = load i8, i8* %13, align 4
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  br i1 %15, label %17, label %74

; <label>:17:                                     ; preds = %5
  %18 = bitcast i8** %16 to i16**
  %19 = load i16*, i16** %18, align 8
  %20 = icmp eq i32 %2, 0
  %21 = select i1 %20, i32 3840, i32 2048
  %22 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %23 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  br label %24

; <label>:24:                                     ; preds = %17, %69
  %25 = phi i16 [ 0, %17 ], [ %71, %69 ]
  %26 = phi i32 [ 0, %17 ], [ %70, %69 ]
  %27 = zext i16 %25 to i64
  %28 = getelementptr inbounds i16, i16* %7, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = icmp ult i32 %12, %30
  br i1 %31, label %32, label %67

; <label>:32:                                     ; preds = %24
  %33 = zext i16 %29 to i64
  %34 = getelementptr inbounds i16, i16* %7, i64 %33
  br label %35

; <label>:35:                                     ; preds = %63, %32
  %36 = phi i64 [ 0, %32 ], [ %65, %63 ]
  %37 = phi i32 [ %26, %32 ], [ %64, %63 ]
  %38 = getelementptr inbounds i16, i16* %34, i64 %36
  %39 = load i16, i16* %38, align 2
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %58, label %41

; <label>:41:                                     ; preds = %35
  %42 = zext i16 %39 to i64
  %43 = getelementptr inbounds i16, i16* %19, i64 %42
  br label %44

; <label>:44:                                     ; preds = %54, %41
  %45 = phi i32 [ %37, %41 ], [ %55, %54 ]
  %46 = phi i16* [ %43, %41 ], [ %47, %54 ]
  %47 = getelementptr inbounds i16, i16* %46, i64 1
  %48 = load i16, i16* %46, align 2
  %49 = zext i16 %48 to i32
  %50 = icmp ugt i32 %21, %49
  br i1 %50, label %54, label %51

; <label>:51:                                     ; preds = %44
  %52 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %22, align 8
  %53 = load %struct.USet*, %struct.USet** %23, align 8
  tail call void %52(%struct.USet* %53, i32 %45) #12
  br label %54

; <label>:54:                                     ; preds = %44, %51
  %55 = add nsw i32 %45, 1
  %56 = and i32 %55, 15
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %60, label %44

; <label>:58:                                     ; preds = %35
  %59 = add nsw i32 %37, 16
  br label %63

; <label>:60:                                     ; preds = %54
  %61 = or i32 %37, -16
  %62 = sub i32 %37, %61
  br label %63

; <label>:63:                                     ; preds = %60, %58
  %64 = phi i32 [ %59, %58 ], [ %62, %60 ]
  %65 = add nuw nsw i64 %36, 1
  %66 = icmp eq i64 %65, 64
  br i1 %66, label %69, label %35

; <label>:67:                                     ; preds = %24
  %68 = add nsw i32 %26, 1024
  br label %69

; <label>:69:                                     ; preds = %63, %67
  %70 = phi i32 [ %68, %67 ], [ %64, %63 ]
  %71 = add i16 %25, 1
  %72 = zext i16 %71 to i32
  %73 = icmp ugt i32 %12, %72
  br i1 %73, label %24, label %306

; <label>:74:                                     ; preds = %5
  %75 = load i8*, i8** %16, align 8
  %76 = icmp eq i32 %2, 1
  switch i8 %14, label %78 [
    i8 2, label %79
    i8 9, label %79
    i8 3, label %77
  ]

; <label>:77:                                     ; preds = %74
  br label %79

; <label>:78:                                     ; preds = %74
  br label %79

; <label>:79:                                     ; preds = %74, %74, %78, %77
  %80 = phi i32 [ 2, %78 ], [ 4, %77 ], [ 3, %74 ], [ 3, %74 ]
  %81 = lshr exact i32 %12, 1
  %82 = bitcast i16* %7 to i32*
  %83 = shl nuw nsw i32 %80, 4
  %84 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %85 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %86 = zext i32 %80 to i64
  %87 = trunc i32 %80 to i3
  %88 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %89 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %90 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %91 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %92 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %93 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %94 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %95 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %96 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %97 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %98 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %99 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  br label %100

; <label>:100:                                    ; preds = %79, %301
  %101 = phi i16 [ 0, %79 ], [ %303, %301 ]
  %102 = phi i32 [ 0, %79 ], [ %302, %301 ]
  %103 = zext i16 %101 to i64
  %104 = getelementptr inbounds i16, i16* %7, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = icmp ult i32 %81, %106
  br i1 %107, label %108, label %299

; <label>:108:                                    ; preds = %100
  %109 = zext i16 %105 to i64
  %110 = getelementptr inbounds i32, i32* %82, i64 %109
  br label %111

; <label>:111:                                    ; preds = %108, %295
  %112 = phi i64 [ 0, %108 ], [ %297, %295 ]
  %113 = phi i32 [ %102, %108 ], [ %296, %295 ]
  %114 = getelementptr inbounds i32, i32* %110, i64 %112
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %275, label %117

; <label>:117:                                    ; preds = %111
  %118 = and i32 %115, 65535
  %119 = mul nuw nsw i32 %83, %118
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %75, i64 %120
  %122 = lshr i32 %115, 16
  switch i32 %3, label %274 [
    i32 0, label %123
    i32 1, label %163
    i32 2, label %183
    i32 3, label %203
    i32 4, label %224
    i32 5, label %249
  ]

; <label>:123:                                    ; preds = %117, %157
  %124 = phi i32 [ %160, %157 ], [ %113, %117 ]
  %125 = phi i8* [ %158, %157 ], [ %121, %117 ]
  %126 = phi i32 [ %159, %157 ], [ %122, %117 ]
  %127 = and i32 %126, 1
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %133, label %129

; <label>:129:                                    ; preds = %123
  %130 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %84, align 8
  %131 = load %struct.USet*, %struct.USet** %85, align 8
  tail call void %130(%struct.USet* %131, i32 %124) #12
  %132 = getelementptr inbounds i8, i8* %125, i64 %86
  br label %157

; <label>:133:                                    ; preds = %123
  br i1 %76, label %134, label %157

; <label>:134:                                    ; preds = %133
  switch i3 %87, label %157 [
    i3 -4, label %135
    i3 3, label %138
    i3 2, label %144
  ]

; <label>:135:                                    ; preds = %134
  %136 = getelementptr inbounds i8, i8* %125, i64 1
  %137 = load i8, i8* %125, align 1
  br label %138

; <label>:138:                                    ; preds = %134, %135
  %139 = phi i8* [ %125, %134 ], [ %136, %135 ]
  %140 = phi i8 [ 0, %134 ], [ %137, %135 ]
  %141 = getelementptr inbounds i8, i8* %139, i64 1
  %142 = load i8, i8* %139, align 1
  %143 = or i8 %142, %140
  br label %144

; <label>:144:                                    ; preds = %138, %134
  %145 = phi i8* [ %125, %134 ], [ %141, %138 ]
  %146 = phi i8 [ 0, %134 ], [ %143, %138 ]
  %147 = load i8, i8* %145, align 1
  %148 = getelementptr inbounds i8, i8* %145, i64 1
  %149 = load i8, i8* %148, align 1
  %150 = or i8 %147, %146
  %151 = or i8 %150, %149
  %152 = getelementptr inbounds i8, i8* %145, i64 2
  %153 = icmp eq i8 %151, 0
  br i1 %153, label %157, label %154

; <label>:154:                                    ; preds = %144
  %155 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %88, align 8
  %156 = load %struct.USet*, %struct.USet** %89, align 8
  tail call void %155(%struct.USet* %156, i32 %124) #12
  br label %157

; <label>:157:                                    ; preds = %134, %154, %144, %133, %129
  %158 = phi i8* [ %132, %129 ], [ %125, %133 ], [ %152, %144 ], [ %152, %154 ], [ %125, %134 ]
  %159 = lshr i32 %126, 1
  %160 = add nsw i32 %124, 1
  %161 = and i32 %160, 15
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %277, label %123

; <label>:163:                                    ; preds = %117, %177
  %164 = phi i32 [ %180, %177 ], [ %113, %117 ]
  %165 = phi i8* [ %179, %177 ], [ %121, %117 ]
  %166 = phi i32 [ %178, %177 ], [ %122, %117 ]
  %167 = and i32 %166, 1
  %168 = icmp ne i32 %167, 0
  %169 = or i1 %76, %168
  br i1 %169, label %170, label %177

; <label>:170:                                    ; preds = %163
  %171 = bitcast i8* %165 to i16*
  %172 = load i16, i16* %171, align 2
  %173 = icmp ugt i16 %172, 255
  br i1 %173, label %174, label %177

; <label>:174:                                    ; preds = %170
  %175 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %90, align 8
  %176 = load %struct.USet*, %struct.USet** %91, align 8
  tail call void %175(%struct.USet* %176, i32 %164) #12
  br label %177

; <label>:177:                                    ; preds = %163, %174, %170
  %178 = lshr i32 %166, 1
  %179 = getelementptr inbounds i8, i8* %165, i64 2
  %180 = add nsw i32 %164, 1
  %181 = and i32 %180, 15
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %280, label %163

; <label>:183:                                    ; preds = %117, %197
  %184 = phi i32 [ %200, %197 ], [ %113, %117 ]
  %185 = phi i8* [ %199, %197 ], [ %121, %117 ]
  %186 = phi i32 [ %198, %197 ], [ %122, %117 ]
  %187 = and i32 %186, 1
  %188 = icmp ne i32 %187, 0
  %189 = or i1 %76, %188
  br i1 %189, label %190, label %197

; <label>:190:                                    ; preds = %183
  %191 = load i8, i8* %185, align 1
  %192 = add i8 %191, 127
  %193 = icmp ult i8 %192, 2
  br i1 %193, label %194, label %197

; <label>:194:                                    ; preds = %190
  %195 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %92, align 8
  %196 = load %struct.USet*, %struct.USet** %93, align 8
  tail call void %195(%struct.USet* %196, i32 %184) #12
  br label %197

; <label>:197:                                    ; preds = %190, %183, %194
  %198 = lshr i32 %186, 1
  %199 = getelementptr inbounds i8, i8* %185, i64 3
  %200 = add nsw i32 %184, 1
  %201 = and i32 %200, 15
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %283, label %183

; <label>:203:                                    ; preds = %117, %218
  %204 = phi i32 [ %221, %218 ], [ %113, %117 ]
  %205 = phi i8* [ %220, %218 ], [ %121, %117 ]
  %206 = phi i32 [ %219, %218 ], [ %122, %117 ]
  %207 = and i32 %206, 1
  %208 = icmp ne i32 %207, 0
  %209 = or i1 %76, %208
  br i1 %209, label %210, label %218

; <label>:210:                                    ; preds = %203
  %211 = bitcast i8* %205 to i16*
  %212 = load i16, i16* %211, align 2
  %213 = add i16 %212, 32448
  %214 = icmp ult i16 %213, 28349
  br i1 %214, label %215, label %218

; <label>:215:                                    ; preds = %210
  %216 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %94, align 8
  %217 = load %struct.USet*, %struct.USet** %95, align 8
  tail call void %216(%struct.USet* %217, i32 %204) #12
  br label %218

; <label>:218:                                    ; preds = %203, %215, %210
  %219 = lshr i32 %206, 1
  %220 = getelementptr inbounds i8, i8* %205, i64 2
  %221 = add nsw i32 %204, 1
  %222 = and i32 %221, 15
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %286, label %203

; <label>:224:                                    ; preds = %117, %243
  %225 = phi i32 [ %246, %243 ], [ %113, %117 ]
  %226 = phi i8* [ %245, %243 ], [ %121, %117 ]
  %227 = phi i32 [ %244, %243 ], [ %122, %117 ]
  %228 = and i32 %227, 1
  %229 = icmp ne i32 %228, 0
  %230 = or i1 %76, %229
  br i1 %230, label %231, label %243

; <label>:231:                                    ; preds = %224
  %232 = bitcast i8* %226 to i16*
  %233 = load i16, i16* %232, align 2
  %234 = add i16 %233, 24159
  %235 = icmp ult i16 %234, 23902
  br i1 %235, label %236, label %243

; <label>:236:                                    ; preds = %231
  %237 = add i16 %233, 95
  %238 = and i16 %237, 254
  %239 = icmp ult i16 %238, 94
  br i1 %239, label %240, label %243

; <label>:240:                                    ; preds = %236
  %241 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %96, align 8
  %242 = load %struct.USet*, %struct.USet** %97, align 8
  tail call void %241(%struct.USet* %242, i32 %225) #12
  br label %243

; <label>:243:                                    ; preds = %224, %240, %236, %231
  %244 = lshr i32 %227, 1
  %245 = getelementptr inbounds i8, i8* %226, i64 2
  %246 = add nsw i32 %225, 1
  %247 = and i32 %246, 15
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %289, label %224

; <label>:249:                                    ; preds = %117, %268
  %250 = phi i32 [ %271, %268 ], [ %113, %117 ]
  %251 = phi i8* [ %270, %268 ], [ %121, %117 ]
  %252 = phi i32 [ %269, %268 ], [ %122, %117 ]
  %253 = and i32 %252, 1
  %254 = icmp ne i32 %253, 0
  %255 = or i1 %76, %254
  br i1 %255, label %256, label %268

; <label>:256:                                    ; preds = %249
  %257 = bitcast i8* %251 to i16*
  %258 = load i16, i16* %257, align 2
  %259 = add i16 %258, 24159
  %260 = icmp ult i16 %259, 23646
  br i1 %260, label %261, label %268

; <label>:261:                                    ; preds = %256
  %262 = add i16 %258, 95
  %263 = and i16 %262, 254
  %264 = icmp ult i16 %263, 94
  br i1 %264, label %265, label %268

; <label>:265:                                    ; preds = %261
  %266 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %98, align 8
  %267 = load %struct.USet*, %struct.USet** %99, align 8
  tail call void %266(%struct.USet* %267, i32 %250) #12
  br label %268

; <label>:268:                                    ; preds = %249, %265, %261, %256
  %269 = lshr i32 %252, 1
  %270 = getelementptr inbounds i8, i8* %251, i64 2
  %271 = add nsw i32 %250, 1
  %272 = and i32 %271, 15
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %292, label %249

; <label>:274:                                    ; preds = %117
  store i32 5, i32* %4, align 4
  br label %307

; <label>:275:                                    ; preds = %111
  %276 = add nsw i32 %113, 16
  br label %295

; <label>:277:                                    ; preds = %157
  %278 = or i32 %113, -16
  %279 = sub i32 %113, %278
  br label %295

; <label>:280:                                    ; preds = %177
  %281 = or i32 %113, -16
  %282 = sub i32 %113, %281
  br label %295

; <label>:283:                                    ; preds = %197
  %284 = or i32 %113, -16
  %285 = sub i32 %113, %284
  br label %295

; <label>:286:                                    ; preds = %218
  %287 = or i32 %113, -16
  %288 = sub i32 %113, %287
  br label %295

; <label>:289:                                    ; preds = %243
  %290 = or i32 %113, -16
  %291 = sub i32 %113, %290
  br label %295

; <label>:292:                                    ; preds = %268
  %293 = or i32 %113, -16
  %294 = sub i32 %113, %293
  br label %295

; <label>:295:                                    ; preds = %292, %289, %286, %283, %280, %277, %275
  %296 = phi i32 [ %276, %275 ], [ %279, %277 ], [ %282, %280 ], [ %285, %283 ], [ %288, %286 ], [ %291, %289 ], [ %294, %292 ]
  %297 = add nuw nsw i64 %112, 1
  %298 = icmp ult i64 %297, 64
  br i1 %298, label %111, label %301

; <label>:299:                                    ; preds = %100
  %300 = add nsw i32 %102, 1024
  br label %301

; <label>:301:                                    ; preds = %295, %299
  %302 = phi i32 [ %300, %299 ], [ %296, %295 ]
  %303 = add i16 %101, 1
  %304 = zext i16 %303 to i32
  %305 = icmp ugt i32 %12, %304
  br i1 %305, label %100, label %306

; <label>:306:                                    ; preds = %301, %69
  tail call void @ucnv_extGetUnicodeSet_63(%struct.UConverterSharedData* %0, %struct.USetAdder* %1, i32 %2, i32 %3, i32* %4) #12
  br label %307

; <label>:307:                                    ; preds = %274, %306
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

declare void @ucnv_extGetUnicodeSet_63(%struct.UConverterSharedData*, %struct.USetAdder*, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_MBCSGetUnicodeSetForUnicode_63(%struct.UConverterSharedData*, %struct.USetAdder*, i32, i32*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  %6 = load i8, i8* %5, align 4
  %7 = icmp eq i8 %6, -37
  %8 = zext i1 %7 to i32
  tail call void @ucnv_MBCSGetFilteredUnicodeSetForUnicode_63(%struct.UConverterSharedData* %0, %struct.USetAdder* %1, i32 %2, i32 %8, i32* %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_MBCSToUnicodeWithOffsets_63(%struct.UConverterToUnicodeArgs*, i32*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = alloca i32*, align 8
  %6 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %10 = load %struct.UConverter*, %struct.UConverter** %9, align 8
  %11 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 35
  %12 = load i8, i8* %11, align 2
  %13 = icmp sgt i8 %12, 0
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %2
  tail call void @ucnv_extContinueMatchToU_63(%struct.UConverter* %10, %struct.UConverterToUnicodeArgs* nonnull %0, i32 -1, i32* %1) #12
  %15 = load i32, i32* %1, align 4
  %16 = tail call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %15)
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %484

; <label>:18:                                     ; preds = %14
  %19 = load i8, i8* %11, align 2
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %484, label %21

; <label>:21:                                     ; preds = %18, %2
  %22 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 6
  %23 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %22, align 8
  %24 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %23, i64 0, i32 8, i32 0
  %25 = load i8, i8* %24, align 8
  %26 = icmp eq i8 %25, 1
  br i1 %26, label %27, label %34

; <label>:27:                                     ; preds = %21
  %28 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %23, i64 0, i32 8, i32 15
  %29 = load i8, i8* %28, align 1
  %30 = and i8 %29, 1
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %27
  tail call fastcc void @_ZL31ucnv_MBCSSingleToBMPWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nonnull %0, i32* %1)
  br label %484

; <label>:33:                                     ; preds = %27
  tail call fastcc void @_ZL35ucnv_MBCSSingleToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nonnull %0, i32* %1)
  br label %484

; <label>:34:                                     ; preds = %21
  %35 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %36 = bitcast i8** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast i8** %3 to i64*
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %42 = bitcast i16** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast i16** %4 to i64*
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %46 = load i16*, i16** %45, align 8
  %47 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %48 = bitcast i32** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast i32** %5 to i64*
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 7
  %52 = load i32, i32* %51, align 8
  %53 = and i32 %52, 16
  %54 = icmp eq i32 %53, 0
  %55 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %23, i64 0, i32 8, i32 5
  %56 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %23, i64 0, i32 8, i32 4
  %57 = select i1 %54, [256 x i32]** %56, [256 x i32]** %55
  %58 = load [256 x i32]*, [256 x i32]** %57, align 8
  %59 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %23, i64 0, i32 8, i32 6
  %60 = load i16*, i16** %59, align 8
  %61 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 14
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 12
  %64 = load i8, i8* %63, align 8
  %65 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 13, i64 0
  %66 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 15
  %67 = load i32, i32* %66, align 4
  %68 = trunc i32 %67 to i8
  %69 = and i32 %67, 255
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %74

; <label>:71:                                     ; preds = %34
  %72 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %23, i64 0, i32 8, i32 1
  %73 = load i8, i8* %72, align 1
  br label %74

; <label>:74:                                     ; preds = %71, %34
  %75 = phi i8 [ %73, %71 ], [ %68, %34 ]
  %76 = load i8*, i8** %3, align 8
  %77 = icmp ult i8* %76, %40
  br i1 %77, label %78, label %476

; <label>:78:                                     ; preds = %74
  %79 = icmp ne i8 %64, 0
  %80 = sext i1 %79 to i32
  %81 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 1
  br label %82

; <label>:82:                                     ; preds = %78, %266
  %83 = phi i8* [ %76, %78 ], [ %272, %266 ]
  %84 = phi i32 [ %62, %78 ], [ %271, %266 ]
  %85 = phi i8 [ %75, %78 ], [ %270, %266 ]
  %86 = phi i8 [ %64, %78 ], [ %269, %266 ]
  %87 = phi i32 [ 0, %78 ], [ %268, %266 ]
  %88 = phi i32 [ %80, %78 ], [ %267, %266 ]
  %89 = load i16*, i16** %4, align 8
  %90 = icmp ult i16* %89, %46
  br i1 %90, label %92, label %91

; <label>:91:                                     ; preds = %82
  store i32 15, i32* %1, align 4
  br label %476

; <label>:92:                                     ; preds = %82
  %93 = icmp eq i8 %86, 0
  br i1 %93, label %94, label %242

; <label>:94:                                     ; preds = %92
  %95 = load i32*, i32** %5, align 8
  %96 = icmp eq i32* %95, null
  br i1 %96, label %97, label %153

; <label>:97:                                     ; preds = %94, %142
  %98 = phi i8 [ %147, %142 ], [ %85, %94 ]
  %99 = phi i32 [ %144, %142 ], [ %84, %94 ]
  %100 = zext i8 %98 to i64
  %101 = load i8*, i8** %3, align 8
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i64
  %104 = getelementptr inbounds [256 x i32], [256 x i32]* %58, i64 %100, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = icmp sgt i32 %105, -1
  br i1 %106, label %107, label %135

; <label>:107:                                    ; preds = %97
  %108 = lshr i32 %105, 24
  %109 = and i32 %105, 16777215
  %110 = getelementptr inbounds i8, i8* %101, i64 1
  store i8* %110, i8** %3, align 8
  %111 = icmp ult i8* %110, %40
  br i1 %111, label %112, label %131

; <label>:112:                                    ; preds = %107
  %113 = zext i32 %108 to i64
  %114 = load i8, i8* %110, align 1
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds [256 x i32], [256 x i32]* %58, i64 %113, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = and i32 %117, -2131755008
  %119 = icmp eq i32 %118, -2143289344
  br i1 %119, label %120, label %131

; <label>:120:                                    ; preds = %112
  %121 = and i32 %117, 65535
  %122 = add nuw nsw i32 %121, %109
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i16, i16* %60, i64 %123
  %125 = load i16, i16* %124, align 2
  %126 = icmp ult i16 %125, -2
  br i1 %126, label %127, label %131

; <label>:127:                                    ; preds = %120
  %128 = getelementptr inbounds i8, i8* %101, i64 2
  store i8* %128, i8** %3, align 8
  %129 = load i16*, i16** %4, align 8
  %130 = getelementptr inbounds i16, i16* %129, i64 1
  store i16* %130, i16** %4, align 8
  store i16 %125, i16* %129, align 2
  br label %142

; <label>:131:                                    ; preds = %120, %112, %107
  %132 = phi i32 [ %117, %120 ], [ %117, %112 ], [ %105, %107 ]
  %133 = trunc i32 %108 to i8
  %134 = load i8, i8* %101, align 1
  store i8 %134, i8* %65, align 1
  br label %224

; <label>:135:                                    ; preds = %97
  %136 = icmp slt i32 %105, -2146435072
  br i1 %136, label %137, label %224

; <label>:137:                                    ; preds = %135
  %138 = getelementptr inbounds i8, i8* %101, i64 1
  store i8* %138, i8** %3, align 8
  %139 = trunc i32 %105 to i16
  %140 = load i16*, i16** %4, align 8
  %141 = getelementptr inbounds i16, i16* %140, i64 1
  store i16* %141, i16** %4, align 8
  store i16 %139, i16* %140, align 2
  br label %142

; <label>:142:                                    ; preds = %127, %137
  %143 = phi i32 [ %117, %127 ], [ %105, %137 ]
  %144 = phi i32 [ 0, %127 ], [ %99, %137 ]
  %145 = lshr i32 %143, 24
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 127
  %148 = load i8*, i8** %3, align 8
  %149 = icmp ult i8* %148, %40
  %150 = load i16*, i16** %4, align 8
  %151 = icmp ult i16* %150, %46
  %152 = and i1 %149, %151
  br i1 %152, label %97, label %224

; <label>:153:                                    ; preds = %94, %211
  %154 = phi i32 [ %212, %211 ], [ %88, %94 ]
  %155 = phi i32 [ %213, %211 ], [ %87, %94 ]
  %156 = phi i8 [ %218, %211 ], [ %85, %94 ]
  %157 = phi i32 [ %215, %211 ], [ %84, %94 ]
  %158 = zext i8 %156 to i64
  %159 = load i8*, i8** %3, align 8
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i64
  %162 = getelementptr inbounds [256 x i32], [256 x i32]* %58, i64 %158, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = icmp sgt i32 %163, -1
  br i1 %164, label %165, label %199

; <label>:165:                                    ; preds = %153
  %166 = lshr i32 %163, 24
  %167 = and i32 %163, 16777215
  %168 = getelementptr inbounds i8, i8* %159, i64 1
  store i8* %168, i8** %3, align 8
  %169 = icmp ult i8* %168, %40
  br i1 %169, label %170, label %194

; <label>:170:                                    ; preds = %165
  %171 = zext i32 %166 to i64
  %172 = load i8, i8* %168, align 1
  %173 = zext i8 %172 to i64
  %174 = getelementptr inbounds [256 x i32], [256 x i32]* %58, i64 %171, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = and i32 %175, -2131755008
  %177 = icmp eq i32 %176, -2143289344
  br i1 %177, label %178, label %194

; <label>:178:                                    ; preds = %170
  %179 = and i32 %175, 65535
  %180 = add nuw nsw i32 %179, %167
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds i16, i16* %60, i64 %181
  %183 = load i16, i16* %182, align 2
  %184 = icmp ult i16 %183, -2
  br i1 %184, label %185, label %194

; <label>:185:                                    ; preds = %178
  %186 = getelementptr inbounds i8, i8* %159, i64 2
  store i8* %186, i8** %3, align 8
  %187 = load i16*, i16** %4, align 8
  %188 = getelementptr inbounds i16, i16* %187, i64 1
  store i16* %188, i16** %4, align 8
  store i16 %183, i16* %187, align 2
  %189 = load i32*, i32** %5, align 8
  %190 = icmp eq i32* %189, null
  br i1 %190, label %211, label %191

; <label>:191:                                    ; preds = %185
  %192 = getelementptr inbounds i32, i32* %189, i64 1
  store i32* %192, i32** %5, align 8
  store i32 %154, i32* %189, align 4
  %193 = add nsw i32 %155, 2
  br label %211

; <label>:194:                                    ; preds = %178, %170, %165
  %195 = phi i32 [ %175, %178 ], [ %175, %170 ], [ %163, %165 ]
  %196 = trunc i32 %166 to i8
  %197 = add nsw i32 %155, 1
  %198 = load i8, i8* %159, align 1
  store i8 %198, i8* %65, align 1
  br label %224

; <label>:199:                                    ; preds = %153
  %200 = icmp slt i32 %163, -2146435072
  br i1 %200, label %201, label %224

; <label>:201:                                    ; preds = %199
  %202 = getelementptr inbounds i8, i8* %159, i64 1
  store i8* %202, i8** %3, align 8
  %203 = trunc i32 %163 to i16
  %204 = load i16*, i16** %4, align 8
  %205 = getelementptr inbounds i16, i16* %204, i64 1
  store i16* %205, i16** %4, align 8
  store i16 %203, i16* %204, align 2
  %206 = load i32*, i32** %5, align 8
  %207 = icmp eq i32* %206, null
  br i1 %207, label %211, label %208

; <label>:208:                                    ; preds = %201
  %209 = getelementptr inbounds i32, i32* %206, i64 1
  store i32* %209, i32** %5, align 8
  store i32 %154, i32* %206, align 4
  %210 = add nsw i32 %155, 1
  br label %211

; <label>:211:                                    ; preds = %208, %201, %191, %185
  %212 = phi i32 [ %193, %191 ], [ %154, %185 ], [ %210, %208 ], [ %154, %201 ]
  %213 = phi i32 [ %193, %191 ], [ %155, %185 ], [ %210, %208 ], [ %155, %201 ]
  %214 = phi i32 [ %175, %191 ], [ %175, %185 ], [ %163, %208 ], [ %163, %201 ]
  %215 = phi i32 [ 0, %191 ], [ 0, %185 ], [ %157, %208 ], [ %157, %201 ]
  %216 = lshr i32 %214, 24
  %217 = trunc i32 %216 to i8
  %218 = and i8 %217, 127
  %219 = load i8*, i8** %3, align 8
  %220 = icmp ult i8* %219, %40
  %221 = load i16*, i16** %4, align 8
  %222 = icmp ult i16* %221, %46
  %223 = and i1 %220, %222
  br i1 %223, label %153, label %224

; <label>:224:                                    ; preds = %211, %199, %142, %135, %194, %131
  %225 = phi i32 [ %88, %131 ], [ %154, %194 ], [ %88, %135 ], [ %88, %142 ], [ %154, %199 ], [ %212, %211 ]
  %226 = phi i32 [ %87, %131 ], [ %197, %194 ], [ %87, %135 ], [ %87, %142 ], [ %155, %199 ], [ %213, %211 ]
  %227 = phi i32 [ %132, %131 ], [ %195, %194 ], [ %143, %142 ], [ %105, %135 ], [ %163, %199 ], [ %214, %211 ]
  %228 = phi i8 [ 1, %131 ], [ 1, %194 ], [ %86, %135 ], [ %86, %142 ], [ %86, %199 ], [ %86, %211 ]
  %229 = phi i8 [ %133, %131 ], [ %196, %194 ], [ %147, %142 ], [ %98, %135 ], [ %156, %199 ], [ %218, %211 ]
  %230 = phi i32 [ %109, %131 ], [ %167, %194 ], [ %144, %142 ], [ %99, %135 ], [ %157, %199 ], [ %215, %211 ]
  %231 = load i8*, i8** %3, align 8
  %232 = icmp ult i8* %231, %40
  br i1 %232, label %233, label %476

; <label>:233:                                    ; preds = %224
  %234 = load i16*, i16** %4, align 8
  %235 = icmp ult i16* %234, %46
  br i1 %235, label %237, label %236

; <label>:236:                                    ; preds = %233
  store i32 15, i32* %1, align 4
  br label %476

; <label>:237:                                    ; preds = %233
  %238 = getelementptr inbounds i8, i8* %231, i64 1
  store i8* %238, i8** %3, align 8
  %239 = load i8, i8* %231, align 1
  %240 = sext i8 %228 to i64
  %241 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 13, i64 %240
  store i8 %239, i8* %241, align 1
  br label %251

; <label>:242:                                    ; preds = %92
  %243 = zext i8 %85 to i64
  %244 = getelementptr inbounds i8, i8* %83, i64 1
  store i8* %244, i8** %3, align 8
  %245 = load i8, i8* %83, align 1
  %246 = sext i8 %86 to i64
  %247 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 13, i64 %246
  store i8 %245, i8* %247, align 1
  %248 = zext i8 %245 to i64
  %249 = getelementptr inbounds [256 x i32], [256 x i32]* %58, i64 %243, i64 %248
  %250 = load i32, i32* %249, align 4
  br label %251

; <label>:251:                                    ; preds = %242, %237
  %252 = phi i32 [ %225, %237 ], [ %88, %242 ]
  %253 = phi i32 [ %226, %237 ], [ %87, %242 ]
  %254 = phi i32 [ %227, %237 ], [ %250, %242 ]
  %255 = phi i8 [ %228, %237 ], [ %86, %242 ]
  %256 = phi i8 [ %229, %237 ], [ %85, %242 ]
  %257 = phi i32 [ %230, %237 ], [ %84, %242 ]
  %258 = add i8 %255, 1
  %259 = add nsw i32 %253, 1
  %260 = icmp sgt i32 %254, -1
  br i1 %260, label %261, label %274

; <label>:261:                                    ; preds = %251
  %262 = lshr i32 %254, 24
  %263 = trunc i32 %262 to i8
  %264 = and i32 %254, 16777215
  %265 = add i32 %257, %264
  br label %266

; <label>:266:                                    ; preds = %463, %416, %354, %350, %396, %392, %288, %293, %302, %308, %311, %317, %327, %332, %362, %370, %401, %407, %413, %274, %261
  %267 = phi i32 [ %252, %261 ], [ %472, %463 ], [ %259, %416 ], [ %259, %354 ], [ %259, %350 ], [ %259, %396 ], [ %259, %392 ], [ %259, %288 ], [ %259, %293 ], [ %259, %302 ], [ %259, %308 ], [ %259, %311 ], [ %259, %317 ], [ %259, %327 ], [ %259, %332 ], [ %259, %362 ], [ %259, %370 ], [ %259, %401 ], [ %259, %407 ], [ %259, %413 ], [ %259, %274 ]
  %268 = phi i32 [ %259, %261 ], [ %472, %463 ], [ %259, %416 ], [ %259, %354 ], [ %259, %350 ], [ %259, %396 ], [ %259, %392 ], [ %259, %288 ], [ %259, %293 ], [ %259, %302 ], [ %259, %308 ], [ %259, %311 ], [ %259, %317 ], [ %259, %327 ], [ %259, %332 ], [ %259, %362 ], [ %259, %370 ], [ %259, %401 ], [ %259, %407 ], [ %259, %413 ], [ %259, %274 ]
  %269 = phi i8 [ %258, %261 ], [ %467, %463 ], [ 0, %416 ], [ 0, %354 ], [ 0, %350 ], [ 0, %396 ], [ 0, %392 ], [ 0, %288 ], [ 0, %293 ], [ 0, %302 ], [ 0, %308 ], [ 0, %311 ], [ 0, %317 ], [ 0, %327 ], [ 0, %332 ], [ 0, %362 ], [ 0, %370 ], [ 0, %401 ], [ 0, %407 ], [ 0, %413 ], [ 0, %274 ]
  %270 = phi i8 [ %263, %261 ], [ %417, %463 ], [ %417, %416 ], [ %278, %354 ], [ %278, %350 ], [ %278, %396 ], [ %278, %392 ], [ %278, %288 ], [ %278, %293 ], [ %278, %302 ], [ %278, %308 ], [ %278, %311 ], [ %278, %317 ], [ %278, %327 ], [ %278, %332 ], [ %278, %362 ], [ %278, %370 ], [ %278, %401 ], [ %278, %407 ], [ %278, %413 ], [ %278, %274 ]
  %271 = phi i32 [ %265, %261 ], [ 0, %463 ], [ 0, %416 ], [ 0, %354 ], [ 0, %350 ], [ 0, %396 ], [ 0, %392 ], [ 0, %288 ], [ 0, %293 ], [ 0, %302 ], [ 0, %308 ], [ 0, %311 ], [ 0, %317 ], [ 0, %327 ], [ 0, %332 ], [ 0, %362 ], [ 0, %370 ], [ 0, %401 ], [ 0, %407 ], [ 0, %413 ], [ 0, %274 ]
  %272 = load i8*, i8** %3, align 8
  %273 = icmp ult i8* %272, %40
  br i1 %273, label %82, label %476

; <label>:274:                                    ; preds = %251
  %275 = zext i8 %256 to i32
  store i32 %275, i32* %66, align 4
  %276 = lshr i32 %254, 24
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 127
  %279 = lshr i32 %254, 20
  %280 = trunc i32 %279 to i4
  switch i4 %280, label %266 [
    i4 4, label %281
    i4 0, label %311
    i4 5, label %319
    i4 1, label %375
    i4 3, label %375
    i4 -8, label %401
    i4 2, label %407
    i4 6, label %416
    i4 7, label %415
  ]

; <label>:281:                                    ; preds = %274
  %282 = and i32 %254, 65535
  %283 = add i32 %257, %282
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds i16, i16* %60, i64 %284
  %286 = load i16, i16* %285, align 2
  %287 = icmp ult i16 %286, -2
  br i1 %287, label %288, label %295

; <label>:288:                                    ; preds = %281
  %289 = load i16*, i16** %4, align 8
  %290 = getelementptr inbounds i16, i16* %289, i64 1
  store i16* %290, i16** %4, align 8
  store i16 %286, i16* %289, align 2
  %291 = load i32*, i32** %5, align 8
  %292 = icmp eq i32* %291, null
  br i1 %292, label %266, label %293

; <label>:293:                                    ; preds = %288
  %294 = getelementptr inbounds i32, i32* %291, i64 1
  store i32* %294, i32** %5, align 8
  store i32 %252, i32* %291, align 4
  br label %266

; <label>:295:                                    ; preds = %281
  %296 = icmp eq i16 %286, -2
  br i1 %296, label %297, label %310

; <label>:297:                                    ; preds = %295
  %298 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %22, align 8
  %299 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %298, i64 0, i32 8
  %300 = call fastcc i32 @_ZL20ucnv_MBCSGetFallbackP19UConverterMBCSTablej(%struct.UConverterMBCSTable* nonnull %299, i32 %283)
  %301 = icmp eq i32 %300, 65534
  br i1 %301, label %416, label %302

; <label>:302:                                    ; preds = %297
  %303 = trunc i32 %300 to i16
  %304 = load i16*, i16** %4, align 8
  %305 = getelementptr inbounds i16, i16* %304, i64 1
  store i16* %305, i16** %4, align 8
  store i16 %303, i16* %304, align 2
  %306 = load i32*, i32** %5, align 8
  %307 = icmp eq i32* %306, null
  br i1 %307, label %266, label %308

; <label>:308:                                    ; preds = %302
  %309 = getelementptr inbounds i32, i32* %306, i64 1
  store i32* %309, i32** %5, align 8
  store i32 %252, i32* %306, align 4
  br label %266

; <label>:310:                                    ; preds = %295
  store i32 12, i32* %1, align 4
  br label %416

; <label>:311:                                    ; preds = %274
  %312 = trunc i32 %254 to i16
  %313 = load i16*, i16** %4, align 8
  %314 = getelementptr inbounds i16, i16* %313, i64 1
  store i16* %314, i16** %4, align 8
  store i16 %312, i16* %313, align 2
  %315 = load i32*, i32** %5, align 8
  %316 = icmp eq i32* %315, null
  br i1 %316, label %266, label %317

; <label>:317:                                    ; preds = %311
  %318 = getelementptr inbounds i32, i32* %315, i64 1
  store i32* %318, i32** %5, align 8
  store i32 %252, i32* %315, align 4
  br label %266

; <label>:319:                                    ; preds = %274
  %320 = and i32 %254, 65535
  %321 = add i32 %257, %320
  %322 = add i32 %321, 1
  %323 = zext i32 %321 to i64
  %324 = getelementptr inbounds i16, i16* %60, i64 %323
  %325 = load i16, i16* %324, align 2
  %326 = icmp ult i16 %325, -10240
  br i1 %326, label %327, label %334

; <label>:327:                                    ; preds = %319
  %328 = load i16*, i16** %4, align 8
  %329 = getelementptr inbounds i16, i16* %328, i64 1
  store i16* %329, i16** %4, align 8
  store i16 %325, i16* %328, align 2
  %330 = load i32*, i32** %5, align 8
  %331 = icmp eq i32* %330, null
  br i1 %331, label %266, label %332

; <label>:332:                                    ; preds = %327
  %333 = getelementptr inbounds i32, i32* %330, i64 1
  store i32* %333, i32** %5, align 8
  store i32 %252, i32* %330, align 4
  br label %266

; <label>:334:                                    ; preds = %319
  %335 = icmp ult i16 %325, -8192
  br i1 %335, label %336, label %359

; <label>:336:                                    ; preds = %334
  %337 = and i16 %325, -9217
  %338 = load i16*, i16** %4, align 8
  %339 = getelementptr inbounds i16, i16* %338, i64 1
  store i16* %339, i16** %4, align 8
  store i16 %337, i16* %338, align 2
  %340 = load i32*, i32** %5, align 8
  %341 = icmp eq i32* %340, null
  br i1 %341, label %344, label %342

; <label>:342:                                    ; preds = %336
  %343 = getelementptr inbounds i32, i32* %340, i64 1
  store i32* %343, i32** %5, align 8
  store i32 %252, i32* %340, align 4
  br label %344

; <label>:344:                                    ; preds = %336, %342
  %345 = load i16*, i16** %4, align 8
  %346 = icmp ult i16* %345, %46
  %347 = zext i32 %322 to i64
  %348 = getelementptr inbounds i16, i16* %60, i64 %347
  %349 = load i16, i16* %348, align 2
  br i1 %346, label %350, label %356

; <label>:350:                                    ; preds = %344
  %351 = getelementptr inbounds i16, i16* %345, i64 1
  store i16* %351, i16** %4, align 8
  store i16 %349, i16* %345, align 2
  %352 = load i32*, i32** %5, align 8
  %353 = icmp eq i32* %352, null
  br i1 %353, label %266, label %354

; <label>:354:                                    ; preds = %350
  %355 = getelementptr inbounds i32, i32* %352, i64 1
  store i32* %355, i32** %5, align 8
  store i32 %252, i32* %352, align 4
  br label %266

; <label>:356:                                    ; preds = %344
  %357 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 30, i64 0
  store i16 %349, i16* %357, align 8
  %358 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 23
  store i8 1, i8* %358, align 1
  store i32 15, i32* %1, align 4
  br label %476

; <label>:359:                                    ; preds = %334
  %360 = and i16 %325, -2
  %361 = icmp eq i16 %360, -8192
  br i1 %361, label %362, label %372

; <label>:362:                                    ; preds = %359
  %363 = zext i32 %322 to i64
  %364 = getelementptr inbounds i16, i16* %60, i64 %363
  %365 = load i16, i16* %364, align 2
  %366 = load i16*, i16** %4, align 8
  %367 = getelementptr inbounds i16, i16* %366, i64 1
  store i16* %367, i16** %4, align 8
  store i16 %365, i16* %366, align 2
  %368 = load i32*, i32** %5, align 8
  %369 = icmp eq i32* %368, null
  br i1 %369, label %266, label %370

; <label>:370:                                    ; preds = %362
  %371 = getelementptr inbounds i32, i32* %368, i64 1
  store i32* %371, i32** %5, align 8
  store i32 %252, i32* %368, align 4
  br label %266

; <label>:372:                                    ; preds = %359
  %373 = icmp eq i16 %325, -1
  br i1 %373, label %374, label %416

; <label>:374:                                    ; preds = %372
  store i32 12, i32* %1, align 4
  br label %416

; <label>:375:                                    ; preds = %274, %274
  %376 = lshr i32 %254, 10
  %377 = trunc i32 %376 to i16
  %378 = and i16 %377, 1023
  %379 = or i16 %378, -10240
  %380 = load i16*, i16** %4, align 8
  %381 = getelementptr inbounds i16, i16* %380, i64 1
  store i16* %381, i16** %4, align 8
  store i16 %379, i16* %380, align 2
  %382 = load i32*, i32** %5, align 8
  %383 = icmp eq i32* %382, null
  br i1 %383, label %386, label %384

; <label>:384:                                    ; preds = %375
  %385 = getelementptr inbounds i32, i32* %382, i64 1
  store i32* %385, i32** %5, align 8
  store i32 %252, i32* %382, align 4
  br label %386

; <label>:386:                                    ; preds = %375, %384
  %387 = trunc i32 %254 to i16
  %388 = and i16 %387, 1023
  %389 = or i16 %388, -9216
  %390 = load i16*, i16** %4, align 8
  %391 = icmp ult i16* %390, %46
  br i1 %391, label %392, label %398

; <label>:392:                                    ; preds = %386
  %393 = getelementptr inbounds i16, i16* %390, i64 1
  store i16* %393, i16** %4, align 8
  store i16 %389, i16* %390, align 2
  %394 = load i32*, i32** %5, align 8
  %395 = icmp eq i32* %394, null
  br i1 %395, label %266, label %396

; <label>:396:                                    ; preds = %392
  %397 = getelementptr inbounds i32, i32* %394, i64 1
  store i32* %397, i32** %5, align 8
  store i32 %252, i32* %394, align 4
  br label %266

; <label>:398:                                    ; preds = %386
  %399 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 30, i64 0
  store i16 %389, i16* %399, align 8
  %400 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 23
  store i8 1, i8* %400, align 1
  store i32 15, i32* %1, align 4
  br label %476

; <label>:401:                                    ; preds = %274
  %402 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %22, align 8
  %403 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %402, i64 0, i32 8, i32 1
  %404 = load i8, i8* %403, align 1
  %405 = icmp eq i8 %404, 0
  br i1 %405, label %266, label %406

; <label>:406:                                    ; preds = %401
  store i32 12, i32* %1, align 4
  br label %416

; <label>:407:                                    ; preds = %274
  %408 = trunc i32 %254 to i16
  %409 = load i16*, i16** %4, align 8
  %410 = getelementptr inbounds i16, i16* %409, i64 1
  store i16* %410, i16** %4, align 8
  store i16 %408, i16* %409, align 2
  %411 = load i32*, i32** %5, align 8
  %412 = icmp eq i32* %411, null
  br i1 %412, label %266, label %413

; <label>:413:                                    ; preds = %407
  %414 = getelementptr inbounds i32, i32* %411, i64 1
  store i32* %414, i32** %5, align 8
  store i32 %252, i32* %411, align 4
  br label %266

; <label>:415:                                    ; preds = %274
  store i32 12, i32* %1, align 4
  br label %416

; <label>:416:                                    ; preds = %274, %297, %415, %406, %374, %372, %310
  %417 = phi i8 [ %278, %297 ], [ %278, %310 ], [ %278, %374 ], [ %278, %372 ], [ %256, %406 ], [ %278, %415 ], [ %278, %274 ]
  %418 = icmp eq i8 %258, 0
  br i1 %418, label %266, label %419

; <label>:419:                                    ; preds = %416
  %420 = load i32, i32* %1, align 4
  %421 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %420)
  %422 = icmp eq i8 %421, 0
  br i1 %422, label %463, label %423

; <label>:423:                                    ; preds = %419
  %424 = icmp sgt i8 %258, 1
  br i1 %424, label %425, label %476

; <label>:425:                                    ; preds = %423
  %426 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %22, align 8
  %427 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %426, i64 0, i32 8, i32 1
  %428 = load i8, i8* %427, align 1
  %429 = icmp ne i8 %428, 0
  %430 = zext i1 %429 to i8
  %431 = sext i8 %258 to i64
  br label %432

; <label>:432:                                    ; preds = %425, %438
  %433 = phi i64 [ 1, %425 ], [ %439, %438 ]
  %434 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 13, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = call fastcc signext i8 @_ZL14isSingleOrLeadPA256_Kihah([256 x i32]* %58, i8 zeroext %417, i8 signext %430, i8 zeroext %435)
  %437 = icmp eq i8 %436, 0
  br i1 %437, label %438, label %441

; <label>:438:                                    ; preds = %432
  %439 = add nuw nsw i64 %433, 1
  %440 = icmp slt i64 %439, %431
  br i1 %440, label %432, label %476

; <label>:441:                                    ; preds = %432
  %442 = trunc i64 %433 to i8
  %443 = sub i8 %258, %442
  %444 = load i8*, i8** %3, align 8
  %445 = load i64, i64* %36, align 8
  %446 = ptrtoint i8* %444 to i64
  %447 = sub i64 %446, %445
  %448 = trunc i64 %447 to i32
  %449 = sext i8 %443 to i32
  %450 = icmp slt i32 %448, %449
  br i1 %450, label %455, label %451

; <label>:451:                                    ; preds = %441
  %452 = sext i8 %443 to i64
  %453 = sub nsw i64 0, %452
  %454 = getelementptr inbounds i8, i8* %444, i64 %453
  store i8* %454, i8** %3, align 8
  br label %476

; <label>:455:                                    ; preds = %441
  %456 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 13, i64 %433
  %457 = trunc i64 %447 to i8
  %458 = sub i8 %457, %443
  store i8 %458, i8* %11, align 2
  %459 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 33, i64 0
  %460 = sext i8 %458 to i64
  %461 = sub nsw i64 0, %460
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %459, i8* nonnull align 1 %456, i64 %461, i1 false)
  %462 = load i64, i64* %36, align 8
  store i64 %462, i64* %38, align 8
  br label %476

; <label>:463:                                    ; preds = %419
  %464 = load i64, i64* %38, align 8
  store i64 %464, i64* %36, align 8
  %465 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %22, align 8
  %466 = load i8, i8* %81, align 2
  %467 = call fastcc signext i8 @_ZL7_extToUP10UConverterPK20UConverterSharedDataaPPKhS5_PPDsPKDsPPiiaP10UErrorCode(%struct.UConverter* nonnull %10, %struct.UConverterSharedData* %465, i8 signext %258, i8** nonnull %3, i8* %40, i16** nonnull %4, i16* %46, i32** nonnull %5, i32 %252, i8 signext %466, i32* nonnull %1)
  %468 = load i64, i64* %38, align 8
  %469 = load i64, i64* %36, align 8
  %470 = sub i64 %468, %469
  %471 = trunc i64 %470 to i32
  %472 = add nsw i32 %259, %471
  %473 = load i32, i32* %1, align 4
  %474 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %473)
  %475 = icmp eq i8 %474, 0
  br i1 %475, label %266, label %476

; <label>:476:                                    ; preds = %266, %463, %224, %438, %74, %455, %451, %423, %398, %356, %236, %91
  %477 = phi i8 [ %86, %91 ], [ %228, %236 ], [ %258, %423 ], [ 0, %356 ], [ 0, %398 ], [ %442, %455 ], [ %442, %451 ], [ %64, %74 ], [ %258, %438 ], [ %269, %266 ], [ %467, %463 ], [ %228, %224 ]
  %478 = phi i8 [ %85, %91 ], [ %229, %236 ], [ %417, %423 ], [ %278, %356 ], [ %278, %398 ], [ %417, %455 ], [ %417, %451 ], [ %75, %74 ], [ %417, %438 ], [ %270, %266 ], [ %417, %463 ], [ %229, %224 ]
  %479 = phi i32 [ %84, %91 ], [ %230, %236 ], [ 0, %423 ], [ 0, %356 ], [ 0, %398 ], [ 0, %455 ], [ 0, %451 ], [ %62, %74 ], [ 0, %438 ], [ %271, %266 ], [ 0, %463 ], [ %230, %224 ]
  store i32 %479, i32* %61, align 8
  %480 = zext i8 %478 to i32
  store i32 %480, i32* %66, align 4
  store i8 %477, i8* %63, align 8
  %481 = load i64, i64* %38, align 8
  store i64 %481, i64* %36, align 8
  %482 = load i64, i64* %44, align 8
  store i64 %482, i64* %42, align 8
  %483 = load i64, i64* %50, align 8
  store i64 %483, i64* %48, align 8
  br label %484

; <label>:484:                                    ; preds = %32, %33, %18, %14, %476
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

declare void @ucnv_extContinueMatchToU_63(%struct.UConverter*, %struct.UConverterToUnicodeArgs*, i32, i32*) local_unnamed_addr #2

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32) unnamed_addr #3 {
  %2 = icmp sgt i32 %0, 0
  %3 = zext i1 %2 to i8
  ret i8 %3
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL31ucnv_MBCSSingleToBMPWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32*) unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = alloca i32*, align 8
  %6 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %10 = load %struct.UConverter*, %struct.UConverter** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast i8** %3 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %18 = bitcast i16** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast i16** %4 to i64*
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %22 = bitcast i16** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, %19
  %25 = lshr exact i64 %24, 1
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %28 = bitcast i32** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast i32** %5 to i64*
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 7
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, 16
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 6
  %36 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %35, align 8
  %37 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %36, i64 0, i32 8, i32 5
  %38 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %36, i64 0, i32 8, i32 4
  %39 = select i1 %34, [256 x i32]** %38, [256 x i32]** %37
  %40 = load [256 x i32]*, [256 x i32]** %39, align 8
  %41 = load i8*, i8** %3, align 8
  %42 = ptrtoint i8* %16 to i64
  %43 = ptrtoint i8* %41 to i64
  %44 = sub i64 %42, %43
  %45 = trunc i64 %44 to i32
  %46 = icmp slt i32 %45, %26
  %47 = select i1 %46, i32 %45, i32 %26
  %48 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 13, i64 0
  %49 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 1
  %50 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 12
  br label %51

; <label>:51:                                     ; preds = %363, %2
  %52 = phi i32 [ 0, %2 ], [ %359, %363 ]
  %53 = phi i32 [ %47, %2 ], [ %372, %363 ]
  %54 = phi i8* [ %41, %2 ], [ %347, %363 ]
  %55 = icmp sgt i32 %53, 15
  br i1 %55, label %56, label %292

; <label>:56:                                     ; preds = %51
  %57 = lshr i32 %53, 4
  br label %58

; <label>:58:                                     ; preds = %225, %56
  %59 = phi i32 [ %57, %56 ], [ %226, %225 ]
  %60 = load i8*, i8** %3, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %61, i8** %3, align 8
  %62 = load i8, i8* %60, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = trunc i32 %65 to i16
  %67 = load i16*, i16** %4, align 8
  %68 = getelementptr inbounds i16, i16* %67, i64 1
  store i16* %68, i16** %4, align 8
  store i16 %66, i16* %67, align 2
  %69 = load i8*, i8** %3, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 1
  store i8* %70, i8** %3, align 8
  %71 = load i8, i8* %69, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = or i32 %74, %65
  %76 = trunc i32 %74 to i16
  %77 = load i16*, i16** %4, align 8
  %78 = getelementptr inbounds i16, i16* %77, i64 1
  store i16* %78, i16** %4, align 8
  store i16 %76, i16* %77, align 2
  %79 = load i8*, i8** %3, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 1
  store i8* %80, i8** %3, align 8
  %81 = load i8, i8* %79, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = or i32 %75, %84
  %86 = trunc i32 %84 to i16
  %87 = load i16*, i16** %4, align 8
  %88 = getelementptr inbounds i16, i16* %87, i64 1
  store i16* %88, i16** %4, align 8
  store i16 %86, i16* %87, align 2
  %89 = load i8*, i8** %3, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 1
  store i8* %90, i8** %3, align 8
  %91 = load i8, i8* %89, align 1
  %92 = zext i8 %91 to i64
  %93 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = or i32 %85, %94
  %96 = trunc i32 %94 to i16
  %97 = load i16*, i16** %4, align 8
  %98 = getelementptr inbounds i16, i16* %97, i64 1
  store i16* %98, i16** %4, align 8
  store i16 %96, i16* %97, align 2
  %99 = load i8*, i8** %3, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 1
  store i8* %100, i8** %3, align 8
  %101 = load i8, i8* %99, align 1
  %102 = zext i8 %101 to i64
  %103 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = or i32 %95, %104
  %106 = trunc i32 %104 to i16
  %107 = load i16*, i16** %4, align 8
  %108 = getelementptr inbounds i16, i16* %107, i64 1
  store i16* %108, i16** %4, align 8
  store i16 %106, i16* %107, align 2
  %109 = load i8*, i8** %3, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 1
  store i8* %110, i8** %3, align 8
  %111 = load i8, i8* %109, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = or i32 %105, %114
  %116 = trunc i32 %114 to i16
  %117 = load i16*, i16** %4, align 8
  %118 = getelementptr inbounds i16, i16* %117, i64 1
  store i16* %118, i16** %4, align 8
  store i16 %116, i16* %117, align 2
  %119 = load i8*, i8** %3, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 1
  store i8* %120, i8** %3, align 8
  %121 = load i8, i8* %119, align 1
  %122 = zext i8 %121 to i64
  %123 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = or i32 %115, %124
  %126 = trunc i32 %124 to i16
  %127 = load i16*, i16** %4, align 8
  %128 = getelementptr inbounds i16, i16* %127, i64 1
  store i16* %128, i16** %4, align 8
  store i16 %126, i16* %127, align 2
  %129 = load i8*, i8** %3, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 1
  store i8* %130, i8** %3, align 8
  %131 = load i8, i8* %129, align 1
  %132 = zext i8 %131 to i64
  %133 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = or i32 %125, %134
  %136 = trunc i32 %134 to i16
  %137 = load i16*, i16** %4, align 8
  %138 = getelementptr inbounds i16, i16* %137, i64 1
  store i16* %138, i16** %4, align 8
  store i16 %136, i16* %137, align 2
  %139 = load i8*, i8** %3, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 1
  store i8* %140, i8** %3, align 8
  %141 = load i8, i8* %139, align 1
  %142 = zext i8 %141 to i64
  %143 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = or i32 %135, %144
  %146 = trunc i32 %144 to i16
  %147 = load i16*, i16** %4, align 8
  %148 = getelementptr inbounds i16, i16* %147, i64 1
  store i16* %148, i16** %4, align 8
  store i16 %146, i16* %147, align 2
  %149 = load i8*, i8** %3, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 1
  store i8* %150, i8** %3, align 8
  %151 = load i8, i8* %149, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = or i32 %145, %154
  %156 = trunc i32 %154 to i16
  %157 = load i16*, i16** %4, align 8
  %158 = getelementptr inbounds i16, i16* %157, i64 1
  store i16* %158, i16** %4, align 8
  store i16 %156, i16* %157, align 2
  %159 = load i8*, i8** %3, align 8
  %160 = getelementptr inbounds i8, i8* %159, i64 1
  store i8* %160, i8** %3, align 8
  %161 = load i8, i8* %159, align 1
  %162 = zext i8 %161 to i64
  %163 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = or i32 %155, %164
  %166 = trunc i32 %164 to i16
  %167 = load i16*, i16** %4, align 8
  %168 = getelementptr inbounds i16, i16* %167, i64 1
  store i16* %168, i16** %4, align 8
  store i16 %166, i16* %167, align 2
  %169 = load i8*, i8** %3, align 8
  %170 = getelementptr inbounds i8, i8* %169, i64 1
  store i8* %170, i8** %3, align 8
  %171 = load i8, i8* %169, align 1
  %172 = zext i8 %171 to i64
  %173 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = or i32 %165, %174
  %176 = trunc i32 %174 to i16
  %177 = load i16*, i16** %4, align 8
  %178 = getelementptr inbounds i16, i16* %177, i64 1
  store i16* %178, i16** %4, align 8
  store i16 %176, i16* %177, align 2
  %179 = load i8*, i8** %3, align 8
  %180 = getelementptr inbounds i8, i8* %179, i64 1
  store i8* %180, i8** %3, align 8
  %181 = load i8, i8* %179, align 1
  %182 = zext i8 %181 to i64
  %183 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = or i32 %175, %184
  %186 = trunc i32 %184 to i16
  %187 = load i16*, i16** %4, align 8
  %188 = getelementptr inbounds i16, i16* %187, i64 1
  store i16* %188, i16** %4, align 8
  store i16 %186, i16* %187, align 2
  %189 = load i8*, i8** %3, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 1
  store i8* %190, i8** %3, align 8
  %191 = load i8, i8* %189, align 1
  %192 = zext i8 %191 to i64
  %193 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = or i32 %185, %194
  %196 = trunc i32 %194 to i16
  %197 = load i16*, i16** %4, align 8
  %198 = getelementptr inbounds i16, i16* %197, i64 1
  store i16* %198, i16** %4, align 8
  store i16 %196, i16* %197, align 2
  %199 = load i8*, i8** %3, align 8
  %200 = getelementptr inbounds i8, i8* %199, i64 1
  store i8* %200, i8** %3, align 8
  %201 = load i8, i8* %199, align 1
  %202 = zext i8 %201 to i64
  %203 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %202
  %204 = load i32, i32* %203, align 4
  %205 = or i32 %195, %204
  %206 = trunc i32 %204 to i16
  %207 = load i16*, i16** %4, align 8
  %208 = getelementptr inbounds i16, i16* %207, i64 1
  store i16* %208, i16** %4, align 8
  store i16 %206, i16* %207, align 2
  %209 = load i8*, i8** %3, align 8
  %210 = getelementptr inbounds i8, i8* %209, i64 1
  store i8* %210, i8** %3, align 8
  %211 = load i8, i8* %209, align 1
  %212 = zext i8 %211 to i64
  %213 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = or i32 %205, %214
  %216 = trunc i32 %214 to i16
  %217 = load i16*, i16** %4, align 8
  %218 = getelementptr inbounds i16, i16* %217, i64 1
  store i16* %218, i16** %4, align 8
  store i16 %216, i16* %217, align 2
  %219 = icmp slt i32 %215, -2146435072
  br i1 %219, label %225, label %220

; <label>:220:                                    ; preds = %58
  %221 = load i8*, i8** %3, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 -16
  store i8* %222, i8** %3, align 8
  %223 = load i16*, i16** %4, align 8
  %224 = getelementptr inbounds i16, i16* %223, i64 -16
  store i16* %224, i16** %4, align 8
  br label %228

; <label>:225:                                    ; preds = %58
  %226 = add nsw i32 %59, -1
  %227 = icmp sgt i32 %59, 1
  br i1 %227, label %58, label %228

; <label>:228:                                    ; preds = %225, %220
  %229 = phi i32 [ %59, %220 ], [ %226, %225 ]
  %230 = sub nsw i32 %57, %229
  %231 = shl nsw i32 %230, 4
  %232 = sub nsw i32 %53, %231
  %233 = load i32*, i32** %5, align 8
  %234 = icmp eq i32* %233, null
  br i1 %234, label %292, label %235

; <label>:235:                                    ; preds = %228
  %236 = sext i32 %231 to i64
  %237 = getelementptr inbounds i8, i8* %54, i64 %236
  %238 = icmp sgt i32 %230, 0
  br i1 %238, label %239, label %292

; <label>:239:                                    ; preds = %235, %239
  %240 = phi i32 [ %290, %239 ], [ %230, %235 ]
  %241 = phi i32 [ %287, %239 ], [ %52, %235 ]
  %242 = add nsw i32 %241, 1
  %243 = load i32*, i32** %5, align 8
  %244 = getelementptr inbounds i32, i32* %243, i64 1
  store i32* %244, i32** %5, align 8
  store i32 %241, i32* %243, align 4
  %245 = add nsw i32 %241, 2
  %246 = load i32*, i32** %5, align 8
  %247 = getelementptr inbounds i32, i32* %246, i64 1
  store i32* %247, i32** %5, align 8
  store i32 %242, i32* %246, align 4
  %248 = add nsw i32 %241, 3
  %249 = load i32*, i32** %5, align 8
  %250 = getelementptr inbounds i32, i32* %249, i64 1
  store i32* %250, i32** %5, align 8
  store i32 %245, i32* %249, align 4
  %251 = add nsw i32 %241, 4
  %252 = load i32*, i32** %5, align 8
  %253 = getelementptr inbounds i32, i32* %252, i64 1
  store i32* %253, i32** %5, align 8
  store i32 %248, i32* %252, align 4
  %254 = add nsw i32 %241, 5
  %255 = load i32*, i32** %5, align 8
  %256 = getelementptr inbounds i32, i32* %255, i64 1
  store i32* %256, i32** %5, align 8
  store i32 %251, i32* %255, align 4
  %257 = add nsw i32 %241, 6
  %258 = load i32*, i32** %5, align 8
  %259 = getelementptr inbounds i32, i32* %258, i64 1
  store i32* %259, i32** %5, align 8
  store i32 %254, i32* %258, align 4
  %260 = add nsw i32 %241, 7
  %261 = load i32*, i32** %5, align 8
  %262 = getelementptr inbounds i32, i32* %261, i64 1
  store i32* %262, i32** %5, align 8
  store i32 %257, i32* %261, align 4
  %263 = add nsw i32 %241, 8
  %264 = load i32*, i32** %5, align 8
  %265 = getelementptr inbounds i32, i32* %264, i64 1
  store i32* %265, i32** %5, align 8
  store i32 %260, i32* %264, align 4
  %266 = add nsw i32 %241, 9
  %267 = load i32*, i32** %5, align 8
  %268 = getelementptr inbounds i32, i32* %267, i64 1
  store i32* %268, i32** %5, align 8
  store i32 %263, i32* %267, align 4
  %269 = add nsw i32 %241, 10
  %270 = load i32*, i32** %5, align 8
  %271 = getelementptr inbounds i32, i32* %270, i64 1
  store i32* %271, i32** %5, align 8
  store i32 %266, i32* %270, align 4
  %272 = add nsw i32 %241, 11
  %273 = load i32*, i32** %5, align 8
  %274 = getelementptr inbounds i32, i32* %273, i64 1
  store i32* %274, i32** %5, align 8
  store i32 %269, i32* %273, align 4
  %275 = add nsw i32 %241, 12
  %276 = load i32*, i32** %5, align 8
  %277 = getelementptr inbounds i32, i32* %276, i64 1
  store i32* %277, i32** %5, align 8
  store i32 %272, i32* %276, align 4
  %278 = add nsw i32 %241, 13
  %279 = load i32*, i32** %5, align 8
  %280 = getelementptr inbounds i32, i32* %279, i64 1
  store i32* %280, i32** %5, align 8
  store i32 %275, i32* %279, align 4
  %281 = add nsw i32 %241, 14
  %282 = load i32*, i32** %5, align 8
  %283 = getelementptr inbounds i32, i32* %282, i64 1
  store i32* %283, i32** %5, align 8
  store i32 %278, i32* %282, align 4
  %284 = add nsw i32 %241, 15
  %285 = load i32*, i32** %5, align 8
  %286 = getelementptr inbounds i32, i32* %285, i64 1
  store i32* %286, i32** %5, align 8
  store i32 %281, i32* %285, align 4
  %287 = add nsw i32 %241, 16
  %288 = load i32*, i32** %5, align 8
  %289 = getelementptr inbounds i32, i32* %288, i64 1
  store i32* %289, i32** %5, align 8
  store i32 %284, i32* %288, align 4
  %290 = add nsw i32 %240, -1
  %291 = icmp sgt i32 %240, 1
  br i1 %291, label %239, label %292

; <label>:292:                                    ; preds = %239, %235, %228, %51
  %293 = phi i32 [ %52, %51 ], [ %52, %228 ], [ %52, %235 ], [ %287, %239 ]
  %294 = phi i32 [ %53, %51 ], [ %232, %228 ], [ %232, %235 ], [ %232, %239 ]
  %295 = phi i8* [ %54, %51 ], [ %54, %228 ], [ %237, %235 ], [ %237, %239 ]
  br label %296

; <label>:296:                                    ; preds = %314, %292
  %297 = phi i32 [ %294, %292 ], [ %315, %314 ]
  %298 = icmp sgt i32 %297, 0
  br label %299

; <label>:299:                                    ; preds = %296, %316
  br i1 %298, label %300, label %373

; <label>:300:                                    ; preds = %299
  %301 = load i8*, i8** %3, align 8
  %302 = icmp ult i8* %301, %16
  br i1 %302, label %303, label %373

; <label>:303:                                    ; preds = %300
  %304 = getelementptr inbounds i8, i8* %301, i64 1
  store i8* %304, i8** %3, align 8
  %305 = load i8, i8* %301, align 1
  %306 = zext i8 %305 to i64
  %307 = getelementptr inbounds [256 x i32], [256 x i32]* %40, i64 0, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = icmp slt i32 %308, -2146435072
  br i1 %309, label %310, label %316

; <label>:310:                                    ; preds = %303
  %311 = trunc i32 %308 to i16
  %312 = load i16*, i16** %4, align 8
  %313 = getelementptr inbounds i16, i16* %312, i64 1
  store i16* %313, i16** %4, align 8
  store i16 %311, i16* %312, align 2
  br label %314

; <label>:314:                                    ; preds = %310, %319
  %315 = add nsw i32 %297, -1
  br label %296

; <label>:316:                                    ; preds = %303
  %317 = lshr i32 %308, 20
  %318 = trunc i32 %317 to i4
  switch i4 %318, label %299 [
    i4 2, label %319
    i4 6, label %324
    i4 7, label %323
  ]

; <label>:319:                                    ; preds = %316
  %320 = trunc i32 %308 to i16
  %321 = load i16*, i16** %4, align 8
  %322 = getelementptr inbounds i16, i16* %321, i64 1
  store i16* %322, i16** %4, align 8
  store i16 %320, i16* %321, align 2
  br label %314

; <label>:323:                                    ; preds = %316
  store i32 12, i32* %1, align 4
  br label %324

; <label>:324:                                    ; preds = %316, %323
  %325 = load i32*, i32** %5, align 8
  %326 = icmp eq i32* %325, null
  br i1 %326, label %341, label %327

; <label>:327:                                    ; preds = %324
  %328 = load i64, i64* %14, align 8
  %329 = ptrtoint i8* %295 to i64
  %330 = sub i64 %328, %329
  %331 = trunc i64 %330 to i32
  %332 = icmp sgt i32 %331, 1
  br i1 %332, label %333, label %341

; <label>:333:                                    ; preds = %327, %333
  %334 = phi i32 [ %336, %333 ], [ %331, %327 ]
  %335 = phi i32 [ %337, %333 ], [ %293, %327 ]
  %336 = add nsw i32 %334, -1
  %337 = add nsw i32 %335, 1
  %338 = load i32*, i32** %5, align 8
  %339 = getelementptr inbounds i32, i32* %338, i64 1
  store i32* %339, i32** %5, align 8
  store i32 %335, i32* %338, align 4
  %340 = icmp sgt i32 %334, 2
  br i1 %340, label %333, label %341

; <label>:341:                                    ; preds = %333, %327, %324
  %342 = phi i32 [ %293, %324 ], [ %293, %327 ], [ %337, %333 ]
  %343 = load i32, i32* %1, align 4
  %344 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %343)
  %345 = icmp eq i8 %344, 0
  br i1 %345, label %346, label %373

; <label>:346:                                    ; preds = %341
  %347 = load i8*, i8** %3, align 8
  %348 = getelementptr inbounds i8, i8* %347, i64 -1
  %349 = load i8, i8* %348, align 1
  store i8 %349, i8* %48, align 1
  %350 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %35, align 8
  %351 = load i16*, i16** %21, align 8
  %352 = load i8, i8* %49, align 2
  %353 = call fastcc signext i8 @_ZL7_extToUP10UConverterPK20UConverterSharedDataaPPKhS5_PPDsPKDsPPiiaP10UErrorCode(%struct.UConverter* %10, %struct.UConverterSharedData* %350, i8 signext 1, i8** nonnull %3, i8* %16, i16** nonnull %4, i16* %351, i32** nonnull %5, i32 %342, i8 signext %352, i32* nonnull %1)
  store i8 %353, i8* %50, align 8
  %354 = load i64, i64* %14, align 8
  %355 = ptrtoint i8* %347 to i64
  %356 = sub i64 %354, %355
  %357 = trunc i64 %356 to i32
  %358 = add i32 %342, 1
  %359 = add i32 %358, %357
  %360 = load i32, i32* %1, align 4
  %361 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %360)
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %363, label %373

; <label>:363:                                    ; preds = %346
  %364 = load i64, i64* %22, align 8
  %365 = load i64, i64* %20, align 8
  %366 = sub i64 %364, %365
  %367 = lshr exact i64 %366, 1
  %368 = trunc i64 %367 to i32
  %369 = sub i64 %42, %354
  %370 = trunc i64 %369 to i32
  %371 = icmp slt i32 %370, %368
  %372 = select i1 %371, i32 %370, i32 %368
  br label %51

; <label>:373:                                    ; preds = %346, %341, %299, %300
  %374 = phi i32 [ %293, %300 ], [ %293, %299 ], [ %359, %346 ], [ %342, %341 ]
  %375 = phi i8* [ %295, %300 ], [ %295, %299 ], [ %347, %346 ], [ %295, %341 ]
  %376 = load i32, i32* %1, align 4
  %377 = call fastcc signext i8 @_ZL9U_SUCCESS10UErrorCode(i32 %376)
  %378 = icmp ne i8 %377, 0
  %379 = load i8*, i8** %3, align 8
  %380 = icmp ult i8* %379, %16
  %381 = and i1 %378, %380
  br i1 %381, label %382, label %387

; <label>:382:                                    ; preds = %373
  %383 = load i16*, i16** %4, align 8
  %384 = load i16*, i16** %21, align 8
  %385 = icmp ult i16* %383, %384
  br i1 %385, label %387, label %386

; <label>:386:                                    ; preds = %382
  store i32 15, i32* %1, align 4
  br label %387

; <label>:387:                                    ; preds = %373, %382, %386
  %388 = load i32*, i32** %5, align 8
  %389 = icmp eq i32* %388, null
  br i1 %389, label %403, label %390

; <label>:390:                                    ; preds = %387
  %391 = load i64, i64* %14, align 8
  %392 = ptrtoint i8* %375 to i64
  %393 = sub i64 %391, %392
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %403, label %395

; <label>:395:                                    ; preds = %390, %395
  %396 = phi i64 [ %401, %395 ], [ %393, %390 ]
  %397 = phi i32 [ %398, %395 ], [ %374, %390 ]
  %398 = add nsw i32 %397, 1
  %399 = load i32*, i32** %5, align 8
  %400 = getelementptr inbounds i32, i32* %399, i64 1
  store i32* %400, i32** %5, align 8
  store i32 %397, i32* %399, align 4
  %401 = add i64 %396, -1
  %402 = icmp eq i64 %401, 0
  br i1 %402, label %403, label %395

; <label>:403:                                    ; preds = %395, %390, %387
  %404 = load i64, i64* %14, align 8
  store i64 %404, i64* %12, align 8
  %405 = load i64, i64* %20, align 8
  store i64 %405, i64* %18, align 8
  %406 = load i64, i64* %30, align 8
  store i64 %406, i64* %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL35ucnv_MBCSSingleToUnicodeWithOffsetsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32*) unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = alloca i32*, align 8
  %6 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %10 = load %struct.UConverter*, %struct.UConverter** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast i8** %3 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %18 = bitcast i16** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast i16** %4 to i64*
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %22 = load i16*, i16** %21, align 8
  %23 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %24 = bitcast i32** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast i32** %5 to i64*
  store i64 %25, i64* %26, align 8
  %27 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 7
  %28 = load i32, i32* %27, align 8
  %29 = and i32 %28, 16
  %30 = icmp eq i32 %29, 0
  %31 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 6
  %32 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %31, align 8
  %33 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 5
  %34 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 4
  %35 = select i1 %30, [256 x i32]** %34, [256 x i32]** %33
  %36 = load [256 x i32]*, [256 x i32]** %35, align 8
  %37 = load i8*, i8** %3, align 8
  %38 = icmp ult i8* %37, %16
  br i1 %38, label %39, label %132

; <label>:39:                                     ; preds = %2
  %40 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 13, i64 0
  %41 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 1
  %42 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 12
  br label %43

; <label>:43:                                     ; preds = %39, %65
  %44 = phi i8* [ %37, %39 ], [ %67, %65 ]
  %45 = phi i32 [ 0, %39 ], [ %66, %65 ]
  %46 = load i16*, i16** %4, align 8
  %47 = icmp ult i16* %46, %22
  br i1 %47, label %49, label %48

; <label>:48:                                     ; preds = %43
  store i32 15, i32* %1, align 4
  br label %132

; <label>:49:                                     ; preds = %43
  %50 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %50, i8** %3, align 8
  %51 = load i8, i8* %44, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds [256 x i32], [256 x i32]* %36, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = icmp slt i32 %54, -2146435072
  br i1 %55, label %56, label %69

; <label>:56:                                     ; preds = %49
  %57 = trunc i32 %54 to i16
  %58 = getelementptr inbounds i16, i16* %46, i64 1
  store i16* %58, i16** %4, align 8
  store i16 %57, i16* %46, align 2
  %59 = load i32*, i32** %5, align 8
  %60 = icmp eq i32* %59, null
  br i1 %60, label %63, label %61

; <label>:61:                                     ; preds = %56
  %62 = getelementptr inbounds i32, i32* %59, i64 1
  store i32* %62, i32** %5, align 8
  store i32 %45, i32* %59, align 4
  br label %63

; <label>:63:                                     ; preds = %56, %61
  %64 = add nsw i32 %45, 1
  br label %65

; <label>:65:                                     ; preds = %63, %97, %106, %109, %115
  %66 = phi i32 [ %64, %63 ], [ %98, %97 ], [ %107, %106 ], [ %128, %115 ], [ %110, %109 ]
  %67 = load i8*, i8** %3, align 8
  %68 = icmp ult i8* %67, %16
  br i1 %68, label %43, label %132

; <label>:69:                                     ; preds = %49
  %70 = lshr i32 %54, 20
  %71 = trunc i32 %70 to i4
  switch i4 %71, label %109 [
    i4 1, label %72
    i4 3, label %72
    i4 2, label %99
    i4 6, label %111
    i4 7, label %108
  ]

; <label>:72:                                     ; preds = %69, %69
  %73 = lshr i32 %54, 10
  %74 = trunc i32 %73 to i16
  %75 = and i16 %74, 1023
  %76 = or i16 %75, -10240
  %77 = getelementptr inbounds i16, i16* %46, i64 1
  store i16* %77, i16** %4, align 8
  store i16 %76, i16* %46, align 2
  %78 = load i32*, i32** %5, align 8
  %79 = icmp eq i32* %78, null
  br i1 %79, label %82, label %80

; <label>:80:                                     ; preds = %72
  %81 = getelementptr inbounds i32, i32* %78, i64 1
  store i32* %81, i32** %5, align 8
  store i32 %45, i32* %78, align 4
  br label %82

; <label>:82:                                     ; preds = %72, %80
  %83 = trunc i32 %54 to i16
  %84 = and i16 %83, 1023
  %85 = or i16 %84, -9216
  %86 = load i16*, i16** %4, align 8
  %87 = icmp ult i16* %86, %22
  br i1 %87, label %88, label %94

; <label>:88:                                     ; preds = %82
  %89 = getelementptr inbounds i16, i16* %86, i64 1
  store i16* %89, i16** %4, align 8
  store i16 %85, i16* %86, align 2
  %90 = load i32*, i32** %5, align 8
  %91 = icmp eq i32* %90, null
  br i1 %91, label %97, label %92

; <label>:92:                                     ; preds = %88
  %93 = getelementptr inbounds i32, i32* %90, i64 1
  store i32* %93, i32** %5, align 8
  store i32 %45, i32* %90, align 4
  br label %97

; <label>:94:                                     ; preds = %82
  %95 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 30, i64 0
  store i16 %85, i16* %95, align 8
  %96 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 23
  store i8 1, i8* %96, align 1
  store i32 15, i32* %1, align 4
  br label %132

; <label>:97:                                     ; preds = %88, %92
  %98 = add nsw i32 %45, 1
  br label %65

; <label>:99:                                     ; preds = %69
  %100 = trunc i32 %54 to i16
  %101 = getelementptr inbounds i16, i16* %46, i64 1
  store i16* %101, i16** %4, align 8
  store i16 %100, i16* %46, align 2
  %102 = load i32*, i32** %5, align 8
  %103 = icmp eq i32* %102, null
  br i1 %103, label %106, label %104

; <label>:104:                                    ; preds = %99
  %105 = getelementptr inbounds i32, i32* %102, i64 1
  store i32* %105, i32** %5, align 8
  store i32 %45, i32* %102, align 4
  br label %106

; <label>:106:                                    ; preds = %99, %104
  %107 = add nsw i32 %45, 1
  br label %65

; <label>:108:                                    ; preds = %69
  store i32 12, i32* %1, align 4
  br label %111

; <label>:109:                                    ; preds = %69
  %110 = add nsw i32 %45, 1
  br label %65

; <label>:111:                                    ; preds = %69, %108
  %112 = load i32, i32* %1, align 4
  %113 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %112)
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %115, label %132

; <label>:115:                                    ; preds = %111
  %116 = load i64, i64* %14, align 8
  store i64 %116, i64* %12, align 8
  %117 = inttoptr i64 %116 to i8*
  %118 = getelementptr inbounds i8, i8* %117, i64 -1
  %119 = load i8, i8* %118, align 1
  store i8 %119, i8* %40, align 1
  %120 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %31, align 8
  %121 = load i8, i8* %41, align 2
  %122 = call fastcc signext i8 @_ZL7_extToUP10UConverterPK20UConverterSharedDataaPPKhS5_PPDsPKDsPPiiaP10UErrorCode(%struct.UConverter* %10, %struct.UConverterSharedData* %120, i8 signext 1, i8** nonnull %3, i8* %16, i16** nonnull %4, i16* %22, i32** nonnull %5, i32 %45, i8 signext %121, i32* nonnull %1)
  store i8 %122, i8* %42, align 8
  %123 = load i64, i64* %14, align 8
  %124 = load i64, i64* %12, align 8
  %125 = sub i64 %123, %124
  %126 = trunc i64 %125 to i32
  %127 = add i32 %45, 1
  %128 = add i32 %127, %126
  %129 = load i32, i32* %1, align 4
  %130 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %129)
  %131 = icmp eq i8 %130, 0
  br i1 %131, label %65, label %132

; <label>:132:                                    ; preds = %65, %111, %115, %2, %94, %48
  %133 = load i64, i64* %14, align 8
  store i64 %133, i64* %12, align 8
  %134 = load i64, i64* %20, align 8
  store i64 %134, i64* %18, align 8
  %135 = load i64, i64* %26, align 8
  store i64 %135, i64* %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @_ZL20ucnv_MBCSGetFallbackP19UConverterMBCSTablej(%struct.UConverterMBCSTable* nocapture readonly, i32) unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %33, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 7
  %8 = load %struct._MBCSToUFallback*, %struct._MBCSToUFallback** %7, align 8
  %9 = icmp eq i32 %4, 1
  br i1 %9, label %25, label %10

; <label>:10:                                     ; preds = %6, %10
  %11 = phi i32 [ %20, %10 ], [ %4, %6 ]
  %12 = phi i32 [ %19, %10 ], [ 0, %6 ]
  %13 = add i32 %11, %12
  %14 = lshr i32 %13, 1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %8, i64 %15, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %17, %1
  %19 = select i1 %18, i32 %12, i32 %14
  %20 = select i1 %18, i32 %14, i32 %11
  %21 = add i32 %20, -1
  %22 = icmp ult i32 %19, %21
  br i1 %22, label %10, label %23

; <label>:23:                                     ; preds = %10
  %24 = zext i32 %19 to i64
  br label %25

; <label>:25:                                     ; preds = %23, %6
  %26 = phi i64 [ 0, %6 ], [ %24, %23 ]
  %27 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %8, i64 %26, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, %1
  br i1 %29, label %30, label %33

; <label>:30:                                     ; preds = %25
  %31 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %8, i64 %26, i32 1
  %32 = load i32, i32* %31, align 4
  br label %33

; <label>:33:                                     ; preds = %25, %2, %30
  %34 = phi i32 [ %32, %30 ], [ 65534, %2 ], [ 65534, %25 ]
  ret i32 %34
}

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc signext i8 @_ZL14isSingleOrLeadPA256_Kihah([256 x i32]* nocapture readonly, i8 zeroext, i8 signext, i8 zeroext) unnamed_addr #5 {
  %5 = zext i8 %1 to i64
  %6 = zext i8 %3 to i64
  %7 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %5, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, -1
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %4
  %11 = lshr i32 %8, 24
  %12 = trunc i32 %11 to i8
  %13 = tail call fastcc signext i8 @_ZL18hasValidTrailBytesPA256_Kih([256 x i32]* nonnull %0, i8 zeroext %12)
  br label %23

; <label>:14:                                     ; preds = %4
  %15 = lshr i32 %8, 20
  %16 = and i32 %15, 15
  %17 = icmp eq i32 %16, 8
  %18 = icmp ne i8 %2, 0
  %19 = and i1 %18, %17
  %20 = icmp ne i32 %16, 7
  %21 = xor i1 %20, %19
  %22 = zext i1 %21 to i8
  br label %23

; <label>:23:                                     ; preds = %14, %10
  %24 = phi i8 [ %13, %10 ], [ %22, %14 ]
  ret i8 %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc signext i8 @_ZL7_extToUP10UConverterPK20UConverterSharedDataaPPKhS5_PPDsPKDsPPiiaP10UErrorCode(%struct.UConverter*, %struct.UConverterSharedData* nocapture readonly, i8 signext, i8**, i8*, i16**, i16*, i32**, i32, i8 signext, i32*) unnamed_addr #0 {
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %1, i64 0, i32 8, i32 22
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %19, label %15

; <label>:15:                                     ; preds = %11
  %16 = sext i8 %2 to i32
  %17 = tail call signext i8 @ucnv_extInitialMatchToU_63(%struct.UConverter* %0, i32* nonnull %13, i32 %16, i8** %3, i8* %4, i16** %5, i16* %6, i32** %7, i32 %8, i8 signext %9, i32* %10) #12
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %66

; <label>:19:                                     ; preds = %15, %11
  %20 = icmp eq i8 %2, 4
  br i1 %20, label %21, label %65

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %23 = load i32, i32* %22, align 8
  %24 = trunc i32 %23 to i16
  %25 = icmp slt i16 %24, 0
  br i1 %25, label %26, label %65

; <label>:26:                                     ; preds = %21
  %27 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 0
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = mul nuw nsw i32 %29, 10
  %31 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = add nuw nsw i32 %30, %33
  %35 = mul nuw nsw i32 %34, 126
  %36 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 2
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = add nuw nsw i32 %35, %38
  %40 = mul nuw nsw i32 %39, 10
  %41 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 13, i64 3
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = add nuw nsw i32 %40, %43
  br label %45

; <label>:45:                                     ; preds = %26, %61
  %46 = phi i32 [ 0, %26 ], [ %63, %61 ]
  %47 = phi i32* [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 0, i64 0), %26 ], [ %62, %61 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 2
  %49 = load i32, i32* %48, align 4
  %50 = icmp ugt i32 %49, %44
  br i1 %50, label %61, label %51

; <label>:51:                                     ; preds = %45
  %52 = getelementptr inbounds i32, i32* %47, i64 3
  %53 = load i32, i32* %52, align 4
  %54 = icmp ugt i32 %44, %53
  br i1 %54, label %61, label %55

; <label>:55:                                     ; preds = %51
  %56 = getelementptr inbounds i32, i32* %47, i64 2
  store i32 0, i32* %10, align 4
  %57 = load i32, i32* %47, align 4
  %58 = load i32, i32* %56, align 4
  %59 = add i32 %57, %44
  %60 = sub i32 %59, %58
  tail call void @ucnv_toUWriteCodePoint_63(%struct.UConverter* %0, i32 %60, i16** %5, i16* %6, i32** %7, i32 %8, i32* %10) #12
  br label %66

; <label>:61:                                     ; preds = %51, %45
  %62 = getelementptr inbounds i32, i32* %47, i64 4
  %63 = add nuw nsw i32 %46, 1
  %64 = icmp ult i32 %63, 14
  br i1 %64, label %45, label %65

; <label>:65:                                     ; preds = %61, %21, %19
  store i32 10, i32* %10, align 4
  br label %66

; <label>:66:                                     ; preds = %55, %15, %65
  %67 = phi i8 [ %2, %65 ], [ 0, %15 ], [ 0, %55 ]
  ret i8 %67
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ucnv_MBCSSimpleGetNextUChar_63(%struct.UConverterSharedData* nocapture readonly, i8*, i32, i8 signext) local_unnamed_addr #0 {
  %5 = icmp slt i32 %2, 1
  br i1 %5, label %98, label %6

; <label>:6:                                      ; preds = %4
  %7 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %9 = load [256 x i32]*, [256 x i32]** %8, align 8
  %10 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 6
  %11 = load i16*, i16** %10, align 8
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i32 %2 to i64
  br label %15

; <label>:15:                                     ; preds = %27, %6
  %16 = phi i64 [ %20, %27 ], [ 0, %6 ]
  %17 = phi i8 [ %29, %27 ], [ %13, %6 ]
  %18 = phi i32 [ %31, %27 ], [ 0, %6 ]
  %19 = zext i8 %17 to i64
  %20 = add nuw nsw i64 %16, 1
  %21 = getelementptr inbounds i8, i8* %1, i64 %16
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [256 x i32], [256 x i32]* %9, i64 %19, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = icmp sgt i32 %25, -1
  br i1 %26, label %27, label %33

; <label>:27:                                     ; preds = %15
  %28 = lshr i32 %25, 24
  %29 = trunc i32 %28 to i8
  %30 = and i32 %25, 16777215
  %31 = add i32 %30, %18
  %32 = icmp eq i64 %20, %14
  br i1 %32, label %98, label %15

; <label>:33:                                     ; preds = %15
  %34 = trunc i64 %20 to i32
  %35 = lshr i32 %25, 20
  %36 = trunc i32 %35 to i4
  switch i4 %36, label %98 [
    i4 4, label %37
    i4 0, label %47
    i4 5, label %49
    i4 1, label %79
    i4 2, label %82
    i4 3, label %84
    i4 6, label %87
  ]

; <label>:37:                                     ; preds = %33
  %38 = and i32 %25, 65535
  %39 = add i32 %38, %18
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i16, i16* %11, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = icmp eq i16 %42, -2
  br i1 %44, label %45, label %87

; <label>:45:                                     ; preds = %37
  %46 = tail call fastcc i32 @_ZL20ucnv_MBCSGetFallbackP19UConverterMBCSTablej(%struct.UConverterMBCSTable* nonnull %7, i32 %39)
  br label %87

; <label>:47:                                     ; preds = %33
  %48 = and i32 %25, 65535
  br label %87

; <label>:49:                                     ; preds = %33
  %50 = and i32 %25, 65535
  %51 = add i32 %50, %18
  %52 = add i32 %51, 1
  %53 = zext i32 %51 to i64
  %54 = getelementptr inbounds i16, i16* %11, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = icmp ult i16 %55, -10240
  br i1 %57, label %87, label %58

; <label>:58:                                     ; preds = %49
  %59 = icmp ult i16 %55, -8192
  br i1 %59, label %60, label %69

; <label>:60:                                     ; preds = %58
  %61 = shl nuw nsw i32 %56, 10
  %62 = and i32 %61, 1047552
  %63 = zext i32 %52 to i64
  %64 = getelementptr inbounds i16, i16* %11, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = add nuw nsw i32 %62, 9216
  %68 = add nuw nsw i32 %67, %66
  br label %87

; <label>:69:                                     ; preds = %58
  %70 = and i32 %56, 65534
  %71 = icmp eq i32 %70, 57344
  br i1 %71, label %72, label %77

; <label>:72:                                     ; preds = %69
  %73 = zext i32 %52 to i64
  %74 = getelementptr inbounds i16, i16* %11, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  br label %87

; <label>:77:                                     ; preds = %69
  %78 = icmp eq i16 %55, -1
  br i1 %78, label %98, label %87

; <label>:79:                                     ; preds = %33
  %80 = and i32 %25, 1048575
  %81 = add nuw nsw i32 %80, 65536
  br label %87

; <label>:82:                                     ; preds = %33
  %83 = and i32 %25, 65535
  br label %87

; <label>:84:                                     ; preds = %33
  %85 = and i32 %25, 1048575
  %86 = add nuw nsw i32 %85, 65536
  br label %87

; <label>:87:                                     ; preds = %33, %77, %37, %49, %72, %60, %45, %84, %82, %79, %47
  %88 = phi i32 [ %43, %37 ], [ %46, %45 ], [ %48, %47 ], [ %56, %49 ], [ %68, %60 ], [ %76, %72 ], [ %81, %79 ], [ %83, %82 ], [ %86, %84 ], [ 65534, %77 ], [ 65534, %33 ]
  %89 = icmp eq i32 %34, %2
  br i1 %89, label %90, label %98

; <label>:90:                                     ; preds = %87
  %91 = icmp eq i32 %88, 65534
  br i1 %91, label %92, label %98

; <label>:92:                                     ; preds = %90
  %93 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %94 = load i32*, i32** %93, align 8
  %95 = icmp eq i32* %94, null
  br i1 %95, label %98, label %96

; <label>:96:                                     ; preds = %92
  %97 = tail call i32 @ucnv_extSimpleMatchToU_63(i32* nonnull %94, i8* nonnull %1, i32 %2, i8 signext %3) #12
  br label %98

; <label>:98:                                     ; preds = %27, %92, %90, %96, %87, %33, %77, %4
  %99 = phi i32 [ %97, %96 ], [ 65535, %4 ], [ 65535, %77 ], [ 65535, %33 ], [ 65535, %87 ], [ %88, %90 ], [ 65534, %92 ], [ 65535, %27 ]
  ret i32 %99
}

declare i32 @ucnv_extSimpleMatchToU_63(i32*, i8*, i32, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_MBCSFromUnicodeWithOffsets_63(%struct.UConverterFromUnicodeArgs*, i32*) #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i16, align 2
  %7 = bitcast i16* %6 to [2 x i8]*
  %8 = alloca i16, align 2
  %9 = bitcast i16* %8 to [2 x i8]*
  %10 = bitcast i16** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  %11 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  %12 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #12
  %13 = bitcast i16* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %13) #12
  store i16 0, i16* %6, align 2
  %14 = bitcast i16* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %14) #12
  store i16 0, i16* %8, align 2
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %16 = load %struct.UConverter*, %struct.UConverter** %15, align 8
  %17 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 31
  %18 = load i32, i32* %17, align 8
  %19 = icmp sgt i32 %18, -1
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %2
  tail call void @ucnv_extContinueMatchFromU_63(%struct.UConverter* %16, %struct.UConverterFromUnicodeArgs* nonnull %0, i32 -1, i32* %1) #12
  %21 = load i32, i32* %1, align 4
  %22 = tail call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %21)
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %793

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 34
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %793, label %28

; <label>:28:                                     ; preds = %24, %2
  %29 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 6
  %30 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %29, align 8
  %31 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 14
  %32 = load i8, i8* %31, align 4
  %33 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 15
  %34 = load i8, i8* %33, align 1
  switch i8 %32, label %49 [
    i8 0, label %35
    i8 1, label %44
  ]

; <label>:35:                                     ; preds = %28
  %36 = zext i8 %34 to i32
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %49

; <label>:39:                                     ; preds = %35
  %40 = and i32 %36, 1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %39
  tail call fastcc void @_ZL33ucnv_MBCSSingleFromBMPWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nonnull %0, i32* %1)
  br label %793

; <label>:43:                                     ; preds = %39
  tail call fastcc void @_ZL37ucnv_MBCSSingleFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nonnull %0, i32* %1)
  br label %793

; <label>:44:                                     ; preds = %28
  %45 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 16
  %46 = load i8, i8* %45, align 2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %49, label %48

; <label>:48:                                     ; preds = %44
  tail call fastcc void @_ZL37ucnv_MBCSDoubleFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nonnull %0, i32* %1)
  br label %793

; <label>:49:                                     ; preds = %35, %28, %44
  %50 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %51 = bitcast i16** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast i16** %3 to i64*
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %55 = load i16*, i16** %54, align 8
  %56 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast i8** %4 to i64*
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %62, %58
  %64 = trunc i64 %63 to i32
  %65 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %66 = bitcast i32** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast i32** %5 to i64*
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 8
  %70 = load i16*, i16** %69, align 8
  %71 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 16
  %72 = load i8, i8* %71, align 2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %77, label %74

; <label>:74:                                     ; preds = %49
  %75 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 9
  %76 = load i16*, i16** %75, align 8
  br label %77

; <label>:77:                                     ; preds = %49, %74
  %78 = phi i16* [ %76, %74 ], [ null, %49 ]
  %79 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 7
  %80 = load i32, i32* %79, align 8
  %81 = and i32 %80, 16
  %82 = icmp eq i32 %81, 0
  %83 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 12
  %84 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 11
  %85 = select i1 %82, i8** %84, i8** %83
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %30, i64 0, i32 8, i32 18
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 17
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i8 %32, 12
  br i1 %91, label %92, label %97

; <label>:92:                                     ; preds = %77
  %93 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 16
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 0
  %96 = select i1 %95, i32 1, i32 %94
  br label %97

; <label>:97:                                     ; preds = %77, %92
  %98 = phi i32 [ %96, %92 ], [ 0, %77 ]
  %99 = icmp ne i32 %90, 0
  %100 = sext i1 %99 to i32
  %101 = call fastcc i32 @_ZL12getSISOBytes11SISO_OptionjPh(i32 0, i32 %80, i8* nonnull %13)
  %102 = trunc i32 %101 to i8
  %103 = load i32, i32* %79, align 8
  %104 = call fastcc i32 @_ZL12getSISOBytes11SISO_OptionjPh(i32 1, i32 %103, i8* nonnull %14)
  %105 = icmp sgt i32 %64, 0
  %106 = and i1 %105, %99
  br i1 %106, label %334, label %107

; <label>:107:                                    ; preds = %608, %677, %97
  %108 = phi i32 [ -1, %97 ], [ %681, %677 ], [ %615, %608 ]
  %109 = phi i32 [ %100, %97 ], [ %682, %677 ], [ %616, %608 ]
  %110 = phi i32 [ 0, %97 ], [ %620, %677 ], [ %602, %608 ]
  %111 = phi i32 [ %90, %97 ], [ 0, %677 ], [ %596, %608 ]
  %112 = phi i32 [ 0, %97 ], [ %622, %677 ], [ %587, %608 ]
  %113 = phi i32 [ %98, %97 ], [ %623, %677 ], [ %604, %608 ]
  %114 = phi i32 [ %64, %97 ], [ %678, %677 ], [ %612, %608 ]
  %115 = load i16*, i16** %3, align 8
  %116 = icmp ult i16* %115, %55
  br i1 %116, label %117, label %734

; <label>:117:                                    ; preds = %107
  %118 = icmp sgt i32 %114, 0
  br i1 %118, label %121, label %730

; <label>:119:                                    ; preds = %145
  %120 = icmp sgt i32 %125, 1
  br i1 %120, label %121, label %730

; <label>:121:                                    ; preds = %117, %119
  %122 = phi i32 [ %146, %119 ], [ %108, %117 ]
  %123 = phi i32 [ %147, %119 ], [ %109, %117 ]
  %124 = phi i32 [ %129, %119 ], [ %110, %117 ]
  %125 = phi i32 [ %148, %119 ], [ %114, %117 ]
  %126 = phi i16* [ %149, %119 ], [ %115, %117 ]
  %127 = getelementptr inbounds i16, i16* %126, i64 1
  store i16* %127, i16** %3, align 8
  %128 = load i16, i16* %126, align 2
  %129 = add nsw i32 %124, 1
  %130 = icmp ult i16 %128, 128
  br i1 %130, label %131, label %151

; <label>:131:                                    ; preds = %121
  %132 = lshr i16 %128, 2
  %133 = zext i16 %132 to i32
  %134 = shl i32 1, %133
  %135 = and i32 %134, %88
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %151, label %137

; <label>:137:                                    ; preds = %131
  %138 = trunc i16 %128 to i8
  %139 = load i8*, i8** %4, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 1
  store i8* %140, i8** %4, align 8
  store i8 %138, i8* %139, align 1
  %141 = load i32*, i32** %5, align 8
  %142 = icmp eq i32* %141, null
  br i1 %142, label %145, label %143

; <label>:143:                                    ; preds = %137
  %144 = getelementptr inbounds i32, i32* %141, i64 1
  store i32* %144, i32** %5, align 8
  store i32 %123, i32* %141, align 4
  br label %145

; <label>:145:                                    ; preds = %137, %143
  %146 = phi i32 [ %123, %143 ], [ %122, %137 ]
  %147 = phi i32 [ %129, %143 ], [ %123, %137 ]
  %148 = add nsw i32 %125, -1
  %149 = load i16*, i16** %3, align 8
  %150 = icmp ult i16* %149, %55
  br i1 %150, label %119, label %734

; <label>:151:                                    ; preds = %131, %121
  %152 = zext i16 %128 to i32
  %153 = icmp ult i16 %128, -10240
  %154 = icmp ne i16* %78, null
  %155 = and i1 %154, %153
  br i1 %155, label %156, label %325

; <label>:156:                                    ; preds = %151
  %157 = lshr i32 %152, 6
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds i16, i16* %78, i64 %158
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  switch i8 %32, label %617 [
    i8 1, label %162
    i8 12, label %173
    i8 -37, label %223
    i8 2, label %233
    i8 3, label %257
    i8 8, label %272
    i8 9, label %293
  ]

; <label>:162:                                    ; preds = %156
  %163 = bitcast i8* %86 to i16*
  %164 = and i32 %152, 63
  %165 = add nuw nsw i32 %164, %161
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds i16, i16* %163, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = icmp ult i16 %168, 256
  br i1 %170, label %171, label %617

; <label>:171:                                    ; preds = %162
  %172 = icmp eq i16 %168, 0
  br i1 %172, label %582, label %617

; <label>:173:                                    ; preds = %156
  %174 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 16
  store i32 %113, i32* %174, align 8
  %175 = bitcast i8* %86 to i16*
  %176 = and i32 %152, 63
  %177 = add nuw nsw i32 %176, %161
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds i16, i16* %175, i64 %178
  %180 = load i16, i16* %179, align 2
  %181 = zext i16 %180 to i32
  %182 = icmp ult i16 %180, 256
  br i1 %182, label %183, label %204

; <label>:183:                                    ; preds = %173
  %184 = icmp eq i16 %180, 0
  br i1 %184, label %582, label %185

; <label>:185:                                    ; preds = %183
  %186 = icmp slt i32 %113, 2
  br i1 %186, label %617, label %187

; <label>:187:                                    ; preds = %185
  %188 = trunc i32 %101 to i8
  switch i8 %188, label %617 [
    i8 1, label %189
    i8 2, label %194
  ]

; <label>:189:                                    ; preds = %187
  %190 = load i8, i8* %13, align 2
  %191 = zext i8 %190 to i32
  %192 = shl nuw nsw i32 %191, 8
  %193 = or i32 %192, %181
  br label %617

; <label>:194:                                    ; preds = %187
  %195 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  %196 = load i8, i8* %195, align 1
  %197 = zext i8 %196 to i32
  %198 = shl nuw nsw i32 %197, 8
  %199 = or i32 %198, %181
  %200 = load i8, i8* %13, align 2
  %201 = zext i8 %200 to i32
  %202 = shl nuw nsw i32 %201, 16
  %203 = or i32 %199, %202
  br label %617

; <label>:204:                                    ; preds = %173
  %205 = icmp eq i32 %113, 2
  br i1 %205, label %617, label %206

; <label>:206:                                    ; preds = %204
  %207 = trunc i32 %104 to i8
  switch i8 %207, label %617 [
    i8 1, label %208
    i8 2, label %213
  ]

; <label>:208:                                    ; preds = %206
  %209 = load i8, i8* %14, align 2
  %210 = zext i8 %209 to i32
  %211 = shl nuw nsw i32 %210, 16
  %212 = or i32 %211, %181
  br label %617

; <label>:213:                                    ; preds = %206
  %214 = getelementptr inbounds [2 x i8], [2 x i8]* %9, i64 0, i64 1
  %215 = load i8, i8* %214, align 1
  %216 = zext i8 %215 to i32
  %217 = shl nuw nsw i32 %216, 16
  %218 = or i32 %217, %181
  %219 = load i8, i8* %14, align 2
  %220 = zext i8 %219 to i32
  %221 = shl nuw i32 %220, 24
  %222 = or i32 %218, %221
  br label %617

; <label>:223:                                    ; preds = %156
  %224 = bitcast i8* %86 to i16*
  %225 = and i32 %152, 63
  %226 = add nuw nsw i32 %225, %161
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds i16, i16* %224, i64 %227
  %229 = load i16, i16* %228, align 2
  %230 = icmp ult i16 %229, 256
  br i1 %230, label %582, label %231

; <label>:231:                                    ; preds = %223
  %232 = zext i16 %229 to i32
  br label %617

; <label>:233:                                    ; preds = %156
  %234 = and i32 %152, 63
  %235 = add nuw nsw i32 %234, %161
  %236 = mul nuw nsw i32 %235, 3
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds i8, i8* %86, i64 %237
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i32
  %241 = shl nuw nsw i32 %240, 16
  %242 = getelementptr inbounds i8, i8* %238, i64 1
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = shl nuw nsw i32 %244, 8
  %246 = or i32 %245, %241
  %247 = getelementptr inbounds i8, i8* %238, i64 2
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i32
  %250 = or i32 %246, %249
  %251 = icmp ult i32 %250, 256
  br i1 %251, label %252, label %254

; <label>:252:                                    ; preds = %233
  %253 = icmp eq i32 %250, 0
  br i1 %253, label %582, label %617

; <label>:254:                                    ; preds = %233
  %255 = icmp ult i32 %250, 65536
  %256 = select i1 %255, i32 2, i32 3
  br label %617

; <label>:257:                                    ; preds = %156
  %258 = bitcast i8* %86 to i32*
  %259 = and i32 %152, 63
  %260 = add nuw nsw i32 %259, %161
  %261 = zext i32 %260 to i64
  %262 = getelementptr inbounds i32, i32* %258, i64 %261
  %263 = load i32, i32* %262, align 4
  %264 = icmp ult i32 %263, 256
  br i1 %264, label %265, label %267

; <label>:265:                                    ; preds = %257
  %266 = icmp eq i32 %263, 0
  br i1 %266, label %582, label %617

; <label>:267:                                    ; preds = %257
  %268 = icmp ult i32 %263, 65536
  br i1 %268, label %617, label %269

; <label>:269:                                    ; preds = %267
  %270 = icmp ult i32 %263, 16777216
  %271 = select i1 %270, i32 3, i32 4
  br label %617

; <label>:272:                                    ; preds = %156
  %273 = bitcast i8* %86 to i16*
  %274 = and i32 %152, 63
  %275 = add nuw nsw i32 %274, %161
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds i16, i16* %273, i64 %276
  %278 = load i16, i16* %277, align 2
  %279 = zext i16 %278 to i32
  %280 = icmp ult i16 %278, 256
  br i1 %280, label %281, label %283

; <label>:281:                                    ; preds = %272
  %282 = icmp eq i16 %278, 0
  br i1 %282, label %582, label %617

; <label>:283:                                    ; preds = %272
  %284 = icmp sgt i16 %278, -1
  br i1 %284, label %285, label %287

; <label>:285:                                    ; preds = %283
  %286 = or i32 %279, 9338880
  br label %617

; <label>:287:                                    ; preds = %283
  %288 = trunc i16 %278 to i8
  %289 = icmp sgt i8 %288, -1
  %290 = or i32 %279, 9371776
  %291 = select i1 %289, i32 %290, i32 %279
  %292 = select i1 %289, i32 3, i32 2
  br label %617

; <label>:293:                                    ; preds = %156
  %294 = and i32 %152, 63
  %295 = add nuw nsw i32 %294, %161
  %296 = mul nuw nsw i32 %295, 3
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds i8, i8* %86, i64 %297
  %299 = load i8, i8* %298, align 1
  %300 = zext i8 %299 to i32
  %301 = shl nuw nsw i32 %300, 16
  %302 = getelementptr inbounds i8, i8* %298, i64 1
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i32
  %305 = shl nuw nsw i32 %304, 8
  %306 = or i32 %305, %301
  %307 = getelementptr inbounds i8, i8* %298, i64 2
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  %310 = or i32 %306, %309
  %311 = icmp ult i32 %310, 256
  br i1 %311, label %312, label %314

; <label>:312:                                    ; preds = %293
  %313 = icmp eq i32 %310, 0
  br i1 %313, label %582, label %617

; <label>:314:                                    ; preds = %293
  %315 = icmp ult i32 %310, 65536
  br i1 %315, label %617, label %316

; <label>:316:                                    ; preds = %314
  %317 = icmp sgt i8 %299, -1
  br i1 %317, label %318, label %320

; <label>:318:                                    ; preds = %316
  %319 = or i32 %310, -1904214016
  br label %617

; <label>:320:                                    ; preds = %316
  %321 = icmp sgt i8 %303, -1
  %322 = or i32 %310, -1895792640
  %323 = select i1 %321, i32 %322, i32 %310
  %324 = select i1 %321, i32 4, i32 3
  br label %617

; <label>:325:                                    ; preds = %151
  %326 = and i32 %152, 63488
  %327 = icmp eq i32 %326, 55296
  %328 = and i8 %34, 2
  %329 = icmp eq i8 %328, 0
  %330 = and i1 %329, %327
  br i1 %330, label %331, label %363

; <label>:331:                                    ; preds = %325
  %332 = and i32 %152, 1024
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %334, label %362

; <label>:334:                                    ; preds = %331, %97
  %335 = phi i32 [ -1, %97 ], [ %122, %331 ]
  %336 = phi i32 [ %100, %97 ], [ %123, %331 ]
  %337 = phi i32 [ 0, %97 ], [ %129, %331 ]
  %338 = phi i32 [ %90, %97 ], [ %152, %331 ]
  %339 = phi i32 [ 0, %97 ], [ %112, %331 ]
  %340 = phi i32 [ %98, %97 ], [ %113, %331 ]
  %341 = phi i32 [ %64, %97 ], [ %125, %331 ]
  %342 = load i16*, i16** %3, align 8
  %343 = icmp ult i16* %342, %55
  br i1 %343, label %344, label %734

; <label>:344:                                    ; preds = %334
  %345 = load i16, i16* %342, align 2
  %346 = zext i16 %345 to i32
  %347 = and i32 %346, 64512
  %348 = icmp eq i32 %347, 56320
  br i1 %348, label %349, label %359

; <label>:349:                                    ; preds = %344
  %350 = getelementptr inbounds i16, i16* %342, i64 1
  store i16* %350, i16** %3, align 8
  %351 = add nsw i32 %337, 1
  %352 = shl i32 %338, 10
  %353 = add i32 %352, -56613888
  %354 = add i32 %353, %346
  %355 = and i8 %34, 1
  %356 = icmp eq i8 %355, 0
  br i1 %356, label %357, label %360

; <label>:357:                                    ; preds = %349
  %358 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 16
  store i32 %340, i32* %358, align 8
  br label %360

; <label>:359:                                    ; preds = %344
  store i32 12, i32* %1, align 4
  br label %734

; <label>:360:                                    ; preds = %349, %357
  %361 = phi i3 [ -2, %357 ], [ 0, %349 ]
  switch i3 %361, label %793 [
    i3 0, label %363
    i3 -2, label %582
  ]

; <label>:362:                                    ; preds = %331
  store i32 12, i32* %1, align 4
  br label %734

; <label>:363:                                    ; preds = %360, %325
  %364 = phi i32 [ %122, %325 ], [ %335, %360 ]
  %365 = phi i32 [ %123, %325 ], [ %336, %360 ]
  %366 = phi i32 [ %129, %325 ], [ %351, %360 ]
  %367 = phi i32 [ %152, %325 ], [ %354, %360 ]
  %368 = phi i32 [ %112, %325 ], [ %339, %360 ]
  %369 = phi i32 [ %113, %325 ], [ %340, %360 ]
  %370 = phi i32 [ %125, %325 ], [ %341, %360 ]
  %371 = bitcast i16* %70 to i32*
  %372 = ashr i32 %367, 10
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds i16, i16* %70, i64 %373
  %375 = load i16, i16* %374, align 2
  %376 = zext i16 %375 to i32
  %377 = lshr i32 %367, 4
  %378 = and i32 %377, 63
  %379 = add nuw nsw i32 %378, %376
  %380 = zext i32 %379 to i64
  %381 = getelementptr inbounds i32, i32* %371, i64 %380
  %382 = load i32, i32* %381, align 4
  switch i8 %32, label %558 [
    i8 1, label %383
    i8 12, label %395
    i8 -37, label %452
    i8 2, label %466
    i8 3, label %490
    i8 8, label %505
    i8 9, label %526
  ]

; <label>:383:                                    ; preds = %363
  %384 = bitcast i8* %86 to i16*
  %385 = shl i32 %382, 4
  %386 = and i32 %385, 1048560
  %387 = and i32 %367, 15
  %388 = or i32 %386, %387
  %389 = zext i32 %388 to i64
  %390 = getelementptr inbounds i16, i16* %384, i64 %389
  %391 = load i16, i16* %390, align 2
  %392 = zext i16 %391 to i32
  %393 = icmp ult i16 %391, 256
  %394 = select i1 %393, i32 1, i32 2
  br label %558

; <label>:395:                                    ; preds = %363
  %396 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 16
  store i32 %369, i32* %396, align 8
  %397 = bitcast i8* %86 to i16*
  %398 = shl i32 %382, 4
  %399 = and i32 %398, 1048560
  %400 = and i32 %367, 15
  %401 = or i32 %399, %400
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds i16, i16* %397, i64 %402
  %404 = load i16, i16* %403, align 2
  %405 = zext i16 %404 to i32
  %406 = icmp ult i16 %404, 256
  br i1 %406, label %407, label %433

; <label>:407:                                    ; preds = %395
  %408 = icmp eq i16 %404, 0
  br i1 %408, label %409, label %414

; <label>:409:                                    ; preds = %407
  %410 = or i32 %400, 16
  %411 = shl i32 1, %410
  %412 = and i32 %382, %411
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %558, label %414

; <label>:414:                                    ; preds = %409, %407
  %415 = icmp slt i32 %369, 2
  br i1 %415, label %558, label %416

; <label>:416:                                    ; preds = %414
  %417 = trunc i32 %101 to i8
  switch i8 %417, label %558 [
    i8 1, label %418
    i8 2, label %423
  ]

; <label>:418:                                    ; preds = %416
  %419 = load i8, i8* %13, align 2
  %420 = zext i8 %419 to i32
  %421 = shl nuw nsw i32 %420, 8
  %422 = or i32 %421, %405
  br label %558

; <label>:423:                                    ; preds = %416
  %424 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  %425 = load i8, i8* %424, align 1
  %426 = zext i8 %425 to i32
  %427 = shl nuw nsw i32 %426, 8
  %428 = or i32 %427, %405
  %429 = load i8, i8* %13, align 2
  %430 = zext i8 %429 to i32
  %431 = shl nuw nsw i32 %430, 16
  %432 = or i32 %428, %431
  br label %558

; <label>:433:                                    ; preds = %395
  %434 = icmp eq i32 %369, 2
  br i1 %434, label %558, label %435

; <label>:435:                                    ; preds = %433
  %436 = trunc i32 %104 to i8
  switch i8 %436, label %558 [
    i8 1, label %437
    i8 2, label %442
  ]

; <label>:437:                                    ; preds = %435
  %438 = load i8, i8* %14, align 2
  %439 = zext i8 %438 to i32
  %440 = shl nuw nsw i32 %439, 16
  %441 = or i32 %440, %405
  br label %558

; <label>:442:                                    ; preds = %435
  %443 = getelementptr inbounds [2 x i8], [2 x i8]* %9, i64 0, i64 1
  %444 = load i8, i8* %443, align 1
  %445 = zext i8 %444 to i32
  %446 = shl nuw nsw i32 %445, 16
  %447 = or i32 %446, %405
  %448 = load i8, i8* %14, align 2
  %449 = zext i8 %448 to i32
  %450 = shl nuw i32 %449, 24
  %451 = or i32 %447, %450
  br label %558

; <label>:452:                                    ; preds = %363
  %453 = bitcast i8* %86 to i16*
  %454 = shl i32 %382, 4
  %455 = and i32 %454, 1048560
  %456 = and i32 %367, 15
  %457 = or i32 %455, %456
  %458 = zext i32 %457 to i64
  %459 = getelementptr inbounds i16, i16* %453, i64 %458
  %460 = load i16, i16* %459, align 2
  %461 = icmp ult i16 %460, 256
  %462 = select i1 %461, i32 0, i32 %382
  %463 = select i1 %461, i16 0, i16 %460
  %464 = zext i16 %463 to i32
  %465 = select i1 %461, i32 0, i32 2
  br label %558

; <label>:466:                                    ; preds = %363
  %467 = shl i32 %382, 4
  %468 = and i32 %467, 1048560
  %469 = and i32 %367, 15
  %470 = or i32 %468, %469
  %471 = mul nuw nsw i32 %470, 3
  %472 = zext i32 %471 to i64
  %473 = getelementptr inbounds i8, i8* %86, i64 %472
  %474 = load i8, i8* %473, align 1
  %475 = zext i8 %474 to i32
  %476 = shl nuw nsw i32 %475, 16
  %477 = getelementptr inbounds i8, i8* %473, i64 1
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i32
  %480 = shl nuw nsw i32 %479, 8
  %481 = or i32 %480, %476
  %482 = getelementptr inbounds i8, i8* %473, i64 2
  %483 = load i8, i8* %482, align 1
  %484 = zext i8 %483 to i32
  %485 = or i32 %481, %484
  %486 = icmp ult i32 %485, 256
  br i1 %486, label %558, label %487

; <label>:487:                                    ; preds = %466
  %488 = icmp ult i32 %485, 65536
  %489 = select i1 %488, i32 2, i32 3
  br label %558

; <label>:490:                                    ; preds = %363
  %491 = bitcast i8* %86 to i32*
  %492 = shl i32 %382, 4
  %493 = and i32 %492, 1048560
  %494 = and i32 %367, 15
  %495 = or i32 %493, %494
  %496 = zext i32 %495 to i64
  %497 = getelementptr inbounds i32, i32* %491, i64 %496
  %498 = load i32, i32* %497, align 4
  %499 = icmp ult i32 %498, 256
  br i1 %499, label %558, label %500

; <label>:500:                                    ; preds = %490
  %501 = icmp ult i32 %498, 65536
  br i1 %501, label %558, label %502

; <label>:502:                                    ; preds = %500
  %503 = icmp ult i32 %498, 16777216
  %504 = select i1 %503, i32 3, i32 4
  br label %558

; <label>:505:                                    ; preds = %363
  %506 = bitcast i8* %86 to i16*
  %507 = shl i32 %382, 4
  %508 = and i32 %507, 1048560
  %509 = and i32 %367, 15
  %510 = or i32 %508, %509
  %511 = zext i32 %510 to i64
  %512 = getelementptr inbounds i16, i16* %506, i64 %511
  %513 = load i16, i16* %512, align 2
  %514 = zext i16 %513 to i32
  %515 = icmp ult i16 %513, 256
  br i1 %515, label %558, label %516

; <label>:516:                                    ; preds = %505
  %517 = icmp sgt i16 %513, -1
  br i1 %517, label %518, label %520

; <label>:518:                                    ; preds = %516
  %519 = or i32 %514, 9338880
  br label %558

; <label>:520:                                    ; preds = %516
  %521 = trunc i16 %513 to i8
  %522 = icmp sgt i8 %521, -1
  %523 = or i32 %514, 9371776
  %524 = select i1 %522, i32 %523, i32 %514
  %525 = select i1 %522, i32 3, i32 2
  br label %558

; <label>:526:                                    ; preds = %363
  %527 = shl i32 %382, 4
  %528 = and i32 %527, 1048560
  %529 = and i32 %367, 15
  %530 = or i32 %528, %529
  %531 = mul nuw nsw i32 %530, 3
  %532 = zext i32 %531 to i64
  %533 = getelementptr inbounds i8, i8* %86, i64 %532
  %534 = load i8, i8* %533, align 1
  %535 = zext i8 %534 to i32
  %536 = shl nuw nsw i32 %535, 16
  %537 = getelementptr inbounds i8, i8* %533, i64 1
  %538 = load i8, i8* %537, align 1
  %539 = zext i8 %538 to i32
  %540 = shl nuw nsw i32 %539, 8
  %541 = or i32 %540, %536
  %542 = getelementptr inbounds i8, i8* %533, i64 2
  %543 = load i8, i8* %542, align 1
  %544 = zext i8 %543 to i32
  %545 = or i32 %541, %544
  %546 = icmp ult i32 %545, 256
  br i1 %546, label %558, label %547

; <label>:547:                                    ; preds = %526
  %548 = icmp ult i32 %545, 65536
  br i1 %548, label %558, label %549

; <label>:549:                                    ; preds = %547
  %550 = icmp sgt i8 %534, -1
  br i1 %550, label %551, label %553

; <label>:551:                                    ; preds = %549
  %552 = or i32 %545, -1904214016
  br label %558

; <label>:553:                                    ; preds = %549
  %554 = icmp sgt i8 %538, -1
  %555 = or i32 %545, -1895792640
  %556 = select i1 %554, i32 %555, i32 %545
  %557 = select i1 %554, i32 4, i32 3
  br label %558

; <label>:558:                                    ; preds = %553, %520, %452, %363, %547, %526, %505, %502, %500, %490, %487, %466, %437, %442, %435, %433, %418, %423, %416, %414, %409, %383, %551, %518
  %559 = phi i32 [ %382, %551 ], [ %382, %518 ], [ %382, %383 ], [ %382, %409 ], [ %382, %414 ], [ %382, %416 ], [ %382, %423 ], [ %382, %418 ], [ %382, %433 ], [ %382, %435 ], [ %382, %442 ], [ %382, %437 ], [ %382, %466 ], [ %382, %487 ], [ %382, %490 ], [ %382, %500 ], [ %382, %502 ], [ %382, %505 ], [ %382, %526 ], [ %382, %547 ], [ 0, %363 ], [ %462, %452 ], [ %382, %520 ], [ %382, %553 ]
  %560 = phi i32 [ %552, %551 ], [ %519, %518 ], [ %392, %383 ], [ 0, %409 ], [ %405, %414 ], [ %405, %416 ], [ %432, %423 ], [ %422, %418 ], [ %405, %433 ], [ %405, %435 ], [ %451, %442 ], [ %441, %437 ], [ %485, %466 ], [ %485, %487 ], [ %498, %490 ], [ %498, %500 ], [ %498, %502 ], [ %514, %505 ], [ %545, %526 ], [ %545, %547 ], [ 0, %363 ], [ %464, %452 ], [ %524, %520 ], [ %556, %553 ]
  %561 = phi i32 [ 4, %551 ], [ 3, %518 ], [ %394, %383 ], [ 0, %409 ], [ 1, %414 ], [ %368, %416 ], [ 3, %423 ], [ 2, %418 ], [ 2, %433 ], [ %368, %435 ], [ 4, %442 ], [ 3, %437 ], [ 1, %466 ], [ %489, %487 ], [ 1, %490 ], [ 2, %500 ], [ %504, %502 ], [ 1, %505 ], [ 1, %526 ], [ 2, %547 ], [ 0, %363 ], [ %465, %452 ], [ %525, %520 ], [ %557, %553 ]
  %562 = phi i32 [ %369, %551 ], [ %369, %518 ], [ %369, %383 ], [ %369, %409 ], [ %369, %414 ], [ 1, %416 ], [ 1, %423 ], [ 1, %418 ], [ 2, %433 ], [ 2, %435 ], [ 2, %442 ], [ 2, %437 ], [ %369, %466 ], [ %369, %487 ], [ %369, %490 ], [ %369, %500 ], [ %369, %502 ], [ %369, %505 ], [ %369, %526 ], [ %369, %547 ], [ %369, %363 ], [ %369, %452 ], [ %369, %520 ], [ %369, %553 ]
  %563 = and i32 %367, 15
  %564 = or i32 %563, 16
  %565 = shl i32 1, %564
  %566 = and i32 %559, %565
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %568, label %617

; <label>:568:                                    ; preds = %558
  %569 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 11
  %570 = load i8, i8* %569, align 1
  %571 = icmp ne i8 %570, 0
  %572 = add nsw i32 %367, -57344
  %573 = icmp ult i32 %572, 6400
  %574 = or i1 %573, %571
  br i1 %574, label %580, label %575

; <label>:575:                                    ; preds = %568
  %576 = add nsw i32 %367, -983040
  %577 = icmp ult i32 %576, 131072
  %578 = icmp ne i32 %560, 0
  %579 = and i1 %577, %578
  br i1 %579, label %617, label %582

; <label>:580:                                    ; preds = %568
  %581 = icmp eq i32 %560, 0
  br i1 %581, label %582, label %617

; <label>:582:                                    ; preds = %360, %580, %575, %312, %281, %265, %252, %223, %183, %171
  %583 = phi i32 [ %335, %360 ], [ %122, %312 ], [ %122, %281 ], [ %122, %265 ], [ %122, %252 ], [ %122, %223 ], [ %122, %183 ], [ %122, %171 ], [ %364, %580 ], [ %364, %575 ]
  %584 = phi i32 [ %336, %360 ], [ %123, %312 ], [ %123, %281 ], [ %123, %265 ], [ %123, %252 ], [ %123, %223 ], [ %123, %183 ], [ %123, %171 ], [ %365, %580 ], [ %365, %575 ]
  %585 = phi i32 [ %351, %360 ], [ %129, %312 ], [ %129, %281 ], [ %129, %265 ], [ %129, %252 ], [ %129, %223 ], [ %129, %183 ], [ %129, %171 ], [ %366, %580 ], [ %366, %575 ]
  %586 = phi i32 [ %354, %360 ], [ %152, %312 ], [ %152, %281 ], [ %152, %265 ], [ %152, %252 ], [ %152, %223 ], [ %152, %183 ], [ %152, %171 ], [ %367, %580 ], [ %367, %575 ]
  %587 = phi i32 [ %339, %360 ], [ %112, %312 ], [ %112, %281 ], [ %112, %265 ], [ %112, %252 ], [ %112, %223 ], [ %112, %183 ], [ %112, %171 ], [ %561, %580 ], [ %561, %575 ]
  %588 = phi i32 [ %341, %360 ], [ %125, %312 ], [ %125, %281 ], [ %125, %265 ], [ %125, %252 ], [ %125, %223 ], [ %125, %183 ], [ %125, %171 ], [ %370, %580 ], [ %370, %575 ]
  %589 = load i64, i64* %53, align 8
  store i64 %589, i64* %51, align 8
  %590 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %29, align 8
  %591 = load i8*, i8** %4, align 8
  %592 = sext i32 %588 to i64
  %593 = getelementptr inbounds i8, i8* %591, i64 %592
  %594 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %595 = load i8, i8* %594, align 2
  %596 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %16, %struct.UConverterSharedData* %590, i32 %586, i16** nonnull %3, i16* %55, i8** nonnull %4, i8* %593, i32** nonnull %5, i32 %584, i8 signext %595, i32* %1)
  %597 = load i64, i64* %53, align 8
  %598 = load i64, i64* %51, align 8
  %599 = sub i64 %597, %598
  %600 = lshr exact i64 %599, 1
  %601 = trunc i64 %600 to i32
  %602 = add nsw i32 %585, %601
  %603 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 16
  %604 = load i32, i32* %603, align 8
  %605 = load i32, i32* %1, align 4
  %606 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %605)
  %607 = icmp eq i8 %606, 0
  br i1 %607, label %608, label %734

; <label>:608:                                    ; preds = %582
  %609 = load i64, i64* %61, align 8
  %610 = load i64, i64* %59, align 8
  %611 = sub i64 %609, %610
  %612 = trunc i64 %611 to i32
  %613 = load i32*, i32** %5, align 8
  %614 = icmp eq i32* %613, null
  %615 = select i1 %614, i32 %583, i32 %584
  %616 = select i1 %614, i32 %584, i32 %602
  br label %107

; <label>:617:                                    ; preds = %320, %287, %575, %558, %580, %231, %285, %318, %171, %162, %185, %187, %194, %189, %204, %206, %213, %208, %252, %254, %265, %267, %269, %281, %312, %314, %156
  %618 = phi i32 [ %122, %156 ], [ %122, %314 ], [ %122, %312 ], [ %122, %281 ], [ %122, %269 ], [ %122, %267 ], [ %122, %265 ], [ %122, %254 ], [ %122, %252 ], [ %122, %208 ], [ %122, %213 ], [ %122, %206 ], [ %122, %204 ], [ %122, %189 ], [ %122, %194 ], [ %122, %187 ], [ %122, %185 ], [ %122, %162 ], [ %122, %171 ], [ %122, %318 ], [ %122, %285 ], [ %122, %231 ], [ %364, %580 ], [ %364, %558 ], [ %364, %575 ], [ %122, %287 ], [ %122, %320 ]
  %619 = phi i32 [ %123, %156 ], [ %123, %314 ], [ %123, %312 ], [ %123, %281 ], [ %123, %269 ], [ %123, %267 ], [ %123, %265 ], [ %123, %254 ], [ %123, %252 ], [ %123, %208 ], [ %123, %213 ], [ %123, %206 ], [ %123, %204 ], [ %123, %189 ], [ %123, %194 ], [ %123, %187 ], [ %123, %185 ], [ %123, %162 ], [ %123, %171 ], [ %123, %318 ], [ %123, %285 ], [ %123, %231 ], [ %365, %580 ], [ %365, %558 ], [ %365, %575 ], [ %123, %287 ], [ %123, %320 ]
  %620 = phi i32 [ %129, %156 ], [ %129, %314 ], [ %129, %312 ], [ %129, %281 ], [ %129, %269 ], [ %129, %267 ], [ %129, %265 ], [ %129, %254 ], [ %129, %252 ], [ %129, %208 ], [ %129, %213 ], [ %129, %206 ], [ %129, %204 ], [ %129, %189 ], [ %129, %194 ], [ %129, %187 ], [ %129, %185 ], [ %129, %162 ], [ %129, %171 ], [ %129, %318 ], [ %129, %285 ], [ %129, %231 ], [ %366, %580 ], [ %366, %558 ], [ %366, %575 ], [ %129, %287 ], [ %129, %320 ]
  %621 = phi i32 [ 0, %156 ], [ %310, %314 ], [ %310, %312 ], [ %279, %281 ], [ %263, %269 ], [ %263, %267 ], [ %263, %265 ], [ %250, %254 ], [ %250, %252 ], [ %212, %208 ], [ %222, %213 ], [ %181, %206 ], [ %181, %204 ], [ %193, %189 ], [ %203, %194 ], [ %181, %187 ], [ %181, %185 ], [ %169, %162 ], [ %169, %171 ], [ %319, %318 ], [ %286, %285 ], [ %232, %231 ], [ %560, %580 ], [ %560, %558 ], [ %560, %575 ], [ %291, %287 ], [ %323, %320 ]
  %622 = phi i32 [ 0, %156 ], [ 2, %314 ], [ 1, %312 ], [ 1, %281 ], [ %271, %269 ], [ 2, %267 ], [ 1, %265 ], [ %256, %254 ], [ 1, %252 ], [ 3, %208 ], [ 4, %213 ], [ %112, %206 ], [ 2, %204 ], [ 2, %189 ], [ 3, %194 ], [ %112, %187 ], [ 1, %185 ], [ 2, %162 ], [ 1, %171 ], [ 4, %318 ], [ 3, %285 ], [ 2, %231 ], [ %561, %580 ], [ %561, %558 ], [ %561, %575 ], [ %292, %287 ], [ %324, %320 ]
  %623 = phi i32 [ %113, %156 ], [ %113, %314 ], [ %113, %312 ], [ %113, %281 ], [ %113, %269 ], [ %113, %267 ], [ %113, %265 ], [ %113, %254 ], [ %113, %252 ], [ 2, %208 ], [ 2, %213 ], [ 2, %206 ], [ 2, %204 ], [ 1, %189 ], [ 1, %194 ], [ 1, %187 ], [ %113, %185 ], [ %113, %162 ], [ %113, %171 ], [ %113, %318 ], [ %113, %285 ], [ %113, %231 ], [ %562, %580 ], [ %562, %558 ], [ %562, %575 ], [ %113, %287 ], [ %113, %320 ]
  %624 = phi i32 [ %125, %156 ], [ %125, %314 ], [ %125, %312 ], [ %125, %281 ], [ %125, %269 ], [ %125, %267 ], [ %125, %265 ], [ %125, %254 ], [ %125, %252 ], [ %125, %208 ], [ %125, %213 ], [ %125, %206 ], [ %125, %204 ], [ %125, %189 ], [ %125, %194 ], [ %125, %187 ], [ %125, %185 ], [ %125, %162 ], [ %125, %171 ], [ %125, %318 ], [ %125, %285 ], [ %125, %231 ], [ %370, %580 ], [ %370, %558 ], [ %370, %575 ], [ %125, %287 ], [ %125, %320 ]
  %625 = icmp sgt i32 %622, %624
  br i1 %625, label %683, label %626

; <label>:626:                                    ; preds = %617
  %627 = load i32*, i32** %5, align 8
  %628 = icmp eq i32* %627, null
  br i1 %628, label %629, label %649

; <label>:629:                                    ; preds = %626
  switch i32 %622, label %677 [
    i32 4, label %630
    i32 3, label %635
    i32 2, label %640
    i32 1, label %645
  ]

; <label>:630:                                    ; preds = %629
  %631 = lshr i32 %621, 24
  %632 = trunc i32 %631 to i8
  %633 = load i8*, i8** %4, align 8
  %634 = getelementptr inbounds i8, i8* %633, i64 1
  store i8* %634, i8** %4, align 8
  store i8 %632, i8* %633, align 1
  br label %635

; <label>:635:                                    ; preds = %629, %630
  %636 = lshr i32 %621, 16
  %637 = trunc i32 %636 to i8
  %638 = load i8*, i8** %4, align 8
  %639 = getelementptr inbounds i8, i8* %638, i64 1
  store i8* %639, i8** %4, align 8
  store i8 %637, i8* %638, align 1
  br label %640

; <label>:640:                                    ; preds = %629, %635
  %641 = lshr i32 %621, 8
  %642 = trunc i32 %641 to i8
  %643 = load i8*, i8** %4, align 8
  %644 = getelementptr inbounds i8, i8* %643, i64 1
  store i8* %644, i8** %4, align 8
  store i8 %642, i8* %643, align 1
  br label %645

; <label>:645:                                    ; preds = %629, %640
  %646 = trunc i32 %621 to i8
  %647 = load i8*, i8** %4, align 8
  %648 = getelementptr inbounds i8, i8* %647, i64 1
  store i8* %648, i8** %4, align 8
  store i8 %646, i8* %647, align 1
  br label %677

; <label>:649:                                    ; preds = %626
  switch i32 %622, label %677 [
    i32 4, label %650
    i32 3, label %657
    i32 2, label %664
    i32 1, label %671
  ]

; <label>:650:                                    ; preds = %649
  %651 = lshr i32 %621, 24
  %652 = trunc i32 %651 to i8
  %653 = load i8*, i8** %4, align 8
  %654 = getelementptr inbounds i8, i8* %653, i64 1
  store i8* %654, i8** %4, align 8
  store i8 %652, i8* %653, align 1
  %655 = load i32*, i32** %5, align 8
  %656 = getelementptr inbounds i32, i32* %655, i64 1
  store i32* %656, i32** %5, align 8
  store i32 %619, i32* %655, align 4
  br label %657

; <label>:657:                                    ; preds = %649, %650
  %658 = lshr i32 %621, 16
  %659 = trunc i32 %658 to i8
  %660 = load i8*, i8** %4, align 8
  %661 = getelementptr inbounds i8, i8* %660, i64 1
  store i8* %661, i8** %4, align 8
  store i8 %659, i8* %660, align 1
  %662 = load i32*, i32** %5, align 8
  %663 = getelementptr inbounds i32, i32* %662, i64 1
  store i32* %663, i32** %5, align 8
  store i32 %619, i32* %662, align 4
  br label %664

; <label>:664:                                    ; preds = %649, %657
  %665 = lshr i32 %621, 8
  %666 = trunc i32 %665 to i8
  %667 = load i8*, i8** %4, align 8
  %668 = getelementptr inbounds i8, i8* %667, i64 1
  store i8* %668, i8** %4, align 8
  store i8 %666, i8* %667, align 1
  %669 = load i32*, i32** %5, align 8
  %670 = getelementptr inbounds i32, i32* %669, i64 1
  store i32* %670, i32** %5, align 8
  store i32 %619, i32* %669, align 4
  br label %671

; <label>:671:                                    ; preds = %649, %664
  %672 = trunc i32 %621 to i8
  %673 = load i8*, i8** %4, align 8
  %674 = getelementptr inbounds i8, i8* %673, i64 1
  store i8* %674, i8** %4, align 8
  store i8 %672, i8* %673, align 1
  %675 = load i32*, i32** %5, align 8
  %676 = getelementptr inbounds i32, i32* %675, i64 1
  store i32* %676, i32** %5, align 8
  store i32 %619, i32* %675, align 4
  br label %677

; <label>:677:                                    ; preds = %649, %671, %629, %645
  %678 = sub nsw i32 %624, %622
  %679 = load i32*, i32** %5, align 8
  %680 = icmp eq i32* %679, null
  %681 = select i1 %680, i32 %618, i32 %619
  %682 = select i1 %680, i32 %619, i32 %620
  br label %107

; <label>:683:                                    ; preds = %617
  %684 = sub nsw i32 %622, %624
  %685 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 27, i64 0
  switch i32 %684, label %698 [
    i32 3, label %686
    i32 2, label %690
    i32 1, label %695
  ]

; <label>:686:                                    ; preds = %683
  %687 = lshr i32 %621, 16
  %688 = trunc i32 %687 to i8
  %689 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 27, i64 1
  store i8 %688, i8* %685, align 1
  br label %690

; <label>:690:                                    ; preds = %683, %686
  %691 = phi i8* [ %685, %683 ], [ %689, %686 ]
  %692 = lshr i32 %621, 8
  %693 = trunc i32 %692 to i8
  %694 = getelementptr inbounds i8, i8* %691, i64 1
  store i8 %693, i8* %691, align 1
  br label %695

; <label>:695:                                    ; preds = %683, %690
  %696 = phi i8* [ %685, %683 ], [ %694, %690 ]
  %697 = trunc i32 %621 to i8
  store i8 %697, i8* %696, align 1
  br label %698

; <label>:698:                                    ; preds = %695, %683
  %699 = trunc i32 %684 to i8
  %700 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 21
  store i8 %699, i8* %700, align 1
  %701 = shl nsw i32 %684, 3
  %702 = lshr i32 %621, %701
  switch i32 %624, label %729 [
    i32 3, label %703
    i32 2, label %712
    i32 1, label %721
  ]

; <label>:703:                                    ; preds = %698
  %704 = lshr i32 %702, 16
  %705 = trunc i32 %704 to i8
  %706 = load i8*, i8** %4, align 8
  %707 = getelementptr inbounds i8, i8* %706, i64 1
  store i8* %707, i8** %4, align 8
  store i8 %705, i8* %706, align 1
  %708 = load i32*, i32** %5, align 8
  %709 = icmp eq i32* %708, null
  br i1 %709, label %712, label %710

; <label>:710:                                    ; preds = %703
  %711 = getelementptr inbounds i32, i32* %708, i64 1
  store i32* %711, i32** %5, align 8
  store i32 %619, i32* %708, align 4
  br label %712

; <label>:712:                                    ; preds = %703, %710, %698
  %713 = lshr i32 %702, 8
  %714 = trunc i32 %713 to i8
  %715 = load i8*, i8** %4, align 8
  %716 = getelementptr inbounds i8, i8* %715, i64 1
  store i8* %716, i8** %4, align 8
  store i8 %714, i8* %715, align 1
  %717 = load i32*, i32** %5, align 8
  %718 = icmp eq i32* %717, null
  br i1 %718, label %721, label %719

; <label>:719:                                    ; preds = %712
  %720 = getelementptr inbounds i32, i32* %717, i64 1
  store i32* %720, i32** %5, align 8
  store i32 %619, i32* %717, align 4
  br label %721

; <label>:721:                                    ; preds = %712, %719, %698
  %722 = trunc i32 %702 to i8
  %723 = load i8*, i8** %4, align 8
  %724 = getelementptr inbounds i8, i8* %723, i64 1
  store i8* %724, i8** %4, align 8
  store i8 %722, i8* %723, align 1
  %725 = load i32*, i32** %5, align 8
  %726 = icmp eq i32* %725, null
  br i1 %726, label %729, label %727

; <label>:727:                                    ; preds = %721
  %728 = getelementptr inbounds i32, i32* %725, i64 1
  store i32* %728, i32** %5, align 8
  store i32 %619, i32* %725, align 4
  br label %729

; <label>:729:                                    ; preds = %721, %698, %727
  store i32 15, i32* %1, align 4
  br label %734

; <label>:730:                                    ; preds = %119, %117
  %731 = phi i32 [ %114, %117 ], [ %148, %119 ]
  %732 = phi i32 [ %111, %117 ], [ 0, %119 ]
  %733 = phi i32 [ %108, %117 ], [ %146, %119 ]
  store i32 15, i32* %1, align 4
  br label %734

; <label>:734:                                    ; preds = %145, %107, %359, %582, %334, %730, %729, %362
  %735 = phi i32 [ %583, %582 ], [ %618, %729 ], [ %122, %362 ], [ %733, %730 ], [ %335, %334 ], [ %335, %359 ], [ %108, %107 ], [ %146, %145 ]
  %736 = phi i32 [ %596, %582 ], [ 0, %729 ], [ %152, %362 ], [ %732, %730 ], [ %338, %334 ], [ %338, %359 ], [ %111, %107 ], [ 0, %145 ]
  %737 = phi i32 [ %604, %582 ], [ %623, %729 ], [ %113, %362 ], [ %113, %730 ], [ %340, %334 ], [ %340, %359 ], [ %113, %107 ], [ %113, %145 ]
  %738 = phi i32 [ %588, %582 ], [ 0, %729 ], [ %125, %362 ], [ %731, %730 ], [ %341, %334 ], [ %341, %359 ], [ %114, %107 ], [ %148, %145 ]
  %739 = load i32, i32* %1, align 4
  %740 = call fastcc signext i8 @_ZL9U_SUCCESS10UErrorCode(i32 %739)
  %741 = icmp ne i8 %740, 0
  %742 = icmp eq i32 %737, 2
  %743 = and i1 %91, %742
  %744 = and i1 %743, %741
  br i1 %744, label %745, label %787

; <label>:745:                                    ; preds = %734
  %746 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %747 = load i8, i8* %746, align 2
  %748 = icmp eq i8 %747, 0
  br i1 %748, label %787, label %749

; <label>:749:                                    ; preds = %745
  %750 = load i16*, i16** %3, align 8
  %751 = icmp uge i16* %750, %55
  %752 = icmp eq i32 %736, 0
  %753 = and i1 %752, %751
  br i1 %753, label %754, label %787

; <label>:754:                                    ; preds = %749
  %755 = icmp sgt i32 %738, 0
  %756 = load i8, i8* %13, align 2
  br i1 %755, label %757, label %777

; <label>:757:                                    ; preds = %754
  %758 = load i8*, i8** %4, align 8
  %759 = getelementptr inbounds i8, i8* %758, i64 1
  store i8* %759, i8** %4, align 8
  store i8 %756, i8* %758, align 1
  %760 = and i32 %101, 255
  %761 = icmp eq i32 %760, 2
  br i1 %761, label %762, label %772

; <label>:762:                                    ; preds = %757
  %763 = icmp slt i32 %738, 2
  %764 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  %765 = load i8, i8* %764, align 1
  br i1 %763, label %766, label %769

; <label>:766:                                    ; preds = %762
  %767 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 27, i64 0
  store i8 %765, i8* %767, align 8
  %768 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 21
  store i8 1, i8* %768, align 1
  store i32 15, i32* %1, align 4
  br label %772

; <label>:769:                                    ; preds = %762
  %770 = load i8*, i8** %4, align 8
  %771 = getelementptr inbounds i8, i8* %770, i64 1
  store i8* %771, i8** %4, align 8
  store i8 %765, i8* %770, align 1
  br label %772

; <label>:772:                                    ; preds = %766, %769, %757
  %773 = load i32*, i32** %5, align 8
  %774 = icmp eq i32* %773, null
  br i1 %774, label %787, label %775

; <label>:775:                                    ; preds = %772
  %776 = getelementptr inbounds i32, i32* %773, i64 1
  store i32* %776, i32** %5, align 8
  store i32 %735, i32* %773, align 4
  br label %787

; <label>:777:                                    ; preds = %754
  %778 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 27, i64 0
  store i8 %756, i8* %778, align 8
  %779 = and i32 %101, 255
  %780 = icmp eq i32 %779, 2
  br i1 %780, label %781, label %785

; <label>:781:                                    ; preds = %777
  %782 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  %783 = load i8, i8* %782, align 1
  %784 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 27, i64 1
  store i8 %783, i8* %784, align 1
  br label %785

; <label>:785:                                    ; preds = %781, %777
  %786 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 21
  store i8 %102, i8* %786, align 1
  store i32 15, i32* %1, align 4
  br label %787

; <label>:787:                                    ; preds = %785, %775, %772, %734, %745, %749
  %788 = phi i32 [ 2, %749 ], [ 2, %745 ], [ %737, %734 ], [ 1, %772 ], [ 1, %775 ], [ 1, %785 ]
  store i32 %736, i32* %89, align 4
  %789 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 16
  store i32 %788, i32* %789, align 8
  %790 = load i64, i64* %53, align 8
  store i64 %790, i64* %51, align 8
  %791 = load i64, i64* %59, align 8
  store i64 %791, i64* %57, align 8
  %792 = load i64, i64* %68, align 8
  store i64 %792, i64* %66, align 8
  br label %793

; <label>:793:                                    ; preds = %42, %43, %24, %20, %787, %360, %48
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %14) #12
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

declare void @ucnv_extContinueMatchFromU_63(%struct.UConverter*, %struct.UConverterFromUnicodeArgs*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL33ucnv_MBCSSingleFromBMPWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, i32*) unnamed_addr #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = bitcast i16** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %10 = load %struct.UConverter*, %struct.UConverter** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %12 = bitcast i16** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast i16** %3 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %16 = load i16*, i16** %15, align 8
  %17 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast i8** %4 to i64*
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %22 = bitcast i8** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, %19
  %25 = trunc i64 %24 to i32
  %26 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %27 = bitcast i32** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast i32** %5 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 6
  %31 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %30, align 8
  %32 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %31, i64 0, i32 8, i32 8
  %33 = load i16*, i16** %32, align 8
  %34 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 7
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 16
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %31, i64 0, i32 8, i32 12
  %39 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %31, i64 0, i32 8, i32 11
  %40 = select i1 %37, i8** %39, i8** %38
  %41 = bitcast i8** %40 to i16**
  %42 = load i16*, i16** %41, align 8
  %43 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %31, i64 0, i32 8, i32 18
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 11
  %46 = load i8, i8* %45, align 1
  %47 = icmp eq i8 %46, 0
  %48 = select i1 %47, i32 3072, i32 2048
  %49 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 17
  %50 = load i32, i32* %49, align 4
  %51 = icmp ne i32 %50, 0
  %52 = sext i1 %51 to i32
  %53 = load i16*, i16** %3, align 8
  %54 = ptrtoint i16* %16 to i64
  %55 = ptrtoint i16* %53 to i64
  %56 = sub i64 %54, %55
  %57 = lshr exact i64 %56, 1
  %58 = trunc i64 %57 to i32
  %59 = icmp slt i32 %58, %25
  %60 = select i1 %59, i32 %58, i32 %25
  %61 = icmp sgt i32 %60, 0
  %62 = and i1 %51, %61
  br i1 %62, label %119, label %63

; <label>:63:                                     ; preds = %184, %2
  %64 = phi i32 [ %50, %2 ], [ %173, %184 ]
  %65 = phi i32 [ %52, %2 ], [ %180, %184 ]
  %66 = phi i32 [ %60, %2 ], [ %194, %184 ]
  %67 = phi i16* [ %53, %2 ], [ %174, %184 ]
  %68 = icmp sgt i32 %66, 0
  br i1 %68, label %69, label %195

; <label>:69:                                     ; preds = %63, %85
  %70 = phi i32 [ %86, %85 ], [ %66, %63 ]
  %71 = load i16*, i16** %3, align 8
  %72 = getelementptr inbounds i16, i16* %71, i64 1
  store i16* %72, i16** %3, align 8
  %73 = load i16, i16* %71, align 2
  %74 = zext i16 %73 to i32
  %75 = icmp ult i16 %73, 128
  br i1 %75, label %76, label %88

; <label>:76:                                     ; preds = %69
  %77 = lshr i32 %74, 2
  %78 = shl i32 1, %77
  %79 = and i32 %78, %44
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %88, label %81

; <label>:81:                                     ; preds = %76
  %82 = trunc i16 %73 to i8
  %83 = load i8*, i8** %4, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 1
  store i8* %84, i8** %4, align 8
  store i8 %82, i8* %83, align 1
  br label %85

; <label>:85:                                     ; preds = %81, %108
  %86 = add nsw i32 %70, -1
  %87 = icmp sgt i32 %70, 1
  br i1 %87, label %69, label %195

; <label>:88:                                     ; preds = %76, %69
  %89 = lshr i32 %74, 10
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %33, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  %94 = lshr i32 %74, 4
  %95 = and i32 %94, 63
  %96 = add nuw nsw i32 %95, %93
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds i16, i16* %33, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = and i32 %74, 15
  %102 = add nuw nsw i32 %101, %100
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i16, i16* %42, i64 %103
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = icmp ugt i32 %48, %106
  br i1 %107, label %112, label %108

; <label>:108:                                    ; preds = %88
  %109 = trunc i16 %105 to i8
  %110 = load i8*, i8** %4, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8* %111, i8** %4, align 8
  store i8 %109, i8* %110, align 1
  br label %85

; <label>:112:                                    ; preds = %88
  %113 = zext i16 %73 to i32
  %114 = and i32 %113, 63488
  %115 = icmp eq i32 %114, 55296
  br i1 %115, label %116, label %142

; <label>:116:                                    ; preds = %112
  %117 = and i32 %113, 1024
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %141

; <label>:119:                                    ; preds = %116, %2
  %120 = phi i32 [ %50, %2 ], [ %113, %116 ]
  %121 = phi i32 [ %52, %2 ], [ %65, %116 ]
  %122 = phi i16* [ %53, %2 ], [ %67, %116 ]
  %123 = load i16*, i16** %3, align 8
  %124 = icmp ult i16* %123, %16
  br i1 %124, label %125, label %136

; <label>:125:                                    ; preds = %119
  %126 = load i16, i16* %123, align 2
  %127 = zext i16 %126 to i32
  %128 = and i32 %127, 64512
  %129 = icmp eq i32 %128, 56320
  br i1 %129, label %131, label %130

; <label>:130:                                    ; preds = %125
  store i32 12, i32* %1, align 4
  br label %195

; <label>:131:                                    ; preds = %125
  %132 = getelementptr inbounds i16, i16* %123, i64 1
  store i16* %132, i16** %3, align 8
  %133 = shl i32 %120, 10
  %134 = add i32 %133, -56613888
  %135 = add i32 %134, %127
  br label %142

; <label>:136:                                    ; preds = %119
  %137 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %138 = load i8, i8* %137, align 2
  %139 = icmp eq i8 %138, 0
  br i1 %139, label %195, label %140

; <label>:140:                                    ; preds = %136
  store i32 11, i32* %1, align 4
  br label %195

; <label>:141:                                    ; preds = %116
  store i32 12, i32* %1, align 4
  br label %195

; <label>:142:                                    ; preds = %131, %112
  %143 = phi i32 [ %135, %131 ], [ %113, %112 ]
  %144 = phi i32 [ %121, %131 ], [ %65, %112 ]
  %145 = phi i16* [ %122, %131 ], [ %67, %112 ]
  %146 = icmp ult i32 %143, 65536
  %147 = select i1 %146, i32 1, i32 2
  %148 = load i32*, i32** %5, align 8
  %149 = icmp eq i32* %148, null
  br i1 %149, label %166, label %150

; <label>:150:                                    ; preds = %142
  %151 = load i64, i64* %14, align 8
  %152 = ptrtoint i16* %145 to i64
  %153 = sub i64 %151, %152
  %154 = lshr exact i64 %153, 1
  %155 = trunc i64 %154 to i32
  %156 = sub nsw i32 %155, %147
  %157 = icmp sgt i32 %156, 0
  br i1 %157, label %158, label %166

; <label>:158:                                    ; preds = %150, %158
  %159 = phi i32 [ %164, %158 ], [ %156, %150 ]
  %160 = phi i32 [ %161, %158 ], [ %144, %150 ]
  %161 = add nsw i32 %160, 1
  %162 = load i32*, i32** %5, align 8
  %163 = getelementptr inbounds i32, i32* %162, i64 1
  store i32* %163, i32** %5, align 8
  store i32 %160, i32* %162, align 4
  %164 = add nsw i32 %159, -1
  %165 = icmp sgt i32 %159, 1
  br i1 %165, label %158, label %166

; <label>:166:                                    ; preds = %158, %150, %142
  %167 = phi i32 [ %144, %142 ], [ %144, %150 ], [ %161, %158 ]
  %168 = load i64, i64* %14, align 8
  %169 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %30, align 8
  %170 = load i8*, i8** %21, align 8
  %171 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %172 = load i8, i8* %171, align 2
  %173 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %10, %struct.UConverterSharedData* %169, i32 %143, i16** nonnull %3, i16* %16, i8** nonnull %4, i8* %170, i32** nonnull %5, i32 %167, i8 signext %172, i32* %1)
  %174 = load i16*, i16** %3, align 8
  %175 = ptrtoint i16* %174 to i64
  %176 = sub i64 %175, %168
  %177 = lshr exact i64 %176, 1
  %178 = trunc i64 %177 to i32
  %179 = add i32 %167, %147
  %180 = add i32 %179, %178
  %181 = load i32, i32* %1, align 4
  %182 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %181)
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %184, label %195

; <label>:184:                                    ; preds = %166
  %185 = load i64, i64* %22, align 8
  %186 = load i64, i64* %20, align 8
  %187 = sub i64 %185, %186
  %188 = trunc i64 %187 to i32
  %189 = load i64, i64* %14, align 8
  %190 = sub i64 %54, %189
  %191 = lshr exact i64 %190, 1
  %192 = trunc i64 %191 to i32
  %193 = icmp slt i32 %192, %188
  %194 = select i1 %193, i32 %192, i32 %188
  br label %63

; <label>:195:                                    ; preds = %85, %63, %130, %136, %166, %140, %141
  %196 = phi i32 [ %173, %166 ], [ %113, %141 ], [ %120, %140 ], [ %120, %136 ], [ %120, %130 ], [ %64, %63 ], [ 0, %85 ]
  %197 = phi i32 [ %180, %166 ], [ %65, %141 ], [ %121, %140 ], [ %121, %136 ], [ %121, %130 ], [ %65, %63 ], [ %65, %85 ]
  %198 = phi i16* [ %174, %166 ], [ %67, %141 ], [ %122, %140 ], [ %122, %136 ], [ %122, %130 ], [ %67, %63 ], [ %67, %85 ]
  %199 = load i32, i32* %1, align 4
  %200 = call fastcc signext i8 @_ZL9U_SUCCESS10UErrorCode(i32 %199)
  %201 = icmp ne i8 %200, 0
  %202 = load i16*, i16** %3, align 8
  %203 = icmp ult i16* %202, %16
  %204 = and i1 %201, %203
  br i1 %204, label %205, label %210

; <label>:205:                                    ; preds = %195
  %206 = load i8*, i8** %4, align 8
  %207 = load i8*, i8** %21, align 8
  %208 = icmp ult i8* %206, %207
  br i1 %208, label %210, label %209

; <label>:209:                                    ; preds = %205
  store i32 15, i32* %1, align 4
  br label %210

; <label>:210:                                    ; preds = %195, %205, %209
  %211 = load i32*, i32** %5, align 8
  %212 = icmp eq i32* %211, null
  br i1 %212, label %233, label %213

; <label>:213:                                    ; preds = %210
  %214 = load i64, i64* %14, align 8
  %215 = ptrtoint i16* %198 to i64
  %216 = sub i64 %214, %215
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %233, label %218

; <label>:218:                                    ; preds = %213
  %219 = ashr exact i64 %216, 1
  %220 = load i32, i32* %1, align 4
  %221 = icmp eq i32 %220, 11
  %222 = sext i1 %221 to i64
  %223 = add nsw i64 %219, %222
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %233, label %225

; <label>:225:                                    ; preds = %218, %225
  %226 = phi i64 [ %231, %225 ], [ %223, %218 ]
  %227 = phi i32 [ %228, %225 ], [ %197, %218 ]
  %228 = add nsw i32 %227, 1
  %229 = load i32*, i32** %5, align 8
  %230 = getelementptr inbounds i32, i32* %229, i64 1
  store i32* %230, i32** %5, align 8
  store i32 %227, i32* %229, align 4
  %231 = add i64 %226, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %225

; <label>:233:                                    ; preds = %225, %213, %218, %210
  store i32 %196, i32* %49, align 4
  %234 = load i64, i64* %14, align 8
  store i64 %234, i64* %12, align 8
  %235 = load i64, i64* %20, align 8
  store i64 %235, i64* %18, align 8
  %236 = load i64, i64* %29, align 8
  store i64 %236, i64* %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL37ucnv_MBCSSingleFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, i32*) unnamed_addr #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = bitcast i16** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %10 = load %struct.UConverter*, %struct.UConverter** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %12 = bitcast i16** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast i16** %3 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %16 = load i16*, i16** %15, align 8
  %17 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %18 = bitcast i8** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast i8** %4 to i64*
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %22 = bitcast i8** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, %19
  %25 = trunc i64 %24 to i32
  %26 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %27 = bitcast i32** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast i32** %5 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 6
  %31 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %30, align 8
  %32 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %31, i64 0, i32 8, i32 8
  %33 = load i16*, i16** %32, align 8
  %34 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 7
  %35 = load i32, i32* %34, align 8
  %36 = and i32 %35, 16
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %31, i64 0, i32 8, i32 12
  %39 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %31, i64 0, i32 8, i32 11
  %40 = select i1 %37, i8** %39, i8** %38
  %41 = bitcast i8** %40 to i16**
  %42 = load i16*, i16** %41, align 8
  %43 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 11
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  %46 = select i1 %45, i32 3072, i32 2048
  %47 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %31, i64 0, i32 8, i32 15
  %48 = load i8, i8* %47, align 1
  %49 = and i8 %48, 1
  %50 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 17
  %51 = load i32, i32* %50, align 4
  %52 = icmp ne i32 %51, 0
  %53 = sext i1 %52 to i32
  %54 = icmp sgt i32 %25, 0
  %55 = and i1 %54, %52
  br i1 %55, label %75, label %56

; <label>:56:                                     ; preds = %152, %128, %2
  %57 = phi i32 [ %148, %152 ], [ %98, %128 ], [ %53, %2 ]
  %58 = phi i32 [ %148, %152 ], [ %98, %128 ], [ 0, %2 ]
  %59 = phi i32 [ %142, %152 ], [ 0, %128 ], [ %51, %2 ]
  %60 = phi i32 [ %156, %152 ], [ %129, %128 ], [ %25, %2 ]
  %61 = load i16*, i16** %3, align 8
  %62 = icmp ult i16* %61, %16
  br i1 %62, label %63, label %158

; <label>:63:                                     ; preds = %56
  %64 = icmp sgt i32 %60, 0
  br i1 %64, label %65, label %157

; <label>:65:                                     ; preds = %63
  %66 = getelementptr inbounds i16, i16* %61, i64 1
  store i16* %66, i16** %3, align 8
  %67 = load i16, i16* %61, align 2
  %68 = zext i16 %67 to i32
  %69 = add nsw i32 %58, 1
  %70 = and i32 %68, 63488
  %71 = icmp eq i32 %70, 55296
  br i1 %71, label %72, label %96

; <label>:72:                                     ; preds = %65
  %73 = and i32 %68, 1024
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %95

; <label>:75:                                     ; preds = %72, %2
  %76 = phi i32 [ %53, %2 ], [ %57, %72 ]
  %77 = phi i32 [ 0, %2 ], [ %69, %72 ]
  %78 = phi i32 [ %51, %2 ], [ %68, %72 ]
  %79 = phi i32 [ %25, %2 ], [ %60, %72 ]
  %80 = load i16*, i16** %3, align 8
  %81 = icmp ult i16* %80, %16
  br i1 %81, label %82, label %158

; <label>:82:                                     ; preds = %75
  %83 = load i16, i16* %80, align 2
  %84 = zext i16 %83 to i32
  %85 = and i32 %84, 64512
  %86 = icmp eq i32 %85, 56320
  br i1 %86, label %88, label %87

; <label>:87:                                     ; preds = %82
  store i32 12, i32* %1, align 4
  br label %158

; <label>:88:                                     ; preds = %82
  %89 = getelementptr inbounds i16, i16* %80, i64 1
  store i16* %89, i16** %3, align 8
  %90 = add nsw i32 %77, 1
  %91 = shl i32 %78, 10
  %92 = add i32 %91, -56613888
  %93 = add i32 %92, %84
  %94 = icmp eq i8 %49, 0
  br i1 %94, label %130, label %96

; <label>:95:                                     ; preds = %72
  store i32 12, i32* %1, align 4
  br label %158

; <label>:96:                                     ; preds = %88, %65
  %97 = phi i32 [ %57, %65 ], [ %76, %88 ]
  %98 = phi i32 [ %69, %65 ], [ %90, %88 ]
  %99 = phi i32 [ %68, %65 ], [ %93, %88 ]
  %100 = phi i32 [ %60, %65 ], [ %79, %88 ]
  %101 = ashr i32 %99, 10
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i16, i16* %33, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = lshr i32 %99, 4
  %107 = and i32 %106, 63
  %108 = add nuw nsw i32 %107, %105
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds i16, i16* %33, i64 %109
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = and i32 %99, 15
  %114 = add nuw nsw i32 %113, %112
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i16, i16* %42, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = icmp ugt i32 %46, %118
  br i1 %119, label %130, label %120

; <label>:120:                                    ; preds = %96
  %121 = trunc i16 %117 to i8
  %122 = load i8*, i8** %4, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  store i8* %123, i8** %4, align 8
  store i8 %121, i8* %122, align 1
  %124 = load i32*, i32** %5, align 8
  %125 = icmp eq i32* %124, null
  br i1 %125, label %128, label %126

; <label>:126:                                    ; preds = %120
  %127 = getelementptr inbounds i32, i32* %124, i64 1
  store i32* %127, i32** %5, align 8
  store i32 %97, i32* %124, align 4
  br label %128

; <label>:128:                                    ; preds = %120, %126
  %129 = add nsw i32 %100, -1
  br label %56

; <label>:130:                                    ; preds = %88, %96
  %131 = phi i32 [ %76, %88 ], [ %97, %96 ]
  %132 = phi i32 [ %90, %88 ], [ %98, %96 ]
  %133 = phi i32 [ %93, %88 ], [ %99, %96 ]
  %134 = phi i32 [ %79, %88 ], [ %100, %96 ]
  %135 = load i64, i64* %14, align 8
  store i64 %135, i64* %12, align 8
  %136 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %30, align 8
  %137 = load i8*, i8** %4, align 8
  %138 = sext i32 %134 to i64
  %139 = getelementptr inbounds i8, i8* %137, i64 %138
  %140 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %141 = load i8, i8* %140, align 2
  %142 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %10, %struct.UConverterSharedData* %136, i32 %133, i16** nonnull %3, i16* %16, i8** nonnull %4, i8* %139, i32** nonnull %5, i32 %131, i8 signext %141, i32* %1)
  %143 = load i64, i64* %14, align 8
  %144 = load i64, i64* %12, align 8
  %145 = sub i64 %143, %144
  %146 = lshr exact i64 %145, 1
  %147 = trunc i64 %146 to i32
  %148 = add nsw i32 %132, %147
  %149 = load i32, i32* %1, align 4
  %150 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %149)
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %152, label %158

; <label>:152:                                    ; preds = %130
  %153 = load i64, i64* %22, align 8
  %154 = load i64, i64* %20, align 8
  %155 = sub i64 %153, %154
  %156 = trunc i64 %155 to i32
  br label %56

; <label>:157:                                    ; preds = %63
  store i32 15, i32* %1, align 4
  br label %158

; <label>:158:                                    ; preds = %87, %130, %75, %157, %95, %56
  %159 = phi i32 [ %142, %130 ], [ %68, %95 ], [ %59, %157 ], [ %59, %56 ], [ %78, %75 ], [ %78, %87 ]
  store i32 %159, i32* %50, align 4
  %160 = load i64, i64* %14, align 8
  store i64 %160, i64* %12, align 8
  %161 = load i64, i64* %20, align 8
  store i64 %161, i64* %18, align 8
  %162 = load i64, i64* %29, align 8
  store i64 %162, i64* %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL37ucnv_MBCSDoubleFromUnicodeWithOffsetsP25UConverterFromUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, i32*) unnamed_addr #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = bitcast i16** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %10 = load %struct.UConverter*, %struct.UConverter** %9, align 8
  %11 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 6
  %12 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %11, align 8
  %13 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %12, i64 0, i32 8, i32 15
  %14 = load i8, i8* %13, align 1
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %16 = bitcast i16** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast i16** %3 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %20 = load i16*, i16** %19, align 8
  %21 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %22 = bitcast i8** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast i8** %4 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %26 = bitcast i8** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %23
  %29 = trunc i64 %28 to i32
  %30 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %31 = bitcast i32** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i32** %5 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %12, i64 0, i32 8, i32 8
  %35 = load i16*, i16** %34, align 8
  %36 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %12, i64 0, i32 8, i32 9
  %37 = load i16*, i16** %36, align 8
  %38 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 7
  %39 = load i32, i32* %38, align 8
  %40 = and i32 %39, 16
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %12, i64 0, i32 8, i32 12
  %43 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %12, i64 0, i32 8, i32 11
  %44 = select i1 %41, i8** %43, i8** %42
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %12, i64 0, i32 8, i32 18
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 17
  %49 = load i32, i32* %48, align 4
  %50 = icmp ne i32 %49, 0
  %51 = sext i1 %50 to i32
  %52 = icmp sgt i32 %29, 0
  %53 = and i1 %52, %50
  br i1 %53, label %121, label %54

; <label>:54:                                     ; preds = %208, %252, %2
  %55 = phi i32 [ 0, %2 ], [ %214, %252 ], [ %204, %208 ]
  %56 = phi i32 [ %51, %2 ], [ %214, %252 ], [ %204, %208 ]
  %57 = phi i32 [ %49, %2 ], [ 0, %252 ], [ %198, %208 ]
  %58 = phi i32 [ %29, %2 ], [ %254, %252 ], [ %212, %208 ]
  %59 = load i16*, i16** %3, align 8
  %60 = icmp ult i16* %59, %20
  br i1 %60, label %61, label %257

; <label>:61:                                     ; preds = %54
  %62 = icmp sgt i32 %58, 0
  br i1 %62, label %66, label %255

; <label>:63:                                     ; preds = %89
  %64 = add nsw i32 %69, -1
  %65 = icmp sgt i32 %69, 1
  br i1 %65, label %66, label %255

; <label>:66:                                     ; preds = %61, %63
  %67 = phi i32 [ %73, %63 ], [ %55, %61 ]
  %68 = phi i32 [ %90, %63 ], [ %56, %61 ]
  %69 = phi i32 [ %64, %63 ], [ %58, %61 ]
  %70 = phi i16* [ %91, %63 ], [ %59, %61 ]
  %71 = getelementptr inbounds i16, i16* %70, i64 1
  store i16* %71, i16** %3, align 8
  %72 = load i16, i16* %70, align 2
  %73 = add nsw i32 %67, 1
  %74 = icmp ult i16 %72, 128
  br i1 %74, label %75, label %93

; <label>:75:                                     ; preds = %66
  %76 = lshr i16 %72, 2
  %77 = zext i16 %76 to i32
  %78 = shl i32 1, %77
  %79 = and i32 %78, %47
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %96, label %81

; <label>:81:                                     ; preds = %75
  %82 = trunc i16 %72 to i8
  %83 = load i8*, i8** %4, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 1
  store i8* %84, i8** %4, align 8
  store i8 %82, i8* %83, align 1
  %85 = load i32*, i32** %5, align 8
  %86 = icmp eq i32* %85, null
  br i1 %86, label %89, label %87

; <label>:87:                                     ; preds = %81
  %88 = getelementptr inbounds i32, i32* %85, i64 1
  store i32* %88, i32** %5, align 8
  store i32 %68, i32* %85, align 4
  br label %89

; <label>:89:                                     ; preds = %81, %87
  %90 = phi i32 [ %73, %87 ], [ %68, %81 ]
  %91 = load i16*, i16** %3, align 8
  %92 = icmp ult i16* %91, %20
  br i1 %92, label %63, label %257

; <label>:93:                                     ; preds = %66
  %94 = zext i16 %72 to i32
  %95 = icmp ult i16 %72, -10240
  br i1 %95, label %98, label %112

; <label>:96:                                     ; preds = %75
  %97 = zext i16 %72 to i32
  br label %98

; <label>:98:                                     ; preds = %96, %93
  %99 = phi i32 [ %97, %96 ], [ %94, %93 ]
  %100 = bitcast i8* %45 to i16*
  %101 = lshr i32 %99, 6
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i16, i16* %37, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = and i32 %99, 63
  %107 = add nuw nsw i32 %106, %105
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i16, i16* %100, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = icmp eq i16 %110, 0
  br i1 %111, label %186, label %213

; <label>:112:                                    ; preds = %93
  %113 = and i32 %94, 63488
  %114 = icmp eq i32 %113, 55296
  %115 = and i8 %14, 2
  %116 = icmp eq i8 %115, 0
  %117 = and i1 %116, %114
  br i1 %117, label %118, label %143

; <label>:118:                                    ; preds = %112
  %119 = and i32 %94, 1024
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %142

; <label>:121:                                    ; preds = %118, %2
  %122 = phi i32 [ 0, %2 ], [ %73, %118 ]
  %123 = phi i32 [ %51, %2 ], [ %68, %118 ]
  %124 = phi i32 [ %49, %2 ], [ %94, %118 ]
  %125 = phi i32 [ %29, %2 ], [ %69, %118 ]
  %126 = load i16*, i16** %3, align 8
  %127 = icmp ult i16* %126, %20
  br i1 %127, label %128, label %257

; <label>:128:                                    ; preds = %121
  %129 = load i16, i16* %126, align 2
  %130 = zext i16 %129 to i32
  %131 = and i32 %130, 64512
  %132 = icmp eq i32 %131, 56320
  br i1 %132, label %134, label %133

; <label>:133:                                    ; preds = %128
  store i32 12, i32* %1, align 4
  br label %257

; <label>:134:                                    ; preds = %128
  %135 = getelementptr inbounds i16, i16* %126, i64 1
  store i16* %135, i16** %3, align 8
  %136 = add nsw i32 %122, 1
  %137 = shl i32 %124, 10
  %138 = add i32 %137, -56613888
  %139 = add i32 %138, %130
  %140 = and i8 %14, 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %186, label %143

; <label>:142:                                    ; preds = %118
  store i32 12, i32* %1, align 4
  br label %257

; <label>:143:                                    ; preds = %134, %112
  %144 = phi i32 [ %73, %112 ], [ %136, %134 ]
  %145 = phi i32 [ %68, %112 ], [ %123, %134 ]
  %146 = phi i32 [ %94, %112 ], [ %139, %134 ]
  %147 = phi i32 [ %69, %112 ], [ %125, %134 ]
  %148 = bitcast i16* %35 to i32*
  %149 = ashr i32 %146, 10
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i16, i16* %35, i64 %150
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = lshr i32 %146, 4
  %155 = and i32 %154, 63
  %156 = add nuw nsw i32 %155, %153
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds i32, i32* %148, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = bitcast i8* %45 to i16*
  %161 = shl i32 %159, 4
  %162 = and i32 %161, 1048560
  %163 = and i32 %146, 15
  %164 = or i32 %162, %163
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds i16, i16* %160, i64 %165
  %167 = load i16, i16* %166, align 2
  %168 = or i32 %163, 16
  %169 = shl i32 1, %168
  %170 = and i32 %159, %169
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %213

; <label>:172:                                    ; preds = %143
  %173 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 11
  %174 = load i8, i8* %173, align 1
  %175 = icmp ne i8 %174, 0
  %176 = add nsw i32 %146, -57344
  %177 = icmp ult i32 %176, 6400
  %178 = or i1 %177, %175
  br i1 %178, label %184, label %179

; <label>:179:                                    ; preds = %172
  %180 = add nsw i32 %146, -983040
  %181 = icmp ult i32 %180, 131072
  %182 = icmp ne i16 %167, 0
  %183 = and i1 %181, %182
  br i1 %183, label %213, label %186

; <label>:184:                                    ; preds = %172
  %185 = icmp eq i16 %167, 0
  br i1 %185, label %186, label %213

; <label>:186:                                    ; preds = %134, %184, %179, %98
  %187 = phi i32 [ %136, %134 ], [ %73, %98 ], [ %144, %184 ], [ %144, %179 ]
  %188 = phi i32 [ %123, %134 ], [ %68, %98 ], [ %145, %184 ], [ %145, %179 ]
  %189 = phi i32 [ %139, %134 ], [ %99, %98 ], [ %146, %184 ], [ %146, %179 ]
  %190 = phi i32 [ %125, %134 ], [ %69, %98 ], [ %147, %184 ], [ %147, %179 ]
  %191 = load i64, i64* %18, align 8
  store i64 %191, i64* %16, align 8
  %192 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %11, align 8
  %193 = load i8*, i8** %4, align 8
  %194 = sext i32 %190 to i64
  %195 = getelementptr inbounds i8, i8* %193, i64 %194
  %196 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %197 = load i8, i8* %196, align 2
  %198 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %10, %struct.UConverterSharedData* %192, i32 %189, i16** nonnull %3, i16* %20, i8** nonnull %4, i8* %195, i32** nonnull %5, i32 %188, i8 signext %197, i32* %1)
  %199 = load i64, i64* %18, align 8
  %200 = load i64, i64* %16, align 8
  %201 = sub i64 %199, %200
  %202 = lshr exact i64 %201, 1
  %203 = trunc i64 %202 to i32
  %204 = add nsw i32 %187, %203
  %205 = load i32, i32* %1, align 4
  %206 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %205)
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %208, label %257

; <label>:208:                                    ; preds = %186
  %209 = load i64, i64* %26, align 8
  %210 = load i64, i64* %24, align 8
  %211 = sub i64 %209, %210
  %212 = trunc i64 %211 to i32
  br label %54

; <label>:213:                                    ; preds = %179, %143, %184, %98
  %214 = phi i32 [ %73, %98 ], [ %144, %184 ], [ %144, %143 ], [ %144, %179 ]
  %215 = phi i32 [ %68, %98 ], [ %145, %184 ], [ %145, %143 ], [ %145, %179 ]
  %216 = phi i16 [ %110, %98 ], [ %167, %184 ], [ %167, %143 ], [ %167, %179 ]
  %217 = phi i32 [ %69, %98 ], [ %147, %184 ], [ %147, %143 ], [ %147, %179 ]
  %218 = icmp ult i16 %216, 256
  br i1 %218, label %219, label %227

; <label>:219:                                    ; preds = %213
  %220 = trunc i16 %216 to i8
  %221 = load i8*, i8** %4, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 1
  store i8* %222, i8** %4, align 8
  store i8 %220, i8* %221, align 1
  %223 = load i32*, i32** %5, align 8
  %224 = icmp eq i32* %223, null
  br i1 %224, label %252, label %225

; <label>:225:                                    ; preds = %219
  %226 = getelementptr inbounds i32, i32* %223, i64 1
  store i32* %226, i32** %5, align 8
  store i32 %215, i32* %223, align 4
  br label %252

; <label>:227:                                    ; preds = %213
  %228 = lshr i16 %216, 8
  %229 = trunc i16 %228 to i8
  %230 = load i8*, i8** %4, align 8
  %231 = getelementptr inbounds i8, i8* %230, i64 1
  store i8* %231, i8** %4, align 8
  store i8 %229, i8* %230, align 1
  %232 = icmp sgt i32 %217, 1
  br i1 %232, label %233, label %243

; <label>:233:                                    ; preds = %227
  %234 = trunc i16 %216 to i8
  %235 = load i8*, i8** %4, align 8
  %236 = getelementptr inbounds i8, i8* %235, i64 1
  store i8* %236, i8** %4, align 8
  store i8 %234, i8* %235, align 1
  %237 = load i32*, i32** %5, align 8
  %238 = icmp eq i32* %237, null
  br i1 %238, label %252, label %239

; <label>:239:                                    ; preds = %233
  %240 = getelementptr inbounds i32, i32* %237, i64 1
  store i32* %240, i32** %5, align 8
  store i32 %215, i32* %237, align 4
  %241 = load i32*, i32** %5, align 8
  %242 = getelementptr inbounds i32, i32* %241, i64 1
  store i32* %242, i32** %5, align 8
  store i32 %215, i32* %241, align 4
  br label %252

; <label>:243:                                    ; preds = %227
  %244 = load i32*, i32** %5, align 8
  %245 = icmp eq i32* %244, null
  br i1 %245, label %248, label %246

; <label>:246:                                    ; preds = %243
  %247 = getelementptr inbounds i32, i32* %244, i64 1
  store i32* %247, i32** %5, align 8
  store i32 %215, i32* %244, align 4
  br label %248

; <label>:248:                                    ; preds = %243, %246
  %249 = trunc i16 %216 to i8
  %250 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 27, i64 0
  store i8 %249, i8* %250, align 8
  %251 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 21
  store i8 1, i8* %251, align 1
  store i32 15, i32* %1, align 4
  br label %257

; <label>:252:                                    ; preds = %239, %233, %225, %219
  %253 = phi i32 [ -1, %219 ], [ -1, %225 ], [ -2, %233 ], [ -2, %239 ]
  %254 = add nsw i32 %217, %253
  br label %54

; <label>:255:                                    ; preds = %63, %61
  %256 = phi i32 [ %57, %61 ], [ 0, %63 ]
  store i32 15, i32* %1, align 4
  br label %257

; <label>:257:                                    ; preds = %89, %54, %133, %186, %121, %255, %248, %142
  %258 = phi i32 [ %198, %186 ], [ 0, %248 ], [ %94, %142 ], [ %256, %255 ], [ %124, %121 ], [ %124, %133 ], [ %57, %54 ], [ 0, %89 ]
  store i32 %258, i32* %48, align 4
  %259 = load i64, i64* %18, align 8
  store i64 %259, i64* %16, align 8
  %260 = load i64, i64* %24, align 8
  store i64 %260, i64* %22, align 8
  %261 = load i64, i64* %33, align 8
  store i64 %261, i64* %31, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

; Function Attrs: norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZL12getSISOBytes11SISO_OptionjPh(i32, i32, i8* nocapture) unnamed_addr #6 {
  switch i32 %0, label %34 [
    i32 0, label %4
    i32 1, label %19
  ]

; <label>:4:                                      ; preds = %3
  %5 = and i32 %1, 4096
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %4
  store i8 10, i8* %2, align 1
  %8 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 65, i8* %8, align 1
  br label %34

; <label>:9:                                      ; preds = %4
  %10 = and i32 %1, 8192
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

; <label>:12:                                     ; preds = %9
  store i8 41, i8* %2, align 1
  br label %34

; <label>:13:                                     ; preds = %9
  %14 = and i32 %1, 16384
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

; <label>:16:                                     ; preds = %13
  store i8 26, i8* %2, align 1
  %17 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 113, i8* %17, align 1
  br label %34

; <label>:18:                                     ; preds = %13
  store i8 15, i8* %2, align 1
  br label %34

; <label>:19:                                     ; preds = %3
  %20 = and i32 %1, 4096
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %19
  store i8 10, i8* %2, align 1
  %23 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 66, i8* %23, align 1
  br label %34

; <label>:24:                                     ; preds = %19
  %25 = and i32 %1, 8192
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %28, label %27

; <label>:27:                                     ; preds = %24
  store i8 40, i8* %2, align 1
  br label %34

; <label>:28:                                     ; preds = %24
  %29 = and i32 %1, 16384
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %33, label %31

; <label>:31:                                     ; preds = %28
  store i8 26, i8* %2, align 1
  %32 = getelementptr inbounds i8, i8* %2, i64 1
  store i8 112, i8* %32, align 1
  br label %34

; <label>:33:                                     ; preds = %28
  store i8 14, i8* %2, align 1
  br label %34

; <label>:34:                                     ; preds = %3, %22, %31, %33, %27, %7, %16, %18, %12
  %35 = phi i32 [ 0, %3 ], [ 2, %22 ], [ 1, %27 ], [ 2, %31 ], [ 1, %33 ], [ 2, %7 ], [ 1, %12 ], [ 2, %16 ], [ 1, %18 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter*, %struct.UConverterSharedData* nocapture readonly, i32, i16**, i16*, i8**, i8*, i32**, i32, i8 signext, i32*) unnamed_addr #0 {
  %12 = alloca [4 x i8], align 1
  %13 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 25
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %1, i64 0, i32 8, i32 22
  %15 = load i32*, i32** %14, align 8
  %16 = icmp eq i32* %15, null
  br i1 %16, label %20, label %17

; <label>:17:                                     ; preds = %11
  %18 = tail call signext i8 @ucnv_extInitialMatchFromU_63(%struct.UConverter* nonnull %0, i32* nonnull %15, i32 %2, i16** %3, i16* %4, i8** %5, i8* %6, i32** %7, i32 %8, i8 signext %9, i32* %10) #12
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %64

; <label>:20:                                     ; preds = %17, %11
  %21 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %22 = load i32, i32* %21, align 8
  %23 = trunc i32 %22 to i16
  %24 = icmp slt i16 %23, 0
  br i1 %24, label %25, label %63

; <label>:25:                                     ; preds = %20, %59
  %26 = phi i32 [ %61, %59 ], [ 0, %20 ]
  %27 = phi i32* [ %60, %59 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 0, i64 0), %20 ]
  %28 = load i32, i32* %27, align 4
  %29 = icmp ugt i32 %28, %2
  br i1 %29, label %59, label %30

; <label>:30:                                     ; preds = %25
  %31 = getelementptr inbounds i32, i32* %27, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp ult i32 %32, %2
  br i1 %33, label %59, label %34

; <label>:34:                                     ; preds = %30
  %35 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #12
  %36 = getelementptr inbounds i32, i32* %27, i64 2
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %37, -1687218
  %39 = load i32, i32* %27, align 4
  %40 = sub i32 %2, %39
  %41 = add i32 %38, %40
  %42 = urem i32 %41, 10
  %43 = trunc i32 %42 to i8
  %44 = or i8 %43, 48
  %45 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 3
  store i8 %44, i8* %45, align 1
  %46 = udiv i32 %41, 10
  %47 = urem i32 %46, 126
  %48 = trunc i32 %47 to i8
  %49 = add nsw i8 %48, -127
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 2
  store i8 %49, i8* %50, align 1
  %51 = udiv i32 %41, 1260
  %52 = urem i32 %51, 10
  %53 = trunc i32 %52 to i8
  %54 = or i8 %53, 48
  %55 = getelementptr inbounds [4 x i8], [4 x i8]* %12, i64 0, i64 1
  store i8 %54, i8* %55, align 1
  %56 = udiv i32 %41, 12600
  %57 = trunc i32 %56 to i8
  %58 = add i8 %57, -127
  store i8 %58, i8* %35, align 1
  call void @ucnv_fromUWriteBytes_63(%struct.UConverter* %0, i8* nonnull %35, i32 4, i8** %5, i8* %6, i32** %7, i32 %8, i32* %10) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #12
  br label %64

; <label>:59:                                     ; preds = %30, %25
  %60 = getelementptr inbounds i32, i32* %27, i64 4
  %61 = add nuw nsw i32 %26, 1
  %62 = icmp ult i32 %61, 14
  br i1 %62, label %25, label %63

; <label>:63:                                     ; preds = %59, %20
  store i32 10, i32* %10, align 4
  br label %64

; <label>:64:                                     ; preds = %34, %17, %63
  %65 = phi i32 [ %2, %63 ], [ 0, %17 ], [ 0, %34 ]
  ret i32 %65
}

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal fastcc signext i8 @_ZL9U_SUCCESS10UErrorCode(i32) unnamed_addr #3 {
  %2 = icmp slt i32 %0, 1
  %3 = zext i1 %2 to i8
  ret i8 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ucnv_MBCSFromUChar32_63(%struct.UConverterSharedData* nocapture readonly, i32, i32*, i8 signext) local_unnamed_addr #0 {
  %5 = icmp slt i32 %1, 65536
  br i1 %5, label %11, label %6

; <label>:6:                                      ; preds = %4
  %7 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  %8 = load i8, i8* %7, align 1
  %9 = and i8 %8, 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %91, label %11

; <label>:11:                                     ; preds = %6, %4
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 8
  %13 = load i16*, i16** %12, align 8
  %14 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  %15 = load i8, i8* %14, align 4
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %46

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  %19 = bitcast i8** %18 to i16**
  %20 = load i16*, i16** %19, align 8
  %21 = ashr i32 %1, 10
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %13, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = lshr i32 %1, 4
  %27 = and i32 %26, 63
  %28 = add nuw nsw i32 %27, %25
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i16, i16* %13, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = and i32 %1, 15
  %34 = add nuw nsw i32 %33, %32
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %20, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = icmp eq i8 %3, 0
  br i1 %38, label %41, label %39

; <label>:39:                                     ; preds = %17
  %40 = icmp ugt i16 %37, 2047
  br i1 %40, label %43, label %91

; <label>:41:                                     ; preds = %17
  %42 = icmp ugt i16 %37, 3071
  br i1 %42, label %43, label %91

; <label>:43:                                     ; preds = %41, %39
  %44 = and i16 %37, 255
  %45 = zext i16 %44 to i32
  store i32 %45, i32* %2, align 4
  br label %100

; <label>:46:                                     ; preds = %11
  %47 = bitcast i16* %13 to i32*
  %48 = ashr i32 %1, 10
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i16, i16* %13, i64 %49
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = lshr i32 %1, 4
  %54 = and i32 %53, 63
  %55 = add nuw nsw i32 %54, %52
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %47, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i8 %15, 1
  br i1 %59, label %60, label %100

; <label>:60:                                     ; preds = %46
  %61 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  %62 = bitcast i8** %61 to i16**
  %63 = load i16*, i16** %62, align 8
  %64 = shl i32 %58, 4
  %65 = and i32 %64, 1048560
  %66 = and i32 %1, 15
  %67 = or i32 %65, %66
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %63, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = icmp ult i16 %70, 256
  %73 = select i1 %72, i32 1, i32 2
  %74 = or i32 %66, 16
  %75 = shl i32 1, %74
  %76 = and i32 %58, %75
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %90

; <label>:78:                                     ; preds = %60
  %79 = icmp ne i8 %3, 0
  %80 = add nsw i32 %1, -57344
  %81 = icmp ult i32 %80, 6400
  %82 = or i1 %81, %79
  br i1 %82, label %88, label %83

; <label>:83:                                     ; preds = %78
  %84 = add nsw i32 %1, -983040
  %85 = icmp ult i32 %84, 131072
  %86 = icmp ne i16 %70, 0
  %87 = and i1 %85, %86
  br i1 %87, label %90, label %91

; <label>:88:                                     ; preds = %78
  %89 = icmp eq i16 %70, 0
  br i1 %89, label %91, label %90

; <label>:90:                                     ; preds = %88, %60, %83
  store i32 %71, i32* %2, align 4
  br label %100

; <label>:91:                                     ; preds = %88, %6, %41, %39, %83
  %92 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %93 = load i32*, i32** %92, align 8
  %94 = icmp eq i32* %93, null
  br i1 %94, label %100, label %95

; <label>:95:                                     ; preds = %91
  %96 = tail call i32 @ucnv_extSimpleMatchFromU_63(i32* nonnull %93, i32 %1, i32* %2, i8 signext %3) #12
  %97 = icmp slt i32 %96, 0
  %98 = sub nsw i32 0, %96
  %99 = select i1 %97, i32 %98, i32 %96
  br label %100

; <label>:100:                                    ; preds = %91, %46, %95, %90, %43
  %101 = phi i32 [ 1, %43 ], [ %99, %95 ], [ %73, %90 ], [ -1, %46 ], [ 0, %91 ]
  ret i32 %101
}

declare i32 @ucnv_extSimpleMatchFromU_63(i32*, i32, i32*, i8 signext) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden signext i8 @ucnv_MBCSIsLeadByte_63(%struct.UConverterSharedData* nocapture readonly, i8 signext) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %4 = load [256 x i32]*, [256 x i32]** %3, align 8
  %5 = zext i8 %1 to i64
  %6 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 31
  %9 = trunc i32 %8 to i8
  %10 = xor i8 %9, 1
  ret i8 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @ucnv_MBCSGetType_63(%struct.UConverter* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %3 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %2, align 8
  %4 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %3, i64 0, i32 8, i32 0
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 1
  br i1 %6, label %22, label %7

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %3, i64 0, i32 8, i32 14
  %9 = load i8, i8* %8, align 4
  %10 = icmp eq i8 %9, 12
  br i1 %10, label %22, label %11

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %3, i64 0, i32 3
  %13 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %12, align 8
  %14 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %13, i64 0, i32 5
  %15 = load i8, i8* %14, align 2
  %16 = icmp eq i8 %15, 2
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %13, i64 0, i32 6
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 2
  br i1 %20, label %22, label %21

; <label>:21:                                     ; preds = %17, %11
  br label %22

; <label>:22:                                     ; preds = %17, %7, %1, %21
  %23 = phi i32 [ 2, %21 ], [ 0, %1 ], [ 9, %7 ], [ 1, %17 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13ucnv_MBCSLoadP20UConverterSharedDataP18UConverterLoadArgsPKhP10UErrorCode(%struct.UConverterSharedData*, %struct.UConverterLoadArgs* nocapture readonly, i8*, i32*) #0 {
  %5 = alloca %struct.UDataInfo, align 2
  %6 = alloca %struct.UConverterLoadArgs, align 8
  %7 = bitcast %struct.UDataInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %7) #12
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8
  %9 = load i8, i8* %2, align 4
  switch i8 %9, label %27 [
    i8 4, label %28
    i8 5, label %10
  ]

; <label>:10:                                     ; preds = %4
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp ugt i8 %12, 2
  br i1 %13, label %14, label %27

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds i8, i8* %2, i64 32
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 65408
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %27

; <label>:20:                                     ; preds = %14
  %21 = lshr i32 %17, 6
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = shl i32 %17, 2
  %25 = and i32 %24, 252
  %26 = zext i32 %25 to i64
  br label %28

; <label>:27:                                     ; preds = %4, %14, %10
  store i32 13, i32* %3, align 4
  br label %375

; <label>:28:                                     ; preds = %4, %20
  %29 = phi i8 [ %23, %20 ], [ 0, %4 ]
  %30 = phi i64 [ %26, %20 ], [ 32, %4 ]
  %31 = getelementptr inbounds i8, i8* %2, i64 24
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  store i8 %34, i8* %35, align 4
  %36 = icmp ne i8 %29, 0
  %37 = and i32 %33, 255
  %38 = icmp eq i32 %37, 0
  %39 = and i1 %36, %38
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %28
  store i32 13, i32* %3, align 4
  br label %375

; <label>:41:                                     ; preds = %28
  %42 = load i32, i32* %32, align 4
  %43 = lshr i32 %42, 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

; <label>:45:                                     ; preds = %41
  %46 = zext i32 %43 to i64
  %47 = getelementptr inbounds i8, i8* %2, i64 %46
  %48 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %49 = bitcast i32** %48 to i8**
  store i8* %47, i8** %49, align 8
  br label %50

; <label>:50:                                     ; preds = %41, %45
  switch i8 %34, label %194 [
    i8 14, label %51
    i8 0, label %195
    i8 1, label %195
    i8 2, label %195
    i8 3, label %195
    i8 8, label %195
    i8 9, label %195
    i8 12, label %195
  ]

; <label>:51:                                     ; preds = %50
  %52 = bitcast %struct.UConverterLoadArgs* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %52) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 0, i64 40, i1 false)
  %53 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %6, i64 0, i32 0
  store i32 40, i32* %53, align 8
  %54 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %55 = load i32*, i32** %54, align 8
  %56 = icmp eq i32* %55, null
  br i1 %56, label %57, label %58

; <label>:57:                                     ; preds = %51
  store i32 13, i32* %3, align 4
  br label %193

; <label>:58:                                     ; preds = %51
  %59 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %63, label %62

; <label>:62:                                     ; preds = %58
  store i32 14, i32* %3, align 4
  br label %193

; <label>:63:                                     ; preds = %58
  %64 = getelementptr inbounds i8, i8* %2, i64 %30
  %65 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 3
  %66 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %65, align 8
  %67 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %66, i64 0, i32 1, i64 0
  %68 = tail call i32 @strcmp(i8* %64, i8* nonnull %67) #13
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

; <label>:70:                                     ; preds = %63
  store i32 13, i32* %3, align 4
  br label %193

; <label>:71:                                     ; preds = %63
  store i32 40, i32* %53, align 8
  %72 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %6, i64 0, i32 1
  store i32 2, i32* %72, align 4
  %73 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 2
  %74 = load i8, i8* %73, align 8
  %75 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %6, i64 0, i32 2
  store i8 %74, i8* %75, align 8
  %76 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 4
  %77 = load i16, i16* %76, align 2
  %78 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %6, i64 0, i32 4
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 5
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %6, i64 0, i32 5
  store i32 %80, i32* %81, align 4
  %82 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 6
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %6, i64 0, i32 6
  %86 = bitcast i8** %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %6, i64 0, i32 7
  store i8* %64, i8** %87, align 8
  %88 = call %struct.UConverterSharedData* @ucnv_load_63(%struct.UConverterLoadArgs* nonnull %6, i32* %3) #12
  %89 = load i32, i32* %3, align 4
  %90 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %89)
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %193

; <label>:92:                                     ; preds = %71
  %93 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %88, i64 0, i32 3
  %94 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %93, align 8
  %95 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %94, i64 0, i32 4
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 2
  br i1 %97, label %98, label %102

; <label>:98:                                     ; preds = %92
  %99 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %88, i64 0, i32 8, i32 21
  %100 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %99, align 8
  %101 = icmp eq %struct.UConverterSharedData* %100, null
  br i1 %101, label %103, label %102

; <label>:102:                                    ; preds = %98, %92
  call void @ucnv_unload_63(%struct.UConverterSharedData* nonnull %88) #12
  store i32 13, i32* %3, align 4
  br label %193

; <label>:103:                                    ; preds = %98
  %104 = load i8, i8* %73, align 8
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %107, label %106

; <label>:106:                                    ; preds = %103
  call void @ucnv_unload_63(%struct.UConverterSharedData* nonnull %88) #12
  br label %193

; <label>:107:                                    ; preds = %103
  %108 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %8, i64 0, i32 0
  %109 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %88, i64 0, i32 8, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %108, i8* nonnull align 8 %109, i64 216, i1 false)
  %110 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 21
  store %struct.UConverterSharedData* %88, %struct.UConverterSharedData** %110, align 8
  store i32* %55, i32** %54, align 8
  %111 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 5
  store [256 x i32]* null, [256 x i32]** %111, align 8
  %112 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 12
  store i8* null, i8** %112, align 8
  %113 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 19
  %114 = bitcast i8** %113 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %114, i8 0, i64 16, i1 false)
  %115 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %65, align 8
  %116 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %115, i64 0, i32 4
  %117 = load i8, i8* %116, align 1
  switch i8 %117, label %192 [
    i8 1, label %122
    i8 2, label %118
  ]

; <label>:118:                                    ; preds = %107
  %119 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %115, i64 0, i32 5
  %120 = load i8, i8* %119, align 2
  %121 = icmp sgt i8 %120, 1
  br i1 %121, label %122, label %192

; <label>:122:                                    ; preds = %107, %118
  %123 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %88, i64 0, i32 8, i32 14
  %124 = load i8, i8* %123, align 4
  %125 = icmp eq i8 %124, 12
  br i1 %125, label %126, label %140

; <label>:126:                                    ; preds = %122
  %127 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %128 = load [256 x i32]*, [256 x i32]** %127, align 8
  %129 = getelementptr inbounds [256 x i32], [256 x i32]* %128, i64 0, i64 14
  %130 = load i32, i32* %129, align 4
  %131 = and i32 %130, -2131755008
  %132 = icmp eq i32 %131, -2139095040
  br i1 %132, label %133, label %192

; <label>:133:                                    ; preds = %126
  %134 = lshr i32 %130, 24
  %135 = and i32 %134, 127
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %192, label %137

; <label>:137:                                    ; preds = %133
  %138 = trunc i32 %135 to i8
  %139 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 1
  store i8 %138, i8* %139, align 1
  store i8 -37, i8* %35, align 4
  br label %192

; <label>:140:                                    ; preds = %122
  %141 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %93, align 8
  %142 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %141, i64 0, i32 4
  %143 = load i8, i8* %142, align 1
  %144 = icmp eq i8 %143, 2
  br i1 %144, label %145, label %192

; <label>:145:                                    ; preds = %140
  %146 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %141, i64 0, i32 5
  %147 = load i8, i8* %146, align 2
  %148 = icmp eq i8 %147, 1
  br i1 %148, label %149, label %192

; <label>:149:                                    ; preds = %145
  %150 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %141, i64 0, i32 6
  %151 = load i8, i8* %150, align 1
  %152 = icmp eq i8 %151, 2
  br i1 %152, label %153, label %192

; <label>:153:                                    ; preds = %149
  %154 = load i8, i8* %108, align 8
  %155 = zext i8 %154 to i32
  %156 = icmp sgt i8 %154, -1
  br i1 %156, label %157, label %192

; <label>:157:                                    ; preds = %153
  %158 = add nuw nsw i32 %155, 1
  %159 = shl nuw nsw i32 %158, 10
  %160 = zext i32 %159 to i64
  %161 = call noalias i8* @uprv_malloc_63(i64 %160) #14
  %162 = bitcast i8* %161 to [256 x i32]*
  %163 = icmp eq i8* %161, null
  br i1 %163, label %191, label %164

; <label>:164:                                    ; preds = %157
  %165 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %166 = bitcast [256 x i32]** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  %168 = shl nuw nsw i32 %155, 10
  %169 = zext i32 %168 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %161, i8* align 4 %167, i64 %169, i1 false)
  %170 = bitcast i8* %161 to i32*
  %171 = shl nuw i32 %155, 24
  br label %172

; <label>:172:                                    ; preds = %178, %164
  %173 = phi i64 [ 0, %164 ], [ %179, %178 ]
  %174 = getelementptr inbounds i32, i32* %170, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = icmp slt i32 %175, 0
  br i1 %176, label %177, label %178

; <label>:177:                                    ; preds = %172
  store i32 %171, i32* %174, align 4
  br label %178

; <label>:178:                                    ; preds = %172, %177
  %179 = add nuw nsw i64 %173, 1
  %180 = icmp eq i64 %179, 256
  br i1 %180, label %181, label %172

; <label>:181:                                    ; preds = %178
  %182 = zext i8 %154 to i64
  br label %183

; <label>:183:                                    ; preds = %183, %181
  %184 = phi i64 [ 0, %181 ], [ %186, %183 ]
  %185 = getelementptr inbounds [256 x i32], [256 x i32]* %162, i64 %182, i64 %184
  store i32 -2140143616, i32* %185, align 4
  %186 = add nuw nsw i64 %184, 1
  %187 = icmp eq i64 %186, 256
  br i1 %187, label %188, label %183

; <label>:188:                                    ; preds = %183
  store i8* %161, i8** %166, align 8
  %189 = trunc i32 %158 to i8
  store i8 %189, i8* %108, align 8
  %190 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 2
  store i8 1, i8* %190, align 2
  store i8 -37, i8* %35, align 4
  br label %192

; <label>:191:                                    ; preds = %157
  call void @ucnv_unload_63(%struct.UConverterSharedData* nonnull %88) #12
  store i32 7, i32* %3, align 4
  br label %193

; <label>:192:                                    ; preds = %188, %126, %137, %133, %107, %153, %149, %145, %140, %118
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #12
  br label %354

; <label>:193:                                    ; preds = %191, %71, %106, %102, %70, %62, %57
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #12
  br label %375

; <label>:194:                                    ; preds = %50
  store i32 13, i32* %3, align 4
  br label %375

; <label>:195:                                    ; preds = %50, %50, %50, %50, %50, %50, %50
  %196 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 2
  %197 = load i8, i8* %196, align 8
  %198 = icmp eq i8 %197, 0
  br i1 %198, label %199, label %375

; <label>:199:                                    ; preds = %195
  %200 = getelementptr inbounds i8, i8* %2, i64 4
  %201 = bitcast i8* %200 to i32*
  %202 = load i32, i32* %201, align 4
  %203 = trunc i32 %202 to i8
  %204 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %8, i64 0, i32 0
  store i8 %203, i8* %204, align 8
  %205 = getelementptr inbounds i8, i8* %2, i64 8
  %206 = bitcast i8* %205 to i32*
  %207 = load i32, i32* %206, align 4
  %208 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 3
  store i32 %207, i32* %208, align 4
  %209 = getelementptr inbounds i8, i8* %2, i64 %30
  %210 = bitcast i8* %209 to [256 x i32]*
  %211 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %212 = bitcast [256 x i32]** %211 to i8**
  store i8* %209, i8** %212, align 8
  %213 = load i32, i32* %201, align 4
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds [256 x i32], [256 x i32]* %210, i64 %214
  %216 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 7
  %217 = bitcast %struct._MBCSToUFallback** %216 to [256 x i32]**
  store [256 x i32]* %215, [256 x i32]** %217, align 8
  %218 = getelementptr inbounds i8, i8* %2, i64 12
  %219 = bitcast i8* %218 to i32*
  %220 = load i32, i32* %219, align 4
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds i8, i8* %2, i64 %221
  %223 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 6
  %224 = bitcast i16** %223 to i8**
  store i8* %222, i8** %224, align 8
  %225 = getelementptr inbounds i8, i8* %2, i64 16
  %226 = bitcast i8* %225 to i32*
  %227 = load i32, i32* %226, align 4
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %2, i64 %228
  %230 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 8
  %231 = bitcast i16** %230 to i8**
  store i8* %229, i8** %231, align 8
  %232 = getelementptr inbounds i8, i8* %2, i64 20
  %233 = bitcast i8* %232 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds i8, i8* %2, i64 %235
  %237 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  store i8* %236, i8** %237, align 8
  %238 = getelementptr inbounds i8, i8* %2, i64 28
  %239 = bitcast i8* %238 to i32*
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 13
  store i32 %240, i32* %241, align 8
  %242 = getelementptr inbounds %struct.UDataInfo, %struct.UDataInfo* %5, i64 0, i32 0
  store i16 20, i16* %242, align 2
  %243 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 2
  %244 = bitcast i8** %243 to %struct.UDataMemory**
  %245 = load %struct.UDataMemory*, %struct.UDataMemory** %244, align 8
  call void @udata_getInfo_63(%struct.UDataMemory* %245, %struct.UDataInfo* nonnull %5) #12
  %246 = getelementptr inbounds %struct.UDataInfo, %struct.UDataInfo* %5, i64 0, i32 7, i64 0
  %247 = load i8, i8* %246, align 2
  %248 = icmp ugt i8 %247, 6
  br i1 %248, label %255, label %249

; <label>:249:                                    ; preds = %199
  %250 = icmp eq i8 %247, 6
  br i1 %250, label %251, label %261

; <label>:251:                                    ; preds = %249
  %252 = getelementptr inbounds %struct.UDataInfo, %struct.UDataInfo* %5, i64 0, i32 7, i64 1
  %253 = load i8, i8* %252, align 1
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %261, label %255

; <label>:255:                                    ; preds = %251, %199
  %256 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 3
  %257 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %256, align 8
  %258 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %257, i64 0, i32 11
  %259 = load i8, i8* %258, align 1
  %260 = and i8 %259, 3
  br label %261

; <label>:261:                                    ; preds = %249, %251, %255
  %262 = phi i8 [ %260, %255 ], [ 3, %251 ], [ 3, %249 ]
  %263 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  store i8 %262, i8* %263, align 1
  %264 = getelementptr inbounds i8, i8* %2, i64 1
  %265 = load i8, i8* %264, align 1
  %266 = icmp ugt i8 %265, 2
  br i1 %266, label %267, label %317

; <label>:267:                                    ; preds = %261
  %268 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  %269 = load i8, i8* %268, align 1
  %270 = and i8 %269, 2
  %271 = icmp eq i8 %270, 0
  br i1 %271, label %272, label %317

; <label>:272:                                    ; preds = %267
  %273 = load i8, i8* %204, align 8
  %274 = icmp eq i8 %273, 1
  %275 = getelementptr inbounds i8, i8* %2, i64 2
  %276 = load i8, i8* %275, align 2
  br i1 %274, label %277, label %279

; <label>:277:                                    ; preds = %272
  %278 = icmp ugt i8 %276, 14
  br i1 %278, label %281, label %317

; <label>:279:                                    ; preds = %272
  %280 = icmp ugt i8 %276, -42
  br i1 %280, label %301, label %317

; <label>:281:                                    ; preds = %277
  %282 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 16
  store i8 1, i8* %282, align 2
  br label %283

; <label>:283:                                    ; preds = %283, %281
  %284 = phi i64 [ 0, %281 ], [ %297, %283 ]
  %285 = load i16*, i16** %230, align 8
  %286 = lshr i64 %284, 4
  %287 = and i64 %286, 268435455
  %288 = getelementptr inbounds i16, i16* %285, i64 %287
  %289 = load i16, i16* %288, align 2
  %290 = zext i16 %289 to i64
  %291 = shl i64 %284, 2
  %292 = and i64 %291, 60
  %293 = add nuw nsw i64 %292, %290
  %294 = getelementptr inbounds i16, i16* %285, i64 %293
  %295 = load i16, i16* %294, align 2
  %296 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 10, i64 %284
  store i16 %295, i16* %296, align 2
  %297 = add nuw nsw i64 %284, 1
  %298 = icmp eq i64 %297, 64
  br i1 %298, label %299, label %283

; <label>:299:                                    ; preds = %283
  %300 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 17
  store i16 4095, i16* %300, align 8
  br label %317

; <label>:301:                                    ; preds = %279
  %302 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 16
  store i8 1, i8* %302, align 2
  %303 = load i8*, i8** %237, align 8
  br i1 %36, label %307, label %304

; <label>:304:                                    ; preds = %301
  %305 = load i32, i32* %241, align 8
  %306 = zext i32 %305 to i64
  br label %307

; <label>:307:                                    ; preds = %301, %304
  %308 = phi i64 [ %306, %304 ], [ 0, %301 ]
  %309 = getelementptr inbounds i8, i8* %303, i64 %308
  %310 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 9
  %311 = bitcast i16** %310 to i8**
  store i8* %309, i8** %311, align 8
  %312 = load i8, i8* %275, align 2
  %313 = zext i8 %312 to i16
  %314 = shl nuw i16 %313, 8
  %315 = or i16 %314, 255
  %316 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 17
  store i16 %315, i16* %316, align 8
  br label %317

; <label>:317:                                    ; preds = %299, %307, %279, %277, %267, %261
  %318 = load [256 x i32]*, [256 x i32]** %211, align 8
  br label %319

; <label>:319:                                    ; preds = %333, %317
  %320 = phi i64 [ 0, %317 ], [ %335, %333 ]
  %321 = phi i32 [ -1, %317 ], [ %334, %333 ]
  %322 = getelementptr inbounds [256 x i32], [256 x i32]* %318, i64 0, i64 %320
  %323 = load i32, i32* %322, align 4
  %324 = trunc i64 %320 to i32
  %325 = or i32 %324, -2147483648
  %326 = icmp eq i32 %323, %325
  br i1 %326, label %333, label %327

; <label>:327:                                    ; preds = %319
  %328 = trunc i64 %320 to i32
  %329 = lshr i32 %328, 2
  %330 = shl i32 1, %329
  %331 = xor i32 %330, -1
  %332 = and i32 %321, %331
  br label %333

; <label>:333:                                    ; preds = %319, %327
  %334 = phi i32 [ %332, %327 ], [ %321, %319 ]
  %335 = add nuw nsw i64 %320, 1
  %336 = icmp eq i64 %335, 128
  br i1 %336, label %337, label %319

; <label>:337:                                    ; preds = %333
  %338 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 18
  store i32 %334, i32* %338, align 4
  br i1 %36, label %339, label %354

; <label>:339:                                    ; preds = %337
  %340 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  %341 = load i8, i8* %340, align 1
  %342 = and i8 %341, 1
  %343 = icmp eq i8 %342, 0
  %344 = select i1 %343, i32 64, i32 1088
  %345 = load i32, i32* %233, align 4
  %346 = load i32, i32* %226, align 4
  %347 = sub i32 %345, %346
  %348 = lshr i32 %347, 2
  %349 = lshr exact i32 %344, 1
  %350 = sub nsw i32 %348, %349
  %351 = getelementptr inbounds i8, i8* %2, i64 36
  %352 = bitcast i8* %351 to i32*
  %353 = load i32, i32* %352, align 4
  call fastcc void @_ZL16reconstituteDataP19UConverterMBCSTablejjjP10UErrorCode(%struct.UConverterMBCSTable* nonnull %8, i32 %344, i32 %350, i32 %353, i32* %3)
  br label %354

; <label>:354:                                    ; preds = %192, %337, %339
  %355 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 16
  %356 = load i8, i8* %355, align 2
  %357 = icmp eq i8 %356, 0
  br i1 %357, label %369, label %358

; <label>:358:                                    ; preds = %354
  %359 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %8, i64 0, i32 0
  %360 = load i8, i8* %359, align 8
  %361 = icmp eq i8 %360, 1
  br i1 %361, label %362, label %364

; <label>:362:                                    ; preds = %358
  %363 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 6
  store %struct.UConverterImpl* @_ZL13_SBCSUTF8Impl, %struct.UConverterImpl** %363, align 8
  br label %369

; <label>:364:                                    ; preds = %358
  %365 = load i8, i8* %35, align 4
  %366 = icmp eq i8 %365, 1
  br i1 %366, label %367, label %371

; <label>:367:                                    ; preds = %364
  %368 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 6
  store %struct.UConverterImpl* @_ZL13_DBCSUTF8Impl, %struct.UConverterImpl** %368, align 8
  br label %375

; <label>:369:                                    ; preds = %362, %354
  %370 = load i8, i8* %35, align 4
  br label %371

; <label>:371:                                    ; preds = %369, %364
  %372 = phi i8 [ %370, %369 ], [ %365, %364 ]
  switch i8 %372, label %375 [
    i8 -37, label %373
    i8 12, label %373
  ]

; <label>:373:                                    ; preds = %371, %371
  %374 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 18
  store i32 0, i32* %374, align 4
  br label %375

; <label>:375:                                    ; preds = %367, %193, %373, %371, %195, %194, %40, %27
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15ucnv_MBCSUnloadP20UConverterSharedData(%struct.UConverterSharedData* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 5
  %3 = load [256 x i32]*, [256 x i32]** %2, align 8
  %4 = icmp eq [256 x i32]* %3, null
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %1
  %6 = bitcast [256 x i32]* %3 to i8*
  tail call void @uprv_free_63(i8* %6) #12
  br label %7

; <label>:7:                                      ; preds = %1, %5
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 2
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %13 = bitcast [256 x i32]** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @uprv_free_63(i8* %14) #12
  br label %15

; <label>:15:                                     ; preds = %7, %11
  %16 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 21
  %17 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %16, align 8
  %18 = icmp eq %struct.UConverterSharedData* %17, null
  br i1 %18, label %20, label %19

; <label>:19:                                     ; preds = %15
  tail call void @ucnv_unload_63(%struct.UConverterSharedData* nonnull %17) #12
  br label %20

; <label>:20:                                     ; preds = %15, %19
  %21 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 19
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %25, label %24

; <label>:24:                                     ; preds = %20
  tail call void @uprv_free_63(i8* nonnull %22) #12
  br label %25

; <label>:25:                                     ; preds = %20, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13ucnv_MBCSOpenP10UConverterP18UConverterLoadArgsP10UErrorCode(%struct.UConverter* nocapture, %struct.UConverterLoadArgs* nocapture, i32* nocapture) #0 {
  %4 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 2
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %102

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %9 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %8, align 8
  %10 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %9, i64 0, i32 8, i32 14
  %11 = load i8, i8* %10, align 4
  %12 = icmp eq i8 %11, -37
  br i1 %12, label %13, label %18

; <label>:13:                                     ; preds = %7
  %14 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, -17
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  store i32 %16, i32* %17, align 8
  br label %18

; <label>:18:                                     ; preds = %13, %7
  %19 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 16
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %39, label %23

; <label>:23:                                     ; preds = %18
  tail call void @umtx_lock_63(%struct.UMutex* null) #12
  %24 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %9, i64 0, i32 8, i32 5
  %25 = load [256 x i32]*, [256 x i32]** %24, align 8
  %26 = icmp eq [256 x i32]* %25, null
  tail call void @umtx_unlock_63(%struct.UMutex* null) #12
  br i1 %26, label %27, label %39

; <label>:27:                                     ; preds = %23
  %28 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %8, align 8
  %29 = tail call fastcc signext i8 @_ZL15_EBCDICSwapLFNLP20UConverterSharedDataP10UErrorCode(%struct.UConverterSharedData* %28, i32* %2)
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %39

; <label>:31:                                     ; preds = %27
  %32 = load i32, i32* %2, align 4
  %33 = tail call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %32)
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %102

; <label>:35:                                     ; preds = %31
  %36 = load i32, i32* %19, align 4
  %37 = and i32 %36, -17
  store i32 %37, i32* %19, align 4
  %38 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  store i32 %37, i32* %38, align 8
  br label %39

; <label>:39:                                     ; preds = %27, %23, %35, %18
  %40 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 7
  %41 = load i8*, i8** %40, align 8
  %42 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #13
  %43 = icmp eq i8* %42, null
  br i1 %43, label %54, label %44

; <label>:44:                                     ; preds = %39
  %45 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #13
  %46 = icmp eq i8* %45, null
  br i1 %46, label %47, label %50

; <label>:47:                                     ; preds = %44
  %48 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #13
  %49 = icmp eq i8* %48, null
  br i1 %49, label %84, label %50

; <label>:50:                                     ; preds = %47, %44
  %51 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %52 = load i32, i32* %51, align 8
  %53 = or i32 %52, 32768
  store i32 %53, i32* %51, align 8
  br label %84

; <label>:54:                                     ; preds = %39
  %55 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0)) #13
  %56 = icmp eq i8* %55, null
  br i1 %56, label %57, label %60

; <label>:57:                                     ; preds = %54
  %58 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #13
  %59 = icmp eq i8* %58, null
  br i1 %59, label %64, label %60

; <label>:60:                                     ; preds = %57, %54
  %61 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %62 = load i32, i32* %61, align 8
  %63 = or i32 %62, 4096
  store i32 %63, i32* %61, align 8
  br label %84

; <label>:64:                                     ; preds = %57
  %65 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0)) #13
  %66 = icmp eq i8* %65, null
  br i1 %66, label %67, label %70

; <label>:67:                                     ; preds = %64
  %68 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)) #13
  %69 = icmp eq i8* %68, null
  br i1 %69, label %74, label %70

; <label>:70:                                     ; preds = %67, %64
  %71 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %72 = load i32, i32* %71, align 8
  %73 = or i32 %72, 8192
  store i32 %73, i32* %71, align 8
  br label %84

; <label>:74:                                     ; preds = %67
  %75 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0)) #13
  %76 = icmp eq i8* %75, null
  br i1 %76, label %77, label %80

; <label>:77:                                     ; preds = %74
  %78 = tail call i8* @strstr(i8* %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0)) #13
  %79 = icmp eq i8* %78, null
  br i1 %79, label %84, label %80

; <label>:80:                                     ; preds = %77, %74
  %81 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %82 = load i32, i32* %81, align 8
  %83 = or i32 %82, 16384
  store i32 %83, i32* %81, align 8
  br label %84

; <label>:84:                                     ; preds = %47, %77, %60, %80, %70, %50
  %85 = icmp eq i8 %11, 12
  br i1 %85, label %86, label %88

; <label>:86:                                     ; preds = %84
  %87 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 18
  store i8 3, i8* %87, align 8
  br label %88

; <label>:88:                                     ; preds = %86, %84
  %89 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %9, i64 0, i32 8, i32 22
  %90 = load i32*, i32** %89, align 8
  %91 = icmp eq i32* %90, null
  br i1 %91, label %102, label %92

; <label>:92:                                     ; preds = %88
  %93 = getelementptr inbounds i32, i32* %90, i64 17
  %94 = load i32, i32* %93, align 4
  %95 = trunc i32 %94 to i8
  %96 = zext i1 %85 to i8
  %97 = add i8 %95, %96
  %98 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 18
  %99 = load i8, i8* %98, align 8
  %100 = icmp sgt i8 %97, %99
  br i1 %100, label %101, label %102

; <label>:101:                                    ; preds = %92
  store i8 %97, i8* %98, align 8
  br label %102

; <label>:102:                                    ; preds = %31, %101, %92, %88, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL21ucnv_MBCSGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #0 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 35
  %6 = load i8, i8* %5, align 2
  %7 = icmp sgt i8 %6, 0
  br i1 %7, label %243, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 6
  %10 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8, i32 15
  %12 = load i8, i8* %11, align 1
  %13 = and i8 %12, 2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %243

; <label>:15:                                     ; preds = %8
  %16 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8, i32 0
  %17 = load i8, i8* %16, align 8
  %18 = icmp eq i8 %17, 1
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %15
  %20 = tail call fastcc i32 @_ZL27ucnv_MBCSSingleGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nonnull %0, i32* %1)
  br label %243

; <label>:21:                                     ; preds = %15
  %22 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 7
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, 16
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8, i32 5
  %31 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8, i32 4
  %32 = select i1 %29, [256 x i32]** %31, [256 x i32]** %30
  %33 = load [256 x i32]*, [256 x i32]** %32, align 8
  %34 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8, i32 6
  %35 = load i16*, i16** %34, align 8
  %36 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %39 = load i32, i32* %38, align 4
  %40 = trunc i32 %39 to i8
  %41 = and i32 %39, 255
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %46

; <label>:43:                                     ; preds = %21
  %44 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8, i32 1
  %45 = load i8, i8* %44, align 1
  br label %46

; <label>:46:                                     ; preds = %43, %21
  %47 = phi i8 [ %40, %21 ], [ %45, %43 ]
  br label %48

; <label>:48:                                     ; preds = %46, %97
  %49 = phi i8* [ %62, %97 ], [ %23, %46 ]
  %50 = phi i32 [ 0, %97 ], [ %37, %46 ]
  %51 = phi i8 [ %101, %97 ], [ %47, %46 ]
  %52 = phi i32 [ %56, %97 ], [ -1, %46 ]
  %53 = icmp ult i8* %49, %25
  br i1 %53, label %54, label %176

; <label>:54:                                     ; preds = %48, %171
  %55 = phi i64 [ %61, %171 ], [ 0, %48 ]
  %56 = phi i32 [ %172, %171 ], [ %52, %48 ]
  %57 = phi i8 [ %70, %171 ], [ %51, %48 ]
  %58 = phi i32 [ %72, %171 ], [ %50, %48 ]
  %59 = getelementptr inbounds i8, i8* %49, i64 %55
  %60 = zext i8 %57 to i64
  %61 = add nuw nsw i64 %55, 1
  %62 = getelementptr inbounds i8, i8* %49, i64 %61
  %63 = load i8, i8* %59, align 1
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds [256 x i32], [256 x i32]* %33, i64 %60, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp sgt i32 %66, -1
  br i1 %67, label %68, label %97

; <label>:68:                                     ; preds = %54
  %69 = lshr i32 %66, 24
  %70 = trunc i32 %69 to i8
  %71 = and i32 %66, 16777215
  %72 = add i32 %71, %58
  %73 = icmp ult i8* %62, %25
  br i1 %73, label %74, label %171

; <label>:74:                                     ; preds = %68
  %75 = zext i32 %69 to i64
  %76 = load i8, i8* %62, align 1
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds [256 x i32], [256 x i32]* %33, i64 %75, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %79, -2131755008
  %81 = icmp eq i32 %80, -2143289344
  br i1 %81, label %82, label %171

; <label>:82:                                     ; preds = %74
  %83 = and i32 %79, 65535
  %84 = add i32 %83, %72
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %35, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = icmp ult i16 %87, -2
  br i1 %89, label %90, label %171

; <label>:90:                                     ; preds = %82
  %91 = getelementptr inbounds i8, i8* %49, i64 %55
  %92 = zext i16 %87 to i32
  %93 = getelementptr inbounds i8, i8* %91, i64 2
  %94 = lshr i32 %79, 24
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 127
  br label %238

; <label>:97:                                     ; preds = %54
  %98 = zext i8 %57 to i32
  store i32 %98, i32* %38, align 4
  %99 = lshr i32 %66, 24
  %100 = trunc i32 %99 to i8
  %101 = and i8 %100, 127
  %102 = lshr i32 %66, 20
  %103 = trunc i32 %102 to i4
  switch i4 %103, label %48 [
    i4 0, label %104
    i4 4, label %106
    i4 5, label %121
    i4 1, label %152
    i4 3, label %152
    i4 -8, label %155
    i4 2, label %160
    i4 6, label %163
    i4 7, label %162
  ]

; <label>:104:                                    ; preds = %97
  %105 = and i32 %66, 65535
  br label %238

; <label>:106:                                    ; preds = %97
  %107 = and i32 %66, 65535
  %108 = add i32 %107, %58
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds i16, i16* %35, i64 %109
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = icmp ult i16 %111, -2
  br i1 %113, label %238, label %114

; <label>:114:                                    ; preds = %106
  %115 = icmp eq i16 %111, -2
  br i1 %115, label %116, label %120

; <label>:116:                                    ; preds = %114
  %117 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8
  %118 = tail call fastcc i32 @_ZL20ucnv_MBCSGetFallbackP19UConverterMBCSTablej(%struct.UConverterMBCSTable* nonnull %117, i32 %108)
  %119 = icmp eq i32 %118, 65534
  br i1 %119, label %163, label %176

; <label>:120:                                    ; preds = %114
  store i32 12, i32* %1, align 4
  br label %163

; <label>:121:                                    ; preds = %97
  %122 = and i32 %66, 65535
  %123 = add i32 %122, %58
  %124 = add i32 %123, 1
  %125 = zext i32 %123 to i64
  %126 = getelementptr inbounds i16, i16* %35, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = icmp ult i16 %127, -10240
  br i1 %129, label %238, label %130

; <label>:130:                                    ; preds = %121
  %131 = icmp ult i16 %127, -8192
  br i1 %131, label %132, label %141

; <label>:132:                                    ; preds = %130
  %133 = shl nuw nsw i32 %128, 10
  %134 = and i32 %133, 1047552
  %135 = zext i32 %124 to i64
  %136 = getelementptr inbounds i16, i16* %35, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = add nuw nsw i32 %134, 9216
  %140 = add nuw nsw i32 %139, %138
  br label %238

; <label>:141:                                    ; preds = %130
  %142 = and i32 %128, 65534
  %143 = icmp eq i32 %142, 57344
  br i1 %143, label %144, label %149

; <label>:144:                                    ; preds = %141
  %145 = zext i32 %124 to i64
  %146 = getelementptr inbounds i16, i16* %35, i64 %145
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  br label %238

; <label>:149:                                    ; preds = %141
  %150 = icmp eq i16 %127, -1
  br i1 %150, label %151, label %163

; <label>:151:                                    ; preds = %149
  store i32 12, i32* %1, align 4
  br label %163

; <label>:152:                                    ; preds = %97, %97
  %153 = and i32 %66, 1048575
  %154 = add nuw nsw i32 %153, 65536
  br label %238

; <label>:155:                                    ; preds = %97
  %156 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %10, i64 0, i32 8, i32 1
  %157 = load i8, i8* %156, align 1
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %163, label %159

; <label>:159:                                    ; preds = %155
  store i32 12, i32* %1, align 4
  br label %163

; <label>:160:                                    ; preds = %97
  %161 = and i32 %66, 65535
  br label %238

; <label>:162:                                    ; preds = %97
  store i32 12, i32* %1, align 4
  br label %163

; <label>:163:                                    ; preds = %97, %116, %155, %120, %162, %159, %151, %149
  %164 = phi i8 [ %101, %116 ], [ %101, %120 ], [ %101, %151 ], [ %101, %149 ], [ %57, %159 ], [ %101, %155 ], [ %101, %162 ], [ %101, %97 ]
  %165 = phi i32 [ 65534, %116 ], [ %112, %120 ], [ 65535, %151 ], [ %128, %149 ], [ %56, %159 ], [ %56, %155 ], [ %56, %162 ], [ %56, %97 ]
  %166 = load i32, i32* %1, align 4
  %167 = tail call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %166)
  %168 = icmp eq i8 %167, 0
  br i1 %168, label %169, label %176

; <label>:169:                                    ; preds = %163
  store i32 0, i32* %36, align 8
  %170 = zext i8 %164 to i32
  store i32 %170, i32* %38, align 4
  store i8* %49, i8** %22, align 8
  br label %243

; <label>:171:                                    ; preds = %68, %74, %82
  %172 = phi i32 [ %88, %82 ], [ %56, %74 ], [ %56, %68 ]
  %173 = icmp ult i8* %62, %25
  br i1 %173, label %54, label %174

; <label>:174:                                    ; preds = %171
  %175 = trunc i32 %69 to i8
  br label %176

; <label>:176:                                    ; preds = %48, %174, %116, %163
  %177 = phi i8 [ %101, %116 ], [ %164, %163 ], [ %175, %174 ], [ %51, %48 ]
  %178 = phi i32 [ %118, %116 ], [ %165, %163 ], [ %172, %174 ], [ %52, %48 ]
  %179 = phi i64 [ %61, %116 ], [ %61, %163 ], [ %61, %174 ], [ 0, %48 ]
  %180 = getelementptr inbounds i8, i8* %49, i64 %179
  %181 = icmp slt i32 %178, 0
  br i1 %181, label %182, label %238

; <label>:182:                                    ; preds = %176
  %183 = load i32, i32* %1, align 4
  %184 = tail call fastcc signext i8 @_ZL9U_SUCCESS10UErrorCode(i32 %183)
  %185 = icmp ne i8 %184, 0
  %186 = icmp eq i8* %180, %25
  %187 = and i1 %186, %185
  %188 = icmp sgt i64 %179, 0
  %189 = and i1 %188, %187
  br i1 %189, label %190, label %202

; <label>:190:                                    ; preds = %182
  %191 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %192 = trunc i64 %179 to i8
  %193 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 %192, i8* %193, align 8
  br label %194

; <label>:194:                                    ; preds = %194, %190
  %195 = phi i8* [ %49, %190 ], [ %197, %194 ]
  %196 = phi i8* [ %191, %190 ], [ %199, %194 ]
  %197 = getelementptr inbounds i8, i8* %195, i64 1
  %198 = load i8, i8* %195, align 1
  %199 = getelementptr inbounds i8, i8* %196, i64 1
  store i8 %198, i8* %196, align 1
  %200 = icmp ult i8* %197, %180
  br i1 %200, label %194, label %201

; <label>:201:                                    ; preds = %194
  store i32 11, i32* %1, align 4
  br label %238

; <label>:202:                                    ; preds = %182
  %203 = tail call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %183)
  %204 = icmp eq i8 %203, 0
  br i1 %204, label %237, label %205

; <label>:205:                                    ; preds = %202
  %206 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %9, align 8
  %207 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %206, i64 0, i32 8, i32 1
  %208 = load i8, i8* %207, align 1
  %209 = icmp ne i8 %208, 0
  %210 = zext i1 %209 to i8
  %211 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %212 = getelementptr inbounds i8, i8* %49, i64 1
  %213 = load i8, i8* %49, align 1
  store i8 %213, i8* %211, align 1
  %214 = icmp eq i64 %179, 1
  br i1 %214, label %215, label %217

; <label>:215:                                    ; preds = %205
  %216 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 1, i8* %216, align 8
  br label %238

; <label>:217:                                    ; preds = %205
  %218 = icmp sgt i64 %179, 1
  br i1 %218, label %219, label %233

; <label>:219:                                    ; preds = %217
  %220 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  br label %221

; <label>:221:                                    ; preds = %219, %228
  %222 = phi i8 [ %231, %228 ], [ 1, %219 ]
  %223 = phi i8* [ %230, %228 ], [ %220, %219 ]
  %224 = phi i8* [ %229, %228 ], [ %212, %219 ]
  %225 = load i8, i8* %224, align 1
  %226 = tail call fastcc signext i8 @_ZL14isSingleOrLeadPA256_Kihah([256 x i32]* %33, i8 zeroext %177, i8 signext %210, i8 zeroext %225)
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %228, label %233

; <label>:228:                                    ; preds = %221
  %229 = getelementptr inbounds i8, i8* %224, i64 1
  %230 = getelementptr inbounds i8, i8* %223, i64 1
  store i8 %225, i8* %223, align 1
  %231 = add i8 %222, 1
  %232 = icmp ult i8* %229, %180
  br i1 %232, label %221, label %233

; <label>:233:                                    ; preds = %221, %228, %217
  %234 = phi i8* [ %212, %217 ], [ %229, %228 ], [ %224, %221 ]
  %235 = phi i8 [ 1, %217 ], [ %231, %228 ], [ %222, %221 ]
  %236 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 %235, i8* %236, align 8
  br label %238

; <label>:237:                                    ; preds = %202
  store i32 8, i32* %1, align 4
  br label %238

; <label>:238:                                    ; preds = %160, %152, %144, %132, %121, %106, %104, %90, %201, %237, %233, %215, %176
  %239 = phi i8 [ %177, %176 ], [ %177, %215 ], [ %177, %233 ], [ %177, %237 ], [ %177, %201 ], [ %101, %160 ], [ %101, %152 ], [ %101, %144 ], [ %101, %132 ], [ %101, %121 ], [ %101, %106 ], [ %101, %104 ], [ %96, %90 ]
  %240 = phi i32 [ %178, %176 ], [ 65535, %215 ], [ 65535, %233 ], [ 65535, %237 ], [ 65535, %201 ], [ %161, %160 ], [ %154, %152 ], [ %148, %144 ], [ %140, %132 ], [ %128, %121 ], [ %112, %106 ], [ %105, %104 ], [ %92, %90 ]
  %241 = phi i8* [ %180, %176 ], [ %180, %215 ], [ %234, %233 ], [ %180, %237 ], [ %180, %201 ], [ %62, %160 ], [ %62, %152 ], [ %62, %144 ], [ %62, %132 ], [ %62, %121 ], [ %62, %106 ], [ %62, %104 ], [ %93, %90 ]
  store i32 0, i32* %36, align 8
  %242 = zext i8 %239 to i32
  store i32 %242, i32* %38, align 4
  store i8* %241, i8** %22, align 8
  br label %243

; <label>:243:                                    ; preds = %8, %2, %238, %169, %19
  %244 = phi i32 [ %20, %19 ], [ %240, %238 ], [ -9, %169 ], [ -9, %2 ], [ -9, %8 ]
  ret i32 %244
}

; Function Attrs: norecurse nounwind ssp uwtable
define internal void @_ZL20ucnv_MBCSGetStartersPK10UConverterPaP10UErrorCode(%struct.UConverter* nocapture readonly, i8* nocapture, i32* nocapture readnone) #6 {
  %4 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %5 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %4, align 8
  %6 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %5, i64 0, i32 8, i32 4
  %7 = load [256 x i32]*, [256 x i32]** %6, align 8
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %5, i64 0, i32 8, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  br label %11

; <label>:11:                                     ; preds = %11, %3
  %12 = phi i64 [ 0, %3 ], [ %19, %11 ]
  %13 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 %10, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = lshr i32 %14, 31
  %16 = trunc i32 %15 to i8
  %17 = xor i8 %16, 1
  %18 = getelementptr inbounds i8, i8* %1, i64 %12
  store i8 %17, i8* %18, align 1
  %19 = add nuw nsw i64 %12, 1
  %20 = icmp eq i64 %19, 256
  br i1 %20, label %21, label %11

; <label>:21:                                     ; preds = %11
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @_ZL16ucnv_MBCSGetNamePK10UConverter(%struct.UConverter* nocapture readonly) #4 {
  %2 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 16
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

; <label>:6:                                      ; preds = %1
  %7 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %8 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %8, i64 0, i32 8, i32 20
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %18

; <label>:12:                                     ; preds = %6, %1
  %13 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %14 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %14, i64 0, i32 3
  %16 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %15, align 8
  %17 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %16, i64 0, i32 1, i64 0
  br label %18

; <label>:18:                                     ; preds = %6, %12
  %19 = phi i8* [ %17, %12 ], [ %10, %6 ]
  ret i8* %19
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL17ucnv_MBCSWriteSubP25UConverterFromUnicodeArgsiP10UErrorCode(%struct.UConverterFromUnicodeArgs*, i32, i32*) #0 {
  %4 = alloca [4 x i8], align 1
  %5 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %6 = load %struct.UConverter*, %struct.UConverter** %5, align 8
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  %8 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 24
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %29, label %11

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 6
  %13 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %12, align 8
  %14 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %13, i64 0, i32 8, i32 22
  %15 = load i32*, i32** %14, align 8
  %16 = icmp eq i32* %15, null
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 25
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  br label %26

; <label>:21:                                     ; preds = %11
  %22 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 29, i64 0
  %23 = load i16, i16* %22, align 4
  %24 = icmp ult i16 %23, 256
  %25 = zext i1 %24 to i32
  br label %26

; <label>:26:                                     ; preds = %21, %17
  %27 = phi i32 [ %20, %17 ], [ %25, %21 ]
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %35

; <label>:29:                                     ; preds = %26, %3
  %30 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 5
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 19
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  br label %35

; <label>:35:                                     ; preds = %26, %29
  %36 = phi i8* [ %31, %29 ], [ %8, %26 ]
  %37 = phi i32 [ %34, %29 ], [ 1, %26 ]
  %38 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 25
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 6
  %40 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %39, align 8
  %41 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %40, i64 0, i32 8, i32 14
  %42 = load i8, i8* %41, align 4
  %43 = icmp eq i8 %42, 12
  br i1 %43, label %44, label %76

; <label>:44:                                     ; preds = %35
  switch i32 %37, label %66 [
    i32 1, label %45
    i32 2, label %54
  ]

; <label>:45:                                     ; preds = %44
  %46 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 16
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 2
  br i1 %48, label %49, label %51

; <label>:49:                                     ; preds = %45
  store i32 1, i32* %46, align 8
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  store i8 15, i8* %7, align 1
  br label %51

; <label>:51:                                     ; preds = %49, %45
  %52 = phi i8* [ %50, %49 ], [ %7, %45 ]
  %53 = getelementptr inbounds i8, i8* %52, i64 1
  br label %67

; <label>:54:                                     ; preds = %44
  %55 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %6, i64 0, i32 16
  %56 = load i32, i32* %55, align 8
  %57 = icmp ult i32 %56, 2
  br i1 %57, label %58, label %60

; <label>:58:                                     ; preds = %54
  store i32 2, i32* %55, align 8
  %59 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  store i8 14, i8* %7, align 1
  br label %60

; <label>:60:                                     ; preds = %58, %54
  %61 = phi i8* [ %59, %58 ], [ %7, %54 ]
  %62 = load i8, i8* %36, align 1
  %63 = getelementptr inbounds i8, i8* %61, i64 1
  store i8 %62, i8* %61, align 1
  %64 = getelementptr inbounds i8, i8* %36, i64 1
  %65 = getelementptr inbounds i8, i8* %61, i64 2
  br label %67

; <label>:66:                                     ; preds = %44
  store i32 1, i32* %2, align 4
  br label %79

; <label>:67:                                     ; preds = %60, %51
  %68 = phi i8* [ %63, %60 ], [ %52, %51 ]
  %69 = phi i8* [ %64, %60 ], [ %36, %51 ]
  %70 = phi i8* [ %65, %60 ], [ %53, %51 ]
  %71 = load i8, i8* %69, align 1
  store i8 %71, i8* %68, align 1
  %72 = ptrtoint i8* %70 to i64
  %73 = ptrtoint [4 x i8]* %4 to i64
  %74 = sub i64 %72, %73
  %75 = trunc i64 %74 to i32
  br label %76

; <label>:76:                                     ; preds = %67, %35
  %77 = phi i8* [ %7, %67 ], [ %36, %35 ]
  %78 = phi i32 [ %75, %67 ], [ %37, %35 ]
  call void @ucnv_cbFromUWriteBytes_63(%struct.UConverterFromUnicodeArgs* nonnull %0, i8* %77, i32 %78, i32 %1, i32* %2) #12
  br label %79

; <label>:79:                                     ; preds = %76, %66
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL22ucnv_MBCSGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode(%struct.UConverter* nocapture readonly, %struct.USetAdder*, i32, i32*) #0 {
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %6 = load i32, i32* %5, align 8
  %7 = trunc i32 %6 to i16
  %8 = icmp slt i16 %7, 0
  br i1 %8, label %9, label %16

; <label>:9:                                      ; preds = %4
  %10 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 2
  %11 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %10, align 8
  %12 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %13 = load %struct.USet*, %struct.USet** %12, align 8
  tail call void %11(%struct.USet* %13, i32 0, i32 55295) #12
  %14 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %10, align 8
  %15 = load %struct.USet*, %struct.USet** %12, align 8
  tail call void %14(%struct.USet* %15, i32 57344, i32 1114111) #12
  br label %19

; <label>:16:                                     ; preds = %4
  %17 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %18 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %17, align 8
  tail call void @ucnv_MBCSGetUnicodeSetForUnicode_63(%struct.UConverterSharedData* %18, %struct.USetAdder* %1, i32 %2, i32* %3)
  br label %19

; <label>:19:                                     ; preds = %16, %9
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #7

declare %struct.UConverterSharedData* @ucnv_load_63(%struct.UConverterLoadArgs*, i32*) local_unnamed_addr #2

declare void @ucnv_unload_63(%struct.UConverterSharedData*) local_unnamed_addr #2

; Function Attrs: allocsize(0)
declare noalias i8* @uprv_malloc_63(i64) local_unnamed_addr #8

declare void @udata_getInfo_63(%struct.UDataMemory*, %struct.UDataInfo*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL16reconstituteDataP19UConverterMBCSTablejjjP10UErrorCode(%struct.UConverterMBCSTable* nocapture, i32, i32, i32, i32* nocapture) unnamed_addr #0 {
  %6 = shl i32 %1, 1
  %7 = shl i32 %3, 2
  %8 = add i32 %7, %6
  %9 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 13
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %8, %10
  %12 = zext i32 %11 to i64
  %13 = tail call noalias i8* @uprv_malloc_63(i64 %12) #14
  %14 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 19
  store i8* %13, i8** %14, align 8
  %15 = icmp eq i8* %13, null
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %5
  store i32 7, i32* %4, align 4
  br label %91

; <label>:17:                                     ; preds = %5
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %13, i8 0, i64 %12, i1 false)
  %18 = bitcast i8* %13 to i16*
  %19 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 8
  %20 = bitcast i16** %19 to i8**
  %21 = load i8*, i8** %20, align 8
  %22 = zext i32 %6 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %13, i8* align 2 %21, i64 %22, i1 false)
  %23 = zext i32 %1 to i64
  %24 = getelementptr inbounds i16, i16* %18, i64 %23
  %25 = bitcast i16* %24 to i32*
  %26 = sub i32 %3, %2
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %25, i64 %27
  %29 = bitcast i32* %28 to i8*
  %30 = load i16*, i16** %19, align 8
  %31 = getelementptr inbounds i16, i16* %30, i64 %23
  %32 = bitcast i16* %31 to i8*
  %33 = shl i32 %2, 2
  %34 = zext i32 %33 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 2 %32, i64 %34, i1 false)
  store i8* %13, i8** %20, align 8
  %35 = zext i32 %3 to i64
  %36 = getelementptr inbounds i32, i32* %25, i64 %35
  %37 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 11
  %38 = bitcast i8** %37 to i32**
  store i32* %36, i32** %38, align 8
  %39 = bitcast i8* %13 to i32*
  %40 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 17
  %41 = load i16, i16* %40, align 8
  %42 = zext i16 %41 to i32
  %43 = add nuw nsw i32 %42, 1
  %44 = lshr i32 %43, 6
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %89, label %46

; <label>:46:                                     ; preds = %17
  %47 = sdiv i32 %1, 2
  %48 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 9
  br label %49

; <label>:49:                                     ; preds = %46, %85
  %50 = phi i64 [ 0, %46 ], [ %87, %85 ]
  %51 = phi i32 [ 0, %46 ], [ %86, %85 ]
  %52 = getelementptr inbounds i16, i16* %18, i64 %50
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = icmp eq i32 %47, %54
  br i1 %55, label %85, label %56

; <label>:56:                                     ; preds = %49
  %57 = zext i16 %53 to i64
  %58 = sext i32 %51 to i64
  %59 = add i32 %51, 16
  br label %60

; <label>:60:                                     ; preds = %81, %56
  %61 = phi i64 [ %58, %56 ], [ %64, %81 ]
  %62 = phi i64 [ %57, %56 ], [ %82, %81 ]
  %63 = load i16*, i16** %48, align 8
  %64 = add nsw i64 %61, 1
  %65 = getelementptr inbounds i16, i16* %63, i64 %61
  %66 = load i16, i16* %65, align 2
  %67 = icmp eq i16 %66, 0
  br i1 %67, label %81, label %68

; <label>:68:                                     ; preds = %60
  %69 = lshr i16 %66, 4
  %70 = zext i16 %69 to i32
  %71 = add nuw nsw i32 %70, 1
  %72 = add nuw nsw i64 %62, 1
  %73 = getelementptr inbounds i32, i32* %39, i64 %62
  store i32 %70, i32* %73, align 4
  %74 = add nuw nsw i32 %70, 2
  %75 = add nuw nsw i64 %62, 2
  %76 = getelementptr inbounds i32, i32* %39, i64 %72
  store i32 %71, i32* %76, align 4
  %77 = add nuw nsw i32 %70, 3
  %78 = add nuw nsw i64 %62, 3
  %79 = getelementptr inbounds i32, i32* %39, i64 %75
  store i32 %74, i32* %79, align 4
  %80 = getelementptr inbounds i32, i32* %39, i64 %78
  store i32 %77, i32* %80, align 4
  br label %81

; <label>:81:                                     ; preds = %60, %68
  %82 = add nuw nsw i64 %62, 4
  %83 = trunc i64 %64 to i32
  %84 = icmp eq i32 %59, %83
  br i1 %84, label %85, label %60

; <label>:85:                                     ; preds = %81, %49
  %86 = add i32 %51, 16
  %87 = add nuw i64 %50, 1
  %88 = icmp slt i32 %86, %44
  br i1 %88, label %49, label %89

; <label>:89:                                     ; preds = %85, %17
  %90 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 0
  tail call fastcc void @_ZL22ucnv_MBCSEnumToUnicodeP19UConverterMBCSTablePFaPKvjPiES2_P10UErrorCode(%struct.UConverterMBCSTable* %0, i8* %90)
  br label %91

; <label>:91:                                     ; preds = %89, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL22ucnv_MBCSEnumToUnicodeP19UConverterMBCSTablePFaPKvjPiES2_P10UErrorCode(%struct.UConverterMBCSTable* nocapture readonly, i8* nocapture readonly) unnamed_addr #0 {
  %3 = alloca [128 x i8], align 16
  %4 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -1, i64 128, i1 false)
  %5 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 4
  %6 = load [256 x i32]*, [256 x i32]** %5, align 8
  call fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* %6, i8* nonnull %4, i32 0)
  %7 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 0
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %23, label %10

; <label>:10:                                     ; preds = %2, %18
  %11 = phi i64 [ %19, %18 ], [ 0, %2 ]
  %12 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = icmp sgt i8 %13, 63
  br i1 %14, label %15, label %18

; <label>:15:                                     ; preds = %10
  %16 = trunc i64 %11 to i32
  %17 = call fastcc signext i8 @_ZL7enumToUP19UConverterMBCSTablePaijjPFaPKvjPiES3_P10UErrorCode(%struct.UConverterMBCSTable* nonnull %0, i8* nonnull %4, i32 %16, i32 0, i32 0, i8* %1)
  br label %18

; <label>:18:                                     ; preds = %10, %15
  %19 = add nuw nsw i64 %11, 1
  %20 = load i8, i8* %7, align 8
  %21 = zext i8 %20 to i64
  %22 = icmp ult i64 %19, %21
  br i1 %22, label %10, label %23

; <label>:23:                                     ; preds = %18, %2
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #12
  ret void
}

; Function Attrs: norecurse nounwind ssp uwtable
define internal fastcc signext i8 @_ZL20writeStage3RoundtripPKvjPi(i8* nocapture readonly, i32, i32* nocapture readonly) unnamed_addr #6 {
  %4 = getelementptr inbounds i8, i8* %0, i64 40
  %5 = bitcast i8* %4 to i16**
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds i8, i8* %0, i64 184
  %8 = bitcast i8* %7 to i8**
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 204
  %11 = load i8, i8* %10, align 4
  switch i8 %11, label %28 [
    i8 8, label %12
    i8 9, label %20
  ]

; <label>:12:                                     ; preds = %3
  %13 = icmp ult i32 %1, 65536
  br i1 %13, label %28, label %14

; <label>:14:                                     ; preds = %12
  %15 = icmp ult i32 %1, 9371648
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %14
  %17 = and i32 %1, 32767
  br label %28

; <label>:18:                                     ; preds = %14
  %19 = and i32 %1, 65407
  br label %28

; <label>:20:                                     ; preds = %3
  %21 = icmp ult i32 %1, 16777216
  br i1 %21, label %28, label %22

; <label>:22:                                     ; preds = %20
  %23 = icmp ult i32 %1, -1895825408
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %22
  %25 = and i32 %1, 8388607
  br label %28

; <label>:26:                                     ; preds = %22
  %27 = and i32 %1, 16744447
  br label %28

; <label>:28:                                     ; preds = %3, %20, %26, %24, %12, %18, %16
  %29 = phi i32 [ %1, %3 ], [ %1, %20 ], [ %25, %24 ], [ %27, %26 ], [ %1, %12 ], [ %17, %16 ], [ %19, %18 ]
  %30 = bitcast i16* %6 to i32*
  %31 = bitcast i8* %9 to i16*
  %32 = bitcast i8* %9 to i32*
  br label %33

; <label>:33:                                     ; preds = %81, %28
  %34 = phi i64 [ 0, %28 ], [ %83, %81 ]
  %35 = phi i32 [ %29, %28 ], [ %82, %81 ]
  %36 = getelementptr inbounds i32, i32* %2, i64 %34
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %81, label %39

; <label>:39:                                     ; preds = %33
  %40 = lshr i32 %37, 10
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %6, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i64
  %45 = getelementptr inbounds i32, i32* %30, i64 %44
  %46 = lshr i32 %37, 4
  %47 = and i32 %46, 63
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %45, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = shl i32 %50, 4
  %52 = and i32 %51, 1048560
  %53 = and i32 %37, 15
  %54 = or i32 %52, %53
  %55 = load i8, i8* %10, align 4
  switch i8 %55, label %70 [
    i8 2, label %56
    i8 9, label %56
    i8 3, label %67
  ]

; <label>:56:                                     ; preds = %39, %39
  %57 = mul nuw nsw i32 %54, 3
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %9, i64 %58
  %60 = lshr i32 %35, 16
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %59, align 1
  %62 = lshr i32 %35, 8
  %63 = trunc i32 %62 to i8
  %64 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %63, i8* %64, align 1
  %65 = trunc i32 %35 to i8
  %66 = getelementptr inbounds i8, i8* %59, i64 2
  store i8 %65, i8* %66, align 1
  br label %74

; <label>:67:                                     ; preds = %39
  %68 = zext i32 %54 to i64
  %69 = getelementptr inbounds i32, i32* %32, i64 %68
  store i32 %35, i32* %69, align 4
  br label %74

; <label>:70:                                     ; preds = %39
  %71 = trunc i32 %35 to i16
  %72 = zext i32 %54 to i64
  %73 = getelementptr inbounds i16, i16* %31, i64 %72
  store i16 %71, i16* %73, align 2
  br label %74

; <label>:74:                                     ; preds = %70, %67, %56
  %75 = or i32 %53, 16
  %76 = zext i32 %75 to i64
  %77 = shl i64 1, %76
  %78 = load i32, i32* %49, align 4
  %79 = trunc i64 %77 to i32
  %80 = or i32 %78, %79
  store i32 %80, i32* %49, align 4
  br label %81

; <label>:81:                                     ; preds = %33, %74
  %82 = add i32 %35, 1
  %83 = add nuw nsw i64 %34, 1
  %84 = icmp eq i64 %83, 32
  br i1 %84, label %85, label %33

; <label>:85:                                     ; preds = %81
  ret i8 1
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* readonly, i8*, i32) unnamed_addr #0 {
  %4 = sext i32 %2 to i64
  %5 = getelementptr inbounds i8, i8* %1, i64 %4
  store i8 0, i8* %5, align 1
  br label %6

; <label>:6:                                      ; preds = %28, %3
  %7 = phi i64 [ %29, %28 ], [ 0, %3 ]
  %8 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %4, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = lshr i32 %9, 24
  %11 = and i32 %10, 127
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %1, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, -1
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %6
  tail call fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* nonnull %0, i8* nonnull %1, i32 %11)
  br label %17

; <label>:17:                                     ; preds = %16, %6
  %18 = icmp sgt i32 %9, -1
  br i1 %18, label %19, label %22

; <label>:19:                                     ; preds = %17
  %20 = load i8, i8* %13, align 1
  %21 = icmp sgt i8 %20, -1
  br i1 %21, label %30, label %25

; <label>:22:                                     ; preds = %17
  %23 = and i32 %9, 14680064
  %24 = icmp ult i32 %23, 6291456
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %22, %19
  %26 = icmp eq i64 %7, 255
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %25
  store i8 -64, i8* %5, align 1
  br label %102

; <label>:28:                                     ; preds = %25
  %29 = add nuw nsw i64 %7, 1
  br label %6

; <label>:30:                                     ; preds = %22, %19
  %31 = trunc i64 %7 to i32
  %32 = lshr i32 %31, 5
  %33 = shl nuw nsw i32 %32, 3
  %34 = load i8, i8* %5, align 1
  %35 = trunc i32 %33 to i8
  %36 = or i8 %34, %35
  store i8 %36, i8* %5, align 1
  %37 = icmp ult i32 %31, 255
  br i1 %37, label %38, label %68

; <label>:38:                                     ; preds = %30
  %39 = and i64 %7, 4294967295
  br label %40

; <label>:40:                                     ; preds = %38, %60
  %41 = phi i64 [ 255, %38 ], [ %61, %60 ]
  %42 = phi i32 [ 255, %38 ], [ %62, %60 ]
  %43 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %4, i64 %41
  %44 = load i32, i32* %43, align 4
  %45 = lshr i32 %44, 24
  %46 = and i32 %45, 127
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %1, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, -1
  br i1 %50, label %51, label %52

; <label>:51:                                     ; preds = %40
  tail call fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* nonnull %0, i8* nonnull %1, i32 %46)
  br label %52

; <label>:52:                                     ; preds = %51, %40
  %53 = icmp sgt i32 %44, -1
  br i1 %53, label %54, label %57

; <label>:54:                                     ; preds = %52
  %55 = load i8, i8* %48, align 1
  %56 = icmp sgt i8 %55, -1
  br i1 %56, label %66, label %60

; <label>:57:                                     ; preds = %52
  %58 = and i32 %44, 14680064
  %59 = icmp ult i32 %58, 6291456
  br i1 %59, label %64, label %60

; <label>:60:                                     ; preds = %54, %57
  %61 = add nsw i64 %41, -1
  %62 = add nsw i32 %42, -1
  %63 = icmp ult i64 %39, %61
  br i1 %63, label %40, label %68

; <label>:64:                                     ; preds = %57
  %65 = trunc i64 %41 to i32
  br label %68

; <label>:66:                                     ; preds = %54
  %67 = trunc i64 %41 to i32
  br label %68

; <label>:68:                                     ; preds = %60, %64, %66, %30
  %69 = phi i32 [ 255, %30 ], [ %65, %64 ], [ %67, %66 ], [ %62, %60 ]
  %70 = lshr i32 %69, 5
  %71 = load i8, i8* %5, align 1
  %72 = trunc i32 %70 to i8
  %73 = or i8 %71, %72
  store i8 %73, i8* %5, align 1
  %74 = icmp slt i32 %69, %31
  br i1 %74, label %102, label %75

; <label>:75:                                     ; preds = %68
  %76 = and i64 %7, 4294967295
  %77 = zext i32 %69 to i64
  br label %78

; <label>:78:                                     ; preds = %75, %99
  %79 = phi i64 [ %76, %75 ], [ %100, %99 ]
  %80 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %4, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %81, 24
  %83 = and i32 %82, 127
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %1, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = icmp eq i8 %86, -1
  br i1 %87, label %88, label %89

; <label>:88:                                     ; preds = %78
  tail call fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* nonnull %0, i8* nonnull %1, i32 %83)
  br label %89

; <label>:89:                                     ; preds = %88, %78
  %90 = icmp slt i32 %81, 0
  br i1 %90, label %91, label %99

; <label>:91:                                     ; preds = %89
  %92 = load i8, i8* %85, align 1
  %93 = or i8 %92, 64
  store i8 %93, i8* %85, align 1
  %94 = and i32 %81, 12582912
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %99

; <label>:96:                                     ; preds = %91
  %97 = load i8, i8* %5, align 1
  %98 = or i8 %97, 64
  store i8 %98, i8* %5, align 1
  br label %99

; <label>:99:                                     ; preds = %91, %96, %89
  %100 = add nuw nsw i64 %79, 1
  %101 = icmp ult i64 %79, %77
  br i1 %101, label %78, label %102

; <label>:102:                                    ; preds = %99, %68, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc signext i8 @_ZL7enumToUP19UConverterMBCSTablePaijjPFaPKvjPiES3_P10UErrorCode(%struct.UConverterMBCSTable* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly) unnamed_addr #0 {
  %7 = alloca [32 x i32], align 16
  %8 = bitcast [32 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #12
  %9 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 4
  %10 = load [256 x i32]*, [256 x i32]** %9, align 8
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 6
  %13 = load i16*, i16** %12, align 8
  %14 = shl i32 %4, 8
  %15 = getelementptr inbounds i8, i8* %1, i64 %11
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = shl nsw i32 %17, 2
  %19 = and i32 %18, 224
  %20 = icmp eq i32 %19, 0
  %21 = icmp sgt i8 %16, 63
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %6
  %24 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 0
  store i32 -1, i32* %24, align 16
  br label %25

; <label>:25:                                     ; preds = %23, %6
  %26 = phi i32 [ 1, %23 ], [ %19, %6 ]
  %27 = and i8 %16, 7
  %28 = add nuw nsw i8 %27, 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw nsw i32 %29, 5
  %31 = icmp ult i32 %26, %30
  br i1 %31, label %32, label %123

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 0
  %34 = zext i32 %26 to i64
  %35 = zext i32 %30 to i64
  br label %36

; <label>:36:                                     ; preds = %32, %120
  %37 = phi i64 [ %34, %32 ], [ %109, %120 ]
  %38 = phi i32 [ -1, %32 ], [ %121, %120 ]
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 %11, i64 %37
  %40 = load i32, i32* %39, align 4
  %41 = icmp sgt i32 %40, -1
  br i1 %41, label %42, label %58

; <label>:42:                                     ; preds = %36
  %43 = lshr i32 %40, 24
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %1, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = icmp sgt i8 %46, -1
  br i1 %47, label %48, label %55

; <label>:48:                                     ; preds = %42
  %49 = and i32 %40, 16777215
  %50 = add i32 %49, %3
  %51 = trunc i64 %37 to i32
  %52 = or i32 %14, %51
  %53 = tail call fastcc signext i8 @_ZL7enumToUP19UConverterMBCSTablePaijjPFaPKvjPiES3_P10UErrorCode(%struct.UConverterMBCSTable* %0, i8* nonnull %1, i32 %43, i32 %50, i32 %52, i8* %5)
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %123, label %55

; <label>:55:                                     ; preds = %42, %48
  %56 = and i64 %37, 31
  %57 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 %56
  store i32 -1, i32* %57, align 4
  br label %107

; <label>:58:                                     ; preds = %36
  %59 = lshr i32 %40, 20
  %60 = trunc i32 %59 to i4
  switch i4 %60, label %102 [
    i4 0, label %61
    i4 4, label %63
    i4 5, label %72
    i4 1, label %99
  ]

; <label>:61:                                     ; preds = %58
  %62 = and i32 %40, 65535
  br label %102

; <label>:63:                                     ; preds = %58
  %64 = and i32 %40, 65535
  %65 = add i32 %64, %3
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %13, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = icmp ult i16 %68, -2
  %71 = select i1 %70, i32 %69, i32 -1
  br label %102

; <label>:72:                                     ; preds = %58
  %73 = and i32 %40, 65535
  %74 = add i32 %73, %3
  %75 = add nsw i32 %74, 1
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds i16, i16* %13, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp ult i16 %78, -10240
  br i1 %80, label %102, label %81

; <label>:81:                                     ; preds = %72
  %82 = icmp ult i16 %78, -9216
  br i1 %82, label %83, label %92

; <label>:83:                                     ; preds = %81
  %84 = shl nuw nsw i32 %79, 10
  %85 = and i32 %84, 1047552
  %86 = sext i32 %75 to i64
  %87 = getelementptr inbounds i16, i16* %13, i64 %86
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = add nuw nsw i32 %85, 9216
  %91 = add nuw nsw i32 %90, %89
  br label %102

; <label>:92:                                     ; preds = %81
  %93 = icmp eq i16 %78, -8192
  br i1 %93, label %94, label %102

; <label>:94:                                     ; preds = %92
  %95 = sext i32 %75 to i64
  %96 = getelementptr inbounds i16, i16* %13, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  br label %102

; <label>:99:                                     ; preds = %58
  %100 = and i32 %40, 1048575
  %101 = add nuw nsw i32 %100, 65536
  br label %102

; <label>:102:                                    ; preds = %58, %72, %94, %83, %92, %63, %99, %61
  %103 = phi i32 [ %62, %61 ], [ %71, %63 ], [ %101, %99 ], [ %79, %72 ], [ %91, %83 ], [ %98, %94 ], [ -1, %92 ], [ -1, %58 ]
  %104 = and i64 %37, 31
  %105 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 %104
  store i32 %103, i32* %105, align 4
  %106 = and i32 %103, %38
  br label %107

; <label>:107:                                    ; preds = %55, %102
  %108 = phi i32 [ %106, %102 ], [ %38, %55 ]
  %109 = add nuw nsw i64 %37, 1
  %110 = and i64 %109, 31
  %111 = icmp eq i64 %110, 0
  %112 = icmp sgt i32 %108, -1
  %113 = and i1 %111, %112
  br i1 %113, label %114, label %120

; <label>:114:                                    ; preds = %107
  %115 = trunc i64 %37 to i32
  %116 = add i32 %115, -31
  %117 = or i32 %116, %14
  %118 = call fastcc signext i8 @_ZL20writeStage3RoundtripPKvjPi(i8* %5, i32 %117, i32* nonnull %33)
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %123, label %120

; <label>:120:                                    ; preds = %107, %114
  %121 = phi i32 [ %108, %107 ], [ -1, %114 ]
  %122 = icmp ult i64 %109, %35
  br i1 %122, label %36, label %123

; <label>:123:                                    ; preds = %120, %114, %48, %25
  %124 = phi i8 [ 1, %25 ], [ 0, %48 ], [ 0, %114 ], [ 1, %120 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #12
  ret i8 %124
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, %struct.UConverterToUnicodeArgs* nocapture, i32*) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 2
  %8 = load %struct.UConverter*, %struct.UConverter** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %10 = load %struct.UConverter*, %struct.UConverter** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 4
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %16 = bitcast i8** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast i8** %4 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %21, %17
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 6
  %25 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %24, align 8
  %26 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 8
  %27 = load i16*, i16** %26, align 8
  %28 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 10, i64 0
  %29 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 7
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, 16
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 12
  %34 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 11
  %35 = select i1 %32, i8** %34, i8** %33
  %36 = bitcast i8** %35 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 18
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 11
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  %43 = select i1 %42, i32 3072, i32 2048
  %44 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 15
  %45 = load i8, i8* %44, align 1
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 12
  %48 = load i8, i8* %47, align 8
  %49 = icmp sgt i8 %48, 0
  br i1 %49, label %50, label %56

; <label>:50:                                     ; preds = %3
  %51 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  %52 = load i32, i32* %51, align 4
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  %55 = load i32, i32* %54, align 8
  br label %56

; <label>:56:                                     ; preds = %3, %50
  %57 = phi i8 [ %53, %50 ], [ 0, %3 ]
  %58 = phi i32 [ %55, %50 ], [ 0, %3 ]
  %59 = phi i8 [ %48, %50 ], [ 0, %3 ]
  %60 = ptrtoint i8* %14 to i64
  %61 = ptrtoint i8* %12 to i64
  %62 = sub i64 %60, %61
  %63 = trunc i64 %62 to i32
  %64 = sext i8 %57 to i32
  %65 = sext i8 %59 to i32
  %66 = sub nsw i32 %65, %64
  %67 = add i32 %66, %63
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %98

; <label>:69:                                     ; preds = %56
  %70 = getelementptr inbounds i8, i8* %14, i64 -1
  %71 = load i8, i8* %70, align 1
  %72 = icmp sgt i8 %71, -1
  br i1 %72, label %98, label %73

; <label>:73:                                     ; preds = %69
  %74 = icmp slt i8 %71, -64
  %75 = icmp sgt i32 %67, 1
  %76 = and i1 %75, %74
  br i1 %76, label %77, label %94

; <label>:77:                                     ; preds = %73
  %78 = getelementptr inbounds i8, i8* %14, i64 -2
  %79 = load i8, i8* %78, align 1
  %80 = and i8 %79, -16
  %81 = icmp eq i8 %80, -32
  br i1 %81, label %82, label %98

; <label>:82:                                     ; preds = %77
  %83 = and i8 %79, 15
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = sext i8 %86 to i32
  %88 = lshr i8 %71, 5
  %89 = zext i8 %88 to i32
  %90 = shl i32 1, %89
  %91 = and i32 %90, %87
  %92 = icmp eq i32 %91, 0
  %93 = select i1 %92, i8* %14, i8* %78
  br label %98

; <label>:94:                                     ; preds = %73
  %95 = add i8 %71, 62
  %96 = icmp ult i8 %95, 46
  %97 = select i1 %96, i8* %70, i8* %14
  br label %98

; <label>:98:                                     ; preds = %94, %82, %69, %77, %56
  %99 = phi i8* [ %14, %56 ], [ %14, %69 ], [ %14, %77 ], [ %93, %82 ], [ %97, %94 ]
  %100 = icmp ne i32 %58, 0
  %101 = icmp sgt i32 %23, 0
  %102 = and i1 %101, %100
  br i1 %102, label %107, label %103

; <label>:103:                                    ; preds = %353, %378, %98
  %104 = phi i32 [ %23, %98 ], [ %357, %353 ], [ %382, %378 ]
  %105 = phi i8* [ %12, %98 ], [ %350, %353 ], [ %350, %378 ]
  %106 = icmp ult i8* %105, %99
  br i1 %106, label %109, label %384

; <label>:107:                                    ; preds = %98
  %108 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 0, i32* %108, align 8
  store i8 0, i8* %47, align 8
  br label %217

; <label>:109:                                    ; preds = %103, %126
  %110 = phi i8* [ %127, %126 ], [ %105, %103 ]
  %111 = phi i32 [ %128, %126 ], [ %104, %103 ]
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %383

; <label>:113:                                    ; preds = %109
  %114 = getelementptr inbounds i8, i8* %110, i64 1
  %115 = load i8, i8* %110, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp sgt i8 %115, -1
  br i1 %117, label %118, label %138

; <label>:118:                                    ; preds = %113
  %119 = lshr i32 %116, 2
  %120 = shl i32 1, %119
  %121 = and i32 %120, %39
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %130, label %123

; <label>:123:                                    ; preds = %118
  %124 = load i8*, i8** %4, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 1
  store i8* %125, i8** %4, align 8
  store i8 %115, i8* %124, align 1
  br label %126

; <label>:126:                                    ; preds = %123, %160, %189
  %127 = phi i8* [ %114, %123 ], [ %149, %160 ], [ %178, %189 ]
  %128 = add nsw i32 %111, -1
  %129 = icmp ult i8* %127, %99
  br i1 %129, label %109, label %384

; <label>:130:                                    ; preds = %118
  %131 = zext i8 %115 to i32
  %132 = load i16, i16* %28, align 2
  %133 = zext i16 %132 to i32
  %134 = add nuw nsw i32 %133, %131
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i16, i16* %37, i64 %135
  %137 = load i16, i16* %136, align 2
  br label %346

; <label>:138:                                    ; preds = %113
  %139 = icmp ult i8 %115, -32
  br i1 %139, label %140, label %164

; <label>:140:                                    ; preds = %138
  %141 = icmp ugt i8 %115, -63
  br i1 %141, label %142, label %215

; <label>:142:                                    ; preds = %140
  %143 = load i8, i8* %114, align 1
  %144 = xor i8 %143, -128
  %145 = zext i8 %144 to i32
  %146 = icmp ult i8 %144, 64
  br i1 %146, label %147, label %206

; <label>:147:                                    ; preds = %142
  %148 = and i32 %116, 31
  %149 = getelementptr inbounds i8, i8* %110, i64 2
  %150 = zext i32 %148 to i64
  %151 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 10, i64 %150
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = add nuw nsw i32 %153, %145
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i16, i16* %37, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = zext i16 %157 to i32
  %159 = icmp ugt i32 %43, %158
  br i1 %159, label %195, label %160

; <label>:160:                                    ; preds = %147
  %161 = trunc i16 %157 to i8
  %162 = load i8*, i8** %4, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 1
  store i8* %163, i8** %4, align 8
  store i8 %161, i8* %162, align 1
  br label %126

; <label>:164:                                    ; preds = %138
  %165 = icmp eq i8 %115, -32
  br i1 %165, label %166, label %202

; <label>:166:                                    ; preds = %164
  %167 = load i8, i8* %114, align 1
  %168 = xor i8 %167, -128
  %169 = and i8 %168, -32
  %170 = icmp eq i8 %169, 32
  br i1 %170, label %171, label %206

; <label>:171:                                    ; preds = %166
  %172 = getelementptr inbounds i8, i8* %110, i64 2
  %173 = load i8, i8* %172, align 1
  %174 = xor i8 %173, -128
  %175 = zext i8 %174 to i32
  %176 = icmp ult i8 %174, 64
  br i1 %176, label %177, label %206

; <label>:177:                                    ; preds = %171
  %178 = getelementptr inbounds i8, i8* %110, i64 3
  %179 = zext i8 %168 to i64
  %180 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 10, i64 %179
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = add nuw nsw i32 %182, %175
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds i16, i16* %37, i64 %184
  %186 = load i16, i16* %185, align 2
  %187 = zext i16 %186 to i32
  %188 = icmp ugt i32 %43, %187
  br i1 %188, label %193, label %189

; <label>:189:                                    ; preds = %177
  %190 = trunc i16 %186 to i8
  %191 = load i8*, i8** %4, align 8
  %192 = getelementptr inbounds i8, i8* %191, i64 1
  store i8* %192, i8** %4, align 8
  store i8 %190, i8* %191, align 1
  br label %126

; <label>:193:                                    ; preds = %177
  %194 = zext i8 %168 to i32
  br label %195

; <label>:195:                                    ; preds = %147, %193
  %196 = phi i32 [ %194, %193 ], [ %148, %147 ]
  %197 = phi i32 [ %175, %193 ], [ %145, %147 ]
  %198 = phi i16 [ %186, %193 ], [ %157, %147 ]
  %199 = phi i8* [ %178, %193 ], [ %149, %147 ]
  %200 = shl nuw nsw i32 %196, 6
  %201 = or i32 %200, %197
  br label %346

; <label>:202:                                    ; preds = %164
  %203 = zext i8 %115 to i32
  %204 = add i8 %115, 62
  %205 = icmp ult i8 %204, 51
  br i1 %205, label %208, label %217

; <label>:206:                                    ; preds = %142, %171, %166
  %207 = zext i8 %115 to i32
  br label %208

; <label>:208:                                    ; preds = %206, %202
  %209 = phi i32 [ %207, %206 ], [ %203, %202 ]
  %210 = icmp ugt i8 %115, -33
  %211 = zext i1 %210 to i8
  %212 = icmp ugt i8 %115, -17
  %213 = select i1 %212, i8 3, i8 2
  %214 = add nuw nsw i8 %213, %211
  br label %217

; <label>:215:                                    ; preds = %140
  %216 = zext i8 %115 to i32
  br label %217

; <label>:217:                                    ; preds = %208, %202, %215, %107
  %218 = phi i8 [ %57, %107 ], [ %214, %208 ], [ 0, %202 ], [ 0, %215 ]
  %219 = phi i32 [ %58, %107 ], [ %209, %208 ], [ %203, %202 ], [ %216, %215 ]
  %220 = phi i8 [ %59, %107 ], [ 1, %208 ], [ 1, %202 ], [ 1, %215 ]
  %221 = phi i8 [ %59, %107 ], [ 0, %208 ], [ 0, %202 ], [ 0, %215 ]
  %222 = phi i32 [ %23, %107 ], [ %111, %208 ], [ %111, %202 ], [ %111, %215 ]
  %223 = phi i8* [ %12, %107 ], [ %114, %208 ], [ %114, %202 ], [ %114, %215 ]
  %224 = sext i8 %220 to i32
  %225 = sext i8 %218 to i32
  %226 = icmp slt i8 %220, %218
  br i1 %226, label %227, label %284

; <label>:227:                                    ; preds = %217
  %228 = sext i8 %218 to i32
  br label %229

; <label>:229:                                    ; preds = %227, %240
  %230 = phi i32 [ %224, %227 ], [ %242, %240 ]
  %231 = phi i8* [ %223, %227 ], [ %241, %240 ]
  %232 = phi i8 [ %220, %227 ], [ %243, %240 ]
  %233 = phi i32 [ %219, %227 ], [ %246, %240 ]
  %234 = load i8*, i8** %13, align 8
  %235 = icmp ult i8* %231, %234
  br i1 %235, label %236, label %248

; <label>:236:                                    ; preds = %229
  %237 = load i8, i8* %231, align 1
  %238 = call signext i8 @_ZN6icu_634UTF812isValidTrailEihii(i32 %233, i8 zeroext %237, i32 %230, i32 %225)
  %239 = icmp eq i8 %238, 0
  br i1 %239, label %282, label %240

; <label>:240:                                    ; preds = %236
  %241 = getelementptr inbounds i8, i8* %231, i64 1
  %242 = add nuw nsw i32 %230, 1
  %243 = add nsw i8 %232, 1
  %244 = shl i32 %233, 6
  %245 = zext i8 %237 to i32
  %246 = add nsw i32 %244, %245
  %247 = icmp slt i32 %242, %228
  br i1 %247, label %229, label %284

; <label>:248:                                    ; preds = %229
  %249 = trunc i32 %230 to i8
  %250 = sext i8 %221 to i32
  %251 = sub nsw i32 %230, %250
  %252 = sext i32 %251 to i64
  %253 = sub nsw i64 0, %252
  %254 = getelementptr inbounds i8, i8* %231, i64 %253
  %255 = icmp slt i8 %221, %249
  br i1 %255, label %256, label %277

; <label>:256:                                    ; preds = %248
  %257 = zext i8 %221 to i64
  %258 = xor i8 %221, -1
  %259 = add i8 %258, %249
  %260 = zext i8 %259 to i64
  %261 = add nuw nsw i64 %257, %260
  %262 = add nuw nsw i64 %261, 1
  %263 = zext i32 %230 to i64
  %264 = sub nsw i64 %262, %263
  %265 = and i32 %230, 255
  %266 = zext i32 %265 to i64
  br label %267

; <label>:267:                                    ; preds = %267, %256
  %268 = phi i64 [ %257, %256 ], [ %272, %267 ]
  %269 = phi i8* [ %254, %256 ], [ %270, %267 ]
  %270 = getelementptr inbounds i8, i8* %269, i64 1
  %271 = load i8, i8* %269, align 1
  %272 = add nuw nsw i64 %268, 1
  %273 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %268
  store i8 %271, i8* %273, align 1
  %274 = icmp eq i64 %272, %266
  br i1 %274, label %275, label %267

; <label>:275:                                    ; preds = %267
  %276 = getelementptr i8, i8* %231, i64 %264
  br label %277

; <label>:277:                                    ; preds = %275, %248
  %278 = phi i8* [ %254, %248 ], [ %276, %275 ]
  %279 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 %233, i32* %279, align 8
  store i8 %249, i8* %47, align 8
  %280 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  store i32 %225, i32* %280, align 4
  store i8* %278, i8** %11, align 8
  %281 = load i64, i64* %18, align 8
  store i64 %281, i64* %16, align 8
  br label %443

; <label>:282:                                    ; preds = %236
  %283 = trunc i32 %230 to i8
  br label %284

; <label>:284:                                    ; preds = %240, %282, %217
  %285 = phi i32 [ %219, %217 ], [ %233, %282 ], [ %246, %240 ]
  %286 = phi i8 [ %220, %217 ], [ %283, %282 ], [ %243, %240 ]
  %287 = phi i8* [ %223, %217 ], [ %231, %282 ], [ %241, %240 ]
  %288 = phi i32 [ %224, %217 ], [ %230, %282 ], [ %242, %240 ]
  %289 = icmp eq i8 %286, %218
  br i1 %289, label %290, label %298

; <label>:290:                                    ; preds = %284
  %291 = sext i8 %286 to i64
  %292 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZL12utf8_offsets, i64 0, i64 %291
  %293 = load i32, i32* %292, align 4
  %294 = sub nsw i32 %285, %293
  %295 = icmp sgt i8 %286, 3
  %296 = icmp eq i8 %46, 0
  %297 = and i1 %295, %296
  br i1 %297, label %346, label %328

; <label>:298:                                    ; preds = %284
  %299 = sext i8 %221 to i32
  %300 = sub nsw i32 %288, %299
  %301 = sext i32 %300 to i64
  %302 = sub nsw i64 0, %301
  %303 = getelementptr inbounds i8, i8* %287, i64 %302
  %304 = icmp slt i8 %221, %286
  br i1 %304, label %305, label %325

; <label>:305:                                    ; preds = %298
  %306 = zext i8 %221 to i64
  %307 = xor i8 %221, -1
  %308 = add i8 %286, %307
  %309 = zext i8 %308 to i64
  %310 = add nuw nsw i64 %306, %309
  %311 = add nuw nsw i64 %310, 1
  %312 = zext i32 %288 to i64
  %313 = sub nsw i64 %311, %312
  %314 = zext i8 %286 to i64
  br label %315

; <label>:315:                                    ; preds = %315, %305
  %316 = phi i64 [ %306, %305 ], [ %320, %315 ]
  %317 = phi i8* [ %303, %305 ], [ %318, %315 ]
  %318 = getelementptr inbounds i8, i8* %317, i64 1
  %319 = load i8, i8* %317, align 1
  %320 = add nuw nsw i64 %316, 1
  %321 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %316
  store i8 %319, i8* %321, align 1
  %322 = icmp eq i64 %320, %314
  br i1 %322, label %323, label %315

; <label>:323:                                    ; preds = %315
  %324 = getelementptr i8, i8* %287, i64 %313
  br label %325

; <label>:325:                                    ; preds = %323, %298
  %326 = phi i8* [ %303, %298 ], [ %324, %323 ]
  store i8 %286, i8* %47, align 8
  store i8* %326, i8** %11, align 8
  %327 = load i64, i64* %18, align 8
  store i64 %327, i64* %16, align 8
  store i32 12, i32* %2, align 4
  br label %443

; <label>:328:                                    ; preds = %290
  %329 = ashr i32 %294, 10
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i16, i16* %27, i64 %330
  %332 = load i16, i16* %331, align 2
  %333 = zext i16 %332 to i32
  %334 = lshr i32 %294, 4
  %335 = and i32 %334, 63
  %336 = add nuw nsw i32 %335, %333
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds i16, i16* %27, i64 %337
  %339 = load i16, i16* %338, align 2
  %340 = zext i16 %339 to i32
  %341 = and i32 %294, 15
  %342 = add nuw nsw i32 %341, %340
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds i16, i16* %37, i64 %343
  %345 = load i16, i16* %344, align 2
  br label %346

; <label>:346:                                    ; preds = %290, %195, %328, %130
  %347 = phi i32 [ %131, %130 ], [ %201, %195 ], [ %294, %328 ], [ %294, %290 ]
  %348 = phi i16 [ %137, %130 ], [ %198, %195 ], [ %345, %328 ], [ 0, %290 ]
  %349 = phi i32 [ %111, %130 ], [ %111, %195 ], [ %222, %328 ], [ %222, %290 ]
  %350 = phi i8* [ %114, %130 ], [ %199, %195 ], [ %287, %328 ], [ %287, %290 ]
  %351 = zext i16 %348 to i32
  %352 = icmp ugt i32 %43, %351
  br i1 %352, label %358, label %353

; <label>:353:                                    ; preds = %346
  %354 = trunc i16 %348 to i8
  %355 = load i8*, i8** %4, align 8
  %356 = getelementptr inbounds i8, i8* %355, i64 1
  store i8* %356, i8** %4, align 8
  store i8 %354, i8* %355, align 1
  %357 = add nsw i32 %349, -1
  br label %103

; <label>:358:                                    ; preds = %346
  %359 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %359) #12
  store i16* @_ZZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul, i16** %5, align 8
  %360 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %24, align 8
  %361 = load i8*, i8** %4, align 8
  %362 = sext i32 %349 to i64
  %363 = getelementptr inbounds i8, i8* %361, i64 %362
  %364 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %365 = load i8, i8* %364, align 2
  %366 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %10, %struct.UConverterSharedData* %360, i32 %347, i16** nonnull %5, i16* nonnull @_ZZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul, i8** nonnull %4, i8* %363, i32** null, i32 -1, i8 signext %365, i32* %2)
  %367 = load i32, i32* %2, align 4
  %368 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %367)
  %369 = icmp eq i8 %368, 0
  br i1 %369, label %372, label %370

; <label>:370:                                    ; preds = %358
  %371 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 17
  store i32 %366, i32* %371, align 4
  br label %377

; <label>:372:                                    ; preds = %358
  %373 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 31
  %374 = load i32, i32* %373, align 8
  %375 = icmp sgt i32 %374, -1
  br i1 %375, label %376, label %378

; <label>:376:                                    ; preds = %372
  store i32 -127, i32* %2, align 4
  br label %377

; <label>:377:                                    ; preds = %370, %376
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %359) #12
  br label %384

; <label>:378:                                    ; preds = %372
  %379 = load i64, i64* %20, align 8
  %380 = load i64, i64* %18, align 8
  %381 = sub i64 %379, %380
  %382 = trunc i64 %381 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %359) #12
  br label %103

; <label>:383:                                    ; preds = %109
  store i32 15, i32* %2, align 4
  br label %384

; <label>:384:                                    ; preds = %126, %103, %377, %383
  %385 = phi i8* [ %110, %383 ], [ %350, %377 ], [ %105, %103 ], [ %127, %126 ]
  %386 = ptrtoint i8* %385 to i64
  %387 = load i32, i32* %2, align 4
  %388 = call fastcc signext i8 @_ZL9U_SUCCESS10UErrorCode(i32 %387)
  %389 = icmp eq i8 %388, 0
  br i1 %389, label %440, label %390

; <label>:390:                                    ; preds = %384
  %391 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 31
  %392 = load i32, i32* %391, align 8
  %393 = icmp slt i32 %392, 0
  br i1 %393, label %394, label %440

; <label>:394:                                    ; preds = %390
  %395 = load i8*, i8** %13, align 8
  %396 = ptrtoint i8* %395 to i64
  %397 = icmp ult i8* %385, %395
  br i1 %397, label %398, label %440

; <label>:398:                                    ; preds = %394
  %399 = load i8, i8* %385, align 1
  %400 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 0
  store i8 %399, i8* %400, align 1
  %401 = zext i8 %399 to i32
  %402 = icmp sgt i8 %399, -1
  br i1 %402, label %412, label %403

; <label>:403:                                    ; preds = %398
  %404 = add i8 %399, 62
  %405 = icmp ult i8 %404, 51
  br i1 %405, label %406, label %412

; <label>:406:                                    ; preds = %403
  %407 = icmp ugt i8 %399, -33
  %408 = zext i1 %407 to i32
  %409 = icmp ugt i8 %399, -17
  %410 = select i1 %409, i32 3, i32 2
  %411 = add nuw nsw i32 %410, %408
  br label %412

; <label>:412:                                    ; preds = %406, %403, %398
  %413 = phi i32 [ 1, %398 ], [ %411, %406 ], [ 0, %403 ]
  %414 = getelementptr inbounds i8, i8* %385, i64 1
  %415 = icmp ult i8* %414, %395
  br i1 %415, label %416, label %434

; <label>:416:                                    ; preds = %412
  %417 = trunc i64 %386 to i8
  br label %418

; <label>:418:                                    ; preds = %418, %416
  %419 = phi i8* [ %429, %418 ], [ %414, %416 ]
  %420 = phi i8 [ %423, %418 ], [ 1, %416 ]
  %421 = phi i32 [ %428, %418 ], [ %401, %416 ]
  %422 = load i8, i8* %419, align 1
  %423 = add i8 %420, 1
  %424 = sext i8 %420 to i64
  %425 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %424
  store i8 %422, i8* %425, align 1
  %426 = shl i32 %421, 6
  %427 = zext i8 %422 to i32
  %428 = add nsw i32 %426, %427
  %429 = getelementptr inbounds i8, i8* %419, i64 1
  %430 = icmp eq i8* %429, %395
  br i1 %430, label %431, label %418

; <label>:431:                                    ; preds = %418
  %432 = trunc i64 %396 to i8
  %433 = sub i8 %432, %417
  br label %434

; <label>:434:                                    ; preds = %431, %412
  %435 = phi i32 [ %401, %412 ], [ %428, %431 ]
  %436 = phi i8 [ 1, %412 ], [ %433, %431 ]
  %437 = phi i8* [ %414, %412 ], [ %429, %431 ]
  %438 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 %435, i32* %438, align 8
  store i8 %436, i8* %47, align 8
  %439 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  store i32 %413, i32* %439, align 4
  br label %440

; <label>:440:                                    ; preds = %384, %434, %394, %390
  %441 = phi i8* [ %437, %434 ], [ %385, %394 ], [ %385, %390 ], [ %385, %384 ]
  store i8* %441, i8** %11, align 8
  %442 = load i64, i64* %18, align 8
  store i64 %442, i64* %16, align 8
  br label %443

; <label>:443:                                    ; preds = %440, %325, %277
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

; Function Attrs: inlinehint norecurse nounwind ssp uwtable
define linkonce_odr hidden signext i8 @_ZN6icu_634UTF812isValidTrailEihii(i32, i8 zeroext, i32, i32) local_unnamed_addr #9 comdat align 2 {
  %5 = icmp slt i32 %3, 3
  %6 = icmp sgt i32 %2, 1
  %7 = or i1 %6, %5
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %4
  %9 = icmp slt i8 %1, -64
  %10 = zext i1 %9 to i8
  br label %32

; <label>:11:                                     ; preds = %4
  %12 = icmp eq i32 %3, 3
  br i1 %12, label %13, label %23

; <label>:13:                                     ; preds = %11
  %14 = and i32 %0, 15
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = lshr i8 %1, 5
  %19 = zext i8 %18 to i32
  %20 = shl i32 1, %19
  %21 = trunc i32 %20 to i8
  %22 = and i8 %17, %21
  br label %32

; <label>:23:                                     ; preds = %11
  %24 = lshr i8 %1, 4
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.1, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = and i32 %0, 7
  %29 = shl i32 1, %28
  %30 = trunc i32 %29 to i8
  %31 = and i8 %27, %30
  br label %32

; <label>:32:                                     ; preds = %23, %13, %8
  %33 = phi i8 [ %10, %8 ], [ %22, %13 ], [ %31, %23 ]
  ret i8 %33
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, %struct.UConverterToUnicodeArgs* nocapture, i32*) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 2
  %8 = load %struct.UConverter*, %struct.UConverter** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %10 = load %struct.UConverter*, %struct.UConverter** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 4
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %16 = bitcast i8** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast i8** %4 to i64*
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %21, %17
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 6
  %25 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %24, align 8
  %26 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 8
  %27 = load i16*, i16** %26, align 8
  %28 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 9
  %29 = load i16*, i16** %28, align 8
  %30 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 7
  %31 = load i32, i32* %30, align 8
  %32 = and i32 %31, 16
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 12
  %35 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 11
  %36 = select i1 %33, i8** %35, i8** %34
  %37 = bitcast i8** %36 to i16**
  %38 = load i16*, i16** %37, align 8
  %39 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 18
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %25, i64 0, i32 8, i32 15
  %42 = load i8, i8* %41, align 1
  %43 = and i8 %42, 1
  %44 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 12
  %45 = load i8, i8* %44, align 8
  %46 = icmp sgt i8 %45, 0
  br i1 %46, label %47, label %53

; <label>:47:                                     ; preds = %3
  %48 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  %49 = load i32, i32* %48, align 4
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  %52 = load i32, i32* %51, align 8
  br label %53

; <label>:53:                                     ; preds = %3, %47
  %54 = phi i8 [ %50, %47 ], [ 0, %3 ]
  %55 = phi i32 [ %52, %47 ], [ 0, %3 ]
  %56 = phi i8 [ %45, %47 ], [ 0, %3 ]
  %57 = ptrtoint i8* %14 to i64
  %58 = ptrtoint i8* %12 to i64
  %59 = sub i64 %57, %58
  %60 = trunc i64 %59 to i32
  %61 = sext i8 %54 to i32
  %62 = sext i8 %56 to i32
  %63 = sub nsw i32 %62, %61
  %64 = add i32 %63, %60
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %95

; <label>:66:                                     ; preds = %53
  %67 = getelementptr inbounds i8, i8* %14, i64 -1
  %68 = load i8, i8* %67, align 1
  %69 = icmp sgt i8 %68, -1
  br i1 %69, label %95, label %70

; <label>:70:                                     ; preds = %66
  %71 = icmp slt i8 %68, -64
  %72 = icmp sgt i32 %64, 1
  %73 = and i1 %72, %71
  br i1 %73, label %74, label %91

; <label>:74:                                     ; preds = %70
  %75 = getelementptr inbounds i8, i8* %14, i64 -2
  %76 = load i8, i8* %75, align 1
  %77 = and i8 %76, -16
  %78 = icmp eq i8 %77, -32
  br i1 %78, label %79, label %95

; <label>:79:                                     ; preds = %74
  %80 = and i8 %76, 15
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = lshr i8 %68, 5
  %86 = zext i8 %85 to i32
  %87 = shl i32 1, %86
  %88 = and i32 %87, %84
  %89 = icmp eq i32 %88, 0
  %90 = select i1 %89, i8* %14, i8* %75
  br label %95

; <label>:91:                                     ; preds = %70
  %92 = add i8 %68, 62
  %93 = icmp ult i8 %92, 46
  %94 = select i1 %93, i8* %67, i8* %14
  br label %95

; <label>:95:                                     ; preds = %91, %79, %66, %74, %53
  %96 = phi i8* [ %14, %53 ], [ %14, %66 ], [ %14, %74 ], [ %90, %79 ], [ %94, %91 ]
  %97 = icmp ne i32 %55, 0
  %98 = icmp sgt i32 %23, 0
  %99 = and i1 %98, %97
  br i1 %99, label %100, label %403

; <label>:100:                                    ; preds = %95
  %101 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 0, i32* %101, align 8
  store i8 0, i8* %44, align 8
  br label %200

; <label>:102:                                    ; preds = %403, %116
  %103 = phi i8* [ %107, %116 ], [ %405, %403 ]
  %104 = phi i32 [ %119, %116 ], [ %404, %403 ]
  %105 = icmp sgt i32 %104, 0
  br i1 %105, label %106, label %407

; <label>:106:                                    ; preds = %102
  %107 = getelementptr inbounds i8, i8* %103, i64 1
  %108 = load i8, i8* %103, align 1
  %109 = icmp sgt i8 %108, -1
  br i1 %109, label %110, label %130

; <label>:110:                                    ; preds = %106
  %111 = lshr i8 %108, 2
  %112 = zext i8 %111 to i32
  %113 = shl i32 1, %112
  %114 = and i32 %113, %40
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %121, label %116

; <label>:116:                                    ; preds = %110
  %117 = load i8*, i8** %4, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 1
  store i8* %118, i8** %4, align 8
  store i8 %108, i8* %117, align 1
  %119 = add nsw i32 %104, -1
  %120 = icmp ult i8* %107, %96
  br i1 %120, label %102, label %408

; <label>:121:                                    ; preds = %110
  %122 = zext i8 %108 to i32
  %123 = load i16, i16* %29, align 2
  %124 = zext i16 %123 to i32
  %125 = add nuw nsw i32 %124, %122
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i16, i16* %38, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = icmp eq i16 %128, 0
  br i1 %129, label %375, label %350

; <label>:130:                                    ; preds = %106
  %131 = zext i8 %108 to i32
  %132 = icmp ugt i8 %108, -33
  br i1 %132, label %133, label %170

; <label>:133:                                    ; preds = %130
  %134 = icmp ult i8 %108, -18
  br i1 %134, label %135, label %192

; <label>:135:                                    ; preds = %133
  %136 = and i32 %131, 15
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = sext i8 %139 to i32
  %141 = load i8, i8* %107, align 1
  %142 = zext i8 %141 to i32
  %143 = lshr i32 %142, 5
  %144 = shl i32 1, %143
  %145 = and i32 %144, %140
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %195, label %147

; <label>:147:                                    ; preds = %135
  %148 = getelementptr inbounds i8, i8* %103, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = xor i8 %149, -128
  %151 = zext i8 %150 to i32
  %152 = icmp ult i8 %150, 64
  br i1 %152, label %153, label %195

; <label>:153:                                    ; preds = %147
  %154 = shl nuw nsw i32 %136, 6
  %155 = and i32 %142, 63
  %156 = or i32 %155, %154
  %157 = getelementptr inbounds i8, i8* %103, i64 3
  %158 = zext i32 %156 to i64
  %159 = getelementptr inbounds i16, i16* %29, i64 %158
  %160 = load i16, i16* %159, align 2
  %161 = zext i16 %160 to i32
  %162 = add nuw nsw i32 %161, %151
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds i16, i16* %38, i64 %163
  %165 = load i16, i16* %164, align 2
  %166 = icmp eq i16 %165, 0
  br i1 %166, label %167, label %350

; <label>:167:                                    ; preds = %153
  %168 = shl nuw nsw i32 %156, 6
  %169 = or i32 %168, %151
  br label %375

; <label>:170:                                    ; preds = %130
  %171 = icmp ugt i8 %108, -63
  br i1 %171, label %172, label %200

; <label>:172:                                    ; preds = %170
  %173 = load i8, i8* %107, align 1
  %174 = xor i8 %173, -128
  %175 = zext i8 %174 to i32
  %176 = icmp ult i8 %174, 64
  br i1 %176, label %177, label %195

; <label>:177:                                    ; preds = %172
  %178 = and i32 %131, 31
  %179 = getelementptr inbounds i8, i8* %103, i64 2
  %180 = zext i32 %178 to i64
  %181 = getelementptr inbounds i16, i16* %29, i64 %180
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = add nuw nsw i32 %183, %175
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i16, i16* %38, i64 %185
  %187 = load i16, i16* %186, align 2
  %188 = icmp eq i16 %187, 0
  br i1 %188, label %189, label %350

; <label>:189:                                    ; preds = %177
  %190 = shl nuw nsw i32 %178, 6
  %191 = or i32 %190, %175
  br label %375

; <label>:192:                                    ; preds = %133
  %193 = add i8 %108, 62
  %194 = icmp ult i8 %193, 51
  br i1 %194, label %195, label %200

; <label>:195:                                    ; preds = %172, %147, %135, %192
  %196 = zext i1 %132 to i8
  %197 = icmp ugt i8 %108, -17
  %198 = select i1 %197, i8 3, i8 2
  %199 = add nuw nsw i8 %198, %196
  br label %200

; <label>:200:                                    ; preds = %195, %192, %170, %100
  %201 = phi i8 [ %54, %100 ], [ %199, %195 ], [ 0, %192 ], [ 0, %170 ]
  %202 = phi i32 [ %55, %100 ], [ %131, %195 ], [ %131, %192 ], [ %131, %170 ]
  %203 = phi i8 [ %56, %100 ], [ 1, %195 ], [ 1, %192 ], [ 1, %170 ]
  %204 = phi i8 [ %56, %100 ], [ 0, %195 ], [ 0, %192 ], [ 0, %170 ]
  %205 = phi i32 [ %23, %100 ], [ %104, %195 ], [ %104, %192 ], [ %104, %170 ]
  %206 = phi i8* [ %12, %100 ], [ %107, %195 ], [ %107, %192 ], [ %107, %170 ]
  %207 = sext i8 %203 to i32
  %208 = sext i8 %201 to i32
  %209 = icmp slt i8 %203, %201
  br i1 %209, label %210, label %267

; <label>:210:                                    ; preds = %200
  %211 = sext i8 %201 to i32
  br label %212

; <label>:212:                                    ; preds = %210, %223
  %213 = phi i32 [ %207, %210 ], [ %225, %223 ]
  %214 = phi i8* [ %206, %210 ], [ %224, %223 ]
  %215 = phi i8 [ %203, %210 ], [ %226, %223 ]
  %216 = phi i32 [ %202, %210 ], [ %229, %223 ]
  %217 = load i8*, i8** %13, align 8
  %218 = icmp ult i8* %214, %217
  br i1 %218, label %219, label %231

; <label>:219:                                    ; preds = %212
  %220 = load i8, i8* %214, align 1
  %221 = call signext i8 @_ZN6icu_634UTF812isValidTrailEihii(i32 %216, i8 zeroext %220, i32 %213, i32 %208)
  %222 = icmp eq i8 %221, 0
  br i1 %222, label %265, label %223

; <label>:223:                                    ; preds = %219
  %224 = getelementptr inbounds i8, i8* %214, i64 1
  %225 = add nuw nsw i32 %213, 1
  %226 = add nsw i8 %215, 1
  %227 = shl i32 %216, 6
  %228 = zext i8 %220 to i32
  %229 = add nsw i32 %227, %228
  %230 = icmp slt i32 %225, %211
  br i1 %230, label %212, label %267

; <label>:231:                                    ; preds = %212
  %232 = trunc i32 %213 to i8
  %233 = sext i8 %204 to i32
  %234 = sub nsw i32 %213, %233
  %235 = sext i32 %234 to i64
  %236 = sub nsw i64 0, %235
  %237 = getelementptr inbounds i8, i8* %214, i64 %236
  %238 = icmp slt i8 %204, %232
  br i1 %238, label %239, label %260

; <label>:239:                                    ; preds = %231
  %240 = zext i8 %204 to i64
  %241 = xor i8 %204, -1
  %242 = add i8 %241, %232
  %243 = zext i8 %242 to i64
  %244 = add nuw nsw i64 %240, %243
  %245 = add nuw nsw i64 %244, 1
  %246 = zext i32 %213 to i64
  %247 = sub nsw i64 %245, %246
  %248 = and i32 %213, 255
  %249 = zext i32 %248 to i64
  br label %250

; <label>:250:                                    ; preds = %250, %239
  %251 = phi i64 [ %240, %239 ], [ %255, %250 ]
  %252 = phi i8* [ %237, %239 ], [ %253, %250 ]
  %253 = getelementptr inbounds i8, i8* %252, i64 1
  %254 = load i8, i8* %252, align 1
  %255 = add nuw nsw i64 %251, 1
  %256 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %251
  store i8 %254, i8* %256, align 1
  %257 = icmp eq i64 %255, %249
  br i1 %257, label %258, label %250

; <label>:258:                                    ; preds = %250
  %259 = getelementptr i8, i8* %214, i64 %247
  br label %260

; <label>:260:                                    ; preds = %258, %231
  %261 = phi i8* [ %237, %231 ], [ %259, %258 ]
  %262 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 %216, i32* %262, align 8
  store i8 %232, i8* %44, align 8
  %263 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  store i32 %208, i32* %263, align 4
  store i8* %261, i8** %11, align 8
  %264 = load i64, i64* %18, align 8
  store i64 %264, i64* %16, align 8
  br label %467

; <label>:265:                                    ; preds = %219
  %266 = trunc i32 %213 to i8
  br label %267

; <label>:267:                                    ; preds = %223, %265, %200
  %268 = phi i32 [ %202, %200 ], [ %216, %265 ], [ %229, %223 ]
  %269 = phi i8 [ %203, %200 ], [ %266, %265 ], [ %226, %223 ]
  %270 = phi i8* [ %206, %200 ], [ %214, %265 ], [ %224, %223 ]
  %271 = phi i32 [ %207, %200 ], [ %213, %265 ], [ %225, %223 ]
  %272 = icmp eq i8 %269, %201
  br i1 %272, label %273, label %281

; <label>:273:                                    ; preds = %267
  %274 = sext i8 %269 to i64
  %275 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZL12utf8_offsets, i64 0, i64 %274
  %276 = load i32, i32* %275, align 4
  %277 = sub nsw i32 %268, %276
  %278 = icmp sgt i8 %269, 3
  %279 = icmp eq i8 %43, 0
  %280 = and i1 %278, %279
  br i1 %280, label %324, label %311

; <label>:281:                                    ; preds = %267
  %282 = sext i8 %204 to i32
  %283 = sub nsw i32 %271, %282
  %284 = sext i32 %283 to i64
  %285 = sub nsw i64 0, %284
  %286 = getelementptr inbounds i8, i8* %270, i64 %285
  %287 = icmp slt i8 %204, %269
  br i1 %287, label %288, label %308

; <label>:288:                                    ; preds = %281
  %289 = zext i8 %204 to i64
  %290 = xor i8 %204, -1
  %291 = add i8 %269, %290
  %292 = zext i8 %291 to i64
  %293 = add nuw nsw i64 %289, %292
  %294 = add nuw nsw i64 %293, 1
  %295 = zext i32 %271 to i64
  %296 = sub nsw i64 %294, %295
  %297 = zext i8 %269 to i64
  br label %298

; <label>:298:                                    ; preds = %298, %288
  %299 = phi i64 [ %289, %288 ], [ %303, %298 ]
  %300 = phi i8* [ %286, %288 ], [ %301, %298 ]
  %301 = getelementptr inbounds i8, i8* %300, i64 1
  %302 = load i8, i8* %300, align 1
  %303 = add nuw nsw i64 %299, 1
  %304 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %299
  store i8 %302, i8* %304, align 1
  %305 = icmp eq i64 %303, %297
  br i1 %305, label %306, label %298

; <label>:306:                                    ; preds = %298
  %307 = getelementptr i8, i8* %270, i64 %296
  br label %308

; <label>:308:                                    ; preds = %306, %281
  %309 = phi i8* [ %286, %281 ], [ %307, %306 ]
  store i8 %269, i8* %44, align 8
  store i8* %309, i8** %11, align 8
  %310 = load i64, i64* %18, align 8
  store i64 %310, i64* %16, align 8
  store i32 12, i32* %2, align 4
  br label %467

; <label>:311:                                    ; preds = %273
  %312 = bitcast i16* %27 to i32*
  %313 = ashr i32 %277, 10
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds i16, i16* %27, i64 %314
  %316 = load i16, i16* %315, align 2
  %317 = zext i16 %316 to i32
  %318 = lshr i32 %277, 4
  %319 = and i32 %318, 63
  %320 = add nuw nsw i32 %319, %317
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds i32, i32* %312, i64 %321
  %323 = load i32, i32* %322, align 4
  br label %324

; <label>:324:                                    ; preds = %273, %311
  %325 = phi i32 [ %323, %311 ], [ 0, %273 ]
  %326 = shl i32 %325, 4
  %327 = and i32 %326, 1048560
  %328 = and i32 %277, 15
  %329 = or i32 %327, %328
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds i16, i16* %38, i64 %330
  %332 = load i16, i16* %331, align 2
  %333 = or i32 %328, 16
  %334 = shl i32 1, %333
  %335 = and i32 %325, %334
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %350

; <label>:337:                                    ; preds = %324
  %338 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 11
  %339 = load i8, i8* %338, align 1
  %340 = icmp ne i8 %339, 0
  %341 = add nsw i32 %277, -57344
  %342 = icmp ult i32 %341, 6400
  %343 = or i1 %342, %340
  %344 = add nsw i32 %277, -983040
  %345 = icmp ult i32 %344, 131072
  %346 = or i1 %345, %343
  %347 = xor i1 %346, true
  %348 = icmp eq i16 %332, 0
  %349 = or i1 %348, %347
  br i1 %349, label %375, label %350

; <label>:350:                                    ; preds = %153, %177, %337, %324, %121
  %351 = phi i16 [ %128, %121 ], [ %332, %337 ], [ %332, %324 ], [ %165, %153 ], [ %187, %177 ]
  %352 = phi i32 [ %104, %121 ], [ %205, %337 ], [ %205, %324 ], [ %104, %153 ], [ %104, %177 ]
  %353 = phi i8* [ %107, %121 ], [ %270, %337 ], [ %270, %324 ], [ %157, %153 ], [ %179, %177 ]
  %354 = icmp ult i16 %351, 256
  br i1 %354, label %355, label %359

; <label>:355:                                    ; preds = %350
  %356 = trunc i16 %351 to i8
  %357 = load i8*, i8** %4, align 8
  %358 = getelementptr inbounds i8, i8* %357, i64 1
  store i8* %358, i8** %4, align 8
  store i8 %356, i8* %357, align 1
  br label %372

; <label>:359:                                    ; preds = %350
  %360 = lshr i16 %351, 8
  %361 = trunc i16 %360 to i8
  %362 = load i8*, i8** %4, align 8
  %363 = getelementptr inbounds i8, i8* %362, i64 1
  store i8* %363, i8** %4, align 8
  store i8 %361, i8* %362, align 1
  %364 = icmp sgt i32 %352, 1
  %365 = trunc i16 %351 to i8
  br i1 %364, label %366, label %369

; <label>:366:                                    ; preds = %359
  %367 = load i8*, i8** %4, align 8
  %368 = getelementptr inbounds i8, i8* %367, i64 1
  store i8* %368, i8** %4, align 8
  store i8 %365, i8* %367, align 1
  br label %372

; <label>:369:                                    ; preds = %359
  %370 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 27, i64 0
  store i8 %365, i8* %370, align 8
  %371 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 21
  store i8 1, i8* %371, align 1
  store i32 15, i32* %2, align 4
  br label %408

; <label>:372:                                    ; preds = %366, %355
  %373 = phi i32 [ -2, %366 ], [ -1, %355 ]
  %374 = add nsw i32 %352, %373
  br label %403

; <label>:375:                                    ; preds = %337, %121, %189, %167
  %376 = phi i32 [ %169, %167 ], [ %191, %189 ], [ %122, %121 ], [ %277, %337 ]
  %377 = phi i32 [ %104, %167 ], [ %104, %189 ], [ %104, %121 ], [ %205, %337 ]
  %378 = phi i8* [ %157, %167 ], [ %179, %189 ], [ %107, %121 ], [ %270, %337 ]
  %379 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %379) #12
  store i16* @_ZZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul, i16** %5, align 8
  %380 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %24, align 8
  %381 = load i8*, i8** %4, align 8
  %382 = sext i32 %377 to i64
  %383 = getelementptr inbounds i8, i8* %381, i64 %382
  %384 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %385 = load i8, i8* %384, align 2
  %386 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %10, %struct.UConverterSharedData* %380, i32 %376, i16** nonnull %5, i16* nonnull @_ZZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul, i8** nonnull %4, i8* %383, i32** null, i32 -1, i8 signext %385, i32* %2)
  %387 = load i32, i32* %2, align 4
  %388 = call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %387)
  %389 = icmp eq i8 %388, 0
  br i1 %389, label %392, label %390

; <label>:390:                                    ; preds = %375
  %391 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 17
  store i32 %386, i32* %391, align 4
  br label %397

; <label>:392:                                    ; preds = %375
  %393 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 31
  %394 = load i32, i32* %393, align 8
  %395 = icmp sgt i32 %394, -1
  br i1 %395, label %396, label %398

; <label>:396:                                    ; preds = %392
  store i32 -127, i32* %2, align 4
  br label %397

; <label>:397:                                    ; preds = %390, %396
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %379) #12
  br label %408

; <label>:398:                                    ; preds = %392
  %399 = load i64, i64* %20, align 8
  %400 = load i64, i64* %18, align 8
  %401 = sub i64 %399, %400
  %402 = trunc i64 %401 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %379) #12
  br label %403

; <label>:403:                                    ; preds = %372, %95, %398
  %404 = phi i32 [ %23, %95 ], [ %402, %398 ], [ %374, %372 ]
  %405 = phi i8* [ %12, %95 ], [ %378, %398 ], [ %353, %372 ]
  %406 = icmp ult i8* %405, %96
  br i1 %406, label %102, label %408

; <label>:407:                                    ; preds = %102
  store i32 15, i32* %2, align 4
  br label %408

; <label>:408:                                    ; preds = %116, %403, %397, %407, %369
  %409 = phi i8* [ %103, %407 ], [ %353, %369 ], [ %378, %397 ], [ %405, %403 ], [ %107, %116 ]
  %410 = ptrtoint i8* %409 to i64
  %411 = load i32, i32* %2, align 4
  %412 = call fastcc signext i8 @_ZL9U_SUCCESS10UErrorCode(i32 %411)
  %413 = icmp eq i8 %412, 0
  br i1 %413, label %464, label %414

; <label>:414:                                    ; preds = %408
  %415 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %10, i64 0, i32 31
  %416 = load i32, i32* %415, align 8
  %417 = icmp slt i32 %416, 0
  br i1 %417, label %418, label %464

; <label>:418:                                    ; preds = %414
  %419 = load i8*, i8** %13, align 8
  %420 = ptrtoint i8* %419 to i64
  %421 = icmp ult i8* %409, %419
  br i1 %421, label %422, label %464

; <label>:422:                                    ; preds = %418
  %423 = load i8, i8* %409, align 1
  %424 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 0
  store i8 %423, i8* %424, align 1
  %425 = zext i8 %423 to i32
  %426 = icmp sgt i8 %423, -1
  br i1 %426, label %436, label %427

; <label>:427:                                    ; preds = %422
  %428 = add i8 %423, 62
  %429 = icmp ult i8 %428, 51
  br i1 %429, label %430, label %436

; <label>:430:                                    ; preds = %427
  %431 = icmp ugt i8 %423, -33
  %432 = zext i1 %431 to i32
  %433 = icmp ugt i8 %423, -17
  %434 = select i1 %433, i32 3, i32 2
  %435 = add nuw nsw i32 %434, %432
  br label %436

; <label>:436:                                    ; preds = %430, %427, %422
  %437 = phi i32 [ 1, %422 ], [ %435, %430 ], [ 0, %427 ]
  %438 = getelementptr inbounds i8, i8* %409, i64 1
  %439 = icmp ult i8* %438, %419
  br i1 %439, label %440, label %458

; <label>:440:                                    ; preds = %436
  %441 = trunc i64 %410 to i8
  br label %442

; <label>:442:                                    ; preds = %442, %440
  %443 = phi i8* [ %453, %442 ], [ %438, %440 ]
  %444 = phi i8 [ %447, %442 ], [ 1, %440 ]
  %445 = phi i32 [ %452, %442 ], [ %425, %440 ]
  %446 = load i8, i8* %443, align 1
  %447 = add i8 %444, 1
  %448 = sext i8 %444 to i64
  %449 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %448
  store i8 %446, i8* %449, align 1
  %450 = shl i32 %445, 6
  %451 = zext i8 %446 to i32
  %452 = add nsw i32 %450, %451
  %453 = getelementptr inbounds i8, i8* %443, i64 1
  %454 = icmp eq i8* %453, %419
  br i1 %454, label %455, label %442

; <label>:455:                                    ; preds = %442
  %456 = trunc i64 %420 to i8
  %457 = sub i8 %456, %441
  br label %458

; <label>:458:                                    ; preds = %455, %436
  %459 = phi i32 [ %425, %436 ], [ %452, %455 ]
  %460 = phi i8 [ 1, %436 ], [ %457, %455 ]
  %461 = phi i8* [ %438, %436 ], [ %453, %455 ]
  %462 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 %459, i32* %462, align 8
  store i8 %460, i8* %44, align 8
  %463 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  store i32 %437, i32* %463, align 4
  br label %464

; <label>:464:                                    ; preds = %408, %458, %418, %414
  %465 = phi i8* [ %461, %458 ], [ %409, %418 ], [ %409, %414 ], [ %409, %408 ]
  store i8* %465, i8** %11, align 8
  %466 = load i64, i64* %18, align 8
  store i64 %466, i64* %16, align 8
  br label %467

; <label>:467:                                    ; preds = %464, %308, %260
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

declare void @uprv_free_63(i8*) local_unnamed_addr #2

declare void @umtx_lock_63(%struct.UMutex*) local_unnamed_addr #2

declare void @umtx_unlock_63(%struct.UMutex*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc signext i8 @_ZL15_EBCDICSwapLFNLP20UConverterSharedDataP10UErrorCode(%struct.UConverterSharedData* nocapture, i32* nocapture) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 8
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  %6 = load i8*, i8** %5, align 8
  %7 = bitcast i8* %6 to i16*
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  %9 = load i8, i8* %8, align 4
  switch i8 %9, label %159 [
    i8 0, label %10
    i8 12, label %10
  ]

; <label>:10:                                     ; preds = %2, %2
  %11 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %12 = load [256 x i32]*, [256 x i32]** %11, align 8
  %13 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 37
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, -2147483638
  br i1 %15, label %16, label %159

; <label>:16:                                     ; preds = %10
  %17 = getelementptr inbounds [256 x i32], [256 x i32]* %12, i64 0, i64 21
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, -2147483515
  br i1 %19, label %20, label %159

; <label>:20:                                     ; preds = %16
  %21 = icmp eq i8 %9, 0
  br i1 %21, label %22, label %41

; <label>:22:                                     ; preds = %20
  %23 = load i16, i16* %4, align 2
  %24 = zext i16 %23 to i64
  %25 = getelementptr inbounds i16, i16* %4, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i64
  %28 = add nuw nsw i64 %27, 10
  %29 = getelementptr inbounds i16, i16* %7, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = icmp eq i16 %30, 3877
  br i1 %31, label %32, label %159

; <label>:32:                                     ; preds = %22
  %33 = add nuw nsw i64 %24, 8
  %34 = getelementptr inbounds i16, i16* %4, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i64
  %37 = add nuw nsw i64 %36, 5
  %38 = getelementptr inbounds i16, i16* %7, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = icmp eq i16 %39, 3861
  br i1 %40, label %71, label %159

; <label>:41:                                     ; preds = %20
  %42 = bitcast i16* %4 to i32*
  %43 = load i16, i16* %4, align 2
  %44 = zext i16 %43 to i64
  %45 = getelementptr inbounds i32, i32* %42, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %46, 67108864
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %159, label %49

; <label>:49:                                     ; preds = %41
  %50 = shl i32 %46, 4
  %51 = and i32 %50, 1048560
  %52 = or i32 %51, 10
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %7, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = icmp eq i16 %55, 37
  br i1 %56, label %57, label %159

; <label>:57:                                     ; preds = %49
  %58 = add nuw nsw i64 %44, 8
  %59 = getelementptr inbounds i32, i32* %42, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = and i32 %60, 2097152
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %159, label %63

; <label>:63:                                     ; preds = %57
  %64 = shl i32 %60, 4
  %65 = and i32 %64, 1048560
  %66 = or i32 %65, 5
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds i16, i16* %7, i64 %67
  %69 = load i16, i16* %68, align 2
  %70 = icmp eq i16 %69, 21
  br i1 %70, label %71, label %159

; <label>:71:                                     ; preds = %63, %32
  %72 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 13
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %85, label %75

; <label>:75:                                     ; preds = %71
  %76 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 0
  %77 = load i8, i8* %76, align 8
  %78 = zext i8 %77 to i32
  %79 = shl nuw nsw i32 %78, 10
  %80 = add i32 %73, 80
  %81 = add i32 %80, %79
  %82 = zext i32 %81 to i64
  %83 = tail call noalias i8* @uprv_malloc_63(i64 %82) #14
  %84 = icmp eq i8* %83, null
  br i1 %84, label %86, label %87

; <label>:85:                                     ; preds = %71
  store i32 3, i32* %1, align 4
  br label %159

; <label>:86:                                     ; preds = %75
  store i32 7, i32* %1, align 4
  br label %159

; <label>:87:                                     ; preds = %75
  %88 = bitcast i8* %83 to [256 x i32]*
  %89 = bitcast [256 x i32]** %11 to i8**
  %90 = load i8*, i8** %89, align 8
  %91 = load i8, i8* %76, align 8
  %92 = zext i8 %91 to i64
  %93 = shl nuw nsw i64 %92, 10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* align 4 %90, i64 %93, i1 false)
  %94 = getelementptr inbounds i8, i8* %83, i64 148
  %95 = bitcast i8* %94 to i32*
  store i32 -2147483515, i32* %95, align 4
  %96 = getelementptr inbounds i8, i8* %83, i64 84
  %97 = bitcast i8* %96 to i32*
  store i32 -2147483638, i32* %97, align 4
  %98 = getelementptr inbounds [256 x i32], [256 x i32]* %88, i64 %92, i64 0
  %99 = bitcast i32* %98 to i16*
  %100 = bitcast i32* %98 to i8*
  %101 = zext i32 %73 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %100, i8* nonnull align 1 %6, i64 %101, i1 false)
  %102 = load i8, i8* %8, align 4
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %104, label %119

; <label>:104:                                    ; preds = %87
  %105 = load i16, i16* %4, align 2
  %106 = zext i16 %105 to i64
  %107 = getelementptr inbounds i16, i16* %4, i64 %106
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i64
  %110 = add nuw nsw i64 %109, 10
  %111 = getelementptr inbounds i16, i16* %99, i64 %110
  store i16 3861, i16* %111, align 2
  %112 = load i16, i16* %4, align 2
  %113 = zext i16 %112 to i64
  %114 = add nuw nsw i64 %113, 8
  %115 = getelementptr inbounds i16, i16* %4, i64 %114
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i64
  %118 = add nuw nsw i64 %117, 5
  br label %139

; <label>:119:                                    ; preds = %87
  %120 = bitcast i16* %4 to i32*
  %121 = load i16, i16* %4, align 2
  %122 = zext i16 %121 to i64
  %123 = getelementptr inbounds i32, i32* %120, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = shl i32 %124, 4
  %126 = and i32 %125, 1048560
  %127 = or i32 %126, 10
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds i16, i16* %99, i64 %128
  store i16 21, i16* %129, align 2
  %130 = load i16, i16* %4, align 2
  %131 = zext i16 %130 to i64
  %132 = add nuw nsw i64 %131, 8
  %133 = getelementptr inbounds i32, i32* %120, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = shl i32 %134, 4
  %136 = and i32 %135, 1048560
  %137 = or i32 %136, 5
  %138 = zext i32 %137 to i64
  br label %139

; <label>:139:                                    ; preds = %119, %104
  %140 = phi i64 [ %138, %119 ], [ %118, %104 ]
  %141 = phi i16 [ 37, %119 ], [ 3877, %104 ]
  %142 = getelementptr inbounds i16, i16* %99, i64 %140
  store i16 %141, i16* %142, align 2
  %143 = getelementptr inbounds i8, i8* %100, i64 %101
  %144 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 3
  %145 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %144, align 8
  %146 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %145, i64 0, i32 1, i64 0
  %147 = tail call i8* @strcpy(i8* %143, i8* nonnull %146) #12
  %148 = tail call i64 @strlen(i8* %143)
  %149 = getelementptr i8, i8* %143, i64 %148
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %149, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i64 10, i1 false)
  tail call void @umtx_lock_63(%struct.UMutex* null) #12
  %150 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 5
  %151 = load [256 x i32]*, [256 x i32]** %150, align 8
  %152 = icmp eq [256 x i32]* %151, null
  br i1 %152, label %153, label %158

; <label>:153:                                    ; preds = %139
  %154 = bitcast [256 x i32]** %150 to i8**
  store i8* %83, i8** %154, align 8
  %155 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 12
  %156 = bitcast i8** %155 to i32**
  store i32* %98, i32** %156, align 8
  %157 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 20
  store i8* %143, i8** %157, align 8
  tail call void @umtx_unlock_63(%struct.UMutex* null) #12
  br label %159

; <label>:158:                                    ; preds = %139
  tail call void @umtx_unlock_63(%struct.UMutex* null) #12
  tail call void @uprv_free_63(i8* nonnull %83) #12
  br label %159

; <label>:159:                                    ; preds = %153, %158, %63, %57, %49, %41, %22, %32, %10, %16, %2, %86, %85
  %160 = phi i8 [ 0, %86 ], [ 0, %85 ], [ 0, %2 ], [ 0, %16 ], [ 0, %10 ], [ 0, %32 ], [ 0, %22 ], [ 0, %41 ], [ 0, %49 ], [ 0, %57 ], [ 0, %63 ], [ 1, %158 ], [ 1, %153 ]
  ret i8 %160
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8* nocapture readonly) local_unnamed_addr #10

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) local_unnamed_addr #7

; Function Attrs: norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZL27ucnv_MBCSSingleGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 7
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 16
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 6
  %14 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %14, i64 0, i32 8, i32 5
  %16 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %14, i64 0, i32 8, i32 4
  %17 = select i1 %12, [256 x i32]** %16, [256 x i32]** %15
  %18 = load [256 x i32]*, [256 x i32]** %17, align 8
  br label %19

; <label>:19:                                     ; preds = %31, %2
  %20 = phi i8* [ %6, %2 ], [ %23, %31 ]
  %21 = icmp ult i8* %20, %8
  br i1 %21, label %22, label %45

; <label>:22:                                     ; preds = %19
  %23 = getelementptr inbounds i8, i8* %20, i64 1
  %24 = load i8, i8* %20, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [256 x i32], [256 x i32]* %18, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  store i8* %23, i8** %5, align 8
  %28 = icmp slt i32 %27, -2146435072
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %22
  %30 = and i32 %27, 65535
  br label %46

; <label>:31:                                     ; preds = %22
  %32 = lshr i32 %27, 20
  %33 = trunc i32 %32 to i4
  switch i4 %33, label %19 [
    i4 1, label %34
    i4 3, label %34
    i4 2, label %37
    i4 6, label %40
    i4 7, label %39
  ]

; <label>:34:                                     ; preds = %31, %31
  %35 = and i32 %27, 1048575
  %36 = add nuw nsw i32 %35, 65536
  br label %46

; <label>:37:                                     ; preds = %31
  %38 = and i32 %27, 65535
  br label %46

; <label>:39:                                     ; preds = %31
  store i32 12, i32* %1, align 4
  br label %40

; <label>:40:                                     ; preds = %31, %39
  %41 = load i32, i32* %1, align 4
  %42 = tail call fastcc signext i8 @_ZL9U_FAILURE10UErrorCode(i32 %41)
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %45

; <label>:44:                                     ; preds = %40
  store i8* %20, i8** %5, align 8
  br label %46

; <label>:45:                                     ; preds = %19, %40
  store i32 8, i32* %1, align 4
  br label %46

; <label>:46:                                     ; preds = %45, %44, %37, %34, %29
  %47 = phi i32 [ %30, %29 ], [ %36, %34 ], [ %38, %37 ], [ 65535, %45 ], [ -9, %44 ]
  ret i32 %47
}

declare void @ucnv_cbFromUWriteBytes_63(%struct.UConverterFromUnicodeArgs*, i8*, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc signext i8 @_ZL18hasValidTrailBytesPA256_Kih([256 x i32]* nocapture readonly, i8 zeroext) unnamed_addr #5 {
  %3 = zext i8 %1 to i64
  %4 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 161
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, -1
  %7 = and i32 %5, 15728640
  %8 = icmp eq i32 %7, 7340032
  %9 = or i1 %6, %8
  br i1 %9, label %10, label %41

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 65
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, -1
  %14 = and i32 %12, 15728640
  %15 = icmp eq i32 %14, 7340032
  %16 = or i1 %13, %15
  br i1 %16, label %19, label %41

; <label>:17:                                     ; preds = %19
  %18 = icmp ult i64 %27, 256
  br i1 %18, label %19, label %28

; <label>:19:                                     ; preds = %10, %17
  %20 = phi i64 [ %27, %17 ], [ 0, %10 ]
  %21 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp sgt i32 %22, -1
  %24 = and i32 %22, 15728640
  %25 = icmp eq i32 %24, 7340032
  %26 = or i1 %23, %25
  %27 = add nuw nsw i64 %20, 1
  br i1 %26, label %17, label %41

; <label>:28:                                     ; preds = %17, %38
  %29 = phi i64 [ %39, %38 ], [ 0, %17 ]
  %30 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, -1
  br i1 %32, label %33, label %38

; <label>:33:                                     ; preds = %28
  %34 = lshr i32 %31, 24
  %35 = trunc i32 %34 to i8
  %36 = tail call fastcc signext i8 @_ZL18hasValidTrailBytesPA256_Kih([256 x i32]* nonnull %0, i8 zeroext %35)
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %41

; <label>:38:                                     ; preds = %33, %28
  %39 = add nuw nsw i64 %29, 1
  %40 = icmp ult i64 %39, 256
  br i1 %40, label %28, label %41

; <label>:41:                                     ; preds = %19, %38, %33, %10, %2
  %42 = phi i8 [ 1, %2 ], [ 1, %10 ], [ 0, %38 ], [ 1, %33 ], [ 1, %19 ]
  ret i8 %42
}

declare signext i8 @ucnv_extInitialMatchToU_63(%struct.UConverter*, i32*, i32, i8**, i8*, i16**, i16*, i32**, i32, i8 signext, i32*) local_unnamed_addr #2

declare void @ucnv_toUWriteCodePoint_63(%struct.UConverter*, i32, i16**, i16*, i32**, i32, i32*) local_unnamed_addr #2

declare signext i8 @ucnv_extInitialMatchFromU_63(%struct.UConverter*, i32*, i32, i16**, i16*, i8**, i8*, i32**, i32, i8 signext, i32*) local_unnamed_addr #2

declare void @ucnv_fromUWriteBytes_63(%struct.UConverter*, i8*, i32, i8**, i8*, i32**, i32, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nounwind readonly }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
