; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/invert.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/invert.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_matrix_inversion_f(float* nocapture, float* nocapture, i32) local_unnamed_addr #0 {
  %4 = shl i32 %2, 4
  %5 = zext i32 %4 to i64
  %6 = tail call noalias i8* @malloc(i64 %5) #4
  %7 = icmp eq i8* %6, null
  br i1 %7, label %23, label %8

; <label>:8:                                      ; preds = %3
  %9 = shl i32 %2, 2
  %10 = bitcast i8* %6 to i32*
  %11 = zext i32 %9 to i64
  %12 = getelementptr inbounds i8, i8* %6, i64 %11
  %13 = bitcast i8* %12 to float*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 0, i64 %11, i1 false)
  %14 = tail call fastcc i32 @opj_lupDecompose(float* %0, i32* %10, float* %13, i32 %2)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %8
  tail call void @free(i8* nonnull %6) #4
  br label %23

; <label>:17:                                     ; preds = %8
  %18 = zext i32 %2 to i64
  %19 = getelementptr inbounds float, float* %13, i64 %18
  %20 = shl i32 %2, 1
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %13, i64 %21
  tail call fastcc void @opj_lupInvert(float* %0, float* %1, i32 %2, i32* %10, float* %13, float* %19, float* %22)
  tail call void @free(i8* nonnull %6) #4
  br label %23

; <label>:23:                                     ; preds = %3, %17, %16
  %24 = phi i32 [ 1, %17 ], [ 0, %16 ], [ 0, %3 ]
  ret i32 %24
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_lupDecompose(float* nocapture, i32* nocapture, float* nocapture, i32) unnamed_addr #0 {
  %5 = add i32 %3, -1
  %6 = shl i32 %3, 2
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %10, label %18

; <label>:8:                                      ; preds = %18
  %9 = icmp eq i32 %5, 0
  br i1 %9, label %120, label %10

; <label>:10:                                     ; preds = %4, %8
  %11 = zext i32 %3 to i64
  %12 = zext i32 %3 to i64
  %13 = bitcast float* %2 to i8*
  %14 = zext i32 %6 to i64
  %15 = add i32 %3, -2
  %16 = zext i32 %3 to i64
  %17 = zext i32 %5 to i64
  br label %24

; <label>:18:                                     ; preds = %4, %18
  %19 = phi i32* [ %21, %18 ], [ %1, %4 ]
  %20 = phi i32 [ %22, %18 ], [ 0, %4 ]
  %21 = getelementptr inbounds i32, i32* %19, i64 1
  store i32 %20, i32* %19, align 4
  %22 = add nuw i32 %20, 1
  %23 = icmp eq i32 %22, %3
  br i1 %23, label %8, label %18

; <label>:24:                                     ; preds = %10, %112
  %25 = phi i64 [ 0, %10 ], [ %117, %112 ]
  %26 = phi i32 [ %15, %10 ], [ %119, %112 ]
  %27 = phi i32 [ %5, %10 ], [ %114, %112 ]
  %28 = phi i32 [ 1, %10 ], [ %113, %112 ]
  %29 = phi float* [ %0, %10 ], [ %115, %112 ]
  %30 = phi i32* [ %1, %10 ], [ %116, %112 ]
  %31 = phi i32 [ 0, %10 ], [ %47, %112 ]
  %32 = zext i32 %26 to i64
  %33 = getelementptr inbounds float, float* %29, i64 %25
  %34 = icmp ult i64 %25, %16
  br i1 %34, label %35, label %120

; <label>:35:                                     ; preds = %24
  %36 = trunc i64 %25 to i32
  br label %37

; <label>:37:                                     ; preds = %37, %35
  %38 = phi float* [ %49, %37 ], [ %33, %35 ]
  %39 = phi float [ %48, %37 ], [ 0.000000e+00, %35 ]
  %40 = phi i32 [ %50, %37 ], [ %36, %35 ]
  %41 = phi i32 [ %47, %37 ], [ %31, %35 ]
  %42 = load float, float* %38, align 4
  %43 = fcmp ogt float %42, 0.000000e+00
  %44 = fsub float -0.000000e+00, %42
  %45 = select i1 %43, float %42, float %44
  %46 = fcmp ogt float %45, %39
  %47 = select i1 %46, i32 %40, i32 %41
  %48 = select i1 %46, float %45, float %39
  %49 = getelementptr inbounds float, float* %38, i64 %11
  %50 = add nuw i32 %40, 1
  %51 = icmp eq i32 %50, %3
  br i1 %51, label %52, label %37

; <label>:52:                                     ; preds = %37
  %53 = fcmp oeq float %48, 0.000000e+00
  br i1 %53, label %120, label %54

; <label>:54:                                     ; preds = %52
  %55 = zext i32 %47 to i64
  %56 = icmp eq i64 %25, %55
  br i1 %56, label %71, label %57

; <label>:57:                                     ; preds = %54
  %58 = zext i32 %47 to i64
  %59 = getelementptr inbounds i32, i32* %30, i64 %58
  %60 = sub nsw i64 0, %25
  %61 = getelementptr inbounds i32, i32* %59, i64 %60
  %62 = load i32, i32* %30, align 4
  %63 = load i32, i32* %61, align 4
  store i32 %63, i32* %30, align 4
  store i32 %62, i32* %61, align 4
  %64 = trunc i64 %25 to i32
  %65 = sub i32 %47, %64
  %66 = mul i32 %65, %3
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %29, i64 %67
  %69 = bitcast float* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %69, i64 %14, i1 false)
  %70 = bitcast float* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %14, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %13, i64 %14, i1 false)
  br label %71

; <label>:71:                                     ; preds = %54, %57
  %72 = load float, float* %33, align 4
  %73 = icmp ult i32 %28, %3
  br i1 %73, label %74, label %112

; <label>:74:                                     ; preds = %71
  %75 = getelementptr inbounds float, float* %33, i64 1
  %76 = getelementptr inbounds float, float* %33, i64 %12
  %77 = icmp ult i32 %28, %3
  %78 = zext i32 %27 to i64
  %79 = sub nsw i64 0, %78
  br label %80

; <label>:80:                                     ; preds = %104, %74
  %81 = phi float* [ %75, %74 ], [ %108, %104 ]
  %82 = phi float* [ %76, %74 ], [ %109, %104 ]
  %83 = phi i32 [ %28, %74 ], [ %110, %104 ]
  %84 = load float, float* %82, align 4
  %85 = fdiv float %84, %72
  store float %85, float* %82, align 4
  br i1 %77, label %86, label %104

; <label>:86:                                     ; preds = %80
  %87 = getelementptr float, float* %82, i64 1
  %88 = getelementptr float, float* %81, i64 1
  br label %89

; <label>:89:                                     ; preds = %89, %86
  %90 = phi float* [ %93, %89 ], [ %82, %86 ]
  %91 = phi float* [ %94, %89 ], [ %81, %86 ]
  %92 = phi i32 [ %99, %89 ], [ %28, %86 ]
  %93 = getelementptr inbounds float, float* %90, i64 1
  %94 = getelementptr inbounds float, float* %91, i64 1
  %95 = load float, float* %91, align 4
  %96 = fmul float %85, %95
  %97 = load float, float* %93, align 4
  %98 = fsub float %97, %96
  store float %98, float* %93, align 4
  %99 = add i32 %92, 1
  %100 = icmp eq i32 %99, %3
  br i1 %100, label %101, label %89

; <label>:101:                                    ; preds = %89
  %102 = getelementptr float, float* %87, i64 %32
  %103 = getelementptr float, float* %88, i64 %32
  br label %104

; <label>:104:                                    ; preds = %101, %80
  %105 = phi float* [ %81, %80 ], [ %103, %101 ]
  %106 = phi float* [ %82, %80 ], [ %102, %101 ]
  %107 = getelementptr inbounds float, float* %106, i64 1
  %108 = getelementptr inbounds float, float* %105, i64 %79
  %109 = getelementptr inbounds float, float* %107, i64 %25
  %110 = add i32 %83, 1
  %111 = icmp eq i32 %110, %3
  br i1 %111, label %112, label %80

; <label>:112:                                    ; preds = %104, %71
  %113 = add i32 %28, 1
  %114 = add i32 %27, -1
  %115 = getelementptr inbounds float, float* %29, i64 %12
  %116 = getelementptr inbounds i32, i32* %30, i64 1
  %117 = add nuw nsw i64 %25, 1
  %118 = icmp ult i64 %117, %17
  %119 = add i32 %26, -1
  br i1 %118, label %24, label %120

; <label>:120:                                    ; preds = %24, %52, %112, %8
  %121 = phi i32 [ 1, %8 ], [ 0, %24 ], [ 1, %112 ], [ 0, %52 ]
  ret i32 %121
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @opj_lupInvert(float* nocapture readonly, float* nocapture, i32, i32* nocapture readonly, float* nocapture, float* nocapture, float* nocapture) unnamed_addr #0 {
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %34, label %9

; <label>:9:                                      ; preds = %7
  %10 = shl i32 %2, 2
  %11 = bitcast float* %4 to i8*
  %12 = zext i32 %10 to i64
  %13 = zext i32 %2 to i64
  %14 = zext i32 %2 to i64
  %15 = zext i32 %2 to i64
  br label %16

; <label>:16:                                     ; preds = %9, %31
  %17 = phi i64 [ 0, %9 ], [ %32, %31 ]
  %18 = phi float* [ %1, %9 ], [ %19, %31 ]
  %19 = getelementptr inbounds float, float* %18, i64 1
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 %12, i1 false)
  %20 = getelementptr inbounds float, float* %4, i64 %17
  store float 1.000000e+00, float* %20, align 4
  tail call fastcc void @opj_lupSolve(float* %5, float* %0, float* %4, i32* %3, i32 %2, float* %6)
  br label %21

; <label>:21:                                     ; preds = %21, %16
  %22 = phi i64 [ 0, %16 ], [ %29, %21 ]
  %23 = phi float* [ %18, %16 ], [ %28, %21 ]
  %24 = getelementptr inbounds float, float* %5, i64 %22
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = bitcast float* %23 to i32*
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds float, float* %23, i64 %13
  %29 = add nuw nsw i64 %22, 1
  %30 = icmp eq i64 %29, %14
  br i1 %30, label %31, label %21

; <label>:31:                                     ; preds = %21
  %32 = add nuw nsw i64 %17, 1
  %33 = icmp eq i64 %32, %15
  br i1 %33, label %34, label %16

; <label>:34:                                     ; preds = %31, %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #2

; Function Attrs: norecurse nounwind ssp uwtable
define internal fastcc void @opj_lupSolve(float* nocapture, float* nocapture readonly, float* nocapture readonly, i32* nocapture readonly, i32, float* nocapture) unnamed_addr #3 {
  %7 = add i32 %4, 1
  %8 = zext i32 %4 to i64
  %9 = getelementptr inbounds float, float* %0, i64 %8
  %10 = getelementptr inbounds float, float* %5, i64 %8
  %11 = icmp eq i32 %4, 0
  br i1 %11, label %84, label %12

; <label>:12:                                     ; preds = %6, %32
  %13 = phi i32 [ %43, %32 ], [ 1, %6 ]
  %14 = phi i32* [ %34, %32 ], [ %3, %6 ]
  %15 = phi float* [ %41, %32 ], [ %1, %6 ]
  %16 = phi float* [ %40, %32 ], [ %5, %6 ]
  %17 = phi i32 [ %42, %32 ], [ 0, %6 ]
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %32, label %19

; <label>:19:                                     ; preds = %12, %19
  %20 = phi float* [ %24, %19 ], [ %15, %12 ]
  %21 = phi float* [ %26, %19 ], [ %5, %12 ]
  %22 = phi float [ %29, %19 ], [ 0.000000e+00, %12 ]
  %23 = phi i32 [ %30, %19 ], [ 1, %12 ]
  %24 = getelementptr inbounds float, float* %20, i64 1
  %25 = load float, float* %20, align 4
  %26 = getelementptr inbounds float, float* %21, i64 1
  %27 = load float, float* %21, align 4
  %28 = fmul float %25, %27
  %29 = fadd float %22, %28
  %30 = add nuw i32 %23, 1
  %31 = icmp eq i32 %30, %13
  br i1 %31, label %32, label %19

; <label>:32:                                     ; preds = %19, %12
  %33 = phi float [ 0.000000e+00, %12 ], [ %29, %19 ]
  %34 = getelementptr inbounds i32, i32* %14, i64 1
  %35 = load i32, i32* %14, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds float, float* %2, i64 %36
  %38 = load float, float* %37, align 4
  %39 = fsub float %38, %33
  %40 = getelementptr inbounds float, float* %16, i64 1
  store float %39, float* %16, align 4
  %41 = getelementptr inbounds float, float* %15, i64 %8
  %42 = add nuw i32 %17, 1
  %43 = add i32 %13, 1
  %44 = icmp eq i32 %42, %4
  br i1 %44, label %45, label %12

; <label>:45:                                     ; preds = %32
  %46 = icmp eq i32 %4, 0
  br i1 %46, label %84, label %47

; <label>:47:                                     ; preds = %45
  %48 = mul i32 %4, %4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds float, float* %1, i64 %49
  %51 = getelementptr inbounds float, float* %50, i64 -1
  %52 = zext i32 %7 to i64
  %53 = sub nsw i64 0, %52
  br label %54

; <label>:54:                                     ; preds = %47, %77
  %55 = phi i32 [ %4, %47 ], [ %61, %77 ]
  %56 = phi float* [ %10, %47 ], [ %60, %77 ]
  %57 = phi float* [ %9, %47 ], [ %59, %77 ]
  %58 = phi float* [ %51, %47 ], [ %82, %77 ]
  %59 = getelementptr inbounds float, float* %57, i64 -1
  %60 = getelementptr inbounds float, float* %56, i64 -1
  %61 = add nsw i32 %55, -1
  %62 = load float, float* %58, align 4
  %63 = icmp ult i32 %55, %4
  br i1 %63, label %64, label %77

; <label>:64:                                     ; preds = %54, %64
  %65 = phi float* [ %69, %64 ], [ %58, %54 ]
  %66 = phi float* [ %71, %64 ], [ %57, %54 ]
  %67 = phi float [ %74, %64 ], [ 0.000000e+00, %54 ]
  %68 = phi i32 [ %75, %64 ], [ %55, %54 ]
  %69 = getelementptr inbounds float, float* %65, i64 1
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds float, float* %66, i64 1
  %72 = load float, float* %66, align 4
  %73 = fmul float %70, %72
  %74 = fadd float %67, %73
  %75 = add i32 %68, 1
  %76 = icmp eq i32 %75, %4
  br i1 %76, label %77, label %64

; <label>:77:                                     ; preds = %64, %54
  %78 = phi float [ 0.000000e+00, %54 ], [ %74, %64 ]
  %79 = load float, float* %60, align 4
  %80 = fsub float %79, %78
  %81 = fdiv float %80, %62
  store float %81, float* %59, align 4
  %82 = getelementptr inbounds float, float* %58, i64 %53
  %83 = icmp eq i32 %61, 0
  br i1 %83, label %84, label %54

; <label>:84:                                     ; preds = %77, %6, %45
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
