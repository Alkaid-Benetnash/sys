; ModuleID = '../../third_party/boringssl/src/crypto/asn1/a_int.c'
source_filename = "../../third_party/boringssl/src/crypto/asn1/a_int.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [52 x i8] c"../../third_party/boringssl/src/crypto/asn1/a_int.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @ASN1_INTEGER_dup(%struct.asn1_string_st*) local_unnamed_addr #0 {
  %2 = tail call %struct.asn1_string_st* @ASN1_STRING_dup(%struct.asn1_string_st* %0) #7
  ret %struct.asn1_string_st* %2
}

declare %struct.asn1_string_st* @ASN1_STRING_dup(%struct.asn1_string_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_INTEGER_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 256
  %6 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 256
  %9 = icmp eq i32 %5, %8
  br i1 %9, label %13, label %10

; <label>:10:                                     ; preds = %2
  %11 = icmp eq i32 %5, 0
  %12 = select i1 %11, i32 1, i32 -1
  ret i32 %12

; <label>:13:                                     ; preds = %2
  %14 = tail call i32 @ASN1_STRING_cmp(%struct.asn1_string_st* nonnull %0, %struct.asn1_string_st* nonnull %1) #7
  %15 = icmp eq i32 %5, 0
  %16 = sub nsw i32 0, %14
  %17 = select i1 %15, i32 %14, i32 %16
  ret i32 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

declare i32 @ASN1_STRING_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2c_ASN1_INTEGER(%struct.asn1_string_st* readonly, i8**) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %3, label %110, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 256
  %8 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %43, label %11

; <label>:11:                                     ; preds = %4
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i32 %9, 1
  %16 = icmp eq i8 %14, 0
  %17 = and i1 %15, %16
  %18 = select i1 %17, i32 0, i32 %7
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i8 %14, 0
  %21 = and i1 %20, %19
  %22 = zext i1 %21 to i32
  br i1 %19, label %39, label %23

; <label>:23:                                     ; preds = %11
  %24 = icmp ugt i8 %14, -128
  br i1 %24, label %39, label %25

; <label>:25:                                     ; preds = %23
  %26 = icmp eq i8 %14, -128
  %27 = icmp sgt i32 %9, 1
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %39

; <label>:29:                                     ; preds = %25
  %30 = sext i32 %9 to i64
  br label %33

; <label>:31:                                     ; preds = %33
  %32 = icmp slt i64 %38, %30
  br i1 %32, label %33, label %39

; <label>:33:                                     ; preds = %29, %31
  %34 = phi i64 [ 1, %29 ], [ %38, %31 ]
  %35 = getelementptr inbounds i8, i8* %13, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  %38 = add nuw nsw i64 %34, 1
  br i1 %37, label %31, label %39

; <label>:39:                                     ; preds = %31, %33, %11, %23, %25
  %40 = phi i32 [ 0, %25 ], [ %22, %11 ], [ 1, %23 ], [ 0, %31 ], [ 1, %33 ]
  %41 = phi i8 [ 0, %25 ], [ 0, %11 ], [ -1, %23 ], [ 0, %31 ], [ -1, %33 ]
  %42 = add nsw i32 %40, %9
  br label %43

; <label>:43:                                     ; preds = %4, %39
  %44 = phi i32 [ %40, %39 ], [ 0, %4 ]
  %45 = phi i32 [ %42, %39 ], [ 1, %4 ]
  %46 = phi i32 [ %18, %39 ], [ %7, %4 ]
  %47 = phi i8 [ %41, %39 ], [ 0, %4 ]
  %48 = icmp eq i8** %1, null
  br i1 %48, label %110, label %49

; <label>:49:                                     ; preds = %43
  %50 = load i8*, i8** %1, align 8
  %51 = icmp eq i32 %44, 0
  br i1 %51, label %54, label %52

; <label>:52:                                     ; preds = %49
  %53 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %47, i8* %50, align 1
  br label %54

; <label>:54:                                     ; preds = %49, %52
  %55 = phi i8* [ %53, %52 ], [ %50, %49 ]
  %56 = load i32, i32* %8, align 8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %54
  store i8 0, i8* %55, align 1
  br label %106

; <label>:59:                                     ; preds = %54
  %60 = icmp eq i32 %46, 0
  %61 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %62 = load i8*, i8** %61, align 8
  br i1 %60, label %63, label %65

; <label>:63:                                     ; preds = %59
  %64 = zext i32 %56 to i64
  tail call fastcc void @OPENSSL_memcpy(i8* %55, i8* %62, i64 %64)
  br label %106

; <label>:65:                                     ; preds = %59
  %66 = sext i32 %56 to i64
  %67 = getelementptr inbounds i8, i8* %62, i64 %66
  %68 = add nsw i32 %56, -1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %55, i64 %69
  %71 = getelementptr inbounds i8, i8* %67, i64 -1
  %72 = load i8, i8* %71, align 1
  %73 = icmp eq i8 %72, 0
  %74 = icmp sgt i32 %56, 1
  %75 = and i1 %74, %73
  br i1 %75, label %76, label %87

; <label>:76:                                     ; preds = %65, %76
  %77 = phi i8* [ %82, %76 ], [ %71, %65 ]
  %78 = phi i8* [ %80, %76 ], [ %70, %65 ]
  %79 = phi i32 [ %81, %76 ], [ %56, %65 ]
  %80 = getelementptr inbounds i8, i8* %78, i64 -1
  store i8 0, i8* %78, align 1
  %81 = add nsw i32 %79, -1
  %82 = getelementptr inbounds i8, i8* %77, i64 -1
  %83 = load i8, i8* %82, align 1
  %84 = icmp eq i8 %83, 0
  %85 = icmp sgt i32 %79, 2
  %86 = and i1 %85, %84
  br i1 %86, label %76, label %87

; <label>:87:                                     ; preds = %76, %65
  %88 = phi i32 [ %56, %65 ], [ %81, %76 ]
  %89 = phi i8* [ %70, %65 ], [ %80, %76 ]
  %90 = phi i8* [ %67, %65 ], [ %77, %76 ]
  %91 = phi i8 [ %72, %65 ], [ %83, %76 ]
  %92 = sub i8 0, %91
  store i8 %92, i8* %89, align 1
  %93 = icmp sgt i32 %88, 1
  br i1 %93, label %94, label %106

; <label>:94:                                     ; preds = %87
  %95 = getelementptr inbounds i8, i8* %90, i64 -2
  br label %96

; <label>:96:                                     ; preds = %94, %96
  %97 = phi i8* [ %104, %96 ], [ %95, %94 ]
  %98 = phi i8* [ %100, %96 ], [ %89, %94 ]
  %99 = phi i32 [ %101, %96 ], [ %88, %94 ]
  %100 = getelementptr inbounds i8, i8* %98, i64 -1
  %101 = add nsw i32 %99, -1
  %102 = load i8, i8* %97, align 1
  %103 = xor i8 %102, -1
  store i8 %103, i8* %100, align 1
  %104 = getelementptr inbounds i8, i8* %97, i64 -1
  %105 = icmp sgt i32 %99, 2
  br i1 %105, label %96, label %106

; <label>:106:                                    ; preds = %96, %87, %63, %58
  %107 = load i8*, i8** %1, align 8
  %108 = sext i32 %45 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  store i8* %109, i8** %1, align 8
  br label %110

; <label>:110:                                    ; preds = %43, %2, %106
  %111 = phi i32 [ %45, %106 ], [ 0, %2 ], [ %45, %43 ]
  ret i32 %111
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @OPENSSL_memcpy(i8* nocapture, i8* nocapture readonly, i64) unnamed_addr #3 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %2, i1 false)
  br label %6

; <label>:6:                                      ; preds = %3, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @c2i_ASN1_INTEGER(%struct.asn1_string_st**, i8** nocapture, i64) local_unnamed_addr #0 {
  %4 = icmp eq %struct.asn1_string_st** %0, null
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %3
  %6 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %7 = icmp eq %struct.asn1_string_st* %6, null
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %5, %3
  %9 = tail call %struct.asn1_string_st* @ASN1_STRING_type_new(i32 2) #7
  %10 = icmp eq %struct.asn1_string_st* %9, null
  br i1 %10, label %109, label %11

; <label>:11:                                     ; preds = %8
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 1
  store i32 2, i32* %12, align 4
  br label %13

; <label>:13:                                     ; preds = %5, %11
  %14 = phi %struct.asn1_string_st* [ %9, %11 ], [ %6, %5 ]
  %15 = load i8*, i8** %1, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 %2
  %17 = shl i64 %2, 32
  %18 = add i64 %17, 4294967296
  %19 = ashr exact i64 %18, 32
  %20 = tail call i8* @OPENSSL_malloc(i64 %19) #7
  %21 = icmp eq i8* %20, null
  br i1 %21, label %104, label %22

; <label>:22:                                     ; preds = %13
  %23 = icmp eq i64 %2, 0
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %22
  %25 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %14, i64 0, i32 1
  store i32 2, i32* %25, align 4
  br label %93

; <label>:26:                                     ; preds = %22
  %27 = load i8, i8* %15, align 1
  %28 = icmp slt i8 %27, 0
  %29 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %14, i64 0, i32 1
  br i1 %28, label %30, label %82

; <label>:30:                                     ; preds = %26
  store i32 258, i32* %29, align 4
  %31 = load i8, i8* %15, align 1
  %32 = icmp eq i8 %31, -1
  %33 = icmp ne i64 %2, 1
  %34 = and i1 %33, %32
  %35 = getelementptr inbounds i8, i8* %15, i64 1
  %36 = select i1 %34, i8* %35, i8* %15
  %37 = sext i1 %34 to i64
  %38 = add nsw i64 %37, %2
  %39 = trunc i64 %38 to i32
  %40 = shl i64 %38, 32
  %41 = add i64 %40, -4294967296
  %42 = ashr exact i64 %41, 32
  %43 = getelementptr inbounds i8, i8* %36, i64 %42
  %44 = getelementptr inbounds i8, i8* %20, i64 %42
  %45 = load i8, i8* %43, align 1
  %46 = icmp eq i8 %45, 0
  %47 = icmp ne i32 %39, 0
  %48 = and i1 %47, %46
  br i1 %48, label %49, label %60

; <label>:49:                                     ; preds = %30, %49
  %50 = phi i32 [ %54, %49 ], [ %39, %30 ]
  %51 = phi i8* [ %53, %49 ], [ %44, %30 ]
  %52 = phi i8* [ %55, %49 ], [ %43, %30 ]
  %53 = getelementptr inbounds i8, i8* %51, i64 -1
  store i8 0, i8* %51, align 1
  %54 = add nsw i32 %50, -1
  %55 = getelementptr inbounds i8, i8* %52, i64 -1
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  %58 = icmp ne i32 %54, 0
  %59 = and i1 %58, %57
  br i1 %59, label %49, label %60

; <label>:60:                                     ; preds = %49, %30
  %61 = phi i8* [ %43, %30 ], [ %55, %49 ]
  %62 = phi i8* [ %44, %30 ], [ %53, %49 ]
  %63 = phi i32 [ %39, %30 ], [ %54, %49 ]
  %64 = phi i8 [ %45, %30 ], [ %56, %49 ]
  %65 = phi i1 [ %47, %30 ], [ %58, %49 ]
  br i1 %65, label %69, label %66

; <label>:66:                                     ; preds = %60
  store i8 1, i8* %20, align 1
  %67 = getelementptr inbounds i8, i8* %20, i64 %38
  store i8 0, i8* %67, align 1
  %68 = add nsw i64 %38, 1
  br label %93

; <label>:69:                                     ; preds = %60
  %70 = sub i8 0, %64
  store i8 %70, i8* %62, align 1
  %71 = icmp sgt i32 %63, 1
  br i1 %71, label %72, label %93

; <label>:72:                                     ; preds = %69, %72
  %73 = phi i8* [ %77, %72 ], [ %61, %69 ]
  %74 = phi i8* [ %76, %72 ], [ %62, %69 ]
  %75 = phi i32 [ %78, %72 ], [ %63, %69 ]
  %76 = getelementptr inbounds i8, i8* %74, i64 -1
  %77 = getelementptr inbounds i8, i8* %73, i64 -1
  %78 = add nsw i32 %75, -1
  %79 = load i8, i8* %77, align 1
  %80 = xor i8 %79, -1
  store i8 %80, i8* %76, align 1
  %81 = icmp sgt i32 %75, 2
  br i1 %81, label %72, label %93

; <label>:82:                                     ; preds = %26
  store i32 2, i32* %29, align 4
  %83 = load i8, i8* %15, align 1
  %84 = icmp eq i8 %83, 0
  %85 = icmp ne i64 %2, 1
  %86 = and i1 %85, %84
  %87 = getelementptr inbounds i8, i8* %15, i64 1
  %88 = select i1 %86, i8* %87, i8* %15
  %89 = sext i1 %86 to i64
  %90 = add nsw i64 %89, %2
  %91 = shl i64 %90, 32
  %92 = ashr exact i64 %91, 32
  tail call fastcc void @OPENSSL_memcpy(i8* nonnull %20, i8* %88, i64 %92)
  br label %93

; <label>:93:                                     ; preds = %72, %69, %82, %66, %24
  %94 = phi i64 [ %68, %66 ], [ %90, %82 ], [ 0, %24 ], [ %38, %69 ], [ %38, %72 ]
  %95 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %14, i64 0, i32 2
  %96 = load i8*, i8** %95, align 8
  %97 = icmp eq i8* %96, null
  br i1 %97, label %99, label %98

; <label>:98:                                     ; preds = %93
  tail call void @OPENSSL_free(i8* nonnull %96) #7
  br label %99

; <label>:99:                                     ; preds = %93, %98
  store i8* %20, i8** %95, align 8
  %100 = trunc i64 %94 to i32
  %101 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %14, i64 0, i32 0
  store i32 %100, i32* %101, align 8
  br i1 %4, label %103, label %102

; <label>:102:                                    ; preds = %99
  store %struct.asn1_string_st* %14, %struct.asn1_string_st** %0, align 8
  br label %103

; <label>:103:                                    ; preds = %99, %102
  store i8* %16, i8** %1, align 8
  br label %109

; <label>:104:                                    ; preds = %13
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 273) #7
  br i1 %4, label %108, label %105

; <label>:105:                                    ; preds = %104
  %106 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %107 = icmp eq %struct.asn1_string_st* %106, %14
  br i1 %107, label %109, label %108

; <label>:108:                                    ; preds = %105, %104
  tail call void @ASN1_STRING_free(%struct.asn1_string_st* nonnull %14) #7
  br label %109

; <label>:109:                                    ; preds = %108, %105, %8, %103
  %110 = phi %struct.asn1_string_st* [ %14, %103 ], [ null, %8 ], [ null, %105 ], [ null, %108 ]
  ret %struct.asn1_string_st* %110
}

declare %struct.asn1_string_st* @ASN1_STRING_type_new(i32) local_unnamed_addr #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @ASN1_STRING_free(%struct.asn1_string_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @d2i_ASN1_UINTEGER(%struct.asn1_string_st**, i8** nocapture, i64) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7
  %9 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  %12 = icmp eq %struct.asn1_string_st** %0, null
  br i1 %12, label %16, label %13

; <label>:13:                                     ; preds = %3
  %14 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %15 = icmp eq %struct.asn1_string_st* %14, null
  br i1 %15, label %16, label %21

; <label>:16:                                     ; preds = %13, %3
  %17 = tail call %struct.asn1_string_st* @ASN1_STRING_type_new(i32 2) #7
  %18 = icmp eq %struct.asn1_string_st* %17, null
  br i1 %18, label %78, label %19

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %17, i64 0, i32 1
  store i32 2, i32* %20, align 4
  br label %21

; <label>:21:                                     ; preds = %13, %19
  %22 = phi %struct.asn1_string_st* [ %17, %19 ], [ %14, %13 ]
  %23 = bitcast i8** %1 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast i8** %4 to i64*
  store i64 %24, i64* %25, align 8
  %26 = call i32 @ASN1_get_object(i8** nonnull %4, i64* nonnull %5, i32* nonnull %6, i32* nonnull %7, i64 %2) #7
  %27 = trunc i32 %26 to i8
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %72, label %29

; <label>:29:                                     ; preds = %21
  %30 = load i32, i32* %6, align 4
  %31 = icmp eq i32 %30, 2
  br i1 %31, label %32, label %72

; <label>:32:                                     ; preds = %29
  %33 = load i64, i64* %5, align 8
  %34 = shl i64 %33, 32
  %35 = add i64 %34, 4294967296
  %36 = ashr exact i64 %35, 32
  %37 = call i8* @OPENSSL_malloc(i64 %36) #7
  %38 = icmp eq i8* %37, null
  br i1 %38, label %72, label %39

; <label>:39:                                     ; preds = %32
  %40 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %22, i64 0, i32 1
  store i32 2, i32* %40, align 4
  %41 = load i64, i64* %5, align 8
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %60, label %43

; <label>:43:                                     ; preds = %39
  %44 = load i8*, i8** %4, align 8
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  %47 = icmp ne i64 %41, 1
  %48 = and i1 %47, %46
  br i1 %48, label %49, label %52

; <label>:49:                                     ; preds = %43
  %50 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %50, i8** %4, align 8
  %51 = add nsw i64 %41, -1
  store i64 %51, i64* %5, align 8
  br label %52

; <label>:52:                                     ; preds = %49, %43
  %53 = load i8*, i8** %4, align 8
  %54 = load i64, i64* %5, align 8
  %55 = shl i64 %54, 32
  %56 = ashr exact i64 %55, 32
  call fastcc void @OPENSSL_memcpy(i8* nonnull %37, i8* %53, i64 %56)
  %57 = load i64, i64* %5, align 8
  %58 = load i8*, i8** %4, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 %57
  store i8* %59, i8** %4, align 8
  br label %60

; <label>:60:                                     ; preds = %39, %52
  %61 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %22, i64 0, i32 2
  %62 = load i8*, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

; <label>:64:                                     ; preds = %60
  call void @OPENSSL_free(i8* nonnull %62) #7
  br label %65

; <label>:65:                                     ; preds = %60, %64
  store i8* %37, i8** %61, align 8
  %66 = load i64, i64* %5, align 8
  %67 = trunc i64 %66 to i32
  %68 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %22, i64 0, i32 0
  store i32 %67, i32* %68, align 8
  br i1 %12, label %70, label %69

; <label>:69:                                     ; preds = %65
  store %struct.asn1_string_st* %22, %struct.asn1_string_st** %0, align 8
  br label %70

; <label>:70:                                     ; preds = %65, %69
  %71 = load i64, i64* %25, align 8
  store i64 %71, i64* %23, align 8
  br label %78

; <label>:72:                                     ; preds = %21, %29, %32
  %73 = phi i32 [ 103, %21 ], [ 115, %29 ], [ 65, %32 ]
  call void @ERR_put_error(i32 12, i32 0, i32 %73, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 342) #7
  br i1 %12, label %77, label %74

; <label>:74:                                     ; preds = %72
  %75 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %76 = icmp eq %struct.asn1_string_st* %75, %22
  br i1 %76, label %78, label %77

; <label>:77:                                     ; preds = %74, %72
  call void @ASN1_STRING_free(%struct.asn1_string_st* nonnull %22) #7
  br label %78

; <label>:78:                                     ; preds = %77, %74, %16, %70
  %79 = phi %struct.asn1_string_st* [ %22, %70 ], [ null, %16 ], [ null, %74 ], [ null, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7
  ret %struct.asn1_string_st* %79
}

declare i32 @ASN1_get_object(i8**, i64*, i32*, i32*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_INTEGER_set(%struct.asn1_string_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = icmp sgt i64 %1, -1
  br i1 %3, label %4, label %6

; <label>:4:                                      ; preds = %2
  %5 = tail call i32 @ASN1_INTEGER_set_uint64(%struct.asn1_string_st* %0, i64 %1)
  br label %12

; <label>:6:                                      ; preds = %2
  %7 = sub i64 0, %1
  %8 = tail call i32 @ASN1_INTEGER_set_uint64(%struct.asn1_string_st* %0, i64 %7)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  store i32 258, i32* %11, align 4
  br label %12

; <label>:12:                                     ; preds = %6, %10, %4
  %13 = phi i32 [ %5, %4 ], [ 1, %10 ], [ 0, %6 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_INTEGER_set_uint64(%struct.asn1_string_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = tail call i8* @OPENSSL_malloc(i64 8) #7
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %2
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 366) #7
  br label %29

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8
  tail call void @OPENSSL_free(i8* %8) #7
  store i8* %3, i8** %7, align 8
  %9 = tail call fastcc i64 @CRYPTO_bswap8(i64 %1)
  %10 = bitcast i8* %3 to i64*
  store i64 %9, i64* %10, align 1
  %11 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  store i32 2, i32* %11, align 4
  %12 = load i8*, i8** %7, align 8
  br label %13

; <label>:13:                                     ; preds = %6, %18
  %14 = phi i64 [ 0, %6 ], [ %19, %18 ]
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %13
  %19 = add nuw nsw i64 %14, 1
  %20 = icmp ult i64 %19, 7
  br i1 %20, label %13, label %21

; <label>:21:                                     ; preds = %13, %18
  %22 = phi i64 [ %14, %13 ], [ %19, %18 ]
  %23 = trunc i64 %22 to i32
  %24 = sub i32 8, %23
  %25 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  store i32 %24, i32* %25, align 8
  %26 = load i8*, i8** %7, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 %22
  %28 = sext i32 %24 to i64
  tail call fastcc void @OPENSSL_memmove(i8* %26, i8* %27, i64 %28)
  br label %29

; <label>:29:                                     ; preds = %21, %5
  %30 = phi i32 [ 0, %5 ], [ 1, %21 ]
  ret i32 %30
}

; Function Attrs: inlinehint nounwind readnone ssp uwtable
define internal fastcc i64 @CRYPTO_bswap8(i64) unnamed_addr #4 {
  %2 = tail call i64 @llvm.bswap.i64(i64 %0)
  ret i64 %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @OPENSSL_memmove(i8* nocapture, i8* nocapture readonly, i64) unnamed_addr #3 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %2, i1 false)
  br label %6

; <label>:6:                                      ; preds = %3, %5
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @ASN1_INTEGER_get(%struct.asn1_string_st* readonly) local_unnamed_addr #5 {
  %2 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %2, label %37, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %37 [
    i32 258, label %7
    i32 2, label %6
  ]

; <label>:6:                                      ; preds = %3
  br label %7

; <label>:7:                                      ; preds = %3, %6
  %8 = phi i32 [ 1, %3 ], [ 0, %6 ]
  %9 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 8
  br i1 %11, label %37, label %12

; <label>:12:                                     ; preds = %7
  %13 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, null
  %16 = icmp sgt i32 %10, 0
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %32

; <label>:18:                                     ; preds = %12
  %19 = zext i32 %10 to i64
  br label %20

; <label>:20:                                     ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %28, %20 ]
  %22 = phi i64 [ 0, %18 ], [ %27, %20 ]
  %23 = shl i64 %22, 8
  %24 = getelementptr inbounds i8, i8* %14, i64 %21
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i64
  %27 = or i64 %23, %26
  %28 = add nuw nsw i64 %21, 1
  %29 = icmp eq i64 %28, %19
  br i1 %29, label %30, label %20

; <label>:30:                                     ; preds = %20
  %31 = icmp slt i64 %27, 0
  br i1 %31, label %37, label %32

; <label>:32:                                     ; preds = %12, %30
  %33 = phi i64 [ %27, %30 ], [ 0, %12 ]
  %34 = icmp eq i32 %8, 0
  %35 = sub nsw i64 0, %33
  %36 = select i1 %34, i64 %33, i64 %35
  br label %37

; <label>:37:                                     ; preds = %32, %30, %7, %3, %1
  %38 = phi i64 [ 0, %1 ], [ -1, %3 ], [ -1, %7 ], [ %36, %32 ], [ -1, %30 ]
  ret i64 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @BN_to_ASN1_INTEGER(%struct.bignum_st*, %struct.asn1_string_st*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %1, null
  br i1 %3, label %4, label %8

; <label>:4:                                      ; preds = %2
  %5 = tail call %struct.asn1_string_st* @ASN1_STRING_type_new(i32 2) #7
  %6 = icmp eq %struct.asn1_string_st* %5, null
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  tail call void @ERR_put_error(i32 12, i32 0, i32 158, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 440) #7
  br label %45

; <label>:8:                                      ; preds = %2, %4
  %9 = phi %struct.asn1_string_st* [ %5, %4 ], [ %1, %2 ]
  %10 = tail call i32 @BN_is_negative(%struct.bignum_st* %0) #7
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

; <label>:12:                                     ; preds = %8
  %13 = tail call i32 @BN_is_zero(%struct.bignum_st* %0) #7
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

; <label>:15:                                     ; preds = %12, %8
  br label %16

; <label>:16:                                     ; preds = %12, %15
  %17 = phi i32 [ 2, %15 ], [ 258, %12 ]
  %18 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = tail call i32 @BN_num_bits(%struct.bignum_st* %0) #7
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

; <label>:21:                                     ; preds = %16
  %22 = sdiv i32 %19, 8
  %23 = add nsw i32 %22, 5
  br label %24

; <label>:24:                                     ; preds = %16, %21
  %25 = phi i32 [ %23, %21 ], [ 4, %16 ]
  %26 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp slt i32 %27, %25
  br i1 %28, label %29, label %37

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 2
  %31 = load i8*, i8** %30, align 8
  %32 = sext i32 %25 to i64
  %33 = tail call i8* @OPENSSL_realloc(i8* %31, i64 %32) #7
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

; <label>:35:                                     ; preds = %29
  store i8* %33, i8** %30, align 8
  br label %37

; <label>:36:                                     ; preds = %29
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 452) #7
  br label %45

; <label>:37:                                     ; preds = %35, %24
  %38 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 2
  %39 = load i8*, i8** %38, align 8
  %40 = tail call i64 @BN_bn2bin(%struct.bignum_st* %0, i8* %39) #7
  %41 = trunc i64 %40 to i32
  store i32 %41, i32* %26, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %49

; <label>:43:                                     ; preds = %37
  %44 = load i8*, i8** %38, align 8
  store i8 0, i8* %44, align 1
  store i32 1, i32* %26, align 8
  br label %49

; <label>:45:                                     ; preds = %36, %7
  %46 = phi %struct.asn1_string_st* [ %9, %36 ], [ null, %7 ]
  %47 = icmp eq %struct.asn1_string_st* %46, %1
  br i1 %47, label %49, label %48

; <label>:48:                                     ; preds = %45
  tail call void @ASN1_STRING_free(%struct.asn1_string_st* %46) #7
  br label %49

; <label>:49:                                     ; preds = %48, %45, %43, %37
  %50 = phi %struct.asn1_string_st* [ %9, %37 ], [ %9, %43 ], [ null, %45 ], [ null, %48 ]
  ret %struct.asn1_string_st* %50
}

declare i32 @BN_is_negative(%struct.bignum_st*) local_unnamed_addr #1

declare i32 @BN_is_zero(%struct.bignum_st*) local_unnamed_addr #1

declare i32 @BN_num_bits(%struct.bignum_st*) local_unnamed_addr #1

declare i8* @OPENSSL_realloc(i8*, i64) local_unnamed_addr #1

declare i64 @BN_bn2bin(%struct.bignum_st*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.bignum_st* @ASN1_INTEGER_to_BN(%struct.asn1_string_st* nocapture readonly, %struct.bignum_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = tail call %struct.bignum_st* @BN_bin2bn(i8* %4, i64 %7, %struct.bignum_st* %1) #7
  %9 = icmp eq %struct.bignum_st* %8, null
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %2
  tail call void @ERR_put_error(i32 12, i32 0, i32 105, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 475) #7
  br label %16

; <label>:11:                                     ; preds = %2
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 258
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %11
  tail call void @BN_set_negative(%struct.bignum_st* nonnull %8, i32 1) #7
  br label %16

; <label>:16:                                     ; preds = %11, %15, %10
  ret %struct.bignum_st* %8
}

declare %struct.bignum_st* @BN_bin2bn(i8*, i64, %struct.bignum_st*) local_unnamed_addr #1

declare void @BN_set_negative(%struct.bignum_st*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
