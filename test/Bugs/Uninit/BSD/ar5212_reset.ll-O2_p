; ModuleID = '/usr/src/sys/dev/ath/ath_hal/ar5212/ar5212_reset.c'
source_filename = "/usr/src/sys/dev/ath/ath_hal/ar5212/ar5212_reset.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-portbld-freebsd12.0"

module asm ".globl __start_set_pcpu"
module asm ".globl __stop_set_pcpu"

%struct.ath_hal = type { i32, i16, i16, i8*, i64, i64, i16, i32, i16, i16, i16, i16, i16*, [8 x i32], i32, i32, %struct.HAL_OPS_CONFIG, %struct.HAL_RATE_TABLE* (%struct.ath_hal*, i32)*, void (%struct.ath_hal*)*, {}*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*, i32, i32)*, void (%struct.ath_hal*)*, void (%struct.ath_hal*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i32*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i32, i32, i32*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i16*)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32, %struct.HAL_TXQ_INFO*)*, i32 (%struct.ath_hal*, i32, %struct.HAL_TXQ_INFO*)*, i32 (%struct.ath_hal*, i32, %struct.HAL_TXQ_INFO*)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, %struct.ath_desc*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.ath_hal*, %struct.ath_desc*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.ath_hal*, %struct.ath_desc*, i32*, i32*, i32, i32, i32, i32, %struct.ath_desc*)*, i32 (%struct.ath_hal*, %struct.ath_desc*, %struct.ath_tx_status*)*, void (%struct.ath_hal*, i32*)*, void (%struct.ath_hal*, %struct.ath_desc*)*, i32 (%struct.ath_hal*, %struct.ath_desc*, i32*, i32*)*, void (%struct.ath_hal*, i8*, i32)*, void (%struct.ath_hal*, i8*, i32*)*, void (%struct.ath_hal*, i8*, i32**)*, void (%struct.ath_hal*, i8*, i32, i16)*, void (%struct.ath_hal*, i32*)*, i32 (%struct.ath_hal*, i32)*, void (%struct.ath_hal*, i32, i32)*, void (%struct.ath_hal*)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*)*, void (%struct.ath_hal*)*, void (%struct.ath_hal*, i32, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, %struct.ath_desc*, i32, i32)*, i32 (%struct.ath_hal*, %struct.ath_desc*, i32, %struct.ath_desc*, i64, %struct.ath_rx_status*)*, void (%struct.ath_hal*, %struct.HAL_NODE_STATS*, %struct.ieee80211_channel*)*, void (%struct.ath_hal*, %struct.ieee80211_channel*)*, void (%struct.ath_hal*, %struct.HAL_NODE_STATS*)*, i32 (%struct.ath_hal*, i32, i32, i32*)*, i32 (%struct.ath_hal*, i32, i32, i32, i32*)*, i32 (%struct.ath_hal*, i32, i8*, i32, i8**, i32*)*, void (%struct.ath_hal*, i8*)*, i32 (%struct.ath_hal*, i8*)*, void (%struct.ath_hal*, i8*)*, i32 (%struct.ath_hal*, i8*)*, i32 (%struct.ath_hal*, i16, i32*)*, void (%struct.ath_hal*, i32)*, void (%struct.ath_hal*, i8*, i16)*, i32 (%struct.ath_hal*, i32, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32, i32)*, void (%struct.ath_hal*, i32, i32)*, i32 (%struct.ath_hal*)*, i64 (%struct.ath_hal*)*, void (%struct.ath_hal*, i64)*, void (%struct.ath_hal*)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*, %struct.HAL_MIB_STATS*)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i16, i32)*, void (%struct.ath_hal*, i8, i32)*, i32 (%struct.ath_hal*, i32, i32, i32, i32)*, void (%struct.ath_hal*, i32, i32)*, void (%struct.ath_hal*, %struct.HAL_PHYERR_PARAM*)*, void (%struct.ath_hal*, %struct.HAL_PHYERR_PARAM*)*, i32 (%struct.ath_hal*, %struct.HAL_PHYERR_PARAM*)*, i32 (%struct.ath_hal*, %struct.ath_rx_status*, i64, i8*, %struct.hal_dfs_event*)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*, i32)*, void (%struct.ath_hal*, %struct.HAL_SPECTRAL_PARAM*)*, void (%struct.ath_hal*, %struct.HAL_SPECTRAL_PARAM*)*, void (%struct.ath_hal*)*, void (%struct.ath_hal*)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i16)*, i32 (%struct.ath_hal*, i16)*, i32 (%struct.ath_hal*, i16, %struct.HAL_KEYVAL*, i8*, i32)*, i32 (%struct.ath_hal*, i16, i8*)*, i32 (%struct.ath_hal*, i32, i32)*, i32 (%struct.ath_hal*)*, i16 (%struct.ath_hal*, %struct.ieee80211_channel*)*, void (%struct.ath_hal*, %struct.HAL_BEACON_TIMERS*)*, void (%struct.ath_hal*, i32, i32)*, void (%struct.ath_hal*, %struct.HAL_BEACON_STATE*)*, void (%struct.ath_hal*)*, i64 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, %struct.ath_desc*, i32*, i32*, i32, i32, i32, i32, i32, i8, i32, i32, i32)*, i32 (%struct.ath_hal*, %struct.ath_desc*, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (%struct.ath_hal*, %struct.ath_desc*, %struct.ath_desc*)*, void (%struct.ath_hal*, %struct.ath_desc*, i32, i32, %struct.HAL_11N_RATE_SERIES*, i32, i32)*, void (%struct.ath_hal*, i8*, i32, i32, i32, i32, i32)*, void (%struct.ath_hal*, %struct.ath_desc*, i32, i32)*, void (%struct.ath_hal*, %struct.ath_desc*, i32)*, void (%struct.ath_hal*, %struct.ath_desc*)*, void (%struct.ath_hal*, %struct.ath_desc*)*, void (%struct.ath_hal*, %struct.ath_desc*, i32)*, void (%struct.ath_hal*, %struct.ath_desc*, i32)*, i32 (%struct.ath_hal*, %struct.HAL_SURVEY_SAMPLE*)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32*)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32)*, void (%struct.ath_hal*, %struct.HAL_BT_COEX_INFO*)*, void (%struct.ath_hal*, %struct.HAL_BT_COEX_CONFIG*)*, void (%struct.ath_hal*, i32)*, void (%struct.ath_hal*, i32)*, void (%struct.ath_hal*, i32)*, void (%struct.ath_hal*, i32, i32)*, void (%struct.ath_hal*)*, i32 (%struct.ath_hal*)*, void (%struct.ath_hal*, i32, i8*, i16, i32)*, i32 (%struct.ath_hal*, i8, i32, i32*, i8, i32, i32)*, i32 (%struct.ath_hal*, i32*, i32*)*, i32 (%struct.ath_hal*, i32, i32*)*, void (%struct.ath_hal*)*, void (%struct.ath_hal*, %struct.HAL_ANT_COMB_CONFIG*)*, void (%struct.ath_hal*, %struct.HAL_ANT_COMB_CONFIG*)* }
%struct.HAL_OPS_CONFIG = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.HAL_RATE_TABLE = type { i32, [256 x i8], [64 x %struct.anon] }
%struct.anon = type { i8, i8, i32, i8, i8, i8, i8, i16, i16 }
%struct.HAL_TXQ_INFO = type { i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32, i32, i32, i32 }
%struct.ath_desc = type opaque
%struct.ath_tx_status = type opaque
%struct.ath_rx_status = type opaque
%struct.HAL_NODE_STATS = type { i32, i32, i32 }
%struct.HAL_MIB_STATS = type { i32, i32, i32, i32, i32 }
%struct.HAL_PHYERR_PARAM = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.hal_dfs_event = type { i64, i32, i8, i8, i32 }
%struct.HAL_SPECTRAL_PARAM = type { i16, i16, i16, i16, i8, i16, [6 x i8], [6 x i8], i32, i32, i32 }
%struct.HAL_KEYVAL = type { i8, i8, i16, [16 x i8], [8 x i8], [8 x i8] }
%struct.HAL_BEACON_TIMERS = type { i32, i32, i32, i32, i32, i32 }
%struct.HAL_BEACON_STATE = type { i32, i32, i32, i32, i16, i16, i32, i16, i16, i32, i32 }
%struct.HAL_11N_RATE_SERIES = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.HAL_SURVEY_SAMPLE = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.HAL_BT_COEX_INFO = type { i32, i8, i8, i8, i8, i8, i32, i8 }
%struct.HAL_BT_COEX_CONFIG = type { i8, i32, i32, i32, i32, i32, i8, i8, i32 }
%struct.HAL_ANT_COMB_CONFIG = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.ieee80211_channel = type { i32, i16, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i8, i16 }
%struct.ath_hal_5212 = type { %struct.ath_hal_private, %struct.HAL_INI_ARRAY, %struct.HAL_INI_ARRAY, %struct.GAIN_VALUES, [6 x i8], [6 x i8], [6 x i8], i16, i32, %struct.HAL_ANI_STATS, %struct.RfHalFuncs*, i32, i32, i32, i32, i32, i32, [10 x %struct.HAL_TX_QUEUE_INFO], i32, [128 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, %struct.ar5212NfCalHist, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ar5212AniParams, %struct.ar5212AniParams, %struct.ar5212AniState*, [128 x %struct.ar5212AniState], i32 (%struct.ath_hal*, i32, i32)*, i16*, i32, [37 x i16], i8, i8, i32, i32, i32, i32, i32, i32, %struct.HAL_ANI_STATS }
%struct.ath_hal_private = type { %struct.ath_hal, i32 (%struct.ath_hal*, i16, i16*, i16*)*, i32 (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32, i16*)*, i32 (%struct.ath_hal*, i32, i16)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*)*, i16 (%struct.ath_hal*, %struct.HAL_CHANNEL_INTERNAL*)*, void (%struct.ath_hal*, i16*)*, i8*, i16, void (%struct.ath_hal*)*, i32 (%struct.ath_hal*, i32, i8*)*, i32 (%struct.ath_hal*, i32, i32)*, i16 (%struct.ath_hal*, i32, i32)*, i32 (%struct.ath_hal*, i32, i8*, i32, i8**, i32*)*, i16, i16, i32, i16, i16, i16, i16, i32, i8, i8, i32, %struct.ieee80211_channel*, %struct.HAL_CAPABILITIES, i32, i16, i16, i32, i16, i32, i16, i16, i32, [128 x %struct.HAL_CHANNEL_INTERNAL], i32, %struct.regDomain*, %struct.regDomain*, i8, i16, i32, [6 x i32], i32, %struct.HAL_NFCAL_HIST_FULL, %struct.HAL_CHANNEL_SURVEY }
%struct.HAL_CHANNEL_INTERNAL = type { i16, i8, i8, i8, i8, i16, i16, [3 x i16], [3 x i16], i16, i8, i32, %struct.HAL_NFCAL_HIST_SMALL }
%struct.HAL_NFCAL_HIST_SMALL = type { %struct.HAL_NFCAL_BASE, [1 x [6 x i16]] }
%struct.HAL_NFCAL_BASE = type { i8, i8, [6 x i16] }
%struct.HAL_CAPABILITIES = type { [9 x i8], i32, i16, i16, i16, i16, i16, i16, i32, i32, i32, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regDomain = type opaque
%struct.HAL_NFCAL_HIST_FULL = type { %struct.HAL_NFCAL_BASE, [5 x [6 x i16]] }
%struct.HAL_CHANNEL_SURVEY = type { [32 x %struct.HAL_SURVEY_SAMPLE], i32, i32 }
%struct.HAL_INI_ARRAY = type { i32*, i32, i32 }
%struct.GAIN_VALUES = type { i32, i32, i32, i32, i32, i32, %struct._gainOptStep* }
%struct._gainOptStep = type { [7 x i16], i32, [16 x i8] }
%struct.RfHalFuncs = type { i8*, void (%struct.ath_hal*)*, void (%struct.ath_hal*, i32, i32, i32)*, i32* (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i16, i16*)*, i32 (%struct.ath_hal*, i16*, i16*, %struct.ieee80211_channel*, i16*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i16*, i16*)*, i16 (%struct.ath_hal*, %struct.HAL_CHANNEL_INTERNAL*)* }
%struct.HAL_TX_QUEUE_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32, i32, i32, i32, i32 }
%struct.ar5212NfCalHist = type { [5 x i16], i16, i8, i8, i8 }
%struct.ar5212AniParams = type { i32, [5 x i32], [5 x i32], [5 x i32], [5 x i32], i32, [8 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ar5212AniState = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i32, %struct.ar5212AniParams* }
%struct.HAL_ANI_STATS = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.HAL_MIB_STATS, %struct.HAL_NODE_STATS }
%struct.HAL_EEPROM = type { i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, [2 x i8], i16, i8, i8, i16, i16, i16, i16, i16, i16, i16, [3 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i8], [3 x i8], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [11 x [3 x i16]], [3 x i16], [3 x i16], [3 x i16], i32, i32, i16, i16, [2 x i16], [2 x i16], [2 x i8], [2 x i8], [2 x i16], i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, [2 x i16], [2 x i16], i16, [32 x i16], [2 x i16], [2 x i16], [3 x i16], [3 x i16], %struct.cornerCalInfo, i16, [10 x i16], i16, [10 x %struct.dataPerChannel], i16, [3 x i16], [3 x i16], [5 x [2 x i16]], [3 x %struct.dataPerChannel], [3 x %struct.dataPerChannel], %struct.trgtPowerAllModes, [256 x %struct.RD_EDGES_POWER], %union.anon }
%struct.cornerCalInfo = type { i16, i16, i16, i16 }
%struct.dataPerChannel = type { i16, i16, i16, i16, [11 x i16], [11 x i16] }
%struct.trgtPowerAllModes = type { i16, [8 x %struct.trgtPowerInfo], i16, [3 x %struct.trgtPowerInfo], i16, [2 x %struct.trgtPowerInfo] }
%struct.trgtPowerInfo = type { i16, i16, i16, i16, i16 }
%struct.RD_EDGES_POWER = type { i16, i16, i32 }
%union.anon = type { [3 x %struct.EEPROM_POWER_EXPN_5112], [3064 x i8] }
%struct.EEPROM_POWER_EXPN_5112 = type { i16*, i16, i16, %struct.EXPN_DATA_PER_CHANNEL_5112* }
%struct.EXPN_DATA_PER_CHANNEL_5112 = type { i16, i16, [4 x %struct.EXPN_DATA_PER_XPD_5112] }
%struct.EXPN_DATA_PER_XPD_5112 = type { i16, i16, [4 x i16], [4 x i16] }

@ar5212SetSpurMitigation.magMapFor4 = internal unnamed_addr constant [4 x i16] [i16 1, i16 2, i16 2, i16 1], align 2
@ar5212SetSpurMitigation.magMapFor3 = internal unnamed_addr constant [3 x i16] [i16 1, i16 2, i16 1], align 2
@ar5212SetTransmitPower.tpcScaleReductionTable = internal unnamed_addr constant [5 x i16] [i16 0, i16 3, i16 6, i16 9, i16 63], align 2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212Reset(%struct.ath_hal* %ah, i32 %opmode, %struct.ieee80211_channel* %chan, i32 %bChannelChange, i32 %resetType, i32* %status) local_unnamed_addr #0 {
entry:
  %rfXpdGain = alloca [4 x i16], align 2
  %twiceAntennaGain = alloca i8, align 1
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  %1 = bitcast [4 x i16]* %rfXpdGain to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %twiceAntennaGain) #5
  %2 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ah_eeprom = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13
  %3 = bitcast [8 x i32]* %ah_eeprom to %struct.HAL_EEPROM**
  %4 = load %struct.HAL_EEPROM*, %struct.HAL_EEPROM** %3, align 8
  %call = tail call i32 @ar5212SetPowerMode(%struct.ath_hal* %ah, i32 0, i32 1) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %do.end724, label %if.end

if.end:                                           ; preds = %entry
  %ic_devdata.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %5 = load i16, i16* %ic_devdata.i, align 2
  %idxprom.i = zext i16 %5 to i64
  %arrayidx.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %2, i64 0, i32 37, i64 %idxprom.i
  %cmp = icmp eq %struct.HAL_CHANNEL_INTERNAL* %arrayidx.i, null
  br i1 %cmp, label %do.end724, label %if.end6

if.end6:                                          ; preds = %if.end
  switch i32 %opmode, label %do.end724 [
    i32 1, label %do.body10
    i32 0, label %do.body10
    i32 6, label %do.body10
    i32 8, label %do.body10
  ]

do.body10:                                        ; preds = %if.end6, %if.end6, %if.end6, %if.end6
  %6 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, -2
  %switch = icmp eq i32 %8, 14
  br i1 %switch, label %land.lhs.true, label %do.end21

land.lhs.true:                                    ; preds = %do.body10
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %9 = load i32, i32* %ic_flags, align 4
  %and = and i32 %9, 32
  %tobool14 = icmp eq i32 %and, 0
  br i1 %tobool14, label %do.end21, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  %and17 = and i32 %9, -1057
  %or = or i32 %and17, 1024
  store i32 %or, i32* %ic_flags, align 4
  br label %do.end21

do.end21:                                         ; preds = %do.body10, %land.lhs.true, %if.then15
  %isBmode.0 = phi i32 [ 1, %if.then15 ], [ 0, %do.body10 ], [ 0, %land.lhs.true ]
  %tobool22 = icmp ne i32 %bChannelChange, 0
  br i1 %tobool22, label %if.then23, label %if.end26

if.then23:                                        ; preds = %do.end21
  %call24 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 4416) #6
  br label %if.end26

if.end26:                                         ; preds = %do.end21, %if.then23
  %saveFrameSeqCount.0 = phi i32 [ %call24, %if.then23 ], [ 0, %do.end21 ]
  tail call void @ath_hal_survey_clear(%struct.ath_hal* nonnull %ah) #6
  %call27 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 32856) #6
  %cmp28 = icmp eq i32 %call27, 0
  %spec.store.select = select i1 %cmp28, i32 1, i32 %call27
  %call31 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 32772) #6
  %and32 = and i32 %call31, 35651584
  %call33 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 16400) #6
  %and34 = and i32 %call33, 16646240
  %call35 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 16404) #6
  %call36 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 16408) #6
  tail call void @ar5212RestoreClock(%struct.ath_hal* nonnull %ah, i32 %opmode) #6
  %call37 = tail call i32 @ar5212GetRfgain(%struct.ath_hal* nonnull %ah) #6
  %call38 = tail call i32 @ar5212ChipReset(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #7
  %tobool39 = icmp eq i32 %call38, 0
  br i1 %tobool39, label %do.body707, label %if.end44

if.end44:                                         ; preds = %if.end26
  %ic_flags45 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %10 = load i32, i32* %ic_flags45, align 4
  %11 = trunc i32 %10 to i8
  %cmp47 = icmp slt i8 %11, 0
  br i1 %cmp47, label %if.then48, label %if.else70

if.then48:                                        ; preds = %if.end44
  %and50 = and i32 %10, 208
  %cmp51 = icmp eq i32 %and50, 208
  br i1 %cmp51, label %if.end86, label %if.else53

if.else53:                                        ; preds = %if.then48
  %and55 = and i32 %10, 1152
  %cmp56 = icmp eq i32 %and55, 1152
  br i1 %cmp56, label %if.end86, label %if.else58

if.else58:                                        ; preds = %if.else53
  %and60 = and i32 %10, 160
  %cmp61 = icmp eq i32 %and60, 160
  br i1 %cmp61, label %if.end86, label %do.body707

if.else70:                                        ; preds = %if.end44
  %and72 = and i32 %10, 16
  %cmp73 = icmp eq i32 %and72, 0
  br i1 %cmp73, label %if.else75, label %if.end86

if.else75:                                        ; preds = %if.else70
  %and77 = and i32 %10, 320
  %cmp78 = icmp eq i32 %and77, 320
  br i1 %cmp78, label %if.end86, label %do.body707

if.end86:                                         ; preds = %if.else75, %if.else70, %if.else58, %if.else53, %if.then48
  %modesIndex.0 = phi i32 [ 5, %if.then48 ], [ 4, %if.else53 ], [ 3, %if.else58 ], [ 2, %if.else70 ], [ 1, %if.else75 ]
  %freqIndex.0 = phi i32 [ 2, %if.then48 ], [ 2, %if.else53 ], [ 2, %if.else58 ], [ 1, %if.else70 ], [ 1, %if.else75 ]
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38912, i32 7) #6
  %ah_ini_modes = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 31
  %12 = bitcast i32 (%struct.ath_hal*, i32)** %ah_ini_modes to %struct.HAL_INI_ARRAY*
  %call87 = tail call i32 @ath_hal_ini_write(%struct.ath_hal* nonnull %ah, %struct.HAL_INI_ARRAY* nonnull %12, i32 %modesIndex.0, i32 0) #6
  %ah_ini_common = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 33
  %rows.i = getelementptr inbounds i32 (%struct.ath_hal*, i32, %struct.HAL_TXQ_INFO*)*, i32 (%struct.ath_hal*, i32, %struct.HAL_TXQ_INFO*)** %ah_ini_common, i64 1
  %13 = bitcast i32 (%struct.ath_hal*, i32, %struct.HAL_TXQ_INFO*)** %rows.i to i32*
  %14 = load i32, i32* %13, align 8
  %cmp35.i = icmp sgt i32 %14, 0
  br i1 %cmp35.i, label %for.body.lr.ph.i, label %write_common.exit

for.body.lr.ph.i:                                 ; preds = %if.end86
  %15 = bitcast i32 (%struct.ath_hal*, i32, %struct.HAL_TXQ_INFO*)** %ah_ini_common to %struct.HAL_INI_ARRAY*
  %data.i = bitcast i32 (%struct.ath_hal*, i32, %struct.HAL_TXQ_INFO*)** %ah_ini_common to i32**
  %cols.i = getelementptr inbounds %struct.HAL_INI_ARRAY, %struct.HAL_INI_ARRAY* %15, i64 0, i32 2
  %tobool.i = icmp eq i32 %bChannelChange, 0
  br label %for.body.i

for.body.i:                                       ; preds = %if.end15.i, %for.body.lr.ph.i
  %writes.addr.037.i = phi i32 [ %call87, %for.body.lr.ph.i ], [ %writes.addr.1.i, %if.end15.i ]
  %r.036.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %inc16.i, %if.end15.i ]
  %16 = load i32*, i32** %data.i, align 8
  %17 = load i32, i32* %cols.i, align 4
  %mul.i = mul i32 %17, %r.036.i
  %idxprom.i1068 = sext i32 %mul.i to i64
  %arrayidx.i1069 = getelementptr i32, i32* %16, i64 %idxprom.i1068
  %18 = load i32, i32* %arrayidx.i1069, align 4
  br i1 %tobool.i, label %if.then.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %.off.i = add i32 %18, -32800
  %19 = icmp ult i32 %.off.i, 25
  %.off33.i = add i32 %18, -32980
  %20 = icmp ult i32 %.off33.i, 9
  %or.cond.i = or i1 %19, %20
  br i1 %or.cond.i, label %if.end15.i, label %if.then.i

if.then.i:                                        ; preds = %land.lhs.true.i, %for.body.i
  %add10.i = add i32 %mul.i, 1
  %idxprom11.i = sext i32 %add10.i to i64
  %arrayidx12.i = getelementptr i32, i32* %16, i64 %idxprom11.i
  %21 = load i32, i32* %arrayidx12.i, align 4
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 %18, i32 %21) #6
  %inc.i = add i32 %writes.addr.037.i, 1
  %rem32.i = and i32 %inc.i, 63
  %cmp13.i = icmp eq i32 %rem32.i, 0
  br i1 %cmp13.i, label %if.then14.i, label %if.end15.i

if.then14.i:                                      ; preds = %if.then.i
  tail call void @DELAY(i32 1) #6
  br label %if.end15.i

if.end15.i:                                       ; preds = %if.then14.i, %if.then.i, %land.lhs.true.i
  %writes.addr.1.i = phi i32 [ %writes.addr.037.i, %land.lhs.true.i ], [ %inc.i, %if.then14.i ], [ %inc.i, %if.then.i ]
  %inc16.i = add nuw nsw i32 %r.036.i, 1
  %22 = load i32, i32* %13, align 8
  %cmp.i = icmp slt i32 %inc16.i, %22
  br i1 %cmp.i, label %for.body.i, label %write_common.exit

write_common.exit:                                ; preds = %if.end15.i, %if.end86
  %writes.addr.0.lcssa.i = phi i32 [ %call87, %if.end86 ], [ %writes.addr.1.i, %if.end15.i ]
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 52, i32 0) #6
  %ah_rfHal = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 54
  %23 = bitcast i32 (%struct.ath_hal*, i32)** %ah_rfHal to %struct.RfHalFuncs**
  %24 = load %struct.RfHalFuncs*, %struct.RfHalFuncs** %23, align 8
  %writeRegs = getelementptr inbounds %struct.RfHalFuncs, %struct.RfHalFuncs* %24, i64 0, i32 2
  %25 = load void (%struct.ath_hal*, i32, i32, i32)*, void (%struct.ath_hal*, i32, i32, i32)** %writeRegs, align 8
  tail call void %25(%struct.ath_hal* nonnull %ah, i32 %modesIndex.0, i32 %freqIndex.0, i32 %writes.addr.0.lcssa.i) #6
  %26 = load i32, i32* %ic_flags45, align 4
  %27 = and i32 %26, 49152
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %if.end113, label %if.then96

if.then96:                                        ; preds = %write_common.exit
  %call.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 32796) #6
  %and.i = and i32 %call.i, 16256
  %29 = load i32, i32* %ic_flags45, align 4
  %and1.i = and i32 %29, 16384
  %cmp.i1070 = icmp eq i32 %and1.i, 0
  %..i = select i1 %cmp.i1070, i32 9, i32 19
  %.20.i = select i1 %cmp.i1070, i32 210, i32 260
  %.21.i = select i1 %cmp.i1070, i32 3538944, i32 1769472
  %.22.i = select i1 %cmp.i1070, i32 3400, i32 3500
  %.23.i = select i1 %cmp.i1070, i32 10240, i32 20480
  %or.i = or i32 %and.i, %..i
  %or2.i = or i32 %or.i, %.21.i
  %or3.i = or i32 %or2.i, 528482304
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32796, i32 %or3.i) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 4208, i32 %.20.i) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 4272, i32 %.22.i) #6
  %call4.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 4336) #6
  %and5.i = and i32 %call4.i, -1047553
  %or7.i = or i32 %and5.i, %.23.i
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 4336, i32 %or7.i) #6
  %30 = load i32, i32* %6, align 4
  %.off1058 = add i32 %30, -9
  %switch1059 = icmp ult i32 %.off1058, 2
  br i1 %switch1059, label %if.then108, label %if.end113

if.then108:                                       ; preds = %if.then96
  %call109 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39236) #6
  %or111 = or i32 %call109, 3
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39236, i32 %or111) #6
  br label %if.end113

if.end113:                                        ; preds = %write_common.exit, %if.then96, %if.then108
  %ah_phyRev = getelementptr inbounds %struct.ath_hal_private, %struct.ath_hal_private* %2, i64 0, i32 19
  %31 = load i16, i16* %ah_phyRev, align 2
  %cmp115 = icmp ugt i16 %31, 65
  br i1 %cmp115, label %if.then117, label %if.end159

if.then117:                                       ; preds = %if.end113
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38956, i32 172034) #6
  %channel = getelementptr inbounds %struct.HAL_CHANNEL_INTERNAL, %struct.HAL_CHANNEL_INTERNAL* %arrayidx.i, i64 0, i32 0
  %32 = load i16, i16* %channel, align 4
  %cmp119 = icmp eq i16 %32, 2484
  %ee_cckOfdmPwrDelta = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %4, i64 0, i32 17
  %33 = load i8, i8* %ee_cckOfdmPwrDelta, align 2
  %conv122 = zext i8 %33 to i32
  br i1 %cmp119, label %if.then121, label %if.else125

if.then121:                                       ; preds = %if.then117
  %ee_scaledCh14FilterCckDelta = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %4, i64 0, i32 23
  %34 = load i16, i16* %ee_scaledCh14FilterCckDelta, align 4
  %conv123 = zext i16 %34 to i32
  %sub = sub nsw i32 %conv122, %conv123
  %div = sdiv i32 %sub, 5
  br label %if.end131

if.else125:                                       ; preds = %if.then117
  %div1291079 = udiv i8 %33, 5
  %div129.zext = zext i8 %div1291079 to i32
  br label %if.end131

if.end131:                                        ; preds = %if.else125, %if.then121
  %cckOfdmPwrDelta.0.in = phi i32 [ %div, %if.then121 ], [ %div129.zext, %if.else125 ]
  %35 = load i32, i32* %ic_flags45, align 4
  %and133 = and i32 %35, 1152
  %cmp134 = icmp eq i32 %and133, 1152
  br i1 %cmp134, label %if.then136, label %if.else146

if.then136:                                       ; preds = %if.end131
  %mul139 = shl nuw nsw i32 %conv122, 6
  %shl = sub nsw i32 0, %mul139
  %and140 = and i32 %shl, 4032
  %mul142 = shl i32 %cckOfdmPwrDelta.0.in, 18
  %shl143 = sub i32 0, %mul142
  %and144 = and i32 %shl143, 16515072
  %or145 = or i32 %and144, %and140
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39244, i32 %or145) #6
  br label %if.end153

if.else146:                                       ; preds = %if.end131
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39244, i32 0) #6
  br label %if.end153

if.end153:                                        ; preds = %if.then136, %if.else146
  %call148 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 41512) #6
  %and149 = and i32 %call148, -513
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41512, i32 %and149) #6
  %call150 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 41512) #6
  %and151 = and i32 %call150, -130049
  %or152 = or i32 %and151, 2048
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41512, i32 %or152) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32864, i32 15) #6
  %.pr = load i16, i16* %ah_phyRev, align 2
  %cmp156 = icmp ugt i16 %.pr, 66
  br i1 %cmp156, label %if.then158, label %if.end159

if.then158:                                       ; preds = %if.end153
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41556, i32 0) #6
  br label %if.end159

if.end159:                                        ; preds = %if.end113, %if.then158, %if.end153
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39032, i32 14) #6
  %36 = load i32, i32* %6, align 4
  switch i32 %36, label %if.end203 [
    i32 15, label %if.then186
    i32 10, label %if.then186
    i32 9, label %if.then186
  ]

if.then186:                                       ; preds = %if.end159, %if.end159, %if.end159
  %channel187 = getelementptr inbounds %struct.HAL_CHANNEL_INTERNAL, %struct.HAL_CHANNEL_INTERNAL* %arrayidx.i, i64 0, i32 0
  %37 = load i16, i16* %channel187, align 4
  switch i16 %37, label %if.end197 [
    i16 2462, label %if.then196
    i16 2467, label %if.then196
  ]

if.then196:                                       ; preds = %if.then186, %if.then186
  br label %if.end197

if.end197:                                        ; preds = %if.then186, %if.then196
  %newReg.0 = phi i32 [ 0, %if.then196 ], [ 1, %if.then186 ]
  %call198 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 41548) #6
  %cmp199 = icmp eq i32 %call198, %newReg.0
  br i1 %cmp199, label %if.end203, label %if.then201

if.then201:                                       ; preds = %if.end197
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41548, i32 %newReg.0) #6
  br label %if.end203

if.end203:                                        ; preds = %if.end159, %if.then201, %if.end197
  %arraydecay = getelementptr inbounds [4 x i16], [4 x i16]* %rfXpdGain, i64 0, i64 0
  %call204 = call i32 @ar5212SetTransmitPower(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan, i16* nonnull %arraydecay) #7
  %tobool205 = icmp eq i32 %call204, 0
  br i1 %tobool205, label %do.body707, label %if.end210

if.end210:                                        ; preds = %if.end203
  %38 = load %struct.RfHalFuncs*, %struct.RfHalFuncs** %23, align 8
  %setRfRegs = getelementptr inbounds %struct.RfHalFuncs, %struct.RfHalFuncs* %38, i64 0, i32 5
  %39 = load i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i16, i16*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i16, i16*)** %setRfRegs, align 8
  %conv212 = trunc i32 %modesIndex.0 to i16
  %call214 = call i32 %39(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan, i16 zeroext %conv212, i16* nonnull %arraydecay) #6
  %tobool215 = icmp eq i32 %call214, 0
  br i1 %tobool215, label %do.body707, label %if.end220

if.end220:                                        ; preds = %if.end210
  %40 = load i32, i32* %ic_flags45, align 4
  %and222 = and i32 %40, 1088
  %cmp223 = icmp eq i32 %and222, 0
  br i1 %cmp223, label %if.end248, label %if.then225

if.then225:                                       ; preds = %if.end220
  %41 = load i32, i32* %6, align 4
  %.off1062 = add i32 %41, -9
  %switch1063 = icmp ult i32 %.off1062, 2
  br i1 %switch1063, label %if.then246, label %lor.lhs.false242

lor.lhs.false242:                                 ; preds = %if.then225
  %ah_eeversion = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13, i64 2
  %42 = bitcast i32* %ah_eeversion to i16*
  %43 = load i16, i16* %42, align 8
  %cmp244 = icmp ugt i16 %43, 20482
  br i1 %cmp244, label %if.then246, label %if.end247

if.then246:                                       ; preds = %if.then225, %lor.lhs.false242
  call void @ar5212SetSpurMitigation(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #7
  br label %if.end247

if.end247:                                        ; preds = %if.then246, %lor.lhs.false242
  call void @ar5212SetDeltaSlope(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #7
  br label %if.end248

if.end248:                                        ; preds = %if.end220, %if.end247
  %call249 = call i32 @ar5212SetBoardValues(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #7
  %tobool250 = icmp eq i32 %call249, 0
  br i1 %tobool250, label %do.body707, label %if.end255

if.end255:                                        ; preds = %if.end248
  br i1 %tobool22, label %if.then257, label %if.end258

if.then257:                                       ; preds = %if.end255
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 4416, i32 %saveFrameSeqCount.0) #6
  br label %if.end258

if.end258:                                        ; preds = %if.then257, %if.end255
  %ah_macaddr = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 39
  %arraydecay259 = bitcast i32 (%struct.ath_hal*, i32)** %ah_macaddr to i8*
  %44 = load i8, i8* %arraydecay259, align 8
  %conv260 = zext i8 %44 to i32
  %arrayidx263 = getelementptr i8, i8* %arraydecay259, i64 1
  %45 = load i8, i8* %arrayidx263, align 1
  %conv264 = zext i8 %45 to i32
  %shl265 = shl nuw nsw i32 %conv264, 8
  %or266 = or i32 %shl265, %conv260
  %arrayidx269 = getelementptr i8, i8* %arraydecay259, i64 2
  %46 = load i8, i8* %arrayidx269, align 2
  %conv270 = zext i8 %46 to i32
  %shl271 = shl nuw nsw i32 %conv270, 16
  %or272 = or i32 %or266, %shl271
  %arrayidx275 = getelementptr i8, i8* %arraydecay259, i64 3
  %47 = load i8, i8* %arrayidx275, align 1
  %conv276 = zext i8 %47 to i32
  %shl277 = shl nuw i32 %conv276, 24
  %or278 = or i32 %or272, %shl277
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32768, i32 %or278) #6
  %add.ptr = getelementptr i8, i8* %arraydecay259, i64 4
  %48 = load i8, i8* %add.ptr, align 1
  %conv282 = zext i8 %48 to i32
  %arrayidx286 = getelementptr i8, i8* %arraydecay259, i64 5
  %49 = load i8, i8* %arrayidx286, align 1
  %conv287 = zext i8 %49 to i32
  %shl288 = shl nuw nsw i32 %conv287, 8
  %ah_staId1Defaults = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 152
  %50 = bitcast i32 (%struct.ath_hal*, i32*)** %ah_staId1Defaults to i32*
  %51 = load i32, i32* %50, align 8
  %or289 = or i32 %and32, %conv282
  %or292 = or i32 %or289, %51
  %or293 = or i32 %or292, %shl288
  %or294 = or i32 %or293, 8388608
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32772, i32 %or294) #6
  call void @ar5212SetOperatingMode(%struct.ath_hal* nonnull %ah, i32 %opmode) #7
  %arraydecay295 = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 6, i64 0
  %52 = load i8, i8* %arraydecay295, align 4
  %conv297 = zext i8 %52 to i32
  %arrayidx300 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 6, i64 1
  %53 = load i8, i8* %arrayidx300, align 1
  %conv301 = zext i8 %53 to i32
  %shl302 = shl nuw nsw i32 %conv301, 8
  %or303 = or i32 %shl302, %conv297
  %arrayidx306 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 6, i64 2
  %54 = load i8, i8* %arrayidx306, align 2
  %conv307 = zext i8 %54 to i32
  %shl308 = shl nuw nsw i32 %conv307, 16
  %or309 = or i32 %or303, %shl308
  %arrayidx312 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 6, i64 3
  %55 = load i8, i8* %arrayidx312, align 1
  %conv313 = zext i8 %55 to i32
  %shl314 = shl nuw i32 %conv313, 24
  %or315 = or i32 %or309, %shl314
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32992, i32 %or315) #6
  %add.ptr318 = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 41
  %56 = bitcast i32 (%struct.ath_hal*, i32)** %add.ptr318 to i8*
  %57 = load i8, i8* %56, align 1
  %conv320 = zext i8 %57 to i32
  %arrayidx324 = getelementptr i8, i8* %56, i64 1
  %58 = load i8, i8* %arrayidx324, align 1
  %conv325 = zext i8 %58 to i32
  %shl326 = shl nuw nsw i32 %conv325, 8
  %or327 = or i32 %shl326, %conv320
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32996, i32 %or327) #6
  %call330 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 16400) #6
  %or331 = or i32 %call330, %and34
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 16400, i32 %or331) #6
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 16404, i32 %call35) #6
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 16408, i32 %call36) #6
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32856, i32 %spec.store.select) #6
  %arraydecay332 = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 5, i64 0
  %59 = load i8, i8* %arraydecay332, align 2
  %conv334 = zext i8 %59 to i32
  %arrayidx337 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 5, i64 1
  %60 = load i8, i8* %arrayidx337, align 1
  %conv338 = zext i8 %60 to i32
  %shl339 = shl nuw nsw i32 %conv338, 8
  %or340 = or i32 %shl339, %conv334
  %arrayidx343 = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 40
  %61 = bitcast i32 (%struct.ath_hal*, i32)** %arrayidx343 to i8*
  %62 = load i8, i8* %61, align 2
  %conv344 = zext i8 %62 to i32
  %shl345 = shl nuw nsw i32 %conv344, 16
  %or346 = or i32 %or340, %shl345
  %arrayidx349 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 5, i64 3
  %63 = load i8, i8* %arrayidx349, align 1
  %conv350 = zext i8 %63 to i32
  %shl351 = shl nuw i32 %conv350, 24
  %or352 = or i32 %or346, %shl351
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32776, i32 %or352) #6
  %add.ptr355 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 5, i64 4
  %64 = load i8, i8* %add.ptr355, align 1
  %conv357 = zext i8 %64 to i32
  %arrayidx361 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 5, i64 5
  %65 = load i8, i8* %arrayidx361, align 1
  %conv362 = zext i8 %65 to i32
  %shl363 = shl nuw nsw i32 %conv362, 8
  %or364 = or i32 %shl363, %conv357
  %ah_assocId = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 7
  %66 = load i16, i16* %ah_assocId, align 2
  %67 = and i16 %66, 16383
  %and368 = zext i16 %67 to i32
  %shl369 = shl nuw nsw i32 %and368, 16
  %or370 = or i32 %or364, %shl369
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32780, i32 %or370) #6
  %ah_rssiThr = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 153
  %68 = bitcast i32 (%struct.ath_hal*)** %ah_rssiThr to i32*
  %69 = load i32, i32* %68, align 8
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32792, i32 %69) #6
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 128, i32 -1) #6
  %70 = load %struct.RfHalFuncs*, %struct.RfHalFuncs** %23, align 8
  %setChannel.i = getelementptr inbounds %struct.RfHalFuncs, %struct.RfHalFuncs* %70, i64 0, i32 4
  %71 = load i32 (%struct.ath_hal*, %struct.ieee80211_channel*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*)** %setChannel.i, align 8
  %call.i1071 = call i32 %71(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #6
  %tobool.i1072 = icmp eq i32 %call.i1071, 0
  br i1 %tobool.i1072, label %do.body707, label %if.end377

if.end377:                                        ; preds = %if.end258
  %ah_coverageClass = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 6, i32 71
  %72 = bitcast i32 (%struct.ath_hal*, i32, i32, i32, i32*)** %ah_coverageClass to i8*
  %73 = load i8, i8* %72, align 8
  call void @ar5212SetCoverageClass(%struct.ath_hal* nonnull %ah, i8 zeroext %73, i32 1) #6
  call void @ar5212SetRateDurationTable(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #7
  %ah_analog5GhzRev = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 7
  %74 = bitcast i32* %ah_analog5GhzRev to i16*
  %75 = load i16, i16* %74, align 4
  %76 = and i16 %75, 240
  %.off = add nsw i16 %76, -48
  %77 = icmp ult i16 %.off, 33
  br i1 %77, label %land.lhs.true388, label %if.end408

land.lhs.true388:                                 ; preds = %if.end377
  %78 = load i32, i32* %ic_flags45, align 4
  %79 = and i32 %78, 49152
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %if.end408, label %if.then398

if.then398:                                       ; preds = %land.lhs.true388
  %and390 = and i32 %78, 16384
  %cmp401 = icmp eq i32 %and390, 0
  %cond = select i1 %cmp401, i32 13, i32 12
  %call403 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 38948) #6
  %and404 = and i32 %call403, -16
  %or407 = or i32 %and404, %cond
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38948, i32 %or407) #6
  br label %if.end408

if.end408:                                        ; preds = %land.lhs.true388, %if.then398, %if.end377
  %call409 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39188) #6
  %81 = load i32, i32* %ic_flags45, align 4
  %and412 = and i32 %81, 160
  %cmp413 = icmp eq i32 %and412, 160
  %and410.tr = trunc i32 %call409 to i16
  br i1 %cmp413, label %if.then415, label %if.else418

if.then415:                                       ; preds = %if.end408
  %div417.lhs.trunc = shl i16 %and410.tr, 2
  %div4171077 = udiv i16 %div417.lhs.trunc, 22
  br label %if.end420

if.else418:                                       ; preds = %if.end408
  %div419.lhs.trunc = and i16 %and410.tr, 16382
  %div4191078 = udiv i16 %div419.lhs.trunc, 10
  br label %if.end420

if.end420:                                        ; preds = %if.else418, %if.then415
  %synthDelay.0.in = phi i16 [ %div4171077, %if.then415 ], [ %div4191078, %if.else418 ]
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38940, i32 1) #6
  %82 = load i32, i32* %ic_flags45, align 4
  %and422 = and i32 %82, 16384
  %cmp423 = icmp eq i32 %and422, 0
  br i1 %cmp423, label %if.else427, label %if.then425

if.then425:                                       ; preds = %if.end420
  %83 = shl nuw nsw i16 %synthDelay.0.in, 1
  %addconv = add nuw nsw i16 %83, 100
  %add = zext i16 %addconv to i32
  call void @DELAY(i32 %add) #6
  br label %if.end438

if.else427:                                       ; preds = %if.end420
  %84 = trunc i32 %82 to i16
  %cmp430 = icmp slt i16 %84, 0
  br i1 %cmp430, label %if.then432, label %if.else435

if.then432:                                       ; preds = %if.else427
  %85 = shl nuw nsw i16 %synthDelay.0.in, 2
  %addconv1083 = add nuw nsw i16 %85, 100
  %add434 = zext i16 %addconv1083 to i32
  call void @DELAY(i32 %add434) #6
  br label %if.end438

if.else435:                                       ; preds = %if.else427
  %addconv1084 = add nuw nsw i16 %synthDelay.0.in, 100
  %add436 = zext i16 %addconv1084 to i32
  call void @DELAY(i32 %add436) #6
  br label %if.end438

if.end438:                                        ; preds = %if.then432, %if.else435, %if.then425
  %call439 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 38920) #6
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38920, i32 14336) #6
  br label %land.rhs

land.rhs:                                         ; preds = %if.end438, %while.body
  %inc1089 = phi i32 [ 1, %if.end438 ], [ %inc, %while.body ]
  %call442 = call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39972) #6
  %and443 = and i32 %call442, 16
  %tobool444 = icmp eq i32 %and443, 0
  br i1 %tobool444, label %while.end, label %while.body

while.body:                                       ; preds = %land.rhs
  call void @DELAY(i32 200) #6
  %inc = add nuw nsw i32 %inc1089, 1
  %cmp440 = icmp ult i32 %inc1089, 20
  br i1 %cmp440, label %land.rhs, label %while.end

while.end:                                        ; preds = %land.rhs, %while.body
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 38920, i32 %call439) #6
  %call445 = call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39008) #6
  %or447 = or i32 %call445, 3
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39008, i32 %or447) #6
  %86 = load i32, i32* %ic_flags45, align 4
  %and449 = and i32 %86, 160
  %cmp450 = icmp eq i32 %and449, 160
  %.pre = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 22
  br i1 %cmp450, label %if.end464, label %land.lhs.true452

land.lhs.true452:                                 ; preds = %while.end
  %87 = load i32, i32* %.pre, align 4
  %cmp453 = icmp eq i32 %87, 2
  br i1 %cmp453, label %if.end464, label %if.then455

if.then455:                                       ; preds = %land.lhs.true452
  %call456 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %or458 = or i32 %call456, 61440
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39200, i32 %or458) #6
  %call459 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %or460 = or i32 %call459, 65536
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39200, i32 %or460) #6
  br label %if.end464

if.end464:                                        ; preds = %land.lhs.true452, %while.end, %if.then455
  %storemerge = phi i32 [ 1, %if.then455 ], [ 0, %while.end ], [ 0, %land.lhs.true452 ]
  store i32 %storemerge, i32* %.pre, align 4
  call void @ar5212SetCompRegs(%struct.ath_hal* nonnull %ah) #7
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4096, i32 1) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4100, i32 2) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4104, i32 4) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4108, i32 8) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4112, i32 16) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4116, i32 32) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4120, i32 64) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4124, i32 128) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4128, i32 256) #6
  call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4132, i32 512) #6
  %ah_intrTxqs = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 133
  %88 = bitcast void (%struct.ath_hal*)** %ah_intrTxqs to i32*
  store i32 0, i32* %88, align 8
  %ah_caps = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 14
  %halTotalQueues = getelementptr inbounds i32, i32* %ah_caps, i64 4
  %89 = bitcast i32* %halTotalQueues to i16*
  %90 = load i16, i16* %89, align 8
  %cmp4731086 = icmp eq i16 %90, 0
  br i1 %cmp4731086, label %for.end479, label %for.body475

for.body475:                                      ; preds = %if.end464, %for.body475
  %i.21087 = phi i32 [ %inc478, %for.body475 ], [ 0, %if.end464 ]
  %call476 = call i32 @ar5212ResetTxQueue(%struct.ath_hal* nonnull %ah, i32 %i.21087) #6
  %inc478 = add nuw nsw i32 %i.21087, 1
  %91 = load i16, i16* %89, align 8
  %conv472 = zext i16 %91 to i32
  %cmp473 = icmp ult i32 %inc478, %conv472
  br i1 %cmp473, label %for.body475, label %for.end479

for.end479:                                       ; preds = %for.body475, %if.end464
  %ah_maskReg = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 8
  %cmp480 = icmp eq i32 %opmode, 6
  %spec.select = select i1 %cmp480, i32 530789, i32 526693
  store i32 %spec.select, i32* %ah_maskReg, align 4
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 160, i32 %spec.select) #6
  %call487 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 172) #6
  %or490 = or i32 %call487, 458752
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 172, i32 %or490) #6
  %ah_rfkillEnabled = getelementptr inbounds %struct.ath_hal_private, %struct.ath_hal_private* %2, i64 0, i32 43
  %92 = load i32, i32* %ah_rfkillEnabled, align 4
  %tobool491 = icmp eq i32 %92, 0
  br i1 %tobool491, label %if.end493, label %if.then492

if.then492:                                       ; preds = %for.end479
  call void @ar5212EnableRfKill(%struct.ath_hal* nonnull %ah) #6
  br label %if.end493

if.end493:                                        ; preds = %for.end479, %if.then492
  %call494 = call i32 @ath_hal_wait(%struct.ath_hal* nonnull %ah, i32 39008, i32 1, i32 0) #6
  call void @ar5212SetupClock(%struct.ath_hal* nonnull %ah, i32 %opmode) #6
  %call498 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 32800) #6
  %and499 = and i32 %call498, -25165825
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32800, i32 %and499) #6
  %93 = load i32, i32* %6, align 4
  %cmp501 = icmp ugt i32 %93, 5
  br i1 %cmp501, label %if.then512, label %lor.lhs.false503

lor.lhs.false503:                                 ; preds = %if.end493
  %cmp505 = icmp eq i32 %93, 5
  br i1 %cmp505, label %land.lhs.true507, label %if.end513

land.lhs.true507:                                 ; preds = %lor.lhs.false503
  %ah_macRev508 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 6
  %94 = bitcast i32* %ah_macRev508 to i16*
  %95 = load i16, i16* %94, align 8
  %cmp510 = icmp ugt i16 %95, 7
  br i1 %cmp510, label %if.then512, label %if.end513

if.then512:                                       ; preds = %land.lhs.true507, %if.end493
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 33048, i32 65706) #6
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 33052, i32 12816) #6
  br label %if.end513

if.end513:                                        ; preds = %if.then512, %land.lhs.true507, %lor.lhs.false503
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 33032, i32 82) #6
  %96 = load i32, i32* %ic_flags45, align 4
  %and515 = and i32 %96, 256
  %cmp516 = icmp eq i32 %and515, 0
  %ah_eepromGet = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13, i64 6
  %97 = bitcast i32* %ah_eepromGet to i32 (%struct.ath_hal*, i32, i8*)**
  %98 = load i32 (%struct.ath_hal*, i32, i8*)*, i32 (%struct.ath_hal*, i32, i8*)** %97, align 8
  br i1 %cmp516, label %if.else520, label %if.then518

if.then518:                                       ; preds = %if.end513
  %call519 = call i32 %98(%struct.ath_hal* nonnull %ah, i32 33, i8* nonnull %twiceAntennaGain) #6
  br label %if.end523

if.else520:                                       ; preds = %if.end513
  %call522 = call i32 %98(%struct.ath_hal* nonnull %ah, i32 34, i8* nonnull %twiceAntennaGain) #6
  br label %if.end523

if.end523:                                        ; preds = %if.else520, %if.then518
  %99 = load i8, i8* %twiceAntennaGain, align 1
  %conv524 = sext i8 %99 to i32
  %call525 = call i32 @ath_hal_getantennareduction(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan, i32 %conv524) #6
  %ah_macTPC = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 32
  %100 = load i32, i32* %ah_macTPC, align 4
  %and527 = and i32 %100, 63
  %ah_txPowerIndexOffset = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 36
  %101 = load i16, i16* %ah_txPowerIndexOffset, align 4
  %conv528 = sext i16 %101 to i32
  %sub529 = sub nsw i32 %and527, %conv528
  %ic_maxpower = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 4
  %102 = load i8, i8* %ic_maxpower, align 4
  %conv530 = sext i8 %102 to i32
  %cmp531 = icmp ugt i32 %sub529, %conv530
  %add538 = add nsw i32 %conv530, %conv528
  %spec.select1053 = select i1 %cmp531, i32 %add538, i32 %and527
  %ic_maxregpower = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 3
  %103 = load i8, i8* %ic_maxregpower, align 1
  %conv540 = sext i8 %103 to i32
  %mul541 = shl nsw i32 %conv540, 1
  %sext = shl i32 %call525, 24
  %conv542 = ashr exact i32 %sext, 24
  %sub543 = sub nsw i32 %mul541, %conv542
  %cmp544 = icmp ugt i32 %spec.select1053, %sub543
  %add554 = add nsw i32 %sub543, %conv528
  %spec.select1081 = select i1 %cmp544, i32 %add554, i32 %spec.select1053
  %and557 = lshr i32 %100, 8
  %shr558 = and i32 %and557, 63
  %sub561 = sub nsw i32 %shr558, %conv528
  %cmp564 = icmp ugt i32 %sub561, %conv530
  %spec.select1054 = select i1 %cmp564, i32 %add538, i32 %shr558
  %cmp578 = icmp ugt i32 %spec.select1054, %sub543
  %ctsTpcPow.1 = select i1 %cmp578, i32 %add554, i32 %spec.select1054
  %and591 = lshr i32 %100, 16
  %shr592 = and i32 %and591, 63
  %sub595 = sub nsw i32 %shr592, %conv528
  %cmp598 = icmp ugt i32 %sub595, %conv530
  %spec.select1055 = select i1 %cmp598, i32 %add538, i32 %shr592
  %cmp612 = icmp ugt i32 %spec.select1055, %sub543
  %spec.select1082 = select i1 %cmp612, i32 %add554, i32 %spec.select1055
  %104 = icmp ult i32 %spec.select1081, 63
  %spec.select1056 = select i1 %104, i32 %spec.select1081, i32 63
  %105 = icmp ult i32 %ctsTpcPow.1, 63
  %ctsTpcPow.2 = select i1 %105, i32 %ctsTpcPow.1, i32 63
  %106 = icmp ult i32 %spec.select1082, 63
  %spec.select1057 = select i1 %106, i32 %spec.select1082, i32 63
  %and637 = and i32 %spec.select1056, 63
  %shl638 = shl nuw nsw i32 %ctsTpcPow.2, 8
  %and639 = and i32 %shl638, 16128
  %or640 = or i32 %and639, %and637
  %shl641 = shl nuw i32 %spec.select1057, 16
  %and642 = and i32 %shl641, 4128768
  %or643 = or i32 %or640, %and642
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 33000, i32 %or643) #6
  %ah_miscMode = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 26
  %107 = load i32, i32* %ah_miscMode, align 4
  %cmp644 = icmp eq i32 %107, 0
  br i1 %cmp644, label %if.end648, label %if.then646

if.then646:                                       ; preds = %if.end523
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 33056, i32 %107) #6
  br label %if.end648

if.end648:                                        ; preds = %if.end523, %if.then646
  %ah_sifstime = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 41
  %108 = load i32, i32* %ah_sifstime, align 4
  %cmp649 = icmp eq i32 %108, -1
  br i1 %cmp649, label %if.end654, label %if.then651

if.then651:                                       ; preds = %if.end648
  %call653 = call i32 @ar5212SetSifsTime(%struct.ath_hal* nonnull %ah, i32 %108) #6
  br label %if.end654

if.end654:                                        ; preds = %if.end648, %if.then651
  %ah_slottime = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 160
  %109 = bitcast void (%struct.ath_hal*, i32, i32)** %ah_slottime to i32*
  %110 = load i32, i32* %109, align 8
  %cmp655 = icmp eq i32 %110, -1
  br i1 %cmp655, label %if.end660, label %if.then657

if.then657:                                       ; preds = %if.end654
  %call659 = call i32 @ar5212SetSlotTime(%struct.ath_hal* nonnull %ah, i32 %110) #6
  br label %if.end660

if.end660:                                        ; preds = %if.end654, %if.then657
  %ah_acktimeout = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 39
  %111 = load i32, i32* %ah_acktimeout, align 4
  %cmp661 = icmp eq i32 %111, -1
  br i1 %cmp661, label %if.end666, label %if.then663

if.then663:                                       ; preds = %if.end660
  %call665 = call i32 @ar5212SetAckTimeout(%struct.ath_hal* nonnull %ah, i32 %111) #6
  br label %if.end666

if.end666:                                        ; preds = %if.end660, %if.then663
  %ah_ctstimeout = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 161
  %112 = bitcast void (%struct.ath_hal*)** %ah_ctstimeout to i32*
  %113 = load i32, i32* %112, align 8
  %cmp667 = icmp eq i32 %113, -1
  br i1 %cmp667, label %if.end672, label %if.then669

if.then669:                                       ; preds = %if.end666
  %call671 = call i32 @ar5212SetCTSTimeout(%struct.ath_hal* nonnull %ah, i32 %113) #6
  br label %if.end672

if.end672:                                        ; preds = %if.end666, %if.then669
  %ah_diagreg = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 20
  %114 = bitcast i32 (%struct.ath_hal*)** %ah_diagreg to i32*
  %115 = load i32, i32* %114, align 8
  %cmp673 = icmp eq i32 %115, 0
  br i1 %cmp673, label %if.end677, label %if.then675

if.then675:                                       ; preds = %if.end672
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 32840, i32 %115) #6
  br label %if.end677

if.end677:                                        ; preds = %if.end672, %if.then675
  %116 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 10
  store i32 %opmode, i32* %116, align 8
  br i1 %tobool22, label %land.lhs.true679, label %do.body689

land.lhs.true679:                                 ; preds = %if.end677
  %117 = load i32, i32* %ic_flags45, align 4
  %and681 = and i32 %117, 524288
  %cmp682 = icmp eq i32 %and681, 0
  br i1 %cmp682, label %if.then684, label %do.body689

if.then684:                                       ; preds = %land.lhs.true679
  %ic_state = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 6
  %118 = load i8, i8* %ic_state, align 2
  %119 = and i8 %118, -5
  store i8 %119, i8* %ic_state, align 2
  br label %do.body689

do.body689:                                       ; preds = %land.lhs.true679, %if.end677, %if.then684
  %tobool690 = icmp eq i32 %isBmode.0, 0
  br i1 %tobool690, label %cleanup, label %land.lhs.true691

land.lhs.true691:                                 ; preds = %do.body689
  %120 = load i32, i32* %6, align 4
  %121 = and i32 %120, -2
  %switch1065 = icmp eq i32 %121, 14
  br i1 %switch1065, label %if.then699, label %cleanup

if.then699:                                       ; preds = %land.lhs.true691
  %122 = load i32, i32* %ic_flags45, align 4
  %and701 = and i32 %122, -1057
  %or703 = or i32 %and701, 32
  store i32 %or703, i32* %ic_flags45, align 4
  br label %cleanup

do.body707:                                       ; preds = %if.end258, %if.end248, %if.end210, %if.end203, %if.else75, %if.else58, %if.end26
  %ecode.0 = phi i32 [ 3, %if.end26 ], [ 12, %if.else58 ], [ 12, %if.else75 ], [ 3, %if.end203 ], [ 3, %if.end210 ], [ 3, %if.end248 ], [ 3, %if.end258 ]
  %tobool708 = icmp eq i32 %isBmode.0, 0
  br i1 %tobool708, label %do.end724, label %land.lhs.true709

land.lhs.true709:                                 ; preds = %do.body707
  %123 = load i32, i32* %6, align 4
  %124 = and i32 %123, -2
  %switch1067 = icmp eq i32 %124, 14
  br i1 %switch1067, label %if.then717, label %do.end724

if.then717:                                       ; preds = %land.lhs.true709
  %ic_flags718 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %125 = load i32, i32* %ic_flags718, align 4
  %and719 = and i32 %125, -1057
  %or721 = or i32 %and719, 32
  store i32 %or721, i32* %ic_flags718, align 4
  br label %do.end724

do.end724:                                        ; preds = %if.end6, %if.end, %entry, %land.lhs.true709, %do.body707, %if.then717
  %ecode.01076 = phi i32 [ %ecode.0, %land.lhs.true709 ], [ %ecode.0, %do.body707 ], [ %ecode.0, %if.then717 ], [ 12, %if.end6 ], [ 12, %if.end ], [ 3, %entry ]
  %cmp725 = icmp eq i32* %status, null
  br i1 %cmp725, label %cleanup, label %if.then727

if.then727:                                       ; preds = %do.end724
  store i32 %ecode.01076, i32* %status, align 4
  br label %cleanup

cleanup:                                          ; preds = %land.lhs.true691, %if.then727, %do.end724, %if.then699, %do.body689
  %retval.0 = phi i32 [ 1, %land.lhs.true691 ], [ 1, %do.body689 ], [ 1, %if.then699 ], [ 0, %do.end724 ], [ 0, %if.then727 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %twiceAntennaGain) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #5
  ret i32 %retval.0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ar5212SetPowerMode(%struct.ath_hal*, i32, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ath_hal_reg_read(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local void @ath_hal_survey_clear(%struct.ath_hal*) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local void @ar5212RestoreClock(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ar5212GetRfgain(%struct.ath_hal*) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212ChipReset(%struct.ath_hal* %ah, %struct.ieee80211_channel* readonly %chan) local_unnamed_addr #0 {
entry:
  %call = tail call fastcc i32 @ar5212SetResetReg(%struct.ath_hal* %ah, i32 19) #7
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call i32 @ar5212SetPowerMode(%struct.ath_hal* %ah, i32 0, i32 1) #6
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  %call5 = tail call fastcc i32 @ar5212SetResetReg(%struct.ath_hal* %ah, i32 0) #7
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end4
  %cmp = icmp eq %struct.ieee80211_channel* %chan, null
  br i1 %cmp, label %return, label %if.then9

if.then9:                                         ; preds = %if.end8
  %0 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %1 = load i32, i32* %0, align 4
  %.off = add i32 %1, -9
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %if.then18, label %if.else37

if.then18:                                        ; preds = %if.then9
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %2 = load i32, i32* %ic_flags, align 4
  %and = and i32 %2, 16384
  %cmp19 = icmp eq i32 %and, 0
  %3 = trunc i32 %2 to i16
  %cmp24 = icmp slt i16 %3, 0
  %spec.select = select i1 %cmp24, i32 72, i32 8
  %rfMode.0 = select i1 %cmp19, i32 %spec.select, i32 40
  %and31 = and i32 %2, 1056
  %cmp32 = icmp eq i32 %and31, 0
  %. = select i1 %cmp32, i32 4, i32 235
  br label %if.end93

if.else37:                                        ; preds = %if.then9
  %ah_analog5GhzRev = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 7
  %4 = bitcast i32* %ah_analog5GhzRev to i16*
  %5 = load i16, i16* %4, align 4
  %6 = trunc i16 %5 to i8
  %trunc = and i8 %6, -16
  switch i8 %trunc, label %if.else69 [
    i8 16, label %if.then48
    i8 32, label %if.then48
  ]

if.then48:                                        ; preds = %if.else37, %if.else37
  %ic_flags49 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %7 = load i32, i32* %ic_flags49, align 4
  %and57 = and i32 %7, 16384
  %cmp58 = icmp eq i32 %and57, 0
  br i1 %cmp58, label %if.else61, label %if.end93

if.else61:                                        ; preds = %if.then48
  %and50 = and i32 %7, 1056
  %cmp51 = icmp eq i32 %and50, 0
  %.185 = select i1 %cmp51, i32 170, i32 171
  %8 = trunc i32 %7 to i16
  %cmp64 = icmp slt i16 %8, 0
  %spec.select186 = select i1 %cmp64, i32 512, i32 %.185
  br label %if.end93

if.else69:                                        ; preds = %if.else37
  %ic_flags70 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %9 = load i32, i32* %ic_flags70, align 4
  %and71 = and i32 %9, 1056
  %cmp72 = icmp eq i32 %and71, 0
  %.187 = select i1 %cmp72, i32 234, i32 235
  %and78 = and i32 %9, 16384
  %cmp79 = icmp eq i32 %and78, 0
  br i1 %cmp79, label %if.else83, label %if.then81

if.then81:                                        ; preds = %if.else69
  %or82 = or i32 %.187, 256
  br label %if.end93

if.else83:                                        ; preds = %if.else69
  %10 = lshr i32 %9, 6
  %11 = and i32 %10, 512
  %12 = or i32 %.187, %11
  br label %if.end93

if.end93:                                         ; preds = %if.else83, %if.else61, %if.then48, %if.then18, %if.then81
  %ic_flags94.pre-phi = phi i32* [ %ic_flags70, %if.else83 ], [ %ic_flags49, %if.else61 ], [ %ic_flags49, %if.then48 ], [ %ic_flags, %if.then18 ], [ %ic_flags70, %if.then81 ]
  %13 = phi i32 [ %9, %if.else83 ], [ %7, %if.else61 ], [ %7, %if.then48 ], [ %2, %if.then18 ], [ %9, %if.then81 ]
  %phyPLL.2 = phi i32 [ %12, %if.else83 ], [ %spec.select186, %if.else61 ], [ 256, %if.then48 ], [ %., %if.then18 ], [ %or82, %if.then81 ]
  %rfMode.1 = phi i32 [ 8, %if.else83 ], [ 0, %if.else61 ], [ 0, %if.then48 ], [ %rfMode.0, %if.then18 ], [ 8, %if.then81 ]
  %and95 = and i32 %13, 1152
  %cmp96 = icmp eq i32 %and95, 1152
  %and102 = and i32 %13, 1088
  %cmp103 = icmp eq i32 %and102, 0
  %or107 = zext i1 %cmp103 to i32
  %or107.sink = select i1 %cmp96, i32 4, i32 %or107
  %spec.select189 = or i32 %rfMode.1, %or107.sink
  %and111 = lshr i32 %13, 7
  %14 = and i32 %and111, 2
  %15 = xor i32 %14, 2
  %16 = or i32 %spec.select189, %15
  %and119 = and i32 %13, 16
  %cmp120 = icmp eq i32 %and119, 0
  %cond = select i1 %cmp120, i32 0, i32 3
  %call122 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39036) #6
  %17 = load i32, i32* %ic_flags94.pre-phi, align 4
  %and124 = and i32 %17, 1056
  %cmp125 = icmp eq i32 %and124, 0
  br i1 %cmp125, label %if.else132, label %if.then127

if.then127:                                       ; preds = %if.end93
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38916, i32 %cond) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41472, i32 %16) #6
  %cmp128 = icmp eq i32 %call122, %phyPLL.2
  br i1 %cmp128, label %return, label %if.then130

if.then130:                                       ; preds = %if.then127
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39036, i32 %phyPLL.2) #6
  tail call void @DELAY(i32 300) #6
  br label %return

if.else132:                                       ; preds = %if.end93
  %cmp133 = icmp eq i32 %call122, %phyPLL.2
  br i1 %cmp133, label %if.end136, label %if.then135

if.then135:                                       ; preds = %if.else132
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39036, i32 %phyPLL.2) #6
  tail call void @DELAY(i32 300) #6
  br label %if.end136

if.end136:                                        ; preds = %if.else132, %if.then135
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38916, i32 %cond) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41472, i32 %16) #6
  br label %return

return:                                           ; preds = %if.end8, %if.then127, %if.then130, %if.end136, %if.end4, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %if.end ], [ 0, %if.end4 ], [ 1, %if.end136 ], [ 1, %if.then130 ], [ 1, %if.then127 ], [ 1, %if.end8 ]
  ret i32 %retval.0
}

; Function Attrs: noimplicitfloat noredzone
declare dso_local void @ath_hal_reg_write(%struct.ath_hal*, i32, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ath_hal_ini_write(%struct.ath_hal*, %struct.HAL_INI_ARRAY*, i32, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local void @ar5212SetIFSTiming(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture readonly %chan) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 32796) #6
  %and = and i32 %call, 16256
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %0 = load i32, i32* %ic_flags, align 4
  %and1 = and i32 %0, 16384
  %cmp = icmp eq i32 %and1, 0
  %. = select i1 %cmp, i32 9, i32 19
  %.20 = select i1 %cmp, i32 210, i32 260
  %.21 = select i1 %cmp, i32 3538944, i32 1769472
  %.22 = select i1 %cmp, i32 3400, i32 3500
  %.23 = select i1 %cmp, i32 10240, i32 20480
  %or = or i32 %and, %.
  %or2 = or i32 %or, %.21
  %or3 = or i32 %or2, 528482304
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 32796, i32 %or3) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4208, i32 %.20) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4272, i32 %.22) #6
  %call4 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 4336) #6
  %and5 = and i32 %call4, -1047553
  %or7 = or i32 %and5, %.23
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 4336, i32 %or7) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212SetTransmitPower(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan, i16* %rfXpdGain) local_unnamed_addr #0 {
entry:
  %twiceAntennaGain.i = alloca i8, align 1
  %targetPowerOfdm.i = alloca %struct.trgtPowerInfo, align 2
  %targetPowerCck.i = alloca %struct.trgtPowerInfo, align 2
  %ratesIndex.i = alloca [37 x i16], align 16
  %minPower = alloca i16, align 2
  %maxPower = alloca i16, align 2
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  %1 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ic_devdata.i.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %2 = load i16, i16* %ic_devdata.i.i, align 2
  %idxprom.i.i = zext i16 %2 to i64
  %channel.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i.i, i32 0
  %3 = load i16, i16* %channel.i, align 4
  %ah_eeprom = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13
  %4 = bitcast [8 x i32]* %ah_eeprom to %struct.HAL_EEPROM**
  %5 = load %struct.HAL_EEPROM*, %struct.HAL_EEPROM** %4, align 8
  %6 = bitcast i16* %minPower to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %6) #5
  %7 = bitcast i16* %maxPower to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %7) #5
  %ah_pcdacTable = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 118
  %8 = bitcast void (%struct.ath_hal*)** %ah_pcdacTable to i16**
  %9 = bitcast void (%struct.ath_hal*)** %ah_pcdacTable to i8**
  %10 = load i8*, i8** %9, align 8
  %ah_pcdacTableSize = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 119
  %11 = bitcast void (%struct.ath_hal*)** %ah_pcdacTableSize to i32*
  %12 = load i32, i32* %11, align 8
  %conv = zext i32 %12 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %10, i8 0, i64 %conv, i1 false)
  %ah_ratesArray = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54
  %13 = bitcast [37 x i16]* %ah_ratesArray to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 74, i1 false)
  %ah_powerLimit = getelementptr inbounds %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 29
  %14 = load i16, i16* %ah_powerLimit, align 4
  %15 = icmp slt i16 %14, 63
  %spec.select = select i1 %15, i16 %14, i16 63
  %cmp7 = icmp sgt i16 %spec.select, 62
  %cmp10 = icmp eq i16 %spec.select, 0
  %or.cond = or i1 %cmp7, %cmp10
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %ah_tpScale = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 21
  %16 = bitcast i32 (%struct.ath_hal*)** %ah_tpScale to i32*
  %17 = load i32, i32* %16, align 8
  %idxprom = zext i32 %17 to i64
  %arrayidx = getelementptr [5 x i16], [5 x i16]* @ar5212SetTransmitPower.tpcScaleReductionTable, i64 0, i64 %idxprom
  %18 = load i16, i16* %arrayidx, align 2
  %phitmp = sext i16 %18 to i32
  %phitmp313 = shl nsw i32 %phitmp, 1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %tpcInDb.0 = phi i32 [ %phitmp313, %if.then ], [ 0, %entry ]
  %19 = load i16, i16* %ic_devdata.i.i, align 2
  %idxprom.i.i.i = zext i16 %19 to i64
  %channel.i.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i.i.i, i32 0
  %20 = load i16, i16* %channel.i.i, align 4
  %21 = load %struct.HAL_EEPROM*, %struct.HAL_EEPROM** %4, align 8
  %arraydecay.i = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %twiceAntennaGain.i) #5
  %22 = bitcast %struct.trgtPowerInfo* %targetPowerOfdm.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %22) #5
  %23 = bitcast %struct.trgtPowerInfo* %targetPowerCck.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %23) #5
  %ic_maxregpower.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 3
  %24 = load i8, i8* %ic_maxregpower.i, align 1
  %conv.i = sext i8 %24 to i16
  %mul.i = shl nsw i16 %conv.i, 1
  store i16 -63, i16* %maxPower, align 2
  store i16 63, i16* %minPower, align 2
  %call2.i = tail call i32 @ath_hal_getctl(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #6
  %ee_numCtls.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 65
  %25 = load i16, i16* %ee_numCtls.i, align 4
  %cmp22.i = icmp eq i16 %25, 0
  br i1 %cmp22.i, label %for.end.i, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %if.end
  %conv13.i = and i32 %call2.i, 255
  %and29.i = and i32 %call2.i, 240
  %cmp30.i = icmp eq i32 %and29.i, 240
  br label %for.body.i306

for.body.i306:                                    ; preds = %for.inc.i, %for.body.lr.ph.i
  %26 = phi i16 [ %25, %for.body.lr.ph.i ], [ %29, %for.inc.i ]
  %indvars.iv32.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next33.i, %for.inc.i ]
  %twiceMaxEdgePower.025.i = phi i16 [ 63, %for.body.lr.ph.i ], [ %twiceMaxEdgePower.2.ph.i, %for.inc.i ]
  %arrayidx.i304 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 66, i64 %indvars.iv32.i
  %27 = load i16, i16* %arrayidx.i304, align 2
  %conv6.i = zext i16 %27 to i32
  %cmp7.i305 = icmp eq i16 %27, 0
  br i1 %cmp7.i305, label %for.inc.i, label %if.end.i

if.end.i:                                         ; preds = %for.body.i306
  %cmp14.i = icmp eq i32 %conv13.i, %conv6.i
  br i1 %cmp14.i, label %if.then23.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %if.end.i
  %and.i = and i32 %conv6.i, 15
  %or.i = or i32 %and.i, 240
  %cmp21.i = icmp eq i32 %conv13.i, %or.i
  br i1 %cmp21.i, label %if.then23.i, label %for.inc.i

if.then23.i:                                      ; preds = %lor.lhs.false.i, %if.end.i
  %28 = shl i64 %indvars.iv32.i, 3
  %arrayidx26.i307 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 83, i64 %28
  %call27.i = tail call fastcc zeroext i16 @ar5212GetMaxEdgePower(i16 zeroext %20, %struct.RD_EDGES_POWER* %arrayidx26.i307) #6
  br i1 %cmp30.i, label %if.then32.i, label %for.end.i

if.then32.i:                                      ; preds = %if.then23.i
  %cmp35.i308 = icmp ult i16 %twiceMaxEdgePower.025.i, %call27.i
  %cond.i = select i1 %cmp35.i308, i16 %twiceMaxEdgePower.025.i, i16 %call27.i
  %.pre.i = load i16, i16* %ee_numCtls.i, align 4
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then32.i, %lor.lhs.false.i, %for.body.i306
  %29 = phi i16 [ %26, %lor.lhs.false.i ], [ %.pre.i, %if.then32.i ], [ %26, %for.body.i306 ]
  %twiceMaxEdgePower.2.ph.i = phi i16 [ %twiceMaxEdgePower.025.i, %lor.lhs.false.i ], [ %cond.i, %if.then32.i ], [ %twiceMaxEdgePower.025.i, %for.body.i306 ]
  %indvars.iv.next33.i = add nuw nsw i64 %indvars.iv32.i, 1
  %30 = zext i16 %29 to i64
  %cmp.i = icmp ult i64 %indvars.iv.next33.i, %30
  br i1 %cmp.i, label %for.body.i306, label %for.end.i

for.end.i:                                        ; preds = %for.inc.i, %if.then23.i, %if.end
  %twiceMaxEdgePower.3.i = phi i16 [ 63, %if.end ], [ %twiceMaxEdgePower.2.ph.i, %for.inc.i ], [ %call27.i, %if.then23.i ]
  %ic_flags.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %31 = load i32, i32* %ic_flags.i, align 4
  %and42.i = and i32 %31, 1152
  %cmp43.i = icmp eq i32 %and42.i, 1152
  br i1 %cmp43.i, label %if.then45.i, label %if.end113.i

if.then45.i:                                      ; preds = %for.end.i
  %32 = and i32 %call2.i, 240
  %conv49.i = or i32 %32, 1
  %33 = load i16, i16* %ee_numCtls.i, align 4
  %cmp5315.i = icmp eq i16 %33, 0
  br i1 %cmp5315.i, label %if.end113.i, label %for.body55.lr.ph.i

for.body55.lr.ph.i:                               ; preds = %if.then45.i
  %cmp89.i = icmp eq i32 %32, 240
  br label %for.body55.i

for.body55.i:                                     ; preds = %for.inc109.i, %for.body55.lr.ph.i
  %34 = phi i16 [ %33, %for.body55.lr.ph.i ], [ %37, %for.inc109.i ]
  %indvars.iv.i309 = phi i64 [ 0, %for.body55.lr.ph.i ], [ %indvars.iv.next.i310, %for.inc109.i ]
  %twiceMaxEdgePowerCck.018.i = phi i16 [ 63, %for.body55.lr.ph.i ], [ %twiceMaxEdgePowerCck.2.ph.i, %for.inc109.i ]
  %arrayidx58.i = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 66, i64 %indvars.iv.i309
  %35 = load i16, i16* %arrayidx58.i, align 2
  %conv59.i = zext i16 %35 to i32
  %cmp60.i = icmp eq i16 %35, 0
  br i1 %cmp60.i, label %for.inc109.i, label %if.end63.i

if.end63.i:                                       ; preds = %for.body55.i
  %cmp69.i = icmp eq i32 %conv49.i, %conv59.i
  br i1 %cmp69.i, label %if.then81.i, label %lor.lhs.false71.i

lor.lhs.false71.i:                                ; preds = %if.end63.i
  %and77.i = and i32 %conv59.i, 15
  %or78.i = or i32 %and77.i, 240
  %cmp79.i = icmp eq i32 %conv49.i, %or78.i
  br i1 %cmp79.i, label %if.then81.i, label %for.inc109.i

if.then81.i:                                      ; preds = %lor.lhs.false71.i, %if.end63.i
  %36 = shl i64 %indvars.iv.i309, 3
  %arrayidx85.i = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 83, i64 %36
  %call86.i = tail call fastcc zeroext i16 @ar5212GetMaxEdgePower(i16 zeroext %20, %struct.RD_EDGES_POWER* %arrayidx85.i) #6
  br i1 %cmp89.i, label %if.then91.i, label %if.end113.loopexit.i

if.then91.i:                                      ; preds = %if.then81.i
  %cmp94.i = icmp ult i16 %twiceMaxEdgePowerCck.018.i, %call86.i
  %cond101.i = select i1 %cmp94.i, i16 %twiceMaxEdgePowerCck.018.i, i16 %call86.i
  %.pre35.i = load i16, i16* %ee_numCtls.i, align 4
  br label %for.inc109.i

for.inc109.i:                                     ; preds = %if.then91.i, %lor.lhs.false71.i, %for.body55.i
  %37 = phi i16 [ %34, %lor.lhs.false71.i ], [ %.pre35.i, %if.then91.i ], [ %34, %for.body55.i ]
  %twiceMaxEdgePowerCck.2.ph.i = phi i16 [ %twiceMaxEdgePowerCck.018.i, %lor.lhs.false71.i ], [ %cond101.i, %if.then91.i ], [ %twiceMaxEdgePowerCck.018.i, %for.body55.i ]
  %indvars.iv.next.i310 = add nuw nsw i64 %indvars.iv.i309, 1
  %38 = zext i16 %37 to i64
  %cmp53.i = icmp ult i64 %indvars.iv.next.i310, %38
  br i1 %cmp53.i, label %for.body55.i, label %if.end113.loopexit.i

if.end113.loopexit.i:                             ; preds = %for.inc109.i, %if.then81.i
  %twiceMaxEdgePowerCck.3.ph.i = phi i16 [ %call86.i, %if.then81.i ], [ %twiceMaxEdgePowerCck.2.ph.i, %for.inc109.i ]
  %.pre36.i = load i32, i32* %ic_flags.i, align 4
  br label %if.end113.i

if.end113.i:                                      ; preds = %if.end113.loopexit.i, %if.then45.i, %for.end.i
  %39 = phi i32 [ %31, %for.end.i ], [ %31, %if.then45.i ], [ %.pre36.i, %if.end113.loopexit.i ]
  %twiceMaxEdgePowerCck.3.i = phi i16 [ %twiceMaxEdgePower.3.i, %for.end.i ], [ 63, %if.then45.i ], [ %twiceMaxEdgePowerCck.3.ph.i, %if.end113.loopexit.i ]
  %and115.i = and i32 %39, 256
  %cmp116.i = icmp eq i32 %and115.i, 0
  %ah_eepromGet.i = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13, i64 6
  %40 = bitcast i32* %ah_eepromGet.i to i32 (%struct.ath_hal*, i32, i8*)**
  %41 = load i32 (%struct.ath_hal*, i32, i8*)*, i32 (%struct.ath_hal*, i32, i8*)** %40, align 8
  br i1 %cmp116.i, label %if.else120.i, label %if.then118.i

if.then118.i:                                     ; preds = %if.end113.i
  %call119.i = call i32 %41(%struct.ath_hal* nonnull %ah, i32 33, i8* nonnull %twiceAntennaGain.i) #6
  br label %if.end123.i

if.else120.i:                                     ; preds = %if.end113.i
  %call122.i = call i32 %41(%struct.ath_hal* nonnull %ah, i32 34, i8* nonnull %twiceAntennaGain.i) #6
  br label %if.end123.i

if.end123.i:                                      ; preds = %if.else120.i, %if.then118.i
  %42 = load i8, i8* %twiceAntennaGain.i, align 1
  %conv124.i = sext i8 %42 to i32
  %call125.i = call i32 @ath_hal_getantennareduction(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan, i32 %conv124.i) #6
  %43 = load i32, i32* %ic_flags.i, align 4
  %and128.i = and i32 %43, 1088
  %cmp129.i = icmp eq i32 %and128.i, 0
  br i1 %cmp129.i, label %if.end348.i, label %if.then131.i

if.then131.i:                                     ; preds = %if.end123.i
  %44 = trunc i32 %43 to i8
  %cmp134.i = icmp slt i8 %44, 0
  br i1 %cmp134.i, label %if.then136.i, label %if.else139.i

if.then136.i:                                     ; preds = %if.then131.i
  %arraydecay137.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 82, i32 3, i64 0
  %numTargetPwr_11g.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 82, i32 2
  %45 = load i16, i16* %numTargetPwr_11g.i, align 2
  call fastcc void @ar5212GetTargetPowers(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan, %struct.trgtPowerInfo* nonnull %arraydecay137.i, i16 zeroext %45, %struct.trgtPowerInfo* nonnull %targetPowerOfdm.i) #6
  br label %if.end143.i

if.else139.i:                                     ; preds = %if.then131.i
  %arraydecay141.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 82, i32 1, i64 0
  %numTargetPwr_11a.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 82, i32 0
  %46 = load i16, i16* %numTargetPwr_11a.i, align 4
  call fastcc void @ar5212GetTargetPowers(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan, %struct.trgtPowerInfo* nonnull %arraydecay141.i, i16 zeroext %46, %struct.trgtPowerInfo* nonnull %targetPowerOfdm.i) #6
  br label %if.end143.i

if.end143.i:                                      ; preds = %if.else139.i, %if.then136.i
  %conv144.i = zext i16 %twiceMaxEdgePower.3.i to i32
  %conv145.i = zext i16 %mul.i to i32
  %sext6.i = shl i32 %call125.i, 24
  %conv146.i = ashr exact i32 %sext6.i, 24
  %sub.i311 = sub nsw i32 %conv145.i, %conv146.i
  %cmp147.i = icmp sgt i32 %sub.i311, %conv144.i
  %conv144.sub.i = select i1 %cmp147.i, i32 %conv144.i, i32 %sub.i311
  %conv157.i = trunc i32 %conv144.sub.i to i16
  %47 = load i32, i32* %ic_flags.i, align 4
  %and159.i = and i32 %47, 16
  %cmp160.i = icmp eq i32 %and159.i, 0
  %.pre39.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 0
  br i1 %cmp160.i, label %if.end202.i, label %if.then162.i

if.then162.i:                                     ; preds = %if.end143.i
  %48 = load i16, i16* %.pre39.i, align 8
  %cmp164.i = icmp ugt i16 %48, 12288
  br i1 %cmp164.i, label %if.end179.i, label %if.end202.i

if.end179.i:                                      ; preds = %if.then162.i
  %sext9.i = shl i32 %conv144.sub.i, 16
  %conv167.i = ashr exact i32 %sext9.i, 16
  %ee_turbo2WMaxPower5.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 7
  %49 = load i16, i16* %ee_turbo2WMaxPower5.i, align 2
  %conv168.i = zext i16 %49 to i32
  %cmp169.i = icmp slt i32 %conv167.i, %conv168.i
  %conv167.conv168.i = select i1 %cmp169.i, i32 %conv167.i, i32 %conv168.i
  %conv178.i = trunc i32 %conv167.conv168.i to i16
  %cmp182.i = icmp ugt i16 %48, 16383
  %50 = trunc i32 %47 to i8
  %cmp186.i = icmp slt i8 %50, 0
  %or.cond.i = and i1 %cmp186.i, %cmp182.i
  br i1 %or.cond.i, label %if.then188.i, label %if.end202.i

if.then188.i:                                     ; preds = %if.end179.i
  %sext13.i = shl i32 %conv167.conv168.i, 16
  %conv189.i = ashr exact i32 %sext13.i, 16
  %ee_turbo2WMaxPower2.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 8
  %51 = load i16, i16* %ee_turbo2WMaxPower2.i, align 8
  %conv190.i = zext i16 %51 to i32
  %cmp191.i = icmp slt i32 %conv189.i, %conv190.i
  %scaledPower.0..i = select i1 %cmp191.i, i16 %conv178.i, i16 %51
  br label %if.end202.i

if.end202.i:                                      ; preds = %if.then188.i, %if.end179.i, %if.then162.i, %if.end143.i
  %scaledPower.1.i = phi i16 [ %conv157.i, %if.then162.i ], [ %conv178.i, %if.end179.i ], [ %scaledPower.0..i, %if.then188.i ], [ %conv157.i, %if.end143.i ]
  %conv203.i = sext i16 %scaledPower.1.i to i32
  %twicePwr6_24.i = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %targetPowerOfdm.i, i64 0, i32 3
  %52 = load i16, i16* %twicePwr6_24.i, align 2
  %conv204.i = zext i16 %52 to i32
  %cmp205.i = icmp slt i32 %conv203.i, %conv204.i
  %cond213.i = select i1 %cmp205.i, i32 %conv203.i, i32 %conv204.i
  %sub218.i = sub nsw i32 %cond213.i, %tpcInDb.0
  %sext8.i = shl i32 %sub218.i, 16
  %conv220.i = ashr exact i32 %sext8.i, 16
  %53 = icmp sgt i32 %conv220.i, 0
  %cond227.i = select i1 %53, i32 %conv220.i, i32 0
  %conv230.i = sext i16 %spec.select to i32
  %cmp231.i = icmp slt i32 %cond227.i, %conv230.i
  %cond238.i = select i1 %cmp231.i, i32 %cond227.i, i32 %conv230.i
  %conv239.i = trunc i32 %cond238.i to i16
  %arrayidx241.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 4
  store i16 %conv239.i, i16* %arrayidx241.i, align 2
  %arrayidx242.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 3
  store i16 %conv239.i, i16* %arrayidx242.i, align 2
  %arrayidx243.i = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 120
  %54 = bitcast i32 (%struct.ath_hal*)** %arrayidx243.i to i16*
  store i16 %conv239.i, i16* %54, align 2
  %arrayidx244.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 1
  store i16 %conv239.i, i16* %arrayidx244.i, align 2
  store i16 %conv239.i, i16* %arraydecay.i, align 2
  %conv247.i = and i32 %cond238.i, 65535
  %twicePwr36.i = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %targetPowerOfdm.i, i64 0, i32 2
  %55 = load i16, i16* %twicePwr36.i, align 2
  %conv248.i = zext i16 %55 to i32
  %cmp249.i = icmp ult i32 %conv247.i, %conv248.i
  %cond258.i = select i1 %cmp249.i, i32 %conv247.i, i32 %conv248.i
  %conv259.i = trunc i32 %cond258.i to i16
  %arrayidx260.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 5
  store i16 %conv259.i, i16* %arrayidx260.i, align 2
  %twicePwr48.i = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %targetPowerOfdm.i, i64 0, i32 1
  %56 = load i16, i16* %twicePwr48.i, align 2
  %cmp264.i = icmp ugt i16 %56, %conv239.i
  %..i = select i1 %cmp264.i, i16 %conv239.i, i16 %56
  %arrayidx275.i = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 121
  %57 = bitcast i32 (%struct.ath_hal*)** %arrayidx275.i to i16*
  store i16 %..i, i16* %57, align 2
  %twicePwr54.i = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %targetPowerOfdm.i, i64 0, i32 0
  %58 = load i16, i16* %twicePwr54.i, align 2
  %cmp279.i = icmp ugt i16 %58, %conv239.i
  %cond288.in.i = select i1 %cmp279.i, i16 %conv239.i, i16 %58
  %arrayidx290.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 7
  store i16 %cond288.in.i, i16* %arrayidx290.i, align 2
  %59 = load i16, i16* %.pre39.i, align 8
  %cmp293.i = icmp ugt i16 %59, 16383
  br i1 %cmp293.i, label %if.then295.i, label %if.end331.i

if.then295.i:                                     ; preds = %if.end202.i
  %60 = load i32, i32* %ic_flags.i, align 4
  %61 = trunc i32 %60 to i8
  %cmp299.i = icmp slt i8 %61, 0
  %ee_xrTargetPower2.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 10
  %ee_xrTargetPower5.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 9
  %cond306.in.in.i = select i1 %cmp299.i, i16* %ee_xrTargetPower2.i, i16* %ee_xrTargetPower5.i
  %cond306.in.i = load i16, i16* %cond306.in.in.i, align 2
  %cond306.i = zext i16 %cond306.in.i to i32
  %cmp307.i = icmp slt i32 %cond238.i, %cond306.i
  br i1 %cmp307.i, label %cond.end324.i, label %cond.false311.i

cond.false311.i:                                  ; preds = %if.then295.i
  br i1 %cmp299.i, label %cond.true316.i, label %cond.false319.i

cond.true316.i:                                   ; preds = %cond.false311.i
  %62 = load i16, i16* %ee_xrTargetPower2.i, align 4
  %conv318.i = zext i16 %62 to i32
  br label %cond.end324.i

cond.false319.i:                                  ; preds = %cond.false311.i
  %63 = load i16, i16* %ee_xrTargetPower5.i, align 2
  %conv321.i = zext i16 %63 to i32
  br label %cond.end324.i

cond.end324.i:                                    ; preds = %cond.false319.i, %cond.true316.i, %if.then295.i
  %cond325.i = phi i32 [ %conv318.i, %cond.true316.i ], [ %conv321.i, %cond.false319.i ], [ %cond238.i, %if.then295.i ]
  %conv326.i = trunc i32 %cond325.i to i16
  br label %if.end331.i

if.end331.i:                                      ; preds = %if.end202.i, %cond.end324.i
  %conv239.i.sink = phi i16 [ %conv326.i, %cond.end324.i ], [ %conv239.i, %if.end202.i ]
  %arrayidx330.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 15
  store i16 %conv239.i.sink, i16* %arrayidx330.i, align 2
  %64 = load i16, i16* %maxPower, align 2
  %conv332.i = sext i16 %64 to i32
  %ah_ofdmTxPower.i = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 157
  %65 = bitcast void (%struct.ath_hal*, i32)** %ah_ofdmTxPower.i to i32*
  store i32 %conv332.i, i32* %65, align 8
  store i16 %cond288.in.i, i16* %minPower, align 2
  store i16 %conv239.i, i16* %maxPower, align 2
  %.pre37.i = load i32, i32* %ic_flags.i, align 4
  br label %if.end348.i

if.end348.i:                                      ; preds = %if.end331.i, %if.end123.i
  %66 = phi i32 [ %43, %if.end123.i ], [ %.pre37.i, %if.end331.i ]
  %and350.i = and i32 %66, 1056
  %cmp351.i = icmp eq i32 %and350.i, 0
  br i1 %cmp351.i, label %if.end348.if.then544_crit_edge.i, label %if.then353.i

if.end348.if.then544_crit_edge.i:                 ; preds = %if.end348.i
  %.pre38.i = load i16, i16* %maxPower, align 2
  br label %ar5212SetRateTable.exit

if.then353.i:                                     ; preds = %if.end348.i
  %arraydecay355.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 82, i32 5, i64 0
  %numTargetPwr_11b.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %21, i64 0, i32 82, i32 4
  %67 = load i16, i16* %numTargetPwr_11b.i, align 2
  call fastcc void @ar5212GetTargetPowers(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan, %struct.trgtPowerInfo* nonnull %arraydecay355.i, i16 zeroext %67, %struct.trgtPowerInfo* nonnull %targetPowerCck.i) #6
  %conv357.i = zext i16 %twiceMaxEdgePowerCck.3.i to i32
  %conv358.i = zext i16 %mul.i to i32
  %sext.i = shl i32 %call125.i, 24
  %conv359.i = ashr exact i32 %sext.i, 24
  %sub360.i = sub nsw i32 %conv358.i, %conv359.i
  %cmp361.i = icmp sgt i32 %sub360.i, %conv357.i
  %conv357.sub360.i = select i1 %cmp361.i, i32 %conv357.i, i32 %sub360.i
  %sext2.i = shl i32 %conv357.sub360.i, 16
  %conv373.i = ashr exact i32 %sext2.i, 16
  %twicePwr6_24374.i = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %targetPowerCck.i, i64 0, i32 3
  %68 = load i16, i16* %twicePwr6_24374.i, align 2
  %conv375.i = zext i16 %68 to i32
  %cmp376.i = icmp slt i32 %conv373.i, %conv375.i
  %cond384.i = select i1 %cmp376.i, i32 %conv373.i, i32 %conv375.i
  %sub416.i = sub nsw i32 %cond384.i, %tpcInDb.0
  %sext3.i = shl i32 %sub416.i, 16
  %conv418.i = ashr exact i32 %sext3.i, 16
  %69 = icmp sgt i32 %conv418.i, 0
  %cond425.i = select i1 %69, i32 %conv418.i, i32 0
  %conv428.i = sext i16 %spec.select to i32
  %cmp429.i = icmp slt i32 %cond425.i, %conv428.i
  %cond436.i = select i1 %cmp429.i, i32 %cond425.i, i32 %conv428.i
  %cmp443.i = icmp slt i32 %cond436.i, %conv375.i
  %cond451.i = select i1 %cmp443.i, i32 %cond436.i, i32 %conv375.i
  %conv452.i = trunc i32 %cond451.i to i16
  %arrayidx453.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 8
  store i16 %conv452.i, i16* %arrayidx453.i, align 2
  %twicePwr36455.i = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %targetPowerCck.i, i64 0, i32 2
  %70 = load i16, i16* %twicePwr36455.i, align 2
  %conv456.i = zext i16 %70 to i32
  %cmp457.i = icmp slt i32 %cond436.i, %conv456.i
  %cond465.i = select i1 %cmp457.i, i32 %cond436.i, i32 %conv456.i
  %conv466.i = trunc i32 %cond465.i to i16
  %arrayidx467.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 9
  store i16 %conv466.i, i16* %arrayidx467.i, align 2
  %arrayidx469.i = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 122
  %71 = bitcast i32 (%struct.ath_hal*)** %arrayidx469.i to i16*
  store i16 %conv466.i, i16* %71, align 2
  %twicePwr48471.i = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %targetPowerCck.i, i64 0, i32 1
  %72 = load i16, i16* %twicePwr48471.i, align 2
  %conv472.i = zext i16 %72 to i32
  %cmp473.i = icmp slt i32 %cond436.i, %conv472.i
  %cond481.i = select i1 %cmp473.i, i32 %cond436.i, i32 %conv472.i
  %conv482.i = trunc i32 %cond481.i to i16
  %arrayidx483.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 11
  store i16 %conv482.i, i16* %arrayidx483.i, align 2
  %arrayidx485.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 12
  store i16 %conv482.i, i16* %arrayidx485.i, align 2
  %twicePwr54487.i = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %targetPowerCck.i, i64 0, i32 0
  %73 = load i16, i16* %twicePwr54487.i, align 2
  %conv488.i = zext i16 %73 to i32
  %cmp489.i = icmp slt i32 %cond436.i, %conv488.i
  %cond497.i = select i1 %cmp489.i, i32 %cond436.i, i32 %conv488.i
  %conv498.i = trunc i32 %cond497.i to i16
  %arrayidx499.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 13
  store i16 %conv498.i, i16* %arrayidx499.i, align 2
  %arrayidx501.i = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 123
  %74 = bitcast i32 (%struct.ath_hal*, i16)** %arrayidx501.i to i16*
  store i16 %conv498.i, i16* %74, align 2
  %sext4.i = shl i32 %cond497.i, 16
  %conv530.i = ashr exact i32 %sext4.i, 16
  %75 = load i16, i16* %minPower, align 2
  %conv531.i = sext i16 %75 to i32
  %cmp532.i = icmp slt i32 %conv530.i, %conv531.i
  br i1 %cmp532.i, label %if.then534.i, label %if.end535.i

if.then534.i:                                     ; preds = %if.then353.i
  store i16 %conv498.i, i16* %minPower, align 2
  br label %if.end535.i

if.end535.i:                                      ; preds = %if.then534.i, %if.then353.i
  %sext5.i = shl i32 %cond465.i, 16
  %conv536.i = ashr exact i32 %sext5.i, 16
  %76 = load i16, i16* %maxPower, align 2
  %conv537.i = sext i16 %76 to i32
  %cmp538.i = icmp sgt i32 %conv536.i, %conv537.i
  br i1 %cmp538.i, label %if.then540.i, label %ar5212SetRateTable.exit

if.then540.i:                                     ; preds = %if.end535.i
  store i16 %conv466.i, i16* %maxPower, align 2
  br label %ar5212SetRateTable.exit

ar5212SetRateTable.exit:                          ; preds = %if.end348.if.then544_crit_edge.i, %if.end535.i, %if.then540.i
  %77 = phi i16 [ %.pre38.i, %if.end348.if.then544_crit_edge.i ], [ %conv466.i, %if.then540.i ], [ %76, %if.end535.i ]
  %conv545.i = sext i16 %77 to i32
  %ah_tx6PowerInHalfDbm.i = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 24
  store i32 %conv545.i, i32* %ah_tx6PowerInHalfDbm.i, align 4
  %ah_maxPowerLevel.i = getelementptr inbounds %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 30
  store i16 %77, i16* %ah_maxPowerLevel.i, align 2
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %23) #5
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %22) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %twiceAntennaGain.i) #5
  %ah_rfHal = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 54
  %78 = bitcast i32 (%struct.ath_hal*, i32)** %ah_rfHal to %struct.RfHalFuncs**
  %79 = load %struct.RfHalFuncs*, %struct.RfHalFuncs** %78, align 8
  %setPowerTable = getelementptr inbounds %struct.RfHalFuncs, %struct.RfHalFuncs* %79, i64 0, i32 6
  %80 = load i32 (%struct.ath_hal*, i16*, i16*, %struct.ieee80211_channel*, i16*)*, i32 (%struct.ath_hal*, i16*, i16*, %struct.ieee80211_channel*, i16*)** %setPowerTable, align 8
  %call15 = call i32 %80(%struct.ath_hal* nonnull %ah, i16* nonnull %minPower, i16* nonnull %maxPower, %struct.ieee80211_channel* nonnull %chan, i16* %rfXpdGain) #6
  %tobool16 = icmp eq i32 %call15, 0
  br i1 %tobool16, label %cleanup, label %if.end18

if.end18:                                         ; preds = %ar5212SetRateTable.exit
  %81 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %82 = load i32, i32* %81, align 4
  switch i32 %82, label %if.then40 [
    i32 7, label %if.end45
    i32 11, label %if.end45
    i32 10, label %if.end45
    i32 9, label %if.end45
  ]

if.then40:                                        ; preds = %if.end18
  %arrayidx42 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 15
  %83 = load i16, i16* %arrayidx42, align 2
  %add = add i16 %83, 4
  store i16 %add, i16* %arrayidx42, align 2
  br label %if.end45

if.end45:                                         ; preds = %if.end18, %if.end18, %if.end18, %if.end18, %if.then40
  %ah_txPowerIndexOffset = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 36
  %.pre = load i16, i16* %ah_txPowerIndexOffset, align 4
  br label %for.body

for.body:                                         ; preds = %for.body.1, %if.end45
  %indvars.iv320 = phi i64 [ 0, %if.end45 ], [ %indvars.iv.next321.1, %for.body.1 ]
  %arrayidx52 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 %indvars.iv320
  %84 = load i16, i16* %arrayidx52, align 2
  %add54 = add i16 %84, %.pre
  %85 = icmp ult i16 %add54, 63
  %spec.select302 = select i1 %85, i16 %add54, i16 63
  store i16 %spec.select302, i16* %arrayidx52, align 2
  %indvars.iv.next321 = or i64 %indvars.iv320, 1
  %exitcond322 = icmp eq i64 %indvars.iv.next321, 37
  br i1 %exitcond322, label %for.end, label %for.body.1

for.end:                                          ; preds = %for.body
  %ee_eepMap = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %5, i64 0, i32 24
  %86 = load i16, i16* %ee_eepMap, align 2
  %cmp68 = icmp ult i16 %86, 2
  br i1 %cmp68, label %if.then70, label %if.end120

if.then70:                                        ; preds = %for.end
  %ah_phyRev = getelementptr inbounds %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 19
  %87 = load i16, i16* %ah_phyRev, align 2
  %cmp72 = icmp ult i16 %87, 66
  br i1 %cmp72, label %land.lhs.true74, label %for.body97.preheader

land.lhs.true74:                                  ; preds = %if.then70
  %88 = load i32, i32* %ic_flags.i, align 4
  %and = and i32 %88, 1152
  %cmp75 = icmp eq i32 %and, 1152
  br i1 %cmp75, label %if.then77, label %for.body97.preheader

if.then77:                                        ; preds = %land.lhs.true74
  %cmp79 = icmp eq i16 %3, 2484
  %ee_cckOfdmPwrDelta = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %5, i64 0, i32 17
  %89 = load i8, i8* %ee_cckOfdmPwrDelta, align 2
  br i1 %cmp79, label %if.then81, label %if.else85

if.then81:                                        ; preds = %if.then77
  %conv82 = zext i8 %89 to i32
  %ee_scaledCh14FilterCckDelta = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %5, i64 0, i32 23
  %90 = load i16, i16* %ee_scaledCh14FilterCckDelta, align 4
  %conv83 = zext i16 %90 to i32
  %sub = sub nsw i32 %conv82, %conv83
  %div = sdiv i32 %sub, 5
  br label %if.end91

if.else85:                                        ; preds = %if.then77
  %div89312 = udiv i8 %89, 5
  %div89.zext = zext i8 %div89312 to i32
  br label %if.end91

if.end91:                                         ; preds = %if.else85, %if.then81
  %cckOfdmPwrDelta.0.in = phi i32 [ %div, %if.then81 ], [ %div89.zext, %if.else85 ]
  %conv92 = and i32 %cckOfdmPwrDelta.0.in, 65535
  %91 = load %struct.HAL_EEPROM*, %struct.HAL_EEPROM** %4, align 8
  %92 = bitcast [37 x i16]* %ratesIndex.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 74, i8* nonnull %92) #5
  %ee_cckOfdmGainDelta.i = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %91, i64 0, i32 22
  %93 = load i16, i16* %ee_cckOfdmGainDelta.i, align 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %92, i8* nonnull align 4 %13, i64 74, i1 false) #5
  br label %for.body.i

for.body.i:                                       ; preds = %while.end.i, %if.end91
  %indvars.iv.i = phi i64 [ 8, %if.end91 ], [ %indvars.iv.next.i, %while.end.i ]
  %arrayidx.i = getelementptr [37 x i16], [37 x i16]* %ratesIndex.i, i64 0, i64 %indvars.iv.i
  %94 = load i16, i16* %arrayidx.i, align 2
  %sub.i = sub i16 %94, %93
  store i16 %sub.i, i16* %arrayidx.i, align 2
  br label %while.body.i

while.condthread-pre-split.i:                     ; preds = %if.else53.i, %if.end51.i, %while.body.i
  %.pr135.i = phi i16 [ %spec.select.i, %while.body.i ], [ %.pr136.i, %if.end51.i ], [ %spec.select.i, %if.else53.i ]
  %iter.0.ph.i = phi i16 [ %iter.0130.i, %while.body.i ], [ %inc52.i, %if.end51.i ], [ %iter.0130.i, %if.else53.i ]
  %jj.0.ph.i = phi i16 [ 15, %while.body.i ], [ 0, %if.end51.i ], [ %inc54.i, %if.else53.i ]
  %cmp7.i = icmp ult i16 %jj.0.ph.i, 16
  br i1 %cmp7.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.condthread-pre-split.i, %for.body.i
  %.pr134.i = phi i16 [ %sub.i, %for.body.i ], [ %.pr135.i, %while.condthread-pre-split.i ]
  %jj.0132.i = phi i16 [ 0, %for.body.i ], [ %jj.0.ph.i, %while.condthread-pre-split.i ]
  %iter.0130.i = phi i16 [ 0, %for.body.i ], [ %iter.0.ph.i, %while.condthread-pre-split.i ]
  %95 = icmp sgt i16 %.pr134.i, 0
  %spec.select.i = select i1 %95, i16 %.pr134.i, i16 0
  %cmp17.i = icmp eq i16 %jj.0132.i, 8
  br i1 %cmp17.i, label %while.condthread-pre-split.i, label %if.end20.i

if.end20.i:                                       ; preds = %while.body.i
  %idxprom25.i = zext i16 %jj.0132.i to i64
  %arrayidx26.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 %idxprom25.i
  %96 = load i16, i16* %arrayidx26.i, align 2
  %cmp28.i = icmp eq i16 %spec.select.i, %96
  br i1 %cmp28.i, label %if.then30.i, label %if.else53.i

if.then30.i:                                      ; preds = %if.end20.i
  %cmp35.i = icmp slt i16 %.pr134.i, 1
  br i1 %cmp35.i, label %if.end51.i, label %if.else.i

if.else.i:                                        ; preds = %if.then30.i
  %cmp41.i = icmp ugt i16 %iter.0130.i, 50
  br i1 %cmp41.i, label %if.then43.i, label %if.else47.i

if.then43.i:                                      ; preds = %if.else.i
  %inc46.i = add nuw i16 %spec.select.i, 1
  br label %if.end51.i

if.else47.i:                                      ; preds = %if.else.i
  %dec.i = add nsw i16 %spec.select.i, -1
  br label %if.end51.i

if.end51.i:                                       ; preds = %if.then30.i, %if.else47.i, %if.then43.i
  %.pr136.i = phi i16 [ %inc46.i, %if.then43.i ], [ %dec.i, %if.else47.i ], [ 1, %if.then30.i ]
  %inc52.i = add i16 %iter.0130.i, 1
  br label %while.condthread-pre-split.i

if.else53.i:                                      ; preds = %if.end20.i
  %inc54.i = add i16 %jj.0132.i, 1
  br label %while.condthread-pre-split.i

while.end.i:                                      ; preds = %while.condthread-pre-split.i
  %97 = icmp slt i16 %.pr135.i, 63
  %spec.store.select138.i = select i1 %97, i16 %.pr135.i, i16 63
  store i16 %spec.store.select138.i, i16* %arrayidx.i, align 2
  %arrayidx67.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 %indvars.iv.i
  %98 = load i16, i16* %arrayidx67.i, align 2
  %conv68.i = zext i16 %98 to i32
  %sub69.i = sub nsw i32 %conv68.i, %conv92
  %99 = icmp sgt i32 %sub69.i, 0
  %spec.store.select.i = select i1 %99, i32 %sub69.i, i32 0
  %100 = load i16*, i16** %8, align 8
  %101 = zext i32 %spec.store.select.i to i64
  %arrayidx75.i = getelementptr i16, i16* %100, i64 %101
  %102 = load i16, i16* %arrayidx75.i, align 2
  %idxprom79.i = sext i16 %spec.store.select138.i to i64
  %arrayidx80.i = getelementptr i16, i16* %100, i64 %idxprom79.i
  store i16 %102, i16* %arrayidx80.i, align 2
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 15
  br i1 %exitcond.i, label %ar5212CorrectGainDelta.exit, label %for.body.i

ar5212CorrectGainDelta.exit:                      ; preds = %while.end.i
  %arrayidx88.i = getelementptr inbounds [37 x i16], [37 x i16]* %ratesIndex.i, i64 0, i64 8
  %103 = load i16, i16* %arrayidx88.i, align 16
  %arrayidx91.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 8
  store i16 %103, i16* %arrayidx91.i, align 2
  %arrayidx88.1.i = getelementptr inbounds [37 x i16], [37 x i16]* %ratesIndex.i, i64 0, i64 9
  %104 = load i16, i16* %arrayidx88.1.i, align 2
  %arrayidx91.1.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 9
  store i16 %104, i16* %arrayidx91.1.i, align 2
  %arrayidx88.2.i = getelementptr inbounds [37 x i16], [37 x i16]* %ratesIndex.i, i64 0, i64 10
  %105 = load i16, i16* %arrayidx88.2.i, align 4
  %arrayidx91.2.i = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 122
  %106 = bitcast i32 (%struct.ath_hal*)** %arrayidx91.2.i to i16*
  store i16 %105, i16* %106, align 2
  %arrayidx88.3.i = getelementptr inbounds [37 x i16], [37 x i16]* %ratesIndex.i, i64 0, i64 11
  %107 = load i16, i16* %arrayidx88.3.i, align 2
  %arrayidx91.3.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 11
  store i16 %107, i16* %arrayidx91.3.i, align 2
  %arrayidx88.4.i = getelementptr inbounds [37 x i16], [37 x i16]* %ratesIndex.i, i64 0, i64 12
  %108 = load i16, i16* %arrayidx88.4.i, align 8
  %arrayidx91.4.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 12
  store i16 %108, i16* %arrayidx91.4.i, align 2
  %arrayidx88.5.i = getelementptr inbounds [37 x i16], [37 x i16]* %ratesIndex.i, i64 0, i64 13
  %109 = load i16, i16* %arrayidx88.5.i, align 2
  %arrayidx91.5.i = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 13
  store i16 %109, i16* %arrayidx91.5.i, align 2
  %arrayidx88.6.i = getelementptr inbounds [37 x i16], [37 x i16]* %ratesIndex.i, i64 0, i64 14
  %110 = load i16, i16* %arrayidx88.6.i, align 4
  %arrayidx91.6.i = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 123
  %111 = bitcast i32 (%struct.ath_hal*, i16)** %arrayidx91.6.i to i16*
  store i16 %110, i16* %111, align 2
  call void @llvm.lifetime.end.p0i8(i64 74, i8* nonnull %92) #5
  br label %for.body97.preheader

for.body97.preheader:                             ; preds = %ar5212CorrectGainDelta.exit, %land.lhs.true74, %if.then70
  br label %for.body97

for.body97:                                       ; preds = %for.body97.preheader, %for.body97
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body97 ], [ 0, %for.body97.preheader ]
  %112 = load i16*, i16** %8, align 8
  %113 = shl nuw i64 %indvars.iv, 1
  %114 = or i64 %113, 1
  %arrayidx103 = getelementptr i16, i16* %112, i64 %114
  %115 = load i16, i16* %arrayidx103, align 2
  %conv104 = zext i16 %115 to i32
  %and106 = shl i32 %conv104, 24
  %arrayidx111 = getelementptr i16, i16* %112, i64 %113
  %116 = load i16, i16* %arrayidx111, align 2
  %conv112 = zext i16 %116 to i32
  %shl113 = shl nuw nsw i32 %conv112, 8
  %and115 = or i32 %and106, %shl113
  %or116 = or i32 %and115, 16711935
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %117 = shl i32 %indvars.iv.tr, 2
  %118 = add i32 %117, 41344
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 %118, i32 %or116) #6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %if.end120, label %for.body97

if.end120:                                        ; preds = %for.body97, %for.end
  %arrayidx122 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 3
  %119 = load i16, i16* %arrayidx122, align 2
  %120 = and i16 %119, 63
  %and124 = zext i16 %120 to i32
  %shl125 = shl nuw nsw i32 %and124, 24
  %arrayidx128 = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 120
  %121 = bitcast i32 (%struct.ath_hal*)** %arrayidx128 to i16*
  %122 = load i16, i16* %121, align 4
  %123 = and i16 %122, 63
  %and130 = zext i16 %123 to i32
  %shl131 = shl nuw nsw i32 %and130, 16
  %or133 = or i32 %shl131, %shl125
  %arrayidx135 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 1
  %124 = load i16, i16* %arrayidx135, align 2
  %125 = shl i16 %124, 8
  %126 = and i16 %125, 16128
  %shl138 = zext i16 %126 to i32
  %or140 = or i32 %or133, %shl138
  %arrayidx142 = getelementptr [37 x i16], [37 x i16]* %ah_ratesArray, i64 0, i64 0
  %127 = load i16, i16* %arrayidx142, align 4
  %128 = and i16 %127, 63
  %and144 = zext i16 %128 to i32
  %or147 = or i32 %or140, %and144
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39220, i32 %or147) #6
  %arrayidx149 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 7
  %129 = load i16, i16* %arrayidx149, align 2
  %130 = and i16 %129, 63
  %and151 = zext i16 %130 to i32
  %shl152 = shl nuw nsw i32 %and151, 24
  %arrayidx155 = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 121
  %131 = bitcast i32 (%struct.ath_hal*)** %arrayidx155 to i16*
  %132 = load i16, i16* %131, align 4
  %133 = and i16 %132, 63
  %and157 = zext i16 %133 to i32
  %shl158 = shl nuw nsw i32 %and157, 16
  %or160 = or i32 %shl158, %shl152
  %arrayidx162 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 5
  %134 = load i16, i16* %arrayidx162, align 2
  %135 = shl i16 %134, 8
  %136 = and i16 %135, 16128
  %shl165 = zext i16 %136 to i32
  %or167 = or i32 %or160, %shl165
  %arrayidx169 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 4
  %137 = load i16, i16* %arrayidx169, align 4
  %138 = and i16 %137, 63
  %and171 = zext i16 %138 to i32
  %or174 = or i32 %or167, %and171
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39224, i32 %or174) #6
  %arrayidx176 = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 122
  %139 = bitcast i32 (%struct.ath_hal*)** %arrayidx176 to i16*
  %140 = load i16, i16* %139, align 4
  %141 = and i16 %140, 63
  %and178 = zext i16 %141 to i32
  %shl179 = shl nuw nsw i32 %and178, 24
  %arrayidx181 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 9
  %142 = load i16, i16* %arrayidx181, align 2
  %143 = and i16 %142, 63
  %and183 = zext i16 %143 to i32
  %shl184 = shl nuw nsw i32 %and183, 16
  %or185 = or i32 %shl184, %shl179
  %arrayidx187 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 15
  %144 = load i16, i16* %arrayidx187, align 2
  %145 = shl i16 %144, 8
  %146 = and i16 %145, 16128
  %shl190 = zext i16 %146 to i32
  %or191 = or i32 %or185, %shl190
  %arrayidx193 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 8
  %147 = load i16, i16* %arrayidx193, align 4
  %148 = and i16 %147, 63
  %and195 = zext i16 %148 to i32
  %or197 = or i32 %or191, %and195
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41524, i32 %or197) #6
  %arrayidx199 = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 11, i32 123
  %149 = bitcast i32 (%struct.ath_hal*, i16)** %arrayidx199 to i16*
  %150 = load i16, i16* %149, align 4
  %151 = and i16 %150, 63
  %and201 = zext i16 %151 to i32
  %shl202 = shl nuw nsw i32 %and201, 24
  %arrayidx204 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 13
  %152 = load i16, i16* %arrayidx204, align 2
  %153 = and i16 %152, 63
  %and206 = zext i16 %153 to i32
  %shl207 = shl nuw nsw i32 %and206, 16
  %or208 = or i32 %shl207, %shl202
  %arrayidx210 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 12
  %154 = load i16, i16* %arrayidx210, align 4
  %155 = shl i16 %154, 8
  %156 = and i16 %155, 16128
  %shl213 = zext i16 %156 to i32
  %or214 = or i32 %or208, %shl213
  %arrayidx216 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 11
  %157 = load i16, i16* %arrayidx216, align 2
  %158 = and i16 %157, 63
  %and218 = zext i16 %158 to i32
  %or220 = or i32 %or214, %and218
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41528, i32 %or220) #6
  %ah_tpcEnabled = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 154
  %159 = bitcast i32 (%struct.ath_hal*, i32)** %ah_tpcEnabled to i32*
  %160 = load i32, i32* %159, align 8
  %tobool221 = icmp eq i32 %160, 0
  %or223 = select i1 %tobool221, i32 63, i32 127
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39228, i32 %or223) #6
  br label %cleanup

cleanup:                                          ; preds = %ar5212SetRateTable.exit, %if.end120
  %retval.0 = phi i32 [ 1, %if.end120 ], [ 0, %ar5212SetRateTable.exit ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %6) #5
  ret i32 %retval.0

for.body.1:                                       ; preds = %for.body
  %arrayidx52.1 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 54, i64 %indvars.iv.next321
  %161 = load i16, i16* %arrayidx52.1, align 2
  %add54.1 = add i16 %161, %.pre
  %162 = icmp ult i16 %add54.1, 63
  %spec.select302.1 = select i1 %162, i16 %add54.1, i16 63
  store i16 %spec.select302.1, i16* %arrayidx52.1, align 2
  %indvars.iv.next321.1 = add nuw nsw i64 %indvars.iv320, 2
  br label %for.body
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local void @ar5212SetSpurMitigation(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture readonly %chan) local_unnamed_addr #0 {
entry:
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %0 = load i32, i32* %ic_flags, align 4
  %.lobit = lshr i32 %0, 7
  %1 = and i32 %.lobit, 1
  %2 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ic_devdata.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %3 = load i16, i16* %ic_devdata.i, align 2
  %idxprom.i = zext i16 %3 to i64
  %4 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %5 = load i32, i32* %4, align 4
  %cmp1 = icmp eq i32 %5, 15
  br i1 %cmp1, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %6 = trunc i32 %0 to i8
  %cmp = icmp slt i8 %6, 0
  %channel = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %2, i64 0, i32 37, i64 %idxprom.i, i32 0
  %7 = load i16, i16* %channel, align 4
  %cond = select i1 %cmp, i16 2300, i16 4900
  %sub = sub i16 %7, %cond
  %mul = mul i16 %sub, 10
  %mainSpur = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %2, i64 0, i32 37, i64 %idxprom.i, i32 9
  %8 = load i16, i16* %mainSpur, align 2
  %tobool5 = icmp eq i16 %8, 0
  br i1 %tobool5, label %if.else, label %if.end46

if.else:                                          ; preds = %if.end
  %and9 = and i32 %0, 16
  %cmp10 = icmp eq i32 %and9, 0
  %spec.select = select i1 %cmp10, i32 87, i32 174
  %ah_getSpurChan = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16
  %9 = bitcast %struct.HAL_OPS_CONFIG* %ah_getSpurChan to i16 (%struct.ath_hal*, i32, i32)**
  %conv27 = zext i16 %mul to i32
  %sub29 = sub nsw i32 %conv27, %spec.select
  %add = add nuw nsw i32 %spec.select, %conv27
  %10 = load i16 (%struct.ath_hal*, i32, i32)*, i16 (%struct.ath_hal*, i32, i32)** %9, align 8
  %call21 = tail call zeroext i16 %10(%struct.ath_hal* nonnull %ah, i32 0, i32 %1) #6
  %cmp23 = icmp eq i16 %call21, -32768
  br i1 %cmp23, label %for.end, label %if.end26

for.cond:                                         ; preds = %if.end26
  %11 = load i16 (%struct.ath_hal*, i32, i32)*, i16 (%struct.ath_hal*, i32, i32)** %9, align 8
  %call21.1 = tail call zeroext i16 %11(%struct.ath_hal* nonnull %ah, i32 1, i32 %1) #6
  %cmp23.1 = icmp eq i16 %call21.1, -32768
  br i1 %cmp23.1, label %for.end, label %if.end26.1

if.end26:                                         ; preds = %if.else
  %12 = and i16 %call21, 16383
  %and31 = zext i16 %12 to i32
  %cmp32 = icmp sgt i32 %sub29, %and31
  %cmp38 = icmp ult i32 %add, %and31
  %or.cond = or i1 %cmp32, %cmp38
  br i1 %or.cond, label %for.cond, label %for.end

for.end:                                          ; preds = %if.end26.4, %for.cond.3, %if.end26.3, %for.cond.2, %if.end26.2, %for.cond.1, %if.end26.1, %for.cond, %if.end26, %if.else
  %finalSpur.0 = phi i16 [ -32768, %if.else ], [ %12, %if.end26 ], [ -32768, %for.cond ], [ %24, %if.end26.1 ], [ -32768, %for.cond.1 ], [ %26, %if.end26.2 ], [ -32768, %for.cond.2 ], [ %28, %if.end26.3 ], [ -32768, %for.cond.3 ], [ %spec.select463, %if.end26.4 ]
  store i16 %finalSpur.0, i16* %mainSpur, align 2
  br label %if.end46

if.end46:                                         ; preds = %if.end, %for.end
  %finalSpur.1 = phi i16 [ %finalSpur.0, %for.end ], [ %8, %if.end ]
  %cmp48 = icmp eq i16 %finalSpur.1, -32768
  br i1 %cmp48, label %if.then50, label %if.else68

if.then50:                                        ; preds = %if.end46
  %call51 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %and52 = and i32 %call51, 1073741824
  %tobool53 = icmp eq i32 %and52, 0
  br i1 %tobool53, label %cleanup, label %if.then54

if.then54:                                        ; preds = %if.then50
  %call55 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39180) #6
  %and56 = and i32 %call55, 16777215
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39180, i32 %and56) #6
  %call57 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %and58 = and i32 %call57, -1879048193
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39180, i32 %and58) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39328, i32 0) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39296, i32 0) #6
  %call59 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39300) #6
  %and60 = and i32 %call59, -1048576
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39300, i32 %and60) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39320, i32 0) #6
  %call61 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39324) #6
  %and62 = and i32 %call61, -1048576
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39324, i32 %and62) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39168, i32 0) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39172, i32 0) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39176, i32 0) #6
  %call63 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39180) #6
  %and64 = and i32 %call63, -16384
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39180, i32 %and64) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39304, i32 0) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39308, i32 0) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39312, i32 0) #6
  %call65 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39316) #6
  %and66 = and i32 %call65, -16384
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39316, i32 %and66) #6
  br label %cleanup

if.else68:                                        ; preds = %if.end46
  %conv47 = zext i16 %finalSpur.1 to i32
  %conv70 = zext i16 %mul to i32
  %sub71 = sub nsw i32 %conv47, %conv70
  %13 = load i32, i32* %ic_flags, align 4
  %and73 = and i32 %13, 16
  %cmp74 = icmp eq i32 %and73, 0
  br i1 %cmp74, label %if.else77, label %if.then76

if.then76:                                        ; preds = %if.else68
  %shl = shl i32 %sub71, 16
  %div = sdiv i32 %shl, 25
  %shr = ashr i32 %div, 10
  br label %if.end92

if.else77:                                        ; preds = %if.else68
  %and79 = and i32 %13, 1152
  %cmp80 = icmp eq i32 %and79, 1152
  br i1 %cmp80, label %if.then82, label %if.else87

if.then82:                                        ; preds = %if.else77
  %shl83 = shl nsw i32 %sub71, 8
  %div84 = sdiv i32 %shl83, 55
  %shl85 = shl i32 %sub71, 17
  %div86 = sdiv i32 %shl85, 25
  br label %if.end92

if.else87:                                        ; preds = %if.else77
  %shl88 = shl i32 %sub71, 17
  %div89 = sdiv i32 %shl88, 25
  %shr90 = ashr i32 %div89, 10
  br label %if.end92

if.end92:                                         ; preds = %if.then82, %if.else87, %if.then76
  %binWidth.0 = phi i32 [ 6250, %if.then76 ], [ 3125, %if.then82 ], [ 3125, %if.else87 ]
  %spurDeltaPhase.0 = phi i32 [ %div, %if.then76 ], [ %div86, %if.then82 ], [ %div89, %if.else87 ]
  %spurFreqSd.0 = phi i32 [ %shr, %if.then76 ], [ %div84, %if.then82 ], [ %shr90, %if.else87 ]
  %shl94 = mul nsw i32 %sub71, 16000
  %div96 = sdiv i32 %shl94, %binWidth.0
  %and97 = and i32 %div96, 15
  %tobool98 = icmp eq i32 %and97, 0
  %. = select i1 %tobool98, i32 3, i32 4
  %.424 = select i1 %tobool98, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @ar5212SetSpurMitigation.magMapFor3, i64 0, i64 0), i16* getelementptr inbounds ([4 x i16], [4 x i16]* @ar5212SetSpurMitigation.magMapFor4, i64 0, i64 0)
  %cmp109 = icmp sgt i32 %div96, 463
  %shr108 = ashr i32 %div96, 4
  br i1 %cmp109, label %cleanup, label %for.body107

for.body107:                                      ; preds = %if.end92, %for.inc212
  %conv103461 = phi i32 [ %conv103, %for.inc212 ], [ 0, %if.end92 ]
  %pilotMask.sroa.9.0457 = phi i32 [ %pilotMask.sroa.9.1428, %for.inc212 ], [ 0, %if.end92 ]
  %pilotMask.sroa.0.0456 = phi i32 [ %pilotMask.sroa.0.1426, %for.inc212 ], [ 0, %if.end92 ]
  %binMagMask.sroa.15.0454 = phi i32 [ %binMagMask.sroa.15.1, %for.inc212 ], [ 0, %if.end92 ]
  %binMagMask.sroa.11.0452 = phi i32 [ %binMagMask.sroa.11.1, %for.inc212 ], [ 0, %if.end92 ]
  %binMagMask.sroa.7.0450 = phi i32 [ %binMagMask.sroa.7.1, %for.inc212 ], [ 0, %if.end92 ]
  %binMagMask.sroa.0.0446 = phi i32 [ %binMagMask.sroa.0.1, %for.inc212 ], [ 0, %if.end92 ]
  %i.1443 = phi i16 [ %inc213, %for.inc212 ], [ 0, %if.end92 ]
  %add115 = add nsw i32 %conv103461, %shr108
  %add116 = add nsw i32 %add115, 25
  %14 = icmp ult i32 %add116, 33
  br i1 %14, label %if.then122, label %if.else137

if.then122:                                       ; preds = %for.body107
  %cmp123 = icmp slt i32 %add115, 1
  br i1 %cmp123, label %if.then125, label %if.else127

if.then125:                                       ; preds = %if.then122
  %shl126 = shl i32 1, %add116
  %or = or i32 %pilotMask.sroa.0.0456, %shl126
  br label %if.end149

if.else127:                                       ; preds = %if.then122
  %cmp128 = icmp eq i32 %add115, 1
  br i1 %cmp128, label %if.then169, label %if.then130

if.then130:                                       ; preds = %if.else127
  %sub131 = add nsw i32 %add115, 24
  %shl132 = shl i32 1, %sub131
  %or134 = or i32 %pilotMask.sroa.0.0456, %shl132
  br label %if.else163

if.else137:                                       ; preds = %for.body107
  %add115.off419 = add nsw i32 %add115, -8
  %15 = icmp ult i32 %add115.off419, 20
  br i1 %15, label %if.else163.thread433, label %if.end149

if.else163.thread433:                             ; preds = %if.else137
  %shl145 = shl i32 1, %add115.off419
  %or147 = or i32 %pilotMask.sroa.9.0457, %shl145
  br label %if.else178

if.end149:                                        ; preds = %if.else137, %if.then125
  %pilotMask.sroa.0.1 = phi i32 [ %or, %if.then125 ], [ %pilotMask.sroa.0.0456, %if.else137 ]
  %add115.off420 = add nsw i32 %add115, 26
  %16 = icmp ult i32 %add115.off420, 16
  br i1 %16, label %if.then155, label %if.else163

if.then155:                                       ; preds = %if.end149
  %idxprom = zext i16 %i.1443 to i64
  %arrayidx156 = getelementptr i16, i16* %.424, i64 %idxprom
  %17 = load i16, i16* %arrayidx156, align 2
  %conv157 = zext i16 %17 to i32
  %add158 = shl nsw i32 %add115, 1
  %mul159 = add nsw i32 %add158, 52
  %shl160 = shl i32 %conv157, %mul159
  %or162 = or i32 %shl160, %binMagMask.sroa.0.0446
  br label %for.inc212

if.else163:                                       ; preds = %if.then130, %if.end149
  %pilotMask.sroa.0.1427 = phi i32 [ %pilotMask.sroa.0.1, %if.end149 ], [ %or134, %if.then130 ]
  %add115.off421 = add nsw i32 %add115, 10
  %18 = icmp ult i32 %add115.off421, 16
  br i1 %18, label %if.then169, label %if.else178

if.then169:                                       ; preds = %if.else127, %if.else163
  %pilotMask.sroa.0.1427432 = phi i32 [ %pilotMask.sroa.0.1427, %if.else163 ], [ %pilotMask.sroa.0.0456, %if.else127 ]
  %idxprom170 = zext i16 %i.1443 to i64
  %arrayidx171 = getelementptr i16, i16* %.424, i64 %idxprom170
  %19 = load i16, i16* %arrayidx171, align 2
  %conv172 = zext i16 %19 to i32
  %sub173 = shl nsw i32 %add115, 1
  %mul174 = add nsw i32 %sub173, 20
  %shl175 = shl i32 %conv172, %mul174
  %or177 = or i32 %shl175, %binMagMask.sroa.7.0450
  br label %for.inc212

if.else178:                                       ; preds = %if.else163.thread433, %if.else163
  %pilotMask.sroa.0.1427436 = phi i32 [ %pilotMask.sroa.0.0456, %if.else163.thread433 ], [ %pilotMask.sroa.0.1427, %if.else163 ]
  %pilotMask.sroa.9.1429435 = phi i32 [ %or147, %if.else163.thread433 ], [ %pilotMask.sroa.9.0457, %if.else163 ]
  %add115.off422 = add nsw i32 %add115, -6
  %20 = icmp ult i32 %add115.off422, 16
  br i1 %20, label %if.then184, label %if.else193

if.then184:                                       ; preds = %if.else178
  %idxprom185 = zext i16 %i.1443 to i64
  %arrayidx186 = getelementptr i16, i16* %.424, i64 %idxprom185
  %21 = load i16, i16* %arrayidx186, align 2
  %conv187 = zext i16 %21 to i32
  %sub188 = shl nsw i32 %add115, 1
  %mul189 = add nsw i32 %sub188, -12
  %shl190 = shl i32 %conv187, %mul189
  %or192 = or i32 %shl190, %binMagMask.sroa.11.0452
  br label %for.inc212

if.else193:                                       ; preds = %if.else178
  %add115.off423 = add nsw i32 %add115, -22
  %22 = icmp ult i32 %add115.off423, 7
  br i1 %22, label %if.then199, label %for.inc212

if.then199:                                       ; preds = %if.else193
  %idxprom200 = zext i16 %i.1443 to i64
  %arrayidx201 = getelementptr i16, i16* %.424, i64 %idxprom200
  %23 = load i16, i16* %arrayidx201, align 2
  %conv202 = zext i16 %23 to i32
  %sub203 = shl nsw i32 %add115, 1
  %mul204 = add nsw i32 %sub203, -44
  %shl205 = shl i32 %conv202, %mul204
  %or207 = or i32 %shl205, %binMagMask.sroa.15.0454
  br label %for.inc212

for.inc212:                                       ; preds = %if.then155, %if.then184, %if.then199, %if.else193, %if.then169
  %pilotMask.sroa.9.1428 = phi i32 [ %pilotMask.sroa.9.0457, %if.then155 ], [ %pilotMask.sroa.9.0457, %if.then169 ], [ %pilotMask.sroa.9.1429435, %if.then184 ], [ %pilotMask.sroa.9.1429435, %if.then199 ], [ %pilotMask.sroa.9.1429435, %if.else193 ]
  %pilotMask.sroa.0.1426 = phi i32 [ %pilotMask.sroa.0.1, %if.then155 ], [ %pilotMask.sroa.0.1427432, %if.then169 ], [ %pilotMask.sroa.0.1427436, %if.then184 ], [ %pilotMask.sroa.0.1427436, %if.then199 ], [ %pilotMask.sroa.0.1427436, %if.else193 ]
  %binMagMask.sroa.0.1 = phi i32 [ %or162, %if.then155 ], [ %binMagMask.sroa.0.0446, %if.then169 ], [ %binMagMask.sroa.0.0446, %if.then184 ], [ %binMagMask.sroa.0.0446, %if.then199 ], [ %binMagMask.sroa.0.0446, %if.else193 ]
  %binMagMask.sroa.7.1 = phi i32 [ %binMagMask.sroa.7.0450, %if.then155 ], [ %or177, %if.then169 ], [ %binMagMask.sroa.7.0450, %if.then184 ], [ %binMagMask.sroa.7.0450, %if.then199 ], [ %binMagMask.sroa.7.0450, %if.else193 ]
  %binMagMask.sroa.11.1 = phi i32 [ %binMagMask.sroa.11.0452, %if.then155 ], [ %binMagMask.sroa.11.0452, %if.then169 ], [ %or192, %if.then184 ], [ %binMagMask.sroa.11.0452, %if.then199 ], [ %binMagMask.sroa.11.0452, %if.else193 ]
  %binMagMask.sroa.15.1 = phi i32 [ %binMagMask.sroa.15.0454, %if.then155 ], [ %binMagMask.sroa.15.0454, %if.then169 ], [ %binMagMask.sroa.15.0454, %if.then184 ], [ %or207, %if.then199 ], [ %binMagMask.sroa.15.0454, %if.else193 ]
  %inc213 = add i16 %i.1443, 1
  %conv103 = zext i16 %inc213 to i32
  %cmp105 = icmp ugt i32 %., %conv103
  br i1 %cmp105, label %for.body107, label %for.end214

for.end214:                                       ; preds = %for.inc212
  %call215 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39180) #6
  %or217 = or i32 %call215, -16777216
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39180, i32 %or217) #6
  %call218 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39200) #6
  %or219 = or i32 %call218, 1879048192
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39200, i32 %or219) #6
  %shl220 = shl i32 %spurFreqSd.0, 20
  %and221 = and i32 %shl220, 1072693248
  %and224 = and i32 %spurDeltaPhase.0, 1048575
  %or222 = or i32 %and224, %and221
  %or225 = or i32 %or222, 1073741824
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39328, i32 %or225) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39296, i32 %pilotMask.sroa.0.1426) #6
  %call227 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39300) #6
  %and228 = and i32 %call227, -1048576
  %and231 = and i32 %pilotMask.sroa.9.1428, 1048575
  %or232 = or i32 %and228, %and231
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39300, i32 %or232) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39320, i32 %pilotMask.sroa.0.1426) #6
  %call234 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39324) #6
  %and235 = and i32 %call234, -1048576
  %or239 = or i32 %and235, %and231
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39324, i32 %or239) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39168, i32 %binMagMask.sroa.0.1) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39172, i32 %binMagMask.sroa.7.1) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39176, i32 %binMagMask.sroa.11.1) #6
  %call243 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39180) #6
  %and244 = and i32 %call243, -16384
  %and247 = and i32 %binMagMask.sroa.15.1, 16383
  %or248 = or i32 %and244, %and247
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39180, i32 %or248) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39304, i32 %binMagMask.sroa.0.1) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39308, i32 %binMagMask.sroa.7.1) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39312, i32 %binMagMask.sroa.11.1) #6
  %call252 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39316) #6
  %and253 = and i32 %call252, -16384
  %or257 = or i32 %and253, %and247
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39316, i32 %or257) #6
  br label %cleanup

cleanup:                                          ; preds = %if.end92, %for.end214, %if.then54, %if.then50, %entry
  ret void

if.end26.1:                                       ; preds = %for.cond
  %24 = and i16 %call21.1, 16383
  %and31.1 = zext i16 %24 to i32
  %cmp32.1 = icmp sgt i32 %sub29, %and31.1
  %cmp38.1 = icmp ult i32 %add, %and31.1
  %or.cond.1 = or i1 %cmp32.1, %cmp38.1
  br i1 %or.cond.1, label %for.cond.1, label %for.end

for.cond.1:                                       ; preds = %if.end26.1
  %25 = load i16 (%struct.ath_hal*, i32, i32)*, i16 (%struct.ath_hal*, i32, i32)** %9, align 8
  %call21.2 = tail call zeroext i16 %25(%struct.ath_hal* nonnull %ah, i32 2, i32 %1) #6
  %cmp23.2 = icmp eq i16 %call21.2, -32768
  br i1 %cmp23.2, label %for.end, label %if.end26.2

if.end26.2:                                       ; preds = %for.cond.1
  %26 = and i16 %call21.2, 16383
  %and31.2 = zext i16 %26 to i32
  %cmp32.2 = icmp sgt i32 %sub29, %and31.2
  %cmp38.2 = icmp ult i32 %add, %and31.2
  %or.cond.2 = or i1 %cmp32.2, %cmp38.2
  br i1 %or.cond.2, label %for.cond.2, label %for.end

for.cond.2:                                       ; preds = %if.end26.2
  %27 = load i16 (%struct.ath_hal*, i32, i32)*, i16 (%struct.ath_hal*, i32, i32)** %9, align 8
  %call21.3 = tail call zeroext i16 %27(%struct.ath_hal* nonnull %ah, i32 3, i32 %1) #6
  %cmp23.3 = icmp eq i16 %call21.3, -32768
  br i1 %cmp23.3, label %for.end, label %if.end26.3

if.end26.3:                                       ; preds = %for.cond.2
  %28 = and i16 %call21.3, 16383
  %and31.3 = zext i16 %28 to i32
  %cmp32.3 = icmp sgt i32 %sub29, %and31.3
  %cmp38.3 = icmp ult i32 %add, %and31.3
  %or.cond.3 = or i1 %cmp32.3, %cmp38.3
  br i1 %or.cond.3, label %for.cond.3, label %for.end

for.cond.3:                                       ; preds = %if.end26.3
  %29 = load i16 (%struct.ath_hal*, i32, i32)*, i16 (%struct.ath_hal*, i32, i32)** %9, align 8
  %call21.4 = tail call zeroext i16 %29(%struct.ath_hal* nonnull %ah, i32 4, i32 %1) #6
  %cmp23.4 = icmp eq i16 %call21.4, -32768
  br i1 %cmp23.4, label %for.end, label %if.end26.4

if.end26.4:                                       ; preds = %for.cond.3
  %30 = and i16 %call21.4, 16383
  %and31.4 = zext i16 %30 to i32
  %cmp32.4 = icmp sgt i32 %sub29, %and31.4
  %cmp38.4 = icmp ult i32 %add, %and31.4
  %or.cond.4 = or i1 %cmp32.4, %cmp38.4
  %spec.select463 = select i1 %or.cond.4, i16 -32768, i16 %30
  br label %for.end
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local void @ar5212SetDeltaSlope(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture readonly %chan) local_unnamed_addr #0 {
entry:
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ic_devdata.i.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %1 = load i16, i16* %ic_devdata.i.i, align 2
  %idxprom.i.i = zext i16 %1 to i64
  %channel.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %0, i64 0, i32 37, i64 %idxprom.i.i, i32 0
  %2 = load i16, i16* %channel.i, align 4
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %3 = load i32, i32* %ic_flags, align 4
  %and = and i32 %3, 16
  %cmp = icmp eq i32 %and, 0
  %spec.select = select i1 %cmp, i64 1677721600, i64 3355443200
  %and2 = and i32 %3, 16384
  %cmp3 = icmp eq i32 %and2, 0
  br i1 %cmp3, label %if.else, label %if.then4

if.then4:                                         ; preds = %entry
  %shr = lshr exact i64 %spec.select, 1
  br label %if.end11

if.else:                                          ; preds = %entry
  %4 = trunc i32 %3 to i16
  %cmp7 = icmp slt i16 %4, 0
  %shr9 = lshr exact i64 %spec.select, 2
  %spec.select62 = select i1 %cmp7, i64 %shr9, i64 %spec.select
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then4
  %clockMhzScaled.1 = phi i64 [ %shr, %if.then4 ], [ %spec.select62, %if.else ]
  %div.lhs.trunc = trunc i64 %clockMhzScaled.1 to i32
  %div.rhs.trunc = zext i16 %2 to i32
  %div63 = udiv i32 %div.lhs.trunc, %div.rhs.trunc
  %div.zext = zext i32 %div63 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc.3, %if.end11
  %coef_exp.064 = phi i64 [ 31, %if.end11 ], [ %dec.3, %for.inc.3 ]
  %5 = shl i64 1, %coef_exp.064
  %6 = and i64 %5, %div.zext
  %tobool = icmp eq i64 %6, 0
  br i1 %tobool, label %for.inc, label %for.end

for.inc:                                          ; preds = %for.body
  %dec = add nsw i64 %coef_exp.064, -1
  %7 = shl i64 1, %dec
  %8 = and i64 %7, %div.zext
  %tobool.1 = icmp eq i64 %8, 0
  br i1 %tobool.1, label %for.inc.1, label %for.end

for.end:                                          ; preds = %for.body.3, %for.inc.2, %for.inc.1, %for.inc, %for.body
  %coef_exp.0.lcssa = phi i64 [ %coef_exp.064, %for.body ], [ %dec, %for.inc ], [ %dec.1, %for.inc.1 ], [ 0, %for.inc.2 ], [ %dec.2, %for.body.3 ]
  %sub18 = sub i64 38, %coef_exp.0.lcssa
  %sub19 = sub i64 24, %sub18
  %9 = trunc i64 %sub19 to i32
  %sh_prom = add i32 %9, -1
  %shl = shl i32 1, %sh_prom
  %conv21 = sext i32 %shl to i64
  %add = add nsw i64 %conv21, %div.zext
  %shr23 = lshr i64 %add, %sub19
  %call25 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 38932) #6
  %and26 = and i32 %call25, 131071
  %shr23.tr = trunc i64 %shr23 to i32
  %10 = shl i32 %shr23.tr, 17
  %conv30 = or i32 %and26, %10
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 38932, i32 %conv30) #6
  %call31 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 38932) #6
  %and32 = and i32 %call31, -122881
  %sub18.tr = trunc i64 %sub18 to i32
  %11 = shl i32 %sub18.tr, 13
  %12 = and i32 %11, 122880
  %conv37 = or i32 %and32, %12
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 38932, i32 %conv37) #6
  ret void

for.inc.1:                                        ; preds = %for.inc
  %dec.1 = add nsw i64 %coef_exp.064, -2
  %13 = shl i64 1, %dec.1
  %14 = and i64 %13, %div.zext
  %tobool.2 = icmp eq i64 %14, 0
  br i1 %tobool.2, label %for.inc.2, label %for.end

for.inc.2:                                        ; preds = %for.inc.1
  %dec.2 = add nsw i64 %coef_exp.064, -3
  %cmp12.2 = icmp eq i64 %dec.2, 0
  br i1 %cmp12.2, label %for.end, label %for.body.3

for.body.3:                                       ; preds = %for.inc.2
  %15 = shl i64 1, %dec.2
  %16 = and i64 %15, %div.zext
  %tobool.3 = icmp eq i64 %16, 0
  br i1 %tobool.3, label %for.inc.3, label %for.end

for.inc.3:                                        ; preds = %for.body.3
  %dec.3 = add nsw i64 %coef_exp.064, -4
  br label %for.body
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212SetBoardValues(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture readonly %chan) local_unnamed_addr #0 {
entry:
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  %1 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ah_eeprom = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13
  %2 = bitcast [8 x i32]* %ah_eeprom to %struct.HAL_EEPROM**
  %3 = load %struct.HAL_EEPROM*, %struct.HAL_EEPROM** %2, align 8
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %4 = load i32, i32* %ic_flags, align 4
  %.lobit = lshr i32 %4, 7
  %5 = and i32 %.lobit, 1
  %ic_devdata.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %6 = load i16, i16* %ic_devdata.i, align 2
  %idxprom.i = zext i16 %6 to i64
  %and2 = and i32 %4, 1057435120
  %trunc = trunc i32 %and2 to i30
  switch i30 %trunc, label %cleanup [
    i30 320, label %sw.bb
    i30 8528, label %sw.bb
    i30 160, label %sw.epilog
    i30 1152, label %sw.bb39
    i30 208, label %sw.bb39
  ]

sw.bb:                                            ; preds = %entry, %entry
  %ah_analog5GhzRev = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 7
  %7 = bitcast i32* %ah_analog5GhzRev to i16*
  %8 = load i16, i16* %7, align 4
  %9 = and i16 %8, 240
  %.off = add nsw i16 %9, -48
  %10 = icmp ult i16 %.off, 33
  br i1 %10, label %sw.epilog, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %sw.bb
  %11 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %12 = load i32, i32* %11, align 4
  %switch.tableidx = add i32 %12, -7
  %13 = icmp ult i32 %switch.tableidx, 5
  br i1 %13, label %switch.hole_check, label %if.then

if.then:                                          ; preds = %switch.hole_check, %land.lhs.true12
  %call34 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39236) #6
  %and35 = and i32 %call34, -57
  %ah_gainValues = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 35
  %currStep = getelementptr inbounds i32 (%struct.ath_hal*, i32)*, i32 (%struct.ath_hal*, i32)** %ah_gainValues, i64 3
  %14 = bitcast i32 (%struct.ath_hal*, i32)** %currStep to %struct._gainOptStep**
  %15 = load %struct._gainOptStep*, %struct._gainOptStep** %14, align 8
  %arrayidx = getelementptr %struct._gainOptStep, %struct._gainOptStep* %15, i64 0, i32 0, i64 0
  %16 = load i16, i16* %arrayidx, align 4
  %conv36 = sext i16 %16 to i32
  %shl = shl nsw i32 %conv36, 3
  %and37 = and i32 %shl, 56
  %or = or i32 %and37, %and35
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39236, i32 %or) #6
  br label %sw.epilog

sw.bb39:                                          ; preds = %entry, %entry
  br label %sw.epilog

switch.hole_check:                                ; preds = %land.lhs.true12
  %switch.maskindex = trunc i32 %switch.tableidx to i8
  %switch.shifted = lshr i8 29, %switch.maskindex
  %17 = and i8 %switch.shifted, 1
  %switch.lobit = icmp eq i8 %17, 0
  br i1 %switch.lobit, label %if.then, label %sw.epilog

sw.epilog:                                        ; preds = %switch.hole_check, %entry, %sw.bb, %if.then, %sw.bb39
  %arrayMode.0 = phi i64 [ 2, %sw.bb39 ], [ 0, %if.then ], [ 0, %sw.bb ], [ 1, %entry ], [ 0, %switch.hole_check ]
  %call40 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39184) #6
  %and41 = and i32 %call40, -1018
  %arrayidx43 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 38, i64 0, i64 %arrayMode.0
  %18 = load i16, i16* %arrayidx43, align 2
  %conv44 = zext i16 %18 to i32
  %shl45 = shl nuw nsw i32 %conv44, 4
  %or46 = or i32 %and41, %shl45
  %or47 = or i32 %or46, 1
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39184, i32 %or47) #6
  %ah_antControl = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 20
  %19 = load i32, i32* %ah_antControl, align 4
  %call48 = tail call i32 @ar5212SetAntennaSwitchInternal(%struct.ath_hal* nonnull %ah, i32 %19, %struct.ieee80211_channel* nonnull %chan) #7
  %arrayidx50 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 34, i64 %arrayMode.0
  %20 = load i16, i16* %arrayidx50, align 2
  %21 = and i16 %20, 511
  %22 = or i16 %21, 512
  %or53 = zext i16 %22 to i32
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39272, i32 %or53) #6
  %ee_version = getelementptr inbounds %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 0
  %23 = load i16, i16* %ee_version, align 8
  %cmp55 = icmp ugt i16 %23, 20479
  br i1 %cmp55, label %land.lhs.true57, label %if.else

land.lhs.true57:                                  ; preds = %sw.epilog
  %24 = load i32, i32* %ic_flags, align 4
  %and59 = and i32 %24, 16
  %cmp60 = icmp eq i32 %and59, 0
  br i1 %cmp60, label %if.else, label %if.then62

if.then62:                                        ; preds = %land.lhs.true57
  %25 = zext i32 %5 to i64
  %arrayidx64 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 46, i64 %25
  %arrayidx66 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 48, i64 %25
  %arrayidx68 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 49, i64 %25
  %arrayidx70 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 47, i64 %25
  %arrayidx72 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 50, i64 %25
  br label %if.end83

if.else:                                          ; preds = %land.lhs.true57, %sw.epilog
  %arrayidx74 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 26, i64 %arrayMode.0
  %arrayidx76 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 32, i64 %arrayMode.0
  %26 = zext i32 %5 to i64
  %arrayidx78 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 33, i64 %26
  %arrayidx80 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 27, i64 %26
  %arrayidx82 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 41, i64 %26
  br label %if.end83

if.end83:                                         ; preds = %if.else, %if.then62
  %adcDesiredSize.0.in = phi i8* [ %arrayidx66, %if.then62 ], [ %arrayidx76, %if.else ]
  %pgaDesiredSize.0.in = phi i8* [ %arrayidx68, %if.then62 ], [ %arrayidx78, %if.else ]
  %switchSettling.0.in = phi i16* [ %arrayidx64, %if.then62 ], [ %arrayidx74, %if.else ]
  %txrxAtten.0.in = phi i16* [ %arrayidx70, %if.then62 ], [ %arrayidx80, %if.else ]
  %rxtxMargin.0.in = phi i16* [ %arrayidx72, %if.then62 ], [ %arrayidx82, %if.else ]
  %rxtxMargin.0 = load i16, i16* %rxtxMargin.0.in, align 2
  %txrxAtten.0 = load i16, i16* %txrxAtten.0.in, align 2
  %switchSettling.0 = load i16, i16* %switchSettling.0.in, align 2
  %pgaDesiredSize.0 = load i8, i8* %pgaDesiredSize.0.in, align 1
  %adcDesiredSize.0 = load i8, i8* %adcDesiredSize.0.in, align 1
  %call84 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 38980) #6
  %and85 = and i32 %call84, -16257
  %conv86 = zext i16 %switchSettling.0 to i32
  %shl87 = shl nuw nsw i32 %conv86, 7
  %and88 = and i32 %shl87, 16256
  %or89 = or i32 %and85, %and88
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38980, i32 %or89) #6
  %call90 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 38992) #6
  %and91 = and i32 %call90, -256
  %conv92350 = zext i8 %adcDesiredSize.0 to i32
  %or95 = or i32 %and91, %conv92350
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38992, i32 %or95) #6
  %call96 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 38992) #6
  %and97 = and i32 %call96, -65281
  %conv98 = sext i8 %pgaDesiredSize.0 to i32
  %shl99 = shl nsw i32 %conv98, 8
  %and100 = and i32 %shl99, 65280
  %or101 = or i32 %and97, %and100
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38992, i32 %or101) #6
  %call102 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 38984) #6
  %and103 = and i32 %call102, -258049
  %conv104 = zext i16 %txrxAtten.0 to i32
  %shl105 = shl nuw nsw i32 %conv104, 12
  %and106 = and i32 %shl105, 258048
  %or107 = or i32 %and103, %and106
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38984, i32 %or107) #6
  %arrayidx109 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 30, i64 %arrayMode.0
  %27 = load i16, i16* %arrayidx109, align 2
  %conv110 = zext i16 %27 to i32
  %shl111 = shl i32 %conv110, 24
  %shl116 = shl nuw i32 %conv110, 16
  %or117 = or i32 %shl111, %shl116
  %arrayidx119 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 31, i64 %arrayMode.0
  %28 = load i16, i16* %arrayidx119, align 2
  %conv120 = zext i16 %28 to i32
  %shl121 = shl nuw nsw i32 %conv120, 8
  %or122 = or i32 %or117, %conv120
  %or127 = or i32 %or122, %shl121
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38964, i32 %or127) #6
  %call128 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 38952) #6
  %and129 = and i32 %call128, -65281
  %arrayidx131 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 28, i64 %arrayMode.0
  %29 = load i16, i16* %arrayidx131, align 2
  %conv132 = zext i16 %29 to i32
  %shl133 = shl nuw nsw i32 %conv132, 8
  %or134 = or i32 %shl133, %and129
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 38952, i32 %or134) #6
  %call135 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39012) #6
  %and136 = and i32 %call135, -520193
  %arrayidx138 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 29, i64 %arrayMode.0
  %30 = load i16, i16* %arrayidx138, align 2
  %conv139 = zext i16 %30 to i32
  %shl140 = shl nuw nsw i32 %conv139, 12
  %and141 = and i32 %shl140, 520192
  %or142 = or i32 %and141, %and136
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39012, i32 %or142) #6
  %31 = load i16, i16* %ee_version, align 8
  %cmp145 = icmp ult i16 %31, 12291
  br i1 %cmp145, label %if.then147, label %if.else158

if.then147:                                       ; preds = %if.end83
  %ah_subvendorid = getelementptr inbounds %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 16
  %32 = load i16, i16* %ah_subvendorid, align 2
  %cmp149 = icmp eq i16 %32, 4130
  br i1 %cmp149, label %land.lhs.true151, label %if.end166

land.lhs.true151:                                 ; preds = %if.then147
  %33 = load i32, i32* %ic_flags, align 4
  %and153 = and i32 %33, 1088
  %cmp154 = icmp eq i32 %and153, 0
  %spec.select = select i1 %cmp154, i32 4, i32 16
  br label %if.end166

if.else158:                                       ; preds = %if.end83
  %34 = load i16, i16* %ic_devdata.i, align 2
  %idxprom.i.i.i = zext i16 %34 to i64
  %channel.i.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i.i.i, i32 0
  %35 = load i16, i16* %channel.i.i, align 4
  %36 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %37 = load i32, i32* %36, align 4
  %.off.i = add i32 %37, -9
  %switch.i = icmp ult i32 %.off.i, 2
  br i1 %switch.i, label %lor.end.i, label %lor.lhs.false8.i

lor.lhs.false8.i:                                 ; preds = %if.else158
  %ah_analog5GhzRev.i = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 7
  %38 = bitcast i32* %ah_analog5GhzRev.i to i16*
  %39 = load i16, i16* %38, align 4
  %40 = and i16 %39, 240
  %.off49.i = add nsw i16 %40, -48
  %41 = icmp ult i16 %.off49.i, 33
  br i1 %41, label %lor.end.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %lor.lhs.false8.i
  %cmp19.i = icmp eq i32 %37, 15
  %phitmp.i = select i1 %cmp19.i, i16 40, i16 32
  br label %lor.end.i

lor.end.i:                                        ; preds = %lor.rhs.i, %lor.lhs.false8.i, %if.else158
  %42 = phi i16 [ %phitmp.i, %lor.rhs.i ], [ 40, %if.else158 ], [ 40, %lor.lhs.false8.i ]
  %rem48.i = urem i16 %35, %42
  %cmp22.i = icmp eq i16 %rem48.i, 0
  %rem48.i.off = add nsw i16 %rem48.i, -10
  %43 = icmp ult i16 %rem48.i.off, 13
  %or.cond = or i1 %cmp22.i, %43
  br i1 %or.cond, label %if.end166, label %if.then160

if.then160:                                       ; preds = %lor.end.i
  %arrayidx162 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 39, i64 %arrayMode.0
  %44 = load i16, i16* %arrayidx162, align 2
  %conv163 = zext i16 %44 to i32
  %add164 = shl nuw nsw i32 %conv163, 1
  %phitmp = add nuw nsw i32 %add164, 4
  %phitmp351 = and i32 %phitmp, 254
  br label %if.end166

if.end166:                                        ; preds = %lor.end.i, %land.lhs.true151, %if.then160, %if.then147
  %falseDectectBackoff.0 = phi i32 [ 4, %if.then147 ], [ %phitmp351, %if.then160 ], [ %spec.select, %land.lhs.true151 ], [ 4, %lor.end.i ]
  %call167 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39204) #6
  %and168 = and i32 %call167, -255
  %or171 = or i32 %and168, %falseDectectBackoff.0
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39204, i32 %or171) #6
  %privFlags = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i, i32 1
  %45 = load i8, i8* %privFlags, align 2
  %46 = and i8 %45, 1
  %tobool174 = icmp eq i8 %46, 0
  br i1 %tobool174, label %if.else180, label %if.then175

if.then175:                                       ; preds = %if.end166
  %iCoff176 = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i, i32 3
  %47 = load i8, i8* %iCoff176, align 4
  %conv177 = sext i8 %47 to i32
  %qCoff178 = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i, i32 4
  %48 = load i8, i8* %qCoff178, align 1
  %conv179 = sext i8 %48 to i32
  br label %if.end187

if.else180:                                       ; preds = %if.end166
  %49 = zext i32 %5 to i64
  %arrayidx182 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 67, i64 %49
  %50 = load i16, i16* %arrayidx182, align 2
  %conv183 = zext i16 %50 to i32
  %arrayidx185 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %3, i64 0, i32 68, i64 %49
  %51 = load i16, i16* %arrayidx185, align 2
  %conv186 = zext i16 %51 to i32
  br label %if.end187

if.end187:                                        ; preds = %if.else180, %if.then175
  %iCoff.0 = phi i32 [ %conv177, %if.then175 ], [ %conv183, %if.else180 ]
  %qCoff.0 = phi i32 [ %conv179, %if.then175 ], [ %conv186, %if.else180 ]
  %call188 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %and189 = and i32 %call188, -2017
  %shl190 = shl nsw i32 %iCoff.0, 5
  %and191 = and i32 %shl190, 2016
  %or192 = or i32 %and189, %and191
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39200, i32 %or192) #6
  %call193 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %and194 = and i32 %call193, -32
  %and196 = and i32 %qCoff.0, 31
  %or197 = or i32 %and194, %and196
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39200, i32 %or197) #6
  %call198 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %or199 = or i32 %call198, 2048
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39200, i32 %or199) #6
  %52 = load i16, i16* %ee_version, align 8
  %cmp202 = icmp ugt i16 %52, 16384
  br i1 %cmp202, label %if.then204, label %cleanup

if.then204:                                       ; preds = %if.end187
  %53 = load i32, i32* %ic_flags, align 4
  %and206 = and i32 %53, 208
  %cmp207 = icmp ne i32 %and206, 208
  %cmp212 = icmp ugt i16 %52, 20479
  %or.cond352 = or i1 %cmp212, %cmp207
  br i1 %or.cond352, label %if.end222, label %cleanup

if.end222:                                        ; preds = %if.then204
  %call215 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 41484) #6
  %and216 = and i32 %call215, -16515073
  %conv217 = zext i16 %rxtxMargin.0 to i32
  %shl218 = shl i32 %conv217, 18
  %and219 = and i32 %shl218, 16515072
  %or220 = or i32 %and216, %and219
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41484, i32 %or220) #6
  %.pr.pre = load i16, i16* %ee_version, align 8
  %cmp225 = icmp ugt i16 %.pr.pre, 20480
  br i1 %cmp225, label %if.then227, label %cleanup

if.then227:                                       ; preds = %if.end222
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39392, i32 0) #6
  br label %cleanup

cleanup:                                          ; preds = %if.then204, %if.end187, %if.end222, %if.then227, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %if.then227 ], [ 1, %if.end222 ], [ 1, %if.end187 ], [ 1, %if.then204 ]
  ret i32 %retval.0
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local void @ar5212SetOperatingMode(%struct.ath_hal* %ah, i32 %opmode) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 32772) #6
  %and = and i32 %call, -196609
  switch i32 %opmode, label %sw.epilog [
    i32 6, label %sw.bb
    i32 0, label %sw.bb4
    i32 1, label %sw.bb9
    i32 8, label %sw.bb9
  ]

sw.bb:                                            ; preds = %entry
  %or1 = or i32 %and, 268500992
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 32772, i32 %or1) #6
  %call2 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 20) #6
  %and3 = and i32 %call2, -33
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 20, i32 %and3) #6
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %or6 = or i32 %and, 268566528
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 32772, i32 %or6) #6
  %call7 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 20) #6
  %or8 = or i32 %call7, 32
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 20, i32 %or8) #6
  br label %sw.epilog

sw.bb9:                                           ; preds = %entry, %entry
  %or10 = or i32 %and, 268435456
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 32772, i32 %or10) #6
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb9, %sw.bb4, %sw.bb
  ret void
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212SetChannel(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan) local_unnamed_addr #0 {
entry:
  %ah_rfHal = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 54
  %0 = bitcast i32 (%struct.ath_hal*, i32)** %ah_rfHal to %struct.RfHalFuncs**
  %1 = load %struct.RfHalFuncs*, %struct.RfHalFuncs** %0, align 8
  %setChannel = getelementptr inbounds %struct.RfHalFuncs, %struct.RfHalFuncs* %1, i64 0, i32 4
  %2 = load i32 (%struct.ath_hal*, %struct.ieee80211_channel*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*)** %setChannel, align 8
  %call = tail call i32 %2(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan) #6
  %tobool = icmp ne i32 %call, 0
  %. = zext i1 %tobool to i32
  ret i32 %.
}

; Function Attrs: noimplicitfloat noredzone
declare dso_local void @ar5212SetCoverageClass(%struct.ath_hal*, i8 zeroext, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local void @ar5212SetRateDurationTable(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture readonly %chan) local_unnamed_addr #0 {
entry:
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %0 = load i32, i32* %ic_flags, align 4
  %and = and i32 %0, 16384
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.else, label %if.end11

if.else:                                          ; preds = %entry
  %1 = trunc i32 %0 to i16
  %cmp3 = icmp slt i16 %1, 0
  br i1 %cmp3, label %if.end11, label %if.else6

if.else6:                                         ; preds = %if.else
  %and8 = and i32 %0, 16
  %cmp9 = icmp eq i32 %and8, 0
  %cond = select i1 %cmp9, i32 8, i32 2
  br label %if.end11

if.end11:                                         ; preds = %if.else, %entry, %if.else6
  %.sink = phi i32 [ %cond, %if.else6 ], [ 512, %entry ], [ 1024, %if.else ]
  %call5 = tail call %struct.HAL_RATE_TABLE* @ar5212GetRateTable(%struct.ath_hal* %ah, i32 %.sink) #6
  %rateCount = getelementptr inbounds %struct.HAL_RATE_TABLE, %struct.HAL_RATE_TABLE* %call5, i64 0, i32 0
  %2 = load i32, i32* %rateCount, align 4
  %cmp12116 = icmp sgt i32 %2, 0
  br i1 %cmp12116, label %for.body, label %for.end

for.body:                                         ; preds = %if.end11, %for.body
  %indvars.iv118 = phi i64 [ %indvars.iv.next119, %for.body ], [ 0, %if.end11 ]
  %rateCode = getelementptr %struct.HAL_RATE_TABLE, %struct.HAL_RATE_TABLE* %call5, i64 0, i32 2, i64 %indvars.iv118, i32 3
  %3 = load i8, i8* %rateCode, align 4
  %conv = zext i8 %3 to i32
  %shl = shl nuw nsw i32 %conv, 2
  %add = add nuw nsw i32 %shl, 34560
  %controlRate = getelementptr %struct.HAL_RATE_TABLE, %struct.HAL_RATE_TABLE* %call5, i64 0, i32 2, i64 %indvars.iv118, i32 6
  %4 = load i8, i8* %controlRate, align 1
  %conv16 = zext i8 %4 to i16
  %call17 = tail call zeroext i16 @ath_hal_computetxtime(%struct.ath_hal* %ah, %struct.HAL_RATE_TABLE* nonnull %call5, i32 14, i16 zeroext %conv16, i32 0, i32 1) #6
  %conv18 = zext i16 %call17 to i32
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 %add, i32 %conv18) #6
  %indvars.iv.next119 = add nuw nsw i64 %indvars.iv118, 1
  %5 = load i32, i32* %rateCount, align 4
  %6 = sext i32 %5 to i64
  %cmp12 = icmp slt i64 %indvars.iv.next119, %6
  br i1 %cmp12, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %if.end11
  %7 = load i32, i32* %ic_flags, align 4
  %and20 = and i32 %7, 16
  %cmp21 = icmp eq i32 %and20, 0
  br i1 %cmp21, label %if.then23, label %if.end74

if.then23:                                        ; preds = %for.end
  %call24 = tail call %struct.HAL_RATE_TABLE* @ar5212GetRateTable(%struct.ath_hal* %ah, i32 8) #6
  %rateCount26 = getelementptr inbounds %struct.HAL_RATE_TABLE, %struct.HAL_RATE_TABLE* %call24, i64 0, i32 0
  %8 = load i32, i32* %rateCount26, align 4
  %cmp27114 = icmp sgt i32 %8, 0
  br i1 %cmp27114, label %for.body29, label %if.end74

for.body29:                                       ; preds = %if.then23, %cleanup
  %indvars.iv = phi i64 [ %indvars.iv.next, %cleanup ], [ 0, %if.then23 ]
  %rateCode33 = getelementptr %struct.HAL_RATE_TABLE, %struct.HAL_RATE_TABLE* %call24, i64 0, i32 2, i64 %indvars.iv, i32 3
  %9 = load i8, i8* %rateCode33, align 4
  %conv34 = zext i8 %9 to i32
  %shl35 = shl nuw nsw i32 %conv34, 2
  %add36 = add nuw nsw i32 %shl35, 34560
  %phy = getelementptr %struct.HAL_RATE_TABLE, %struct.HAL_RATE_TABLE* %call24, i64 0, i32 2, i64 %indvars.iv, i32 1
  %10 = load i8, i8* %phy, align 1
  %cmp41 = icmp eq i8 %10, 0
  br i1 %cmp41, label %if.end44, label %cleanup

if.end44:                                         ; preds = %for.body29
  %controlRate48 = getelementptr %struct.HAL_RATE_TABLE, %struct.HAL_RATE_TABLE* %call24, i64 0, i32 2, i64 %indvars.iv, i32 6
  %11 = load i8, i8* %controlRate48, align 1
  %conv49 = zext i8 %11 to i16
  %call50 = tail call zeroext i16 @ath_hal_computetxtime(%struct.ath_hal* %ah, %struct.HAL_RATE_TABLE* nonnull %call24, i32 14, i16 zeroext %conv49, i32 0, i32 1) #6
  %conv51 = zext i16 %call50 to i32
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 %add36, i32 %conv51) #6
  %shortPreamble = getelementptr %struct.HAL_RATE_TABLE, %struct.HAL_RATE_TABLE* %call24, i64 0, i32 2, i64 %indvars.iv, i32 4
  %12 = load i8, i8* %shortPreamble, align 1
  %tobool = icmp eq i8 %12, 0
  br i1 %tobool, label %cleanup, label %if.then55

if.then55:                                        ; preds = %if.end44
  %conv60 = zext i8 %12 to i32
  %shl61 = shl nuw nsw i32 %conv60, 2
  %add62 = add nuw nsw i32 %shl61, %add36
  %13 = load i8, i8* %controlRate48, align 1
  %conv67 = zext i8 %13 to i16
  %call68 = tail call zeroext i16 @ath_hal_computetxtime(%struct.ath_hal* %ah, %struct.HAL_RATE_TABLE* nonnull %call24, i32 14, i16 zeroext %conv67, i32 1, i32 1) #6
  %conv69 = zext i16 %call68 to i32
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 %add62, i32 %conv69) #6
  br label %cleanup

cleanup:                                          ; preds = %if.then55, %if.end44, %for.body29
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %14 = load i32, i32* %rateCount26, align 4
  %15 = sext i32 %14 to i64
  %cmp27 = icmp slt i64 %indvars.iv.next, %15
  br i1 %cmp27, label %for.body29, label %if.end74

if.end74:                                         ; preds = %cleanup, %if.then23, %for.end
  ret void
}

; Function Attrs: noimplicitfloat noredzone
declare dso_local void @DELAY(i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local void @ar5212SetCompRegs(%struct.ath_hal* %ah) local_unnamed_addr #0 {
entry:
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  %ah_caps = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 14
  %1 = bitcast i32* %ah_caps to i72*
  %bf.load = load i72, i72* %1, align 8
  %bf.cast16 = and i72 %bf.load, 4
  %tobool = icmp eq i72 %bf.cast16, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 1056, i32 1) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 1536, i32 0) #6
  %call = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 1536) #6
  %or = or i32 %call, 8
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 1536, i32 %or) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 1540, i32 1049089) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 1568, i32 0) #6
  br label %for.body

for.body:                                         ; preds = %for.body, %if.end
  %indvars.iv = phi i64 [ 0, %if.end ], [ %indvars.iv.next, %for.body ]
  %2 = trunc i64 %indvars.iv to i32
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 1024, i32 %2) #6
  %arrayidx = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 19, i64 %indvars.iv
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 1028, i32 %conv) #6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %cleanup, label %for.body

cleanup:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ar5212ResetTxQueue(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local void @ar5212EnableRfKill(%struct.ath_hal*) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ath_hal_wait(%struct.ath_hal*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local void @ar5212SetupClock(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ath_hal_getantennareduction(%struct.ath_hal*, %struct.ieee80211_channel*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ar5212SetSifsTime(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ar5212SetSlotTime(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ar5212SetAckTimeout(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ar5212SetCTSTimeout(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212ChannelChange(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan) local_unnamed_addr #0 {
entry:
  %rfXpdGain = alloca [4 x i16], align 2
  %0 = bitcast [4 x i16]* %rfXpdGain to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #5
  %ah_caps = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 14
  %halTotalQueues = getelementptr inbounds i32, i32* %ah_caps, i64 4
  %1 = bitcast i32* %halTotalQueues to i16*
  %2 = load i16, i16* %1, align 8
  %cmp106 = icmp eq i16 %2, 0
  br i1 %cmp106, label %if.end5, label %for.body

for.cond:                                         ; preds = %for.body
  %3 = load i16, i16* %1, align 8
  %conv = zext i16 %3 to i32
  %cmp = icmp ult i32 %inc, %conv
  br i1 %cmp, label %for.body, label %if.end5

for.body:                                         ; preds = %entry, %for.cond
  %qnum.0107 = phi i32 [ %inc, %for.cond ], [ 0, %entry ]
  %call2 = tail call i32 @ar5212NumTxPending(%struct.ath_hal* nonnull %ah, i32 %qnum.0107) #6
  %tobool = icmp eq i32 %call2, 0
  %inc = add nuw nsw i32 %qnum.0107, 1
  br i1 %tobool, label %for.cond, label %cleanup

if.end5:                                          ; preds = %for.cond, %entry
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39292, i32 1) #6
  br label %for.body9

for.body9:                                        ; preds = %if.end5, %if.end13
  %ulCount.0104 = phi i32 [ 0, %if.end5 ], [ %inc15, %if.end13 ]
  %call10 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39968) #6
  %tobool11 = icmp eq i32 %call10, 0
  br i1 %tobool11, label %if.end13, label %if.end20

if.end13:                                         ; preds = %for.body9
  tail call void @DELAY(i32 5) #6
  %inc15 = add nuw nsw i32 %ulCount.0104, 1
  %cmp7 = icmp ult i32 %inc15, 100
  br i1 %cmp7, label %for.body9, label %cleanup

if.end20:                                         ; preds = %for.body9
  %ah_rfHal.i = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 54
  %4 = bitcast i32 (%struct.ath_hal*, i32)** %ah_rfHal.i to %struct.RfHalFuncs**
  %5 = load %struct.RfHalFuncs*, %struct.RfHalFuncs** %4, align 8
  %setChannel.i = getelementptr inbounds %struct.RfHalFuncs, %struct.RfHalFuncs* %5, i64 0, i32 4
  %6 = load i32 (%struct.ath_hal*, %struct.ieee80211_channel*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*)** %setChannel.i, align 8
  %call.i = tail call i32 %6(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan) #6
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %cleanup, label %if.end24

if.end24:                                         ; preds = %if.end20
  %call25 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39188) #6
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %7 = load i32, i32* %ic_flags, align 4
  %and26 = and i32 %7, 160
  %cmp27 = icmp eq i32 %and26, 160
  %and.tr = trunc i32 %call25 to i16
  br i1 %cmp27, label %if.then29, label %if.else

if.then29:                                        ; preds = %if.end24
  %div.lhs.trunc = shl i16 %and.tr, 2
  %div101 = udiv i16 %div.lhs.trunc, 22
  br label %if.end31

if.else:                                          ; preds = %if.end24
  %div30.lhs.trunc = and i16 %and.tr, 16382
  %div30102 = udiv i16 %div30.lhs.trunc, 10
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.then29
  %synthDelay.0.in = phi i16 [ %div101, %if.then29 ], [ %div30102, %if.else ]
  %addconv = add nuw nsw i16 %synthDelay.0.in, 100
  %add = zext i16 %addconv to i32
  tail call void @DELAY(i32 %add) #6
  %arraydecay = getelementptr inbounds [4 x i16], [4 x i16]* %rfXpdGain, i64 0, i64 0
  %call32 = call i32 @ar5212SetTransmitPower(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan, i16* nonnull %arraydecay) #7
  %tobool33 = icmp eq i32 %call32, 0
  br i1 %tobool33, label %cleanup, label %if.end35

if.end35:                                         ; preds = %if.end31
  %8 = load i32, i32* %ic_flags, align 4
  %and37 = and i32 %8, 1088
  %cmp38 = icmp eq i32 %and37, 0
  br i1 %cmp38, label %if.end59, label %if.then40

if.then40:                                        ; preds = %if.end35
  %9 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %10 = load i32, i32* %9, align 4
  %.off = add i32 %10, -9
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %if.then57, label %lor.lhs.false53

lor.lhs.false53:                                  ; preds = %if.then40
  %ah_eeversion = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13, i64 2
  %11 = bitcast i32* %ah_eeversion to i16*
  %12 = load i16, i16* %11, align 8
  %cmp55 = icmp ugt i16 %12, 20482
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %if.then40, %lor.lhs.false53
  call void @ar5212SetSpurMitigation(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #7
  br label %if.end58

if.end58:                                         ; preds = %if.then57, %lor.lhs.false53
  call void @ar5212SetDeltaSlope(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %chan) #7
  br label %if.end59

if.end59:                                         ; preds = %if.end35, %if.end58
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39292, i32 0) #6
  %call60 = call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39008) #6
  %or = or i32 %call60, 2
  call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39008, i32 %or) #6
  br label %cleanup

cleanup:                                          ; preds = %for.body, %if.end13, %if.end31, %if.end20, %if.end59
  %retval.0 = phi i32 [ 1, %if.end59 ], [ 0, %if.end20 ], [ 0, %if.end31 ], [ 0, %if.end13 ], [ 0, %for.body ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #5
  ret i32 %retval.0
}

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ar5212NumTxPending(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212PhyDisable(%struct.ath_hal* %ah) local_unnamed_addr #0 {
entry:
  %call = tail call fastcc i32 @ar5212SetResetReg(%struct.ath_hal* %ah, i32 2) #7
  ret i32 %call
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define internal fastcc i32 @ar5212SetResetReg(%struct.ath_hal* %ah, i32 %resetMask) unnamed_addr #0 {
entry:
  %tobool = icmp eq i32 %resetMask, 0
  %ah_ispcie = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 9
  %0 = bitcast i32* %ah_ispcie to i8*
  %1 = load i8, i8* %0, align 4
  %tobool1 = icmp eq i8 %1, 0
  %and = and i32 %resetMask, -17
  %spec.select = select i1 %tobool1, i32 %resetMask, i32 %and
  %and2 = and i32 %spec.select, 17
  %tobool3 = icmp eq i32 %and2, 0
  br i1 %tobool3, label %if.end20, label %if.then4

if.then4:                                         ; preds = %entry
  %call = tail call i32 @ar5212SetPowerMode(%struct.ath_hal* nonnull %ah, i32 0, i32 1) #6
  %cmp = icmp eq i32 %call, 1
  br i1 %cmp, label %if.end6, label %cleanup

if.end6:                                          ; preds = %if.then4
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 36, i32 0) #6
  %call7 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 36) #6
  %call.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 8) #6
  %or.i = or i32 %call.i, 32
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 8, i32 %or.i) #6
  %call1.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 2176) #6
  %or2.i = or i32 %call1.i, 1023
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 2176, i32 %or2.i) #6
  br label %for.body.i

for.body.i:                                       ; preds = %if.end36.i, %if.end6
  %macStateFlag.070.i = phi i32 [ 6, %if.end6 ], [ %macStateFlag.3.i, %if.end36.i ]
  %count.069.i = phi i32 [ 0, %if.end6 ], [ %inc38.i, %if.end36.i ]
  %and.i = and i32 %macStateFlag.070.i, 4
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %if.end8.i, label %if.then.i

if.then.i:                                        ; preds = %for.body.i
  %call3.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 8) #6
  %and4.i = and i32 %call3.i, 4
  %cmp5.i = icmp eq i32 %and4.i, 0
  %and7.i = and i32 %macStateFlag.070.i, -5
  %spec.select.i = select i1 %cmp5.i, i32 %and7.i, i32 %macStateFlag.070.i
  br label %if.end8.i

if.end8.i:                                        ; preds = %if.then.i, %for.body.i
  %macStateFlag.1.i = phi i32 [ %macStateFlag.070.i, %for.body.i ], [ %spec.select.i, %if.then.i ]
  %and9.i = and i32 %macStateFlag.1.i, 2
  %tobool10.i = icmp eq i32 %and9.i, 0
  br i1 %tobool10.i, label %if.end19.i, label %if.then11.i

if.then11.i:                                      ; preds = %if.end8.i
  %call12.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2112) #6
  %and13.i = and i32 %call12.i, 1023
  %cmp14.i = icmp eq i32 %and13.i, 0
  br i1 %cmp14.i, label %if.then15.i, label %if.end19.i

if.then15.i:                                      ; preds = %if.then11.i
  %and16.i = and i32 %macStateFlag.1.i, -4
  %or17.i = or i32 %and16.i, 1
  br label %if.end19.i

if.end19.i:                                       ; preds = %if.then15.i, %if.then11.i, %if.end8.i
  %macStateFlag.2.i = phi i32 [ %macStateFlag.1.i, %if.then11.i ], [ %or17.i, %if.then15.i ], [ %macStateFlag.1.i, %if.end8.i ]
  %and20.i = and i32 %macStateFlag.2.i, 1
  %tobool21.i = icmp eq i32 %and20.i, 0
  br i1 %tobool21.i, label %if.end33.i, label %for.body25.preheader.i

for.body25.preheader.i:                           ; preds = %if.end19.i
  %call26.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2560) #6
  %and27.i = and i32 %call26.i, 3
  %call26.1.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2564) #6
  %and27.1.i = and i32 %call26.1.i, 3
  %add28.1.i = add nuw nsw i32 %and27.i, %and27.1.i
  %call26.2.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2568) #6
  %and27.2.i = and i32 %call26.2.i, 3
  %add28.2.i = add nuw nsw i32 %and27.2.i, %add28.1.i
  %call26.3.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2572) #6
  %and27.3.i = and i32 %call26.3.i, 3
  %add28.3.i = add nuw nsw i32 %and27.3.i, %add28.2.i
  %call26.4.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2576) #6
  %and27.4.i = and i32 %call26.4.i, 3
  %add28.4.i = add nuw nsw i32 %and27.4.i, %add28.3.i
  %call26.5.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2580) #6
  %and27.5.i = and i32 %call26.5.i, 3
  %add28.5.i = add nuw nsw i32 %and27.5.i, %add28.4.i
  %call26.6.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2584) #6
  %and27.6.i = and i32 %call26.6.i, 3
  %add28.6.i = add nuw nsw i32 %and27.6.i, %add28.5.i
  %call26.7.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2588) #6
  %and27.7.i = and i32 %call26.7.i, 3
  %add28.7.i = add i32 %and27.7.i, %add28.6.i
  %call26.8.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2592) #6
  %and27.8.i = and i32 %call26.8.i, 3
  %add28.8.i = add i32 %and27.8.i, %add28.7.i
  %call26.9.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 2596) #6
  %and27.9.i = and i32 %call26.9.i, 3
  %add28.9.i = sub i32 0, %add28.8.i
  %cmp29.i = icmp eq i32 %and27.9.i, %add28.9.i
  %and31.i = and i32 %macStateFlag.2.i, -2
  %spec.select66.i = select i1 %cmp29.i, i32 %and31.i, i32 %macStateFlag.2.i
  br label %if.end33.i

if.end33.i:                                       ; preds = %for.body25.preheader.i, %if.end19.i
  %macStateFlag.3.i = phi i32 [ %macStateFlag.2.i, %if.end19.i ], [ %spec.select66.i, %for.body25.preheader.i ]
  %cmp34.i = icmp eq i32 %macStateFlag.3.i, 0
  br i1 %cmp34.i, label %if.else, label %if.end36.i

if.end36.i:                                       ; preds = %if.end33.i
  tail call void @DELAY(i32 50) #6
  %inc38.i = add nuw nsw i32 %count.069.i, 1
  %cmp.i = icmp ult i32 %inc38.i, 10
  br i1 %cmp.i, label %for.body.i, label %if.then10

if.then10:                                        ; preds = %if.end36.i
  tail call void @DELAY(i32 15) #6
  %call11 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 12) #6
  %2 = load i8, i8* %0, align 4
  %tobool13 = icmp eq i8 %2, 0
  %spec.select76.v = select i1 %tobool13, i32 19, i32 3
  %spec.select76 = or i32 %spec.select76.v, %spec.select
  br label %if.end20

if.else:                                          ; preds = %if.end33.i
  tail call void @DELAY(i32 15) #6
  %call18 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 12) #6
  br label %if.end20

if.end20:                                         ; preds = %if.then10, %entry, %if.else
  %resetMask.addr.1 = phi i32 [ %and, %if.else ], [ %spec.select, %entry ], [ %spec.select76, %if.then10 ]
  %call21 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 12) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 16384, i32 %resetMask.addr.1) #6
  tail call void @DELAY(i32 15) #6
  %resetMask.op = and i32 %resetMask, 3
  %and22 = select i1 %tobool, i32 3, i32 %resetMask.op
  %and23 = and i32 %resetMask.addr.1, 3
  %call24 = tail call i32 @ath_hal_wait(%struct.ath_hal* %ah, i32 16384, i32 %and22, i32 %and23) #6
  %and25 = and i32 %resetMask.addr.1, 1
  %cmp26 = icmp eq i32 %and25, 0
  br i1 %cmp26, label %if.then27, label %if.end39

if.then27:                                        ; preds = %if.end20
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 20, i32 0) #6
  %call34 = tail call i32 @ar5212SetPowerMode(%struct.ath_hal* %ah, i32 0, i32 1) #6
  %tobool35 = icmp eq i32 %call34, 0
  br i1 %tobool35, label %if.end39, label %if.then36

if.then36:                                        ; preds = %if.then27
  %call37 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 192) #6
  br label %if.end39

if.end39:                                         ; preds = %if.then27, %if.then36, %if.end20
  %and40 = lshr i32 %resetMask.addr.1, 1
  %and40.lobit = and i32 %and40, 1
  %3 = xor i32 %and40.lobit, 1
  %4 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  %ah_phyPowerOn = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %4, i64 0, i32 30
  store i32 %3, i32* %ah_phyPowerOn, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then4, %if.end39
  %retval.0 = phi i32 [ %call24, %if.end39 ], [ %call, %if.then4 ]
  ret i32 %retval.0
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212Disable(%struct.ath_hal* %ah) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @ar5212SetPowerMode(%struct.ath_hal* %ah, i32 0, i32 1) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc i32 @ar5212SetResetReg(%struct.ath_hal* %ah, i32 19) #7
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i32 [ %call1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212PerCalibrationN(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture %chan, i32 %chainMask, i32 %longCal, i32* nocapture %isCalDone) local_unnamed_addr #0 {
entry:
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  store i32 0, i32* %isCalDone, align 4
  %1 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ic_devdata.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %2 = load i16, i16* %ic_devdata.i, align 2
  %idxprom.i = zext i16 %2 to i64
  %arrayidx.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i
  %cmp = icmp eq %struct.HAL_CHANNEL_INTERNAL* %arrayidx.i, null
  br i1 %cmp, label %cleanup, label %do.body

do.body:                                          ; preds = %entry
  %3 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, -2
  %switch = icmp eq i32 %5, 14
  br i1 %switch, label %land.lhs.true, label %do.end

land.lhs.true:                                    ; preds = %do.body
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %6 = load i32, i32* %ic_flags, align 4
  %and = and i32 %6, 32
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %do.end, label %if.then4

if.then4:                                         ; preds = %land.lhs.true
  %and6 = and i32 %6, -1057
  %or = or i32 %and6, 1024
  store i32 %or, i32* %ic_flags, align 4
  br label %do.end

do.end:                                           ; preds = %do.body, %land.lhs.true, %if.then4
  %isBmode.0 = phi i32 [ 1, %if.then4 ], [ 0, %do.body ], [ 0, %land.lhs.true ]
  %ah_bIQCalibration = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 22
  %7 = load i32, i32* %ah_bIQCalibration, align 4
  switch i32 %7, label %if.end14 [
    i32 2, label %if.then13
    i32 0, label %if.then13
  ]

if.then13:                                        ; preds = %do.end, %do.end
  store i32 1, i32* %isCalDone, align 4
  %.pr = load i32, i32* %ah_bIQCalibration, align 4
  br label %if.end14

if.end14:                                         ; preds = %do.end, %if.then13
  %8 = phi i32 [ %7, %do.end ], [ %.pr, %if.then13 ]
  %cmp16 = icmp eq i32 %8, 1
  br i1 %cmp16, label %land.lhs.true17, label %if.else86

land.lhs.true17:                                  ; preds = %if.end14
  %call18 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %and19 = and i32 %call18, 65536
  %tobool20 = icmp eq i32 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.else86

if.then21:                                        ; preds = %land.lhs.true17
  store i32 0, i32* %ah_bIQCalibration, align 4
  store i32 1, i32* %isCalDone, align 4
  br label %do.body23

do.body23:                                        ; preds = %if.end31, %if.then21
  %i.0 = phi i32 [ 0, %if.then21 ], [ %inc, %if.end31 ]
  %call24 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39952) #6
  %call25 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39956) #6
  %call26 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39960) #6
  %tobool27 = icmp ne i32 %call24, 0
  %tobool29 = icmp ne i32 %call25, 0
  %or.cond = and i1 %tobool27, %tobool29
  br i1 %or.cond, label %do.end36, label %if.end31

if.end31:                                         ; preds = %do.body23
  %call32 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39200) #6
  %or33 = or i32 %call32, 65536
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39200, i32 %or33) #6
  %inc = add nuw nsw i32 %i.0, 1
  %cmp35 = icmp ult i32 %inc, 10
  br i1 %cmp35, label %do.body23, label %do.end36

do.end36:                                         ; preds = %do.body23, %if.end31
  %div = lshr i32 %call24, 1
  %div37 = lshr i32 %call25, 1
  %add = add nuw i32 %div37, %div
  %div38 = lshr i32 %add, 7
  %cmp40 = icmp ne i32 %div38, 0
  %cmp42 = icmp ugt i32 %call25, 255
  %or.cond169 = and i1 %cmp42, %cmp40
  br i1 %or.cond169, label %if.then43, label %if.end109

if.then43:                                        ; preds = %do.end36
  %div39 = lshr i32 %call25, 7
  %conv = shl i32 %call26, 24
  %sext = sub i32 0, %conv
  %conv44 = ashr exact i32 %sext, 24
  %div45 = sdiv i32 %conv44, %div38
  %9 = icmp slt i32 %div45, 31
  %spec.select = select i1 %9, i32 %div45, i32 31
  %10 = icmp sgt i32 %spec.select, -32
  %iCoff.0 = select i1 %10, i32 %spec.select, i32 -32
  %div55 = udiv i32 %call24, %div39
  %sub56 = add i32 %div55, -128
  %11 = icmp slt i32 %sub56, 15
  %spec.select240 = select i1 %11, i32 %sub56, i32 15
  %12 = icmp sgt i32 %spec.select240, -16
  %qCoff.0 = select i1 %12, i32 %spec.select240, i32 -16
  %call66 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39200) #6
  %and67 = and i32 %call66, -2017
  %shl = shl i32 %iCoff.0, 5
  %and68 = and i32 %shl, 2016
  %or69 = or i32 %and68, %and67
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39200, i32 %or69) #6
  %call70 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39200) #6
  %and71 = and i32 %call70, -32
  %and73 = and i32 %qCoff.0, 31
  %or74 = or i32 %and73, %and71
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39200, i32 %or74) #6
  %call75 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39200) #6
  %or76 = or i32 %call75, 2048
  tail call void @ath_hal_reg_write(%struct.ath_hal* %ah, i32 39200, i32 %or76) #6
  store i32 2, i32* %ah_bIQCalibration, align 4
  %privFlags = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i, i32 1
  %13 = load i8, i8* %privFlags, align 2
  %14 = or i8 %13, 1
  store i8 %14, i8* %privFlags, align 2
  %conv81 = trunc i32 %iCoff.0 to i8
  %iCoff82 = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i, i32 3
  store i8 %conv81, i8* %iCoff82, align 4
  %conv83 = trunc i32 %qCoff.0 to i8
  %qCoff84 = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i, i32 4
  store i8 %conv83, i8* %qCoff84, align 1
  br label %if.end109

if.else86:                                        ; preds = %land.lhs.true17, %if.end14
  %ic_flags87 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %15 = load i32, i32* %ic_flags87, align 4
  %and88 = and i32 %15, 160
  %cmp89 = icmp eq i32 %and88, 160
  br i1 %cmp89, label %if.end109, label %land.lhs.true91

land.lhs.true91:                                  ; preds = %if.else86
  %16 = load i32, i32* %ah_bIQCalibration, align 4
  %cmp93 = icmp eq i32 %16, 2
  br i1 %cmp93, label %land.lhs.true95, label %if.end109

land.lhs.true95:                                  ; preds = %land.lhs.true91
  %privFlags96 = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i, i32 1
  %17 = load i8, i8* %privFlags96, align 2
  %18 = and i8 %17, 1
  %cmp99 = icmp eq i8 %18, 0
  br i1 %cmp99, label %if.then101, label %if.end109

if.then101:                                       ; preds = %land.lhs.true95
  %call102 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %or104 = or i32 %call102, 61440
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39200, i32 %or104) #6
  %call105 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39200) #6
  %or106 = or i32 %call105, 65536
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39200, i32 %or106) #6
  store i32 1, i32* %ah_bIQCalibration, align 4
  br label %if.end109

if.end109:                                        ; preds = %do.end36, %if.then43, %if.else86, %land.lhs.true91, %land.lhs.true95, %if.then101
  %tobool110 = icmp eq i32 %longCal, 0
  br i1 %tobool110, label %do.body142, label %if.then111

if.then111:                                       ; preds = %if.end109
  %call112 = tail call signext i16 @ar5212GetNf(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan) #7
  %ic_state = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 6
  %19 = load i8, i8* %ic_state, align 2
  %20 = and i8 %19, 4
  %cmp115 = icmp eq i8 %20, 0
  br i1 %cmp115, label %if.then117, label %do.body142

if.then117:                                       ; preds = %if.then111
  %ic_flags118 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %21 = load i32, i32* %ic_flags118, align 4
  %and119 = and i32 %21, 256
  %cmp120 = icmp eq i32 %and119, 0
  br i1 %cmp120, label %lor.lhs.false122, label %if.then138

lor.lhs.false122:                                 ; preds = %if.then117
  %ah_analog5GhzRev = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 7
  %22 = bitcast i32* %ah_analog5GhzRev to i16*
  %23 = load i16, i16* %22, align 4
  %24 = trunc i16 %23 to i8
  %trunc = and i8 %24, -16
  switch i8 %trunc, label %do.body142 [
    i8 48, label %land.lhs.true133
    i8 64, label %land.lhs.true133
  ]

land.lhs.true133:                                 ; preds = %lor.lhs.false122, %lor.lhs.false122
  %and135 = and i32 %21, 1088
  %cmp136 = icmp eq i32 %and135, 0
  br i1 %cmp136, label %do.body142, label %if.then138

if.then138:                                       ; preds = %land.lhs.true133, %if.then117
  tail call void @ar5212RequestRfgain(%struct.ath_hal* %ah) #6
  br label %do.body142

do.body142:                                       ; preds = %lor.lhs.false122, %land.lhs.true133, %if.then111, %if.end109, %if.then138
  %tobool143 = icmp eq i32 %isBmode.0, 0
  br i1 %tobool143, label %cleanup, label %land.lhs.true144

land.lhs.true144:                                 ; preds = %do.body142
  %25 = load i32, i32* %3, align 4
  %26 = and i32 %25, -2
  %switch242 = icmp eq i32 %26, 14
  br i1 %switch242, label %if.then152, label %cleanup

if.then152:                                       ; preds = %land.lhs.true144
  %ic_flags153 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %27 = load i32, i32* %ic_flags153, align 4
  %and154 = and i32 %27, -1057
  %or156 = or i32 %and154, 32
  store i32 %or156, i32* %ic_flags153, align 4
  br label %cleanup

cleanup:                                          ; preds = %land.lhs.true144, %if.then152, %do.body142, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %land.lhs.true144 ], [ 1, %do.body142 ], [ 1, %if.then152 ]
  ret i32 %retval.0
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local signext i16 @ar5212GetNf(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture %chan) local_unnamed_addr #0 {
entry:
  %sort.i = alloca [5 x i16], align 2
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  %ah_nfCalHist = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37
  %1 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ic_devdata.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %2 = load i16, i16* %ic_devdata.i, align 2
  %idxprom.i = zext i16 %2 to i64
  %call1 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39008) #6
  %and = and i32 %call1, 2
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %privNF = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 159
  %3 = bitcast void (%struct.ath_hal*, i32)** %privNF to i16*
  %4 = load i16, i16* %3, align 2
  br label %cleanup

if.end:                                           ; preds = %entry
  %call.i = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39012) #6
  %shr.i = lshr i32 %call.i, 19
  %5 = trunc i32 %shr.i to i16
  %conv.i = and i16 %5, 511
  %6 = and i32 %call.i, 134217728
  %tobool.i = icmp eq i32 %6, 0
  %add8.i = or i16 %5, -512
  %spec.select.i168 = select i1 %tobool.i, i16 %conv.i, i16 %add8.i
  %ah_eeprom.i = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13
  %7 = bitcast [8 x i32]* %ah_eeprom.i to %struct.HAL_EEPROM**
  %8 = load %struct.HAL_EEPROM*, %struct.HAL_EEPROM** %7, align 8
  %ic_flags.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %9 = load i32, i32* %ic_flags.i, align 4
  %and.i = and i32 %9, 1057426912
  %trunc.i = trunc i32 %and.i to i30
  switch i30 %trunc.i, label %if.end13 [
    i30 320, label %sw.bb.i
    i30 160, label %sw.bb1.i
    i30 1152, label %sw.bb4.i
    i30 192, label %sw.bb4.i
  ]

sw.bb.i:                                          ; preds = %if.end
  %arrayidx.i166 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %8, i64 0, i32 34, i64 0
  br label %if.then6

sw.bb1.i:                                         ; preds = %if.end
  %arrayidx3.i = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %8, i64 0, i32 34, i64 1
  br label %if.then6

sw.bb4.i:                                         ; preds = %if.end, %if.end
  %arrayidx6.i167 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %8, i64 0, i32 34, i64 2
  br label %if.then6

if.then6:                                         ; preds = %sw.bb4.i, %sw.bb1.i, %sw.bb.i
  %nfThresh.0.ph.in = phi i16* [ %arrayidx.i166, %sw.bb.i ], [ %arrayidx3.i, %sw.bb1.i ], [ %arrayidx6.i167, %sw.bb4.i ]
  %nfThresh.0.ph = load i16, i16* %nfThresh.0.ph.in, align 2
  %cmp = icmp sgt i16 %spec.select.i168, %nfThresh.0.ph
  br i1 %cmp, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.then6
  %ic_state = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 6
  %10 = load i8, i8* %ic_state, align 2
  %11 = or i8 %10, 4
  store i8 %11, i8* %ic_state, align 2
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then6, %if.then9
  %nf.0 = phi i16 [ 0, %if.then9 ], [ %spec.select.i168, %if.then6 ], [ 0, %if.end ]
  %currIndex.i = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 2
  %12 = load i8, i8* %currIndex.i, align 2
  %idxprom.i164 = zext i8 %12 to i64
  %arrayidx.i165 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 0, i64 %idxprom.i164
  store i16 %nf.0, i16* %arrayidx.i165, align 2
  %13 = load i8, i8* %currIndex.i, align 2
  %inc.i = add i8 %13, 1
  %cmp.i = icmp ugt i8 %inc.i, 4
  %spec.select.i = select i1 %cmp.i, i8 0, i8 %inc.i
  store i8 %spec.select.i, i8* %currIndex.i, align 2
  %first_run = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 3
  %14 = load i8, i8* %first_run, align 1
  %tobool14 = icmp eq i8 %14, 0
  br i1 %tobool14, label %if.else35, label %if.then15

if.then15:                                        ; preds = %if.end13
  %nf.0.off = add nsw i16 %nf.0, 125
  %15 = icmp ugt i16 %nf.0.off, 63
  %invalidNFcount = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 4
  br i1 %15, label %if.then22, label %if.else23

if.then22:                                        ; preds = %if.then15
  store i8 5, i8* %invalidNFcount, align 2
  br label %if.end40

if.else23:                                        ; preds = %if.then15
  %16 = load i8, i8* %invalidNFcount, align 2
  %dec = add i8 %16, -1
  store i8 %dec, i8* %invalidNFcount, align 2
  %cmp26 = icmp eq i8 %dec, 0
  br i1 %cmp26, label %if.then28, label %if.end40

if.then28:                                        ; preds = %if.else23
  store i8 0, i8* %first_run, align 1
  %17 = bitcast [5 x i16]* %sort.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %17) #5
  %18 = bitcast %struct.ar5212NfCalHist* %ah_nfCalHist to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %17, i8* nonnull align 2 %18, i64 10, i1 false) #5
  %arrayidx6.phi.trans.insert.i120 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 0
  %.pre.i121 = load i16, i16* %arrayidx6.phi.trans.insert.i120, align 2
  %arrayidx.i123 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 1
  %19 = load i16, i16* %arrayidx.i123, align 2
  %cmp8.i124 = icmp sgt i16 %19, %.pre.i121
  br i1 %cmp8.i124, label %if.then.i127, label %for.inc.i130

if.then.i127:                                     ; preds = %if.then28
  store i16 %.pre.i121, i16* %arrayidx.i123, align 2
  store i16 %19, i16* %arrayidx6.phi.trans.insert.i120, align 2
  br label %for.inc.i130

for.inc.i130:                                     ; preds = %if.then.i127, %if.then28
  %.pre45.i132 = phi i16 [ %.pre.i121, %if.then28 ], [ %19, %if.then.i127 ]
  %20 = phi i16 [ %19, %if.then28 ], [ %.pre.i121, %if.then.i127 ]
  %arrayidx.i123.1 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 2
  %21 = load i16, i16* %arrayidx.i123.1, align 2
  %cmp8.i124.1 = icmp sgt i16 %21, %20
  br i1 %cmp8.i124.1, label %if.then.i127.1, label %for.inc.i130.1

if.then.1.i139:                                   ; preds = %for.inc.i130.3
  store i16 %.pre45.i132, i16* %arrayidx.i123, align 2
  store i16 %50, i16* %arrayidx6.phi.trans.insert.i120, align 2
  br label %for.inc.1.i142

for.inc.1.i142:                                   ; preds = %if.then.1.i139, %for.inc.i130.3
  %.pre46.i144 = phi i16 [ %50, %if.then.1.i139 ], [ %.pre45.i132, %for.inc.i130.3 ]
  %22 = phi i16 [ %.pre45.i132, %if.then.1.i139 ], [ %50, %for.inc.i130.3 ]
  %cmp8.1.i136.1 = icmp sgt i16 %53, %22
  br i1 %cmp8.1.i136.1, label %if.then.1.i139.1, label %for.inc.1.i142.1

if.then.2.i151:                                   ; preds = %for.inc.1.i142.2
  store i16 %.pre46.i144, i16* %arrayidx.i123, align 2
  store i16 %47, i16* %arrayidx6.phi.trans.insert.i120, align 2
  br label %for.inc.2.i154

for.inc.2.i154:                                   ; preds = %if.then.2.i151, %for.inc.1.i142.2
  %.pre47.i156 = phi i16 [ %47, %if.then.2.i151 ], [ %.pre46.i144, %for.inc.1.i142.2 ]
  %23 = phi i16 [ %.pre46.i144, %if.then.2.i151 ], [ %47, %for.inc.1.i142.2 ]
  %cmp8.2.i148.1 = icmp sgt i16 %49, %23
  br i1 %cmp8.2.i148.1, label %if.then.2.i151.1, label %for.inc.2.i154.1

if.then.3.i161:                                   ; preds = %for.inc.2.i154.1
  store i16 %.pre47.i156, i16* %arrayidx.i123, align 2
  store i16 %46, i16* %arrayidx6.phi.trans.insert.i120, align 2
  br label %ar5212GetNfHistMid.exit163

ar5212GetNfHistMid.exit163:                       ; preds = %for.inc.2.i154.1, %if.then.3.i161
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %17) #5
  %privNF31 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 159
  %24 = bitcast void (%struct.ath_hal*, i32)** %privNF31 to i16*
  store i16 %45, i16* %24, align 2
  br label %if.end40

if.else35:                                        ; preds = %if.end13
  %25 = bitcast [5 x i16]* %sort.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %25) #5
  %26 = bitcast %struct.ar5212NfCalHist* %ah_nfCalHist to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %25, i8* nonnull align 2 %26, i64 10, i1 false) #5
  %arrayidx6.phi.trans.insert.i = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 0
  %.pre.i = load i16, i16* %arrayidx6.phi.trans.insert.i, align 2
  %arrayidx.i118 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 1
  %27 = load i16, i16* %arrayidx.i118, align 2
  %cmp8.i = icmp sgt i16 %27, %.pre.i
  br i1 %cmp8.i, label %if.then.i, label %for.inc.i

if.then.i:                                        ; preds = %if.else35
  store i16 %.pre.i, i16* %arrayidx.i118, align 2
  store i16 %27, i16* %arrayidx6.phi.trans.insert.i, align 2
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i, %if.else35
  %.pre45.i = phi i16 [ %.pre.i, %if.else35 ], [ %27, %if.then.i ]
  %28 = phi i16 [ %27, %if.else35 ], [ %.pre.i, %if.then.i ]
  %arrayidx.i118.1 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 2
  %29 = load i16, i16* %arrayidx.i118.1, align 2
  %cmp8.i.1 = icmp sgt i16 %29, %28
  br i1 %cmp8.i.1, label %if.then.i.1, label %for.inc.i.1

if.then.1.i:                                      ; preds = %for.inc.i.3
  store i16 %.pre45.i, i16* %arrayidx.i118, align 2
  store i16 %38, i16* %arrayidx6.phi.trans.insert.i, align 2
  br label %for.inc.1.i

for.inc.1.i:                                      ; preds = %if.then.1.i, %for.inc.i.3
  %.pre46.i = phi i16 [ %38, %if.then.1.i ], [ %.pre45.i, %for.inc.i.3 ]
  %30 = phi i16 [ %.pre45.i, %if.then.1.i ], [ %38, %for.inc.i.3 ]
  %cmp8.1.i.1 = icmp sgt i16 %41, %30
  br i1 %cmp8.1.i.1, label %if.then.1.i.1, label %for.inc.1.i.1

if.then.2.i:                                      ; preds = %for.inc.1.i.2
  store i16 %.pre46.i, i16* %arrayidx.i118, align 2
  store i16 %35, i16* %arrayidx6.phi.trans.insert.i, align 2
  br label %for.inc.2.i

for.inc.2.i:                                      ; preds = %if.then.2.i, %for.inc.1.i.2
  %.pre47.i = phi i16 [ %35, %if.then.2.i ], [ %.pre46.i, %for.inc.1.i.2 ]
  %31 = phi i16 [ %.pre46.i, %if.then.2.i ], [ %35, %for.inc.1.i.2 ]
  %cmp8.2.i.1 = icmp sgt i16 %37, %31
  br i1 %cmp8.2.i.1, label %if.then.2.i.1, label %for.inc.2.i.1

if.then.3.i:                                      ; preds = %for.inc.2.i.1
  store i16 %.pre47.i, i16* %arrayidx.i118, align 2
  store i16 %34, i16* %arrayidx6.phi.trans.insert.i, align 2
  br label %ar5212GetNfHistMid.exit

ar5212GetNfHistMid.exit:                          ; preds = %for.inc.2.i.1, %if.then.3.i
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %25) #5
  %privNF39 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 159
  %32 = bitcast void (%struct.ath_hal*, i32)** %privNF39 to i16*
  store i16 %33, i16* %32, align 2
  br label %if.end40

if.end40:                                         ; preds = %if.else23, %if.then22, %ar5212GetNfHistMid.exit163, %ar5212GetNfHistMid.exit
  %nf.1 = phi i16 [ -95, %if.then22 ], [ %45, %ar5212GetNfHistMid.exit163 ], [ %33, %ar5212GetNfHistMid.exit ], [ -95, %if.else23 ]
  %call41 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39012) #6
  %and42 = and i32 %call41, -512
  %conv43 = sext i16 %nf.1 to i32
  %shl = shl nsw i32 %conv43, 1
  %and44 = and i32 %shl, 510
  %or45 = or i32 %and44, %and42
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39012, i32 %or45) #6
  %call46 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39008) #6
  %and47 = and i32 %call46, -32769
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39008, i32 %and47) #6
  %call48 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39008) #6
  %and49 = and i32 %call48, -131073
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39008, i32 %and49) #6
  %call50 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39008) #6
  %or51 = or i32 %call50, 2
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39008, i32 %or51) #6
  %call52 = tail call i32 @ath_hal_wait(%struct.ath_hal* nonnull %ah, i32 39008, i32 2, i32 0) #6
  %or57 = or i32 %and42, 412
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39012, i32 %or57) #6
  %call58 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39008) #6
  %or59 = or i32 %call58, 32768
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39008, i32 %or59) #6
  %call60 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39008) #6
  %or61 = or i32 %call60, 131072
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39008, i32 %or61) #6
  %call62 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 39008) #6
  %or63 = or i32 %call62, 2
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39008, i32 %or63) #6
  br label %cleanup

cleanup:                                          ; preds = %if.end40, %if.then
  %nf.1.sink = phi i16 [ %nf.1, %if.end40 ], [ %4, %if.then ]
  %rawNoiseFloor64 = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 37, i64 %idxprom.i, i32 5
  store i16 %nf.1.sink, i16* %rawNoiseFloor64, align 2
  ret i16 %nf.1.sink

if.then.2.i.1:                                    ; preds = %for.inc.2.i
  store i16 %31, i16* %arrayidx.i118.1, align 2
  store i16 %37, i16* %arrayidx.i118, align 2
  br label %for.inc.2.i.1

for.inc.2.i.1:                                    ; preds = %if.then.2.i.1, %for.inc.2.i
  %33 = phi i16 [ %31, %if.then.2.i.1 ], [ %37, %for.inc.2.i ]
  %34 = phi i16 [ %37, %if.then.2.i.1 ], [ %31, %for.inc.2.i ]
  %cmp8.3.i = icmp sgt i16 %34, %.pre47.i
  br i1 %cmp8.3.i, label %if.then.3.i, label %ar5212GetNfHistMid.exit

if.then.1.i.1:                                    ; preds = %for.inc.1.i
  store i16 %30, i16* %arrayidx.i118.1, align 2
  store i16 %41, i16* %arrayidx.i118, align 2
  br label %for.inc.1.i.1

for.inc.1.i.1:                                    ; preds = %if.then.1.i.1, %for.inc.1.i
  %35 = phi i16 [ %41, %if.then.1.i.1 ], [ %30, %for.inc.1.i ]
  %36 = phi i16 [ %30, %if.then.1.i.1 ], [ %41, %for.inc.1.i ]
  %cmp8.1.i.2 = icmp sgt i16 %44, %36
  br i1 %cmp8.1.i.2, label %if.then.1.i.2, label %for.inc.1.i.2

if.then.1.i.2:                                    ; preds = %for.inc.1.i.1
  store i16 %36, i16* %arrayidx.i118.2, align 2
  store i16 %44, i16* %arrayidx.i118.1, align 2
  br label %for.inc.1.i.2

for.inc.1.i.2:                                    ; preds = %if.then.1.i.2, %for.inc.1.i.1
  %37 = phi i16 [ %44, %if.then.1.i.2 ], [ %36, %for.inc.1.i.1 ]
  %cmp8.2.i = icmp sgt i16 %35, %.pre46.i
  br i1 %cmp8.2.i, label %if.then.2.i, label %for.inc.2.i

if.then.i.1:                                      ; preds = %for.inc.i
  store i16 %28, i16* %arrayidx.i118.1, align 2
  store i16 %29, i16* %arrayidx.i118, align 2
  br label %for.inc.i.1

for.inc.i.1:                                      ; preds = %if.then.i.1, %for.inc.i
  %38 = phi i16 [ %28, %for.inc.i ], [ %29, %if.then.i.1 ]
  %39 = phi i16 [ %29, %for.inc.i ], [ %28, %if.then.i.1 ]
  %arrayidx.i118.2 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 3
  %40 = load i16, i16* %arrayidx.i118.2, align 2
  %cmp8.i.2 = icmp sgt i16 %40, %39
  br i1 %cmp8.i.2, label %if.then.i.2, label %for.inc.i.2

if.then.i.2:                                      ; preds = %for.inc.i.1
  store i16 %39, i16* %arrayidx.i118.2, align 2
  store i16 %40, i16* %arrayidx.i118.1, align 2
  br label %for.inc.i.2

for.inc.i.2:                                      ; preds = %if.then.i.2, %for.inc.i.1
  %41 = phi i16 [ %39, %for.inc.i.1 ], [ %40, %if.then.i.2 ]
  %42 = phi i16 [ %40, %for.inc.i.1 ], [ %39, %if.then.i.2 ]
  %arrayidx.i118.3 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 4
  %43 = load i16, i16* %arrayidx.i118.3, align 2
  %cmp8.i.3 = icmp sgt i16 %43, %42
  br i1 %cmp8.i.3, label %if.then.i.3, label %for.inc.i.3

if.then.i.3:                                      ; preds = %for.inc.i.2
  store i16 %42, i16* %arrayidx.i118.3, align 2
  store i16 %43, i16* %arrayidx.i118.2, align 2
  br label %for.inc.i.3

for.inc.i.3:                                      ; preds = %if.then.i.3, %for.inc.i.2
  %44 = phi i16 [ %43, %if.then.i.3 ], [ %42, %for.inc.i.2 ]
  %cmp8.1.i = icmp sgt i16 %38, %.pre45.i
  br i1 %cmp8.1.i, label %if.then.1.i, label %for.inc.1.i

if.then.2.i151.1:                                 ; preds = %for.inc.2.i154
  store i16 %23, i16* %arrayidx.i123.1, align 2
  store i16 %49, i16* %arrayidx.i123, align 2
  br label %for.inc.2.i154.1

for.inc.2.i154.1:                                 ; preds = %if.then.2.i151.1, %for.inc.2.i154
  %45 = phi i16 [ %23, %if.then.2.i151.1 ], [ %49, %for.inc.2.i154 ]
  %46 = phi i16 [ %49, %if.then.2.i151.1 ], [ %23, %for.inc.2.i154 ]
  %cmp8.3.i158 = icmp sgt i16 %46, %.pre47.i156
  br i1 %cmp8.3.i158, label %if.then.3.i161, label %ar5212GetNfHistMid.exit163

if.then.1.i139.1:                                 ; preds = %for.inc.1.i142
  store i16 %22, i16* %arrayidx.i123.1, align 2
  store i16 %53, i16* %arrayidx.i123, align 2
  br label %for.inc.1.i142.1

for.inc.1.i142.1:                                 ; preds = %if.then.1.i139.1, %for.inc.1.i142
  %47 = phi i16 [ %53, %if.then.1.i139.1 ], [ %22, %for.inc.1.i142 ]
  %48 = phi i16 [ %22, %if.then.1.i139.1 ], [ %53, %for.inc.1.i142 ]
  %cmp8.1.i136.2 = icmp sgt i16 %56, %48
  br i1 %cmp8.1.i136.2, label %if.then.1.i139.2, label %for.inc.1.i142.2

if.then.1.i139.2:                                 ; preds = %for.inc.1.i142.1
  store i16 %48, i16* %arrayidx.i123.2, align 2
  store i16 %56, i16* %arrayidx.i123.1, align 2
  br label %for.inc.1.i142.2

for.inc.1.i142.2:                                 ; preds = %if.then.1.i139.2, %for.inc.1.i142.1
  %49 = phi i16 [ %56, %if.then.1.i139.2 ], [ %48, %for.inc.1.i142.1 ]
  %cmp8.2.i148 = icmp sgt i16 %47, %.pre46.i144
  br i1 %cmp8.2.i148, label %if.then.2.i151, label %for.inc.2.i154

if.then.i127.1:                                   ; preds = %for.inc.i130
  store i16 %20, i16* %arrayidx.i123.1, align 2
  store i16 %21, i16* %arrayidx.i123, align 2
  br label %for.inc.i130.1

for.inc.i130.1:                                   ; preds = %if.then.i127.1, %for.inc.i130
  %50 = phi i16 [ %20, %for.inc.i130 ], [ %21, %if.then.i127.1 ]
  %51 = phi i16 [ %21, %for.inc.i130 ], [ %20, %if.then.i127.1 ]
  %arrayidx.i123.2 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 3
  %52 = load i16, i16* %arrayidx.i123.2, align 2
  %cmp8.i124.2 = icmp sgt i16 %52, %51
  br i1 %cmp8.i124.2, label %if.then.i127.2, label %for.inc.i130.2

if.then.i127.2:                                   ; preds = %for.inc.i130.1
  store i16 %51, i16* %arrayidx.i123.2, align 2
  store i16 %52, i16* %arrayidx.i123.1, align 2
  br label %for.inc.i130.2

for.inc.i130.2:                                   ; preds = %if.then.i127.2, %for.inc.i130.1
  %53 = phi i16 [ %51, %for.inc.i130.1 ], [ %52, %if.then.i127.2 ]
  %54 = phi i16 [ %52, %for.inc.i130.1 ], [ %51, %if.then.i127.2 ]
  %arrayidx.i123.3 = getelementptr inbounds [5 x i16], [5 x i16]* %sort.i, i64 0, i64 4
  %55 = load i16, i16* %arrayidx.i123.3, align 2
  %cmp8.i124.3 = icmp sgt i16 %55, %54
  br i1 %cmp8.i124.3, label %if.then.i127.3, label %for.inc.i130.3

if.then.i127.3:                                   ; preds = %for.inc.i130.2
  store i16 %54, i16* %arrayidx.i123.3, align 2
  store i16 %55, i16* %arrayidx.i123.2, align 2
  br label %for.inc.i130.3

for.inc.i130.3:                                   ; preds = %if.then.i127.3, %for.inc.i130.2
  %56 = phi i16 [ %55, %if.then.i127.3 ], [ %54, %for.inc.i130.2 ]
  %cmp8.1.i136 = icmp sgt i16 %50, %.pre45.i132
  br i1 %cmp8.1.i136, label %if.then.1.i139, label %for.inc.1.i142
}

; Function Attrs: noimplicitfloat noredzone
declare dso_local void @ar5212RequestRfgain(%struct.ath_hal*) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212PerCalibration(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture %chan, i32* nocapture %isIQdone) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @ar5212PerCalibrationN(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan, i32 undef, i32 1, i32* %isIQdone) #7
  ret i32 %call
}

; Function Attrs: noimplicitfloat norecurse noredzone nounwind ssp
define dso_local i32 @ar5212ResetCalValid(%struct.ath_hal* %ah, %struct.ieee80211_channel* nocapture readonly %chan) local_unnamed_addr #3 {
entry:
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ic_devdata.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %1 = load i16, i16* %ic_devdata.i, align 2
  %idxprom.i = zext i16 %1 to i64
  %arrayidx.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %0, i64 0, i32 37, i64 %idxprom.i
  %cmp = icmp eq %struct.HAL_CHANNEL_INTERNAL* %arrayidx.i, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %privFlags = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %0, i64 0, i32 37, i64 %idxprom.i, i32 1
  %2 = load i8, i8* %privFlags, align 2
  %3 = and i8 %2, -2
  store i8 %3, i8* %privFlags, align 2
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end
  %retval.0 = phi i32 [ 1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local signext i16 @ar5212GetNoiseFloor(%struct.ath_hal* %ah) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @ath_hal_reg_read(%struct.ath_hal* %ah, i32 39012) #6
  %shr = lshr i32 %call, 19
  %0 = trunc i32 %shr to i16
  %conv = and i16 %0, 511
  %1 = and i32 %call, 134217728
  %tobool = icmp eq i32 %1, 0
  %add8 = or i16 %0, -512
  %spec.select = select i1 %tobool, i16 %conv, i16 %add8
  ret i16 %spec.select
}

; Function Attrs: noimplicitfloat norecurse noredzone nounwind ssp
define dso_local void @ar5212InitNfCalHistBuffer(%struct.ath_hal* nocapture %ah) local_unnamed_addr #3 {
entry:
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  %first_run = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 3
  store i8 1, i8* %first_run, align 1
  %currIndex = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 2
  store i8 0, i8* %currIndex, align 2
  %privNF = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 159
  %1 = bitcast void (%struct.ath_hal*, i32)** %privNF to i16*
  store i16 -95, i16* %1, align 2
  %invalidNFcount = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 4
  store i8 5, i8* %invalidNFcount, align 2
  %arrayidx = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 0, i64 0
  store i16 -95, i16* %arrayidx, align 2
  %arrayidx.1 = getelementptr %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 158
  %2 = bitcast void (%struct.ath_hal*, i32)** %arrayidx.1 to i16*
  store i16 -95, i16* %2, align 2
  %arrayidx.2 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 0, i64 2
  store i16 -95, i16* %arrayidx.2, align 2
  %arrayidx.3 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 0, i64 3
  store i16 -95, i16* %arrayidx.3, align 2
  %arrayidx.4 = getelementptr %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 37, i32 0, i64 4
  store i16 -95, i16* %arrayidx.4, align 2
  ret void
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local signext i16 @ar5212GetNfHistMid(i16* nocapture readonly %calData) local_unnamed_addr #0 {
for.body3.preheader:
  %sort = alloca [5 x i16], align 2
  %0 = bitcast [5 x i16]* %sort to i8*
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %0) #5
  %1 = bitcast i16* %calData to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %0, i8* align 2 %1, i64 10, i1 false)
  %arrayidx6.phi.trans.insert = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 0
  %.pre = load i16, i16* %arrayidx6.phi.trans.insert, align 2
  %arrayidx = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 1
  %2 = load i16, i16* %arrayidx, align 2
  %cmp8 = icmp sgt i16 %2, %.pre
  br i1 %cmp8, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body3.preheader
  %arrayidx6 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 0
  store i16 %.pre, i16* %arrayidx, align 2
  store i16 %2, i16* %arrayidx6, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body3.preheader, %if.then
  %3 = phi i16 [ %2, %for.body3.preheader ], [ %.pre, %if.then ]
  %arrayidx.148 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 2
  %4 = load i16, i16* %arrayidx.148, align 2
  %cmp8.149 = icmp sgt i16 %4, %3
  br i1 %cmp8.149, label %if.then.152, label %for.inc.153

if.then.1:                                        ; preds = %for.inc.3
  %arrayidx6.1 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 0
  store i16 %.pre45, i16* %arrayidx.1, align 2
  store i16 %18, i16* %arrayidx6.1, align 2
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.then.1, %for.inc.3
  %5 = phi i16 [ %.pre45, %if.then.1 ], [ %18, %for.inc.3 ]
  %arrayidx.1.1 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 2
  %6 = load i16, i16* %arrayidx.1.1, align 2
  %cmp8.1.1 = icmp sgt i16 %6, %5
  br i1 %cmp8.1.1, label %if.then.1.1, label %for.inc.1.1

if.then.2:                                        ; preds = %for.inc.1.2
  %arrayidx6.2 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 0
  store i16 %.pre46, i16* %arrayidx.2, align 2
  store i16 %13, i16* %arrayidx6.2, align 2
  br label %for.inc.2

for.inc.2:                                        ; preds = %if.then.2, %for.inc.1.2
  %7 = phi i16 [ %.pre46, %if.then.2 ], [ %13, %for.inc.1.2 ]
  %arrayidx.2.1 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 2
  %8 = load i16, i16* %arrayidx.2.1, align 2
  %cmp8.2.1 = icmp sgt i16 %8, %7
  br i1 %cmp8.2.1, label %if.then.2.1, label %for.inc.2.1

if.then.3:                                        ; preds = %for.inc.2.1
  %arrayidx6.3 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 0
  store i16 %.pre47, i16* %arrayidx.3, align 2
  store i16 %10, i16* %arrayidx6.3, align 2
  br label %for.inc20.3

for.inc20.3:                                      ; preds = %if.then.3, %for.inc.2.1
  %arrayidx23 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 2
  %9 = load i16, i16* %arrayidx23, align 2
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %0) #5
  ret i16 %9

if.then.2.1:                                      ; preds = %for.inc.2
  %arrayidx6.2.1 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 1
  store i16 %7, i16* %arrayidx.2.1, align 2
  store i16 %8, i16* %arrayidx6.2.1, align 2
  br label %for.inc.2.1

for.inc.2.1:                                      ; preds = %if.then.2.1, %for.inc.2
  %arrayidx6.3.phi.trans.insert = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 0
  %.pre47 = load i16, i16* %arrayidx6.3.phi.trans.insert, align 2
  %arrayidx.3 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 1
  %10 = load i16, i16* %arrayidx.3, align 2
  %cmp8.3 = icmp sgt i16 %10, %.pre47
  br i1 %cmp8.3, label %if.then.3, label %for.inc20.3

if.then.1.1:                                      ; preds = %for.inc.1
  %arrayidx6.1.1 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 1
  store i16 %5, i16* %arrayidx.1.1, align 2
  store i16 %6, i16* %arrayidx6.1.1, align 2
  br label %for.inc.1.1

for.inc.1.1:                                      ; preds = %if.then.1.1, %for.inc.1
  %11 = phi i16 [ %5, %if.then.1.1 ], [ %6, %for.inc.1 ]
  %arrayidx.1.2 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 3
  %12 = load i16, i16* %arrayidx.1.2, align 2
  %cmp8.1.2 = icmp sgt i16 %12, %11
  br i1 %cmp8.1.2, label %if.then.1.2, label %for.inc.1.2

if.then.1.2:                                      ; preds = %for.inc.1.1
  %arrayidx6.1.2 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 2
  store i16 %11, i16* %arrayidx.1.2, align 2
  store i16 %12, i16* %arrayidx6.1.2, align 2
  br label %for.inc.1.2

for.inc.1.2:                                      ; preds = %if.then.1.2, %for.inc.1.1
  %arrayidx6.2.phi.trans.insert = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 0
  %.pre46 = load i16, i16* %arrayidx6.2.phi.trans.insert, align 2
  %arrayidx.2 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 1
  %13 = load i16, i16* %arrayidx.2, align 2
  %cmp8.2 = icmp sgt i16 %13, %.pre46
  br i1 %cmp8.2, label %if.then.2, label %for.inc.2

if.then.152:                                      ; preds = %for.inc
  %arrayidx6.151 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 1
  store i16 %3, i16* %arrayidx.148, align 2
  store i16 %4, i16* %arrayidx6.151, align 2
  br label %for.inc.153

for.inc.153:                                      ; preds = %if.then.152, %for.inc
  %14 = phi i16 [ %4, %for.inc ], [ %3, %if.then.152 ]
  %arrayidx.254 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 3
  %15 = load i16, i16* %arrayidx.254, align 2
  %cmp8.255 = icmp sgt i16 %15, %14
  br i1 %cmp8.255, label %if.then.258, label %for.inc.259

if.then.258:                                      ; preds = %for.inc.153
  %arrayidx6.257 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 2
  store i16 %14, i16* %arrayidx.254, align 2
  store i16 %15, i16* %arrayidx6.257, align 2
  br label %for.inc.259

for.inc.259:                                      ; preds = %if.then.258, %for.inc.153
  %16 = phi i16 [ %15, %for.inc.153 ], [ %14, %if.then.258 ]
  %arrayidx.360 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 4
  %17 = load i16, i16* %arrayidx.360, align 2
  %cmp8.361 = icmp sgt i16 %17, %16
  br i1 %cmp8.361, label %if.then.363, label %for.inc.3

if.then.363:                                      ; preds = %for.inc.259
  %arrayidx6.362 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 3
  store i16 %16, i16* %arrayidx.360, align 2
  store i16 %17, i16* %arrayidx6.362, align 2
  br label %for.inc.3

for.inc.3:                                        ; preds = %if.then.363, %for.inc.259
  %arrayidx6.1.phi.trans.insert = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 0
  %.pre45 = load i16, i16* %arrayidx6.1.phi.trans.insert, align 2
  %arrayidx.1 = getelementptr inbounds [5 x i16], [5 x i16]* %sort, i64 0, i64 1
  %18 = load i16, i16* %arrayidx.1, align 2
  %cmp8.1 = icmp sgt i16 %18, %.pre45
  br i1 %cmp8.1, label %if.then.1, label %for.inc.1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212SetAntennaSwitchInternal(%struct.ath_hal* %ah, i32 %settings, %struct.ieee80211_channel* nocapture readonly %chan) local_unnamed_addr #0 {
entry:
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_5212*
  %ah_eeprom = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 13
  %1 = bitcast [8 x i32]* %ah_eeprom to %struct.HAL_EEPROM**
  %2 = load %struct.HAL_EEPROM*, %struct.HAL_EEPROM** %1, align 8
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 0
  %3 = load i32, i32* %ic_flags, align 4
  %and = and i32 %3, 1057426912
  %trunc = trunc i32 %and to i30
  switch i30 %trunc, label %cleanup [
    i30 320, label %sw.epilog
    i30 1152, label %sw.bb1
    i30 192, label %sw.bb1
    i30 160, label %sw.bb2
  ]

sw.bb1:                                           ; preds = %entry, %entry
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  %4 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, -2
  %switch = icmp eq i32 %6, 14
  %spec.select = select i1 %switch, i64 2, i64 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb2, %entry, %sw.bb1
  %ix.0 = phi i64 [ 2, %sw.bb1 ], [ 0, %entry ], [ %spec.select, %sw.bb2 ]
  %arrayidx5 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 1, i64 %ix.0
  %7 = load i16, i16* %arrayidx5, align 2
  %conv = zext i16 %7 to i32
  %arrayidx9 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 2, i64 %ix.0
  %8 = load i16, i16* %arrayidx9, align 2
  %conv10 = zext i16 %8 to i32
  %shl = shl nuw nsw i32 %conv10, 6
  %or = or i32 %shl, %conv
  %arrayidx14 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 3, i64 %ix.0
  %9 = load i16, i16* %arrayidx14, align 2
  %conv15 = zext i16 %9 to i32
  %shl16 = shl nuw nsw i32 %conv15, 12
  %or17 = or i32 %or, %shl16
  %arrayidx21 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 4, i64 %ix.0
  %10 = load i16, i16* %arrayidx21, align 2
  %conv22 = zext i16 %10 to i32
  %shl23 = shl i32 %conv22, 18
  %or24 = or i32 %or17, %shl23
  %arrayidx28 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 5, i64 %ix.0
  %11 = load i16, i16* %arrayidx28, align 2
  %conv29 = zext i16 %11 to i32
  %shl30 = shl i32 %conv29, 24
  %or31 = or i32 %or24, %shl30
  %arrayidx35 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 6, i64 %ix.0
  %12 = load i16, i16* %arrayidx35, align 2
  %conv36 = zext i16 %12 to i32
  %arrayidx40 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 7, i64 %ix.0
  %13 = load i16, i16* %arrayidx40, align 2
  %conv41 = zext i16 %13 to i32
  %shl42 = shl nuw nsw i32 %conv41, 6
  %or43 = or i32 %shl42, %conv36
  %arrayidx47 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 8, i64 %ix.0
  %14 = load i16, i16* %arrayidx47, align 2
  %conv48 = zext i16 %14 to i32
  %shl49 = shl nuw nsw i32 %conv48, 12
  %or50 = or i32 %or43, %shl49
  %arrayidx54 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 9, i64 %ix.0
  %15 = load i16, i16* %arrayidx54, align 2
  %conv55 = zext i16 %15 to i32
  %shl56 = shl i32 %conv55, 18
  %or57 = or i32 %or50, %shl56
  %arrayidx61 = getelementptr %struct.HAL_EEPROM, %struct.HAL_EEPROM* %2, i64 0, i32 38, i64 10, i64 %ix.0
  %16 = load i16, i16* %arrayidx61, align 2
  %conv62 = zext i16 %16 to i32
  %shl63 = shl i32 %conv62, 24
  %or64 = or i32 %or57, %shl63
  switch i32 %settings, label %cleanup [
    i32 1, label %sw.epilog68.thread
    i32 2, label %sw.bb66
    i32 0, label %sw.epilog68
  ]

sw.bb66:                                          ; preds = %sw.epilog
  br label %sw.epilog68.thread

sw.epilog68.thread:                               ; preds = %sw.bb66, %sw.epilog
  %antSwitchA.0.ph = phi i32 [ %or64, %sw.bb66 ], [ %or31, %sw.epilog ]
  %call120 = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 41480) #6
  br label %if.then71

sw.epilog68:                                      ; preds = %sw.epilog
  %cmp69 = icmp eq i32 %or64, %or31
  %call = tail call i32 @ath_hal_reg_read(%struct.ath_hal* nonnull %ah, i32 41480) #6
  br i1 %cmp69, label %if.then71, label %if.else73

if.then71:                                        ; preds = %sw.epilog68.thread, %sw.epilog68
  %call125 = phi i32 [ %call120, %sw.epilog68.thread ], [ %call, %sw.epilog68 ]
  %antSwitchB.0124 = phi i32 [ %antSwitchA.0.ph, %sw.epilog68.thread ], [ %or31, %sw.epilog68 ]
  %and72 = and i32 %call125, -8193
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41480, i32 %and72) #6
  br label %if.end77

if.else73:                                        ; preds = %sw.epilog68
  %or75 = or i32 %call, 8192
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 41480, i32 %or75) #6
  br label %if.end77

if.end77:                                         ; preds = %if.else73, %if.then71
  %.sink = phi i32 [ 1, %if.else73 ], [ 0, %if.then71 ]
  %antSwitchB.0123 = phi i32 [ %or64, %if.else73 ], [ %antSwitchB.0124, %if.then71 ]
  %antSwitchA.0121 = phi i32 [ %or31, %if.else73 ], [ %antSwitchB.0124, %if.then71 ]
  %ah_diversity76 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 150
  %17 = bitcast void (%struct.ath_hal*, i32)** %ah_diversity76 to i32*
  store i32 %.sink, i32* %17, align 8
  %ah_antControl = getelementptr inbounds %struct.ath_hal_5212, %struct.ath_hal_5212* %0, i64 0, i32 20
  store i32 %settings, i32* %ah_antControl, align 4
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39264, i32 %antSwitchA.0121) #6
  tail call void @ath_hal_reg_write(%struct.ath_hal* nonnull %ah, i32 39268, i32 %antSwitchB.0123) #6
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %entry, %if.end77
  %retval.0 = phi i32 [ 1, %if.end77 ], [ 0, %entry ], [ 0, %sw.epilog ]
  ret i32 %retval.0
}

; Function Attrs: noimplicitfloat norecurse noredzone nounwind readonly ssp
define dso_local i32 @ar5212IsSpurChannel(%struct.ath_hal* nocapture readonly %ah, %struct.ieee80211_channel* nocapture readonly %chan) local_unnamed_addr #4 {
entry:
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ic_devdata.i.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %1 = load i16, i16* %ic_devdata.i.i, align 2
  %idxprom.i.i = zext i16 %1 to i64
  %channel.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %0, i64 0, i32 37, i64 %idxprom.i.i, i32 0
  %2 = load i16, i16* %channel.i, align 4
  %3 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %4 = load i32, i32* %3, align 4
  %.off = add i32 %4, -9
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %lor.end, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %entry
  %ah_analog5GhzRev = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 7
  %5 = bitcast i32* %ah_analog5GhzRev to i16*
  %6 = load i16, i16* %5, align 4
  %7 = and i16 %6, 240
  %.off49 = add nsw i16 %7, -48
  %8 = icmp ult i16 %.off49, 33
  br i1 %8, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false8
  %cmp19 = icmp eq i32 %4, 15
  %phitmp = select i1 %cmp19, i16 40, i16 32
  br label %lor.end

lor.end:                                          ; preds = %entry, %lor.lhs.false8, %lor.rhs
  %9 = phi i16 [ %phitmp, %lor.rhs ], [ 40, %entry ], [ 40, %lor.lhs.false8 ]
  %rem48 = urem i16 %2, %9
  %cmp22 = icmp eq i16 %rem48, 0
  br i1 %cmp22, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %lor.end
  %cmp26 = icmp ult i16 %rem48, 10
  br i1 %cmp26, label %land.end, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs
  %cmp31 = icmp ugt i16 %rem48, 22
  %phitmp47 = zext i1 %cmp31 to i32
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.rhs, %lor.rhs28
  %10 = phi i32 [ 0, %lor.end ], [ 1, %land.rhs ], [ %phitmp47, %lor.rhs28 ]
  ret i32 %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212SetTxPowerLimit(%struct.ath_hal* %ah, i32 %limit) local_unnamed_addr #0 {
entry:
  %dummy = alloca %struct.ieee80211_channel, align 4
  %dummyXpdGains = alloca [2 x i16], align 2
  %0 = bitcast %struct.ieee80211_channel* %dummy to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #5
  %1 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ah_curchan = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 12
  %2 = bitcast i32* %ah_curchan to i8**
  %3 = load i8*, i8** %2, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %0, i8* align 4 %3, i64 20, i1 false)
  %4 = bitcast [2 x i16]* %dummyXpdGains to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #5
  %5 = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 1, i32 16, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, -2
  %switch = icmp eq i32 %7, 14
  br i1 %switch, label %land.lhs.true, label %do.end

land.lhs.true:                                    ; preds = %entry
  %ic_flags = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %dummy, i64 0, i32 0
  %8 = load i32, i32* %ic_flags, align 4
  %and = and i32 %8, 32
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %do.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %and4 = and i32 %8, -1057
  %or = or i32 %and4, 1024
  store i32 %or, i32* %ic_flags, align 4
  br label %do.end

do.end:                                           ; preds = %entry, %land.lhs.true, %if.then
  %cmp6 = icmp ult i32 %limit, 63
  %cond = select i1 %cmp6, i32 %limit, i32 63
  %conv = trunc i32 %cond to i16
  %ah_powerLimit = getelementptr inbounds %struct.ath_hal_private, %struct.ath_hal_private* %1, i64 0, i32 29
  store i16 %conv, i16* %ah_powerLimit, align 4
  %arraydecay = getelementptr inbounds [2 x i16], [2 x i16]* %dummyXpdGains, i64 0, i64 0
  %call = call i32 @ar5212SetTransmitPower(%struct.ath_hal* nonnull %ah, %struct.ieee80211_channel* nonnull %dummy, i16* nonnull %arraydecay) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #5
  ret i32 %call
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local i32 @ar5212GetChipPowerLimits(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan) local_unnamed_addr #0 {
entry:
  %minPower = alloca i16, align 2
  %maxPower = alloca i16, align 2
  %0 = bitcast i16* %minPower to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %0) #5
  %1 = bitcast i16* %maxPower to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %1) #5
  %ah_rfHal = getelementptr inbounds %struct.ath_hal, %struct.ath_hal* %ah, i64 7, i32 54
  %2 = bitcast i32 (%struct.ath_hal*, i32)** %ah_rfHal to %struct.RfHalFuncs**
  %3 = load %struct.RfHalFuncs*, %struct.RfHalFuncs** %2, align 8
  %getChannelMaxMinPower = getelementptr inbounds %struct.RfHalFuncs, %struct.RfHalFuncs* %3, i64 0, i32 7
  %4 = load i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i16*, i16*)*, i32 (%struct.ath_hal*, %struct.ieee80211_channel*, i16*, i16*)** %getChannelMaxMinPower, align 8
  %call = call i32 %4(%struct.ath_hal* %ah, %struct.ieee80211_channel* %chan, i16* nonnull %maxPower, i16* nonnull %minPower) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %5 = load i16, i16* %maxPower, align 2
  %6 = sdiv i16 %5, 2
  %conv1 = trunc i16 %6 to i8
  %7 = load i16, i16* %minPower, align 2
  %8 = sdiv i16 %7, 2
  %conv4 = trunc i16 %8 to i8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %conv1.sink = phi i8 [ %conv1, %if.then ], [ 63, %entry ]
  %conv4.sink = phi i8 [ %conv4, %if.then ], [ 0, %entry ]
  %9 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 4
  store i8 %conv1.sink, i8* %9, align 4
  %10 = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 5
  store i8 %conv4.sink, i8* %10, align 1
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %0) #5
  ret i32 1
}

; Function Attrs: noimplicitfloat norecurse noredzone nounwind ssp
define dso_local void @ar5212GetLowerUpperValues(i16 zeroext %v, i16* readonly %lp, i16 zeroext %listSize, i16* nocapture %vlo, i16* nocapture %vhi) local_unnamed_addr #3 {
entry:
  %conv = zext i16 %v to i32
  %mul = mul nuw nsw i32 %conv, 100
  %idx.ext = zext i16 %listSize to i64
  %add.ptr = getelementptr i16, i16* %lp, i64 %idx.ext
  %0 = load i16, i16* %lp, align 2
  %conv2 = zext i16 %0 to i32
  %mul3 = mul nuw nsw i32 %conv2, 100
  %sub = add nsw i32 %mul3, -10
  %cmp = icmp ult i32 %mul, %sub
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i16 %0, i16* %vhi, align 2
  store i16 %0, i16* %vlo, align 2
  br label %cleanup

if.end:                                           ; preds = %entry
  %arrayidx6 = getelementptr i16, i16* %add.ptr, i64 -1
  %1 = load i16, i16* %arrayidx6, align 2
  %conv7 = zext i16 %1 to i32
  %mul8 = mul nuw nsw i32 %conv7, 100
  %add = add nuw nsw i32 %mul8, 10
  %cmp9 = icmp ugt i32 %mul, %add
  br i1 %cmp9, label %if.then11, label %for.cond

if.then11:                                        ; preds = %if.end
  store i16 %1, i16* %vhi, align 2
  store i16 %1, i16* %vlo, align 2
  br label %cleanup

for.cond:                                         ; preds = %if.end, %if.end23
  %2 = phi i16 [ %3, %if.end23 ], [ %0, %if.end ]
  %lp.addr.0 = phi i16* [ %arrayidx24, %if.end23 ], [ %lp, %if.end ]
  %cmp14 = icmp ult i16* %lp.addr.0, %add.ptr
  br i1 %cmp14, label %for.body, label %cleanup

for.body:                                         ; preds = %for.cond
  %conv17 = zext i16 %2 to i32
  %mul18 = mul nuw nsw i32 %conv17, 100
  %cmp.i = icmp ult i32 %mul18, %mul
  %sub.i = sub nsw i32 %mul18, %mul
  %sub1.i = sub nsw i32 %mul, %mul18
  %cond.i = select i1 %cmp.i, i32 %sub1.i, i32 %sub.i
  %cmp19 = icmp ult i32 %cond.i, 10
  br i1 %cmp19, label %if.then21, label %if.end23

if.then21:                                        ; preds = %for.body
  store i16 %2, i16* %vhi, align 2
  store i16 %2, i16* %vlo, align 2
  br label %cleanup

if.end23:                                         ; preds = %for.body
  %arrayidx24 = getelementptr i16, i16* %lp.addr.0, i64 1
  %3 = load i16, i16* %arrayidx24, align 2
  %conv25 = zext i16 %3 to i32
  %mul26 = mul nuw nsw i32 %conv25, 100
  %sub27 = add nsw i32 %mul26, -10
  %cmp28 = icmp ult i32 %mul, %sub27
  br i1 %cmp28, label %if.then30, label %for.cond

if.then30:                                        ; preds = %if.end23
  store i16 %2, i16* %vlo, align 2
  %4 = load i16, i16* %arrayidx24, align 2
  store i16 %4, i16* %vhi, align 2
  br label %cleanup

cleanup:                                          ; preds = %for.cond, %if.then30, %if.then21, %if.then11, %if.then
  ret void
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define dso_local void @ar5212ModifyRfBuffer(i32* nocapture %rfBuf, i32 %reg32, i32 %numBits, i32 %firstBit, i32 %column) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @ath_hal_reverseBits(i32 %reg32, i32 %numBits) #6
  %sub = add i32 %firstBit, -1
  %cmp40 = icmp sgt i32 %numBits, 0
  br i1 %cmp40, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %rem = and i32 %sub, 7
  %div = lshr i32 %sub, 3
  %mul = shl i32 %column, 3
  %add.peel = add i32 %rem, %numBits
  %0 = icmp slt i32 %add.peel, 8
  %spec.select.peel = select i1 %0, i32 %add.peel, i32 8
  %notmask.peel = shl nsw i32 -1, %spec.select.peel
  %notmask39.peel = shl nsw i32 -1, %rem
  %xor.peel = xor i32 %notmask.peel, %notmask39.peel
  %shl7.peel = shl i32 %xor.peel, %mul
  %neg.peel = xor i32 %shl7.peel, -1
  %idxprom.peel = zext i32 %div to i64
  %arrayidx.peel = getelementptr i32, i32* %rfBuf, i64 %idxprom.peel
  %1 = load i32, i32* %arrayidx.peel, align 4
  %and.peel = and i32 %1, %neg.peel
  %shl8.peel = shl i32 %call, %rem
  %shl10.peel = shl i32 %shl8.peel, %mul
  %and11.peel = and i32 %shl7.peel, %shl10.peel
  %or.peel = or i32 %and.peel, %and11.peel
  store i32 %or.peel, i32* %arrayidx.peel, align 4
  %sub14.peel = sub nsw i32 8, %rem
  %sub15.peel = sub i32 %numBits, %sub14.peel
  %shr.peel = lshr i32 %call, %sub14.peel
  %cmp.peel = icmp sgt i32 %sub15.peel, 0
  br i1 %cmp.peel, label %while.body, label %while.end

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %bitsLeft.044 = phi i32 [ %sub15, %while.body ], [ %sub15.peel, %while.body.lr.ph ]
  %tmp32.042 = phi i32 [ %shr, %while.body ], [ %shr.peel, %while.body.lr.ph ]
  %arrayEntry.041.in = phi i32 [ %arrayEntry.041, %while.body ], [ %div, %while.body.lr.ph ]
  %arrayEntry.041 = add i32 %arrayEntry.041.in, 1
  %2 = icmp slt i32 %bitsLeft.044, 8
  %spec.select = select i1 %2, i32 %bitsLeft.044, i32 8
  %notmask = shl nsw i32 -1, %spec.select
  %xor = xor i32 %notmask, -1
  %shl7 = shl i32 %xor, %mul
  %neg = xor i32 %shl7, -1
  %idxprom = zext i32 %arrayEntry.041 to i64
  %arrayidx = getelementptr i32, i32* %rfBuf, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %and = and i32 %3, %neg
  %shl10 = shl i32 %tmp32.042, %mul
  %and11 = and i32 %shl7, %shl10
  %or = or i32 %and, %and11
  store i32 %or, i32* %arrayidx, align 4
  %sub15 = add i32 %bitsLeft.044, -8
  %shr = lshr i32 %tmp32.042, 8
  %cmp = icmp sgt i32 %sub15, 0
  br i1 %cmp, label %while.body, label %while.end, !llvm.loop !2

while.end:                                        ; preds = %while.body.lr.ph, %while.body, %entry
  ret void
}

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ath_hal_reverseBits(i32, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local %struct.HAL_RATE_TABLE* @ar5212GetRateTable(%struct.ath_hal*, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local zeroext i16 @ath_hal_computetxtime(%struct.ath_hal*, %struct.HAL_RATE_TABLE*, i32, i16 zeroext, i32, i32) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone
declare dso_local i32 @ath_hal_getctl(%struct.ath_hal*, %struct.ieee80211_channel*) local_unnamed_addr #2

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define internal fastcc zeroext i16 @ar5212GetMaxEdgePower(i16 zeroext %channel, %struct.RD_EDGES_POWER* nocapture readonly %pRdEdgesPower) unnamed_addr #0 {
entry:
  %tempChannelList = alloca [8 x i16], align 16
  %clo = alloca i16, align 2
  %chi = alloca i16, align 2
  %0 = bitcast [8 x i16]* %tempChannelList to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #5
  %1 = bitcast i16* %clo to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %1) #5
  %2 = bitcast i16* %chi to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %2) #5
  %rdEdge = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 0, i32 0
  %3 = load i16, i16* %rdEdge, align 4
  %cmp1 = icmp eq i16 %3, 0
  %.pre59 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 0
  br i1 %cmp1, label %for.end.for.end21_crit_edge, label %if.end

if.end:                                           ; preds = %entry
  store i16 %3, i16* %.pre59, align 16
  %rdEdge.1 = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 1, i32 0
  %4 = load i16, i16* %rdEdge.1, align 4
  %cmp1.1 = icmp eq i16 %4, 0
  br i1 %cmp1.1, label %land.rhs.lr.ph, label %if.end.1

for.end.for.end21_crit_edge:                      ; preds = %entry
  call void @ar5212GetLowerUpperValues(i16 zeroext %channel, i16* nonnull %.pre59, i16 zeroext 0, i16* nonnull %clo, i16* nonnull %chi) #7
  %.pre = load i16, i16* %clo, align 2
  br label %for.end21

land.rhs.lr.ph:                                   ; preds = %if.end.7, %if.end.6, %if.end.5, %if.end.4, %if.end.3, %if.end.2, %if.end.1, %if.end
  %i.0.lcssa.ph = phi i32 [ 1, %if.end ], [ 2, %if.end.1 ], [ 3, %if.end.2 ], [ 4, %if.end.3 ], [ 5, %if.end.4 ], [ 6, %if.end.5 ], [ 7, %if.end.6 ], [ 8, %if.end.7 ]
  %conv861 = trunc i32 %i.0.lcssa.ph to i16
  call void @ar5212GetLowerUpperValues(i16 zeroext %channel, i16* nonnull %.pre59, i16 zeroext %conv861, i16* nonnull %clo, i16* nonnull %chi) #7
  %5 = load i16, i16* %clo, align 2
  %arrayidx14 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 0
  %6 = load i16, i16* %arrayidx14, align 16
  %cmp16 = icmp eq i16 %5, %6
  br i1 %cmp16, label %for.end21, label %for.inc19

for.inc19:                                        ; preds = %land.rhs.lr.ph
  %cmp10 = icmp ugt i32 %i.0.lcssa.ph, 1
  br i1 %cmp10, label %land.rhs.1, label %for.end21

for.end21:                                        ; preds = %land.rhs.7, %for.inc19, %land.rhs.lr.ph, %land.rhs.1, %for.inc19.1, %land.rhs.2, %for.inc19.2, %land.rhs.3, %for.inc19.3, %land.rhs.4, %for.inc19.4, %land.rhs.5, %for.inc19.5, %land.rhs.6, %for.inc19.6, %for.end.for.end21_crit_edge
  %7 = phi i16 [ %.pre, %for.end.for.end21_crit_edge ], [ %5, %for.inc19.6 ], [ %5, %land.rhs.6 ], [ %5, %for.inc19.5 ], [ %5, %land.rhs.5 ], [ %5, %for.inc19.4 ], [ %5, %land.rhs.4 ], [ %5, %for.inc19.3 ], [ %5, %land.rhs.3 ], [ %5, %for.inc19.2 ], [ %5, %land.rhs.2 ], [ %5, %for.inc19.1 ], [ %5, %land.rhs.1 ], [ %5, %land.rhs.lr.ph ], [ %5, %for.inc19 ], [ %5, %land.rhs.7 ]
  %i.1.lcssa = phi i64 [ 0, %for.end.for.end21_crit_edge ], [ 1, %for.inc19 ], [ 0, %land.rhs.lr.ph ], [ 1, %land.rhs.1 ], [ 2, %for.inc19.1 ], [ 2, %land.rhs.2 ], [ 3, %for.inc19.2 ], [ 3, %land.rhs.3 ], [ 4, %for.inc19.3 ], [ 4, %land.rhs.4 ], [ 5, %for.inc19.4 ], [ 5, %land.rhs.5 ], [ 6, %for.inc19.5 ], [ 6, %land.rhs.6 ], [ 7, %for.inc19.6 ], [ %spec.select, %land.rhs.7 ]
  %8 = load i16, i16* %chi, align 2
  %cmp24 = icmp eq i16 %7, %8
  %cmp28 = icmp eq i16 %7, %channel
  %or.cond = and i1 %cmp28, %cmp24
  br i1 %or.cond, label %if.then32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end21
  %flag = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 %i.1.lcssa, i32 2
  %9 = load i32, i32* %flag, align 4
  %tobool = icmp eq i32 %9, 0
  br i1 %tobool, label %if.end35, label %if.then32

if.then32:                                        ; preds = %for.end21, %lor.lhs.false
  %twice_rdEdgePower = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 %i.1.lcssa, i32 1
  %10 = load i16, i16* %twice_rdEdgePower, align 2
  br label %if.end35

if.end35:                                         ; preds = %lor.lhs.false, %if.then32
  %twiceMaxEdgePower.0 = phi i16 [ %10, %if.then32 ], [ 63, %lor.lhs.false ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %2) #5
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #5
  ret i16 %twiceMaxEdgePower.0

if.end.1:                                         ; preds = %if.end
  %arrayidx7.1 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 1
  store i16 %4, i16* %arrayidx7.1, align 2
  %rdEdge.2 = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 2, i32 0
  %11 = load i16, i16* %rdEdge.2, align 4
  %cmp1.2 = icmp eq i16 %11, 0
  br i1 %cmp1.2, label %land.rhs.lr.ph, label %if.end.2

if.end.2:                                         ; preds = %if.end.1
  %arrayidx7.2 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 2
  store i16 %11, i16* %arrayidx7.2, align 4
  %rdEdge.3 = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 3, i32 0
  %12 = load i16, i16* %rdEdge.3, align 4
  %cmp1.3 = icmp eq i16 %12, 0
  br i1 %cmp1.3, label %land.rhs.lr.ph, label %if.end.3

if.end.3:                                         ; preds = %if.end.2
  %arrayidx7.3 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 3
  store i16 %12, i16* %arrayidx7.3, align 2
  %rdEdge.4 = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 4, i32 0
  %13 = load i16, i16* %rdEdge.4, align 4
  %cmp1.4 = icmp eq i16 %13, 0
  br i1 %cmp1.4, label %land.rhs.lr.ph, label %if.end.4

if.end.4:                                         ; preds = %if.end.3
  %arrayidx7.4 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 4
  store i16 %13, i16* %arrayidx7.4, align 8
  %rdEdge.5 = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 5, i32 0
  %14 = load i16, i16* %rdEdge.5, align 4
  %cmp1.5 = icmp eq i16 %14, 0
  br i1 %cmp1.5, label %land.rhs.lr.ph, label %if.end.5

if.end.5:                                         ; preds = %if.end.4
  %arrayidx7.5 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 5
  store i16 %14, i16* %arrayidx7.5, align 2
  %rdEdge.6 = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 6, i32 0
  %15 = load i16, i16* %rdEdge.6, align 4
  %cmp1.6 = icmp eq i16 %15, 0
  br i1 %cmp1.6, label %land.rhs.lr.ph, label %if.end.6

if.end.6:                                         ; preds = %if.end.5
  %arrayidx7.6 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 6
  store i16 %15, i16* %arrayidx7.6, align 4
  %rdEdge.7 = getelementptr inbounds %struct.RD_EDGES_POWER, %struct.RD_EDGES_POWER* %pRdEdgesPower, i64 7, i32 0
  %16 = load i16, i16* %rdEdge.7, align 4
  %cmp1.7 = icmp eq i16 %16, 0
  br i1 %cmp1.7, label %land.rhs.lr.ph, label %if.end.7

if.end.7:                                         ; preds = %if.end.6
  %arrayidx7.7 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 7
  store i16 %16, i16* %arrayidx7.7, align 2
  br label %land.rhs.lr.ph

land.rhs.1:                                       ; preds = %for.inc19
  %arrayidx14.1 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 1
  %17 = load i16, i16* %arrayidx14.1, align 2
  %cmp16.1 = icmp eq i16 %5, %17
  br i1 %cmp16.1, label %for.end21, label %for.inc19.1

for.inc19.1:                                      ; preds = %land.rhs.1
  %cmp10.1 = icmp ugt i32 %i.0.lcssa.ph, 2
  br i1 %cmp10.1, label %land.rhs.2, label %for.end21

land.rhs.2:                                       ; preds = %for.inc19.1
  %arrayidx14.2 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 2
  %18 = load i16, i16* %arrayidx14.2, align 4
  %cmp16.2 = icmp eq i16 %5, %18
  br i1 %cmp16.2, label %for.end21, label %for.inc19.2

for.inc19.2:                                      ; preds = %land.rhs.2
  %cmp10.2 = icmp ugt i32 %i.0.lcssa.ph, 3
  br i1 %cmp10.2, label %land.rhs.3, label %for.end21

land.rhs.3:                                       ; preds = %for.inc19.2
  %arrayidx14.3 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 3
  %19 = load i16, i16* %arrayidx14.3, align 2
  %cmp16.3 = icmp eq i16 %5, %19
  br i1 %cmp16.3, label %for.end21, label %for.inc19.3

for.inc19.3:                                      ; preds = %land.rhs.3
  %cmp10.3 = icmp ugt i32 %i.0.lcssa.ph, 4
  br i1 %cmp10.3, label %land.rhs.4, label %for.end21

land.rhs.4:                                       ; preds = %for.inc19.3
  %arrayidx14.4 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 4
  %20 = load i16, i16* %arrayidx14.4, align 8
  %cmp16.4 = icmp eq i16 %5, %20
  br i1 %cmp16.4, label %for.end21, label %for.inc19.4

for.inc19.4:                                      ; preds = %land.rhs.4
  %cmp10.4 = icmp ugt i32 %i.0.lcssa.ph, 5
  br i1 %cmp10.4, label %land.rhs.5, label %for.end21

land.rhs.5:                                       ; preds = %for.inc19.4
  %arrayidx14.5 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 5
  %21 = load i16, i16* %arrayidx14.5, align 2
  %cmp16.5 = icmp eq i16 %5, %21
  br i1 %cmp16.5, label %for.end21, label %for.inc19.5

for.inc19.5:                                      ; preds = %land.rhs.5
  %cmp10.5 = icmp ugt i32 %i.0.lcssa.ph, 6
  br i1 %cmp10.5, label %land.rhs.6, label %for.end21

land.rhs.6:                                       ; preds = %for.inc19.5
  %arrayidx14.6 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 6
  %22 = load i16, i16* %arrayidx14.6, align 4
  %cmp16.6 = icmp eq i16 %5, %22
  br i1 %cmp16.6, label %for.end21, label %for.inc19.6

for.inc19.6:                                      ; preds = %land.rhs.6
  %cmp10.6 = icmp ugt i32 %i.0.lcssa.ph, 7
  br i1 %cmp10.6, label %land.rhs.7, label %for.end21

land.rhs.7:                                       ; preds = %for.inc19.6
  %arrayidx14.7 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 7
  %23 = load i16, i16* %arrayidx14.7, align 2
  %cmp16.7 = icmp eq i16 %5, %23
  %spec.select = select i1 %cmp16.7, i64 7, i64 8
  br label %for.end21
}

; Function Attrs: noimplicitfloat noredzone nounwind ssp
define internal fastcc void @ar5212GetTargetPowers(%struct.ath_hal* nocapture readonly %ah, %struct.ieee80211_channel* nocapture readonly %chan, %struct.trgtPowerInfo* nocapture readonly %powInfo, i16 zeroext %numChannels, %struct.trgtPowerInfo* nocapture %pNewPower) unnamed_addr #0 {
entry:
  %tempChannelList = alloca [8 x i16], align 16
  %0 = bitcast %struct.ath_hal* %ah to %struct.ath_hal_private*
  %ic_devdata.i.i = getelementptr inbounds %struct.ieee80211_channel, %struct.ieee80211_channel* %chan, i64 0, i32 10
  %1 = load i16, i16* %ic_devdata.i.i, align 2
  %idxprom.i.i = zext i16 %1 to i64
  %channel.i = getelementptr %struct.ath_hal_private, %struct.ath_hal_private* %0, i64 0, i32 37, i64 %idxprom.i.i, i32 0
  %2 = load i16, i16* %channel.i, align 4
  %3 = bitcast [8 x i16]* %tempChannelList to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #5
  %conv = zext i16 %numChannels to i32
  %cmp197 = icmp eq i16 %numChannels, 0
  br i1 %cmp197, label %entry.for.end_crit_edge, label %for.body.preheader

entry.for.end_crit_edge:                          ; preds = %entry
  %.pre203 = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 0
  br label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i16 %numChannels to i64
  %4 = add nsw i64 %wide.trip.count, -1
  %xtraiter = and i64 %wide.trip.count, 3
  %5 = icmp ult i64 %4, 3
  br i1 %5, label %for.end.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = sub nsw i64 %wide.trip.count, %xtraiter
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader.new
  %indvars.iv = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next.3, %for.body ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.3, %for.body ]
  %testChannel = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %indvars.iv, i32 4
  %6 = load i16, i16* %testChannel, align 2
  %arrayidx3 = getelementptr [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 %indvars.iv
  store i16 %6, i16* %arrayidx3, align 8
  %indvars.iv.next = or i64 %indvars.iv, 1
  %testChannel.1 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %indvars.iv.next, i32 4
  %7 = load i16, i16* %testChannel.1, align 2
  %arrayidx3.1 = getelementptr [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 %indvars.iv.next
  store i16 %7, i16* %arrayidx3.1, align 2
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %testChannel.2 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %indvars.iv.next.1, i32 4
  %8 = load i16, i16* %testChannel.2, align 2
  %arrayidx3.2 = getelementptr [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 %indvars.iv.next.1
  store i16 %8, i16* %arrayidx3.2, align 4
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %testChannel.3 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %indvars.iv.next.2, i32 4
  %9 = load i16, i16* %testChannel.3, align 2
  %arrayidx3.3 = getelementptr [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 %indvars.iv.next.2
  store i16 %9, i16* %arrayidx3.3, align 2
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %for.end.loopexit.unr-lcssa, label %for.body

for.end.loopexit.unr-lcssa:                       ; preds = %for.body, %for.body.preheader
  %indvars.iv.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next.3, %for.body ]
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.end.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.end.loopexit.unr-lcssa, %for.body.epil
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %for.body.epil ], [ %indvars.iv.unr, %for.end.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.end.loopexit.unr-lcssa ]
  %testChannel.epil = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %indvars.iv.epil, i32 4
  %10 = load i16, i16* %testChannel.epil, align 2
  %arrayidx3.epil = getelementptr [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 %indvars.iv.epil
  store i16 %10, i16* %arrayidx3.epil, align 2
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %for.end.loopexit, label %for.body.epil, !llvm.loop !4

for.end.loopexit:                                 ; preds = %for.body.epil, %for.end.loopexit.unr-lcssa
  %arraydecay.phi.trans.insert = getelementptr inbounds [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 0
  %.pre = load i16, i16* %arraydecay.phi.trans.insert, align 16
  br label %for.end

for.end:                                          ; preds = %entry.for.end_crit_edge, %for.end.loopexit
  %arraydecay.pre-phi = phi i16* [ %.pre203, %entry.for.end_crit_edge ], [ %arraydecay.phi.trans.insert, %for.end.loopexit ]
  %11 = phi i16 [ undef, %entry.for.end_crit_edge ], [ %.pre, %for.end.loopexit ]
  %conv.i175 = zext i16 %2 to i32
  %mul.i176 = mul nuw nsw i32 %conv.i175, 100
  %idx.ext.i = zext i16 %numChannels to i64
  %add.ptr.i = getelementptr [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 %idx.ext.i
  %conv2.i = zext i16 %11 to i32
  %mul3.i = mul nuw nsw i32 %conv2.i, 100
  %sub.i177 = add nsw i32 %mul3.i, -10
  %cmp.i178 = icmp ult i32 %mul.i176, %sub.i177
  br i1 %cmp.i178, label %ar5212GetLowerUpperValues.exit, label %if.end.i180

if.end.i180:                                      ; preds = %for.end
  %arrayidx6.i = getelementptr i16, i16* %add.ptr.i, i64 -1
  %12 = load i16, i16* %arrayidx6.i, align 2
  %conv7.i = zext i16 %12 to i32
  %mul8.i = mul nuw nsw i32 %conv7.i, 100
  %add.i179 = add nuw nsw i32 %mul8.i, 10
  %cmp9.i = icmp ugt i32 %mul.i176, %add.i179
  br i1 %cmp9.i, label %ar5212GetLowerUpperValues.exit, label %for.cond.i

for.cond.i:                                       ; preds = %if.end.i180, %if.end23.i
  %13 = phi i16 [ %14, %if.end23.i ], [ %11, %if.end.i180 ]
  %lp.addr.0.i = phi i16* [ %arrayidx24.i, %if.end23.i ], [ %arraydecay.pre-phi, %if.end.i180 ]
  %cmp14.i = icmp ult i16* %lp.addr.0.i, %add.ptr.i
  br i1 %cmp14.i, label %for.body.i, label %ar5212GetLowerUpperValues.exit

for.body.i:                                       ; preds = %for.cond.i
  %conv17.i = zext i16 %13 to i32
  %mul18.i = mul nuw nsw i32 %conv17.i, 100
  %cmp.i.i = icmp ult i32 %mul18.i, %mul.i176
  %sub.i.i = sub nsw i32 %mul18.i, %mul.i176
  %sub1.i.i = sub nsw i32 %mul.i176, %mul18.i
  %cond.i.i = select i1 %cmp.i.i, i32 %sub1.i.i, i32 %sub.i.i
  %cmp19.i = icmp ult i32 %cond.i.i, 10
  br i1 %cmp19.i, label %ar5212GetLowerUpperValues.exit, label %if.end23.i

if.end23.i:                                       ; preds = %for.body.i
  %arrayidx24.i = getelementptr i16, i16* %lp.addr.0.i, i64 1
  %14 = load i16, i16* %arrayidx24.i, align 2
  %conv25.i = zext i16 %14 to i32
  %mul26.i181 = mul nuw nsw i32 %conv25.i, 100
  %sub27.i = add nsw i32 %mul26.i181, -10
  %cmp28.i = icmp ult i32 %mul.i176, %sub27.i
  br i1 %cmp28.i, label %ar5212GetLowerUpperValues.exit, label %for.cond.i

ar5212GetLowerUpperValues.exit:                   ; preds = %if.end23.i, %for.body.i, %for.cond.i, %if.end.i180, %for.end
  %clo.0 = phi i16 [ %11, %for.end ], [ %12, %if.end.i180 ], [ %13, %for.cond.i ], [ %13, %for.body.i ], [ %13, %if.end23.i ]
  %chi.0 = phi i16 [ %11, %for.end ], [ %12, %if.end.i180 ], [ %14, %if.end23.i ], [ %13, %for.body.i ], [ undef, %for.cond.i ]
  %cmp20209 = icmp eq i16 %chi.0, %11
  %or.cond = or i1 %cmp197, %cmp20209
  br i1 %or.cond, label %for.end27, label %for.inc25

for.body8.if.then22_crit_edge:                    ; preds = %for.inc25.for.body8_crit_edge
  %phitmp213 = and i32 %inc26, 65535
  %phitmp214 = zext i32 %phitmp213 to i64
  br label %for.end27

for.inc25:                                        ; preds = %ar5212GetLowerUpperValues.exit, %for.inc25.for.body8_crit_edge
  %spec.select211 = phi i16 [ %spec.select, %for.inc25.for.body8_crit_edge ], [ 0, %ar5212GetLowerUpperValues.exit ]
  %i.1196210 = phi i32 [ %inc26, %for.inc25.for.body8_crit_edge ], [ 0, %ar5212GetLowerUpperValues.exit ]
  %inc26 = add nuw i32 %i.1196210, 1
  %cmp6 = icmp ult i32 %inc26, %conv
  br i1 %cmp6, label %for.inc25.for.body8_crit_edge, label %for.end27

for.inc25.for.body8_crit_edge:                    ; preds = %for.inc25
  %idxprom10.phi.trans.insert = sext i32 %inc26 to i64
  %arrayidx11.phi.trans.insert = getelementptr [8 x i16], [8 x i16]* %tempChannelList, i64 0, i64 %idxprom10.phi.trans.insert
  %.pre202 = load i16, i16* %arrayidx11.phi.trans.insert, align 2
  %cmp13 = icmp eq i16 %clo.0, %.pre202
  %conv15 = trunc i32 %inc26 to i16
  %spec.select = select i1 %cmp13, i16 %conv15, i16 %spec.select211
  %cmp20 = icmp eq i16 %chi.0, %.pre202
  br i1 %cmp20, label %for.body8.if.then22_crit_edge, label %for.inc25

for.end27:                                        ; preds = %for.inc25, %for.body8.if.then22_crit_edge, %ar5212GetLowerUpperValues.exit
  %ixlo.2 = phi i16 [ 0, %ar5212GetLowerUpperValues.exit ], [ %spec.select, %for.body8.if.then22_crit_edge ], [ %spec.select211, %for.inc25 ]
  %ixhi.0 = phi i64 [ 0, %ar5212GetLowerUpperValues.exit ], [ %phitmp214, %for.body8.if.then22_crit_edge ], [ 0, %for.inc25 ]
  %idxprom28 = zext i16 %ixlo.2 to i64
  %twicePwr6_24 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %idxprom28, i32 3
  %15 = load i16, i16* %twicePwr6_24, align 2
  %twicePwr6_2432 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %ixhi.0, i32 3
  %16 = load i16, i16* %twicePwr6_2432, align 2
  %conv.i147 = zext i16 %15 to i32
  %conv1.i148 = zext i16 %16 to i32
  %mul.i149 = mul nuw i32 %conv1.i148, %conv.i147
  %cmp.i150 = icmp eq i32 %mul.i149, 0
  br i1 %cmp.i150, label %interpolate.exit174, label %if.end.i153

if.end.i153:                                      ; preds = %for.end27
  %conv4.i151 = zext i16 %clo.0 to i32
  %cmp5.i152 = icmp eq i16 %chi.0, %clo.0
  br i1 %cmp5.i152, label %interpolate.exit174, label %if.then7.i163

if.then7.i163:                                    ; preds = %if.end.i153
  %conv3.i154 = zext i16 %chi.0 to i32
  %sub.i156 = sub nsw i32 %conv.i175, %conv4.i151
  %mul10.i157 = mul nsw i32 %sub.i156, 100
  %sub13.i158 = sub nsw i32 %conv3.i154, %conv4.i151
  %div.i159 = sdiv i32 %mul10.i157, %sub13.i158
  %sext.i160 = shl i32 %div.i159, 16
  %conv15.i161 = ashr exact i32 %sext.i160, 16
  %cmp16.i162 = icmp slt i32 %sext.i160, 0
  br i1 %cmp16.i162, label %interpolate.exit174, label %if.else.i165

if.else.i165:                                     ; preds = %if.then7.i163
  %cmp20.i164 = icmp sgt i32 %sext.i160, 6553600
  br i1 %cmp20.i164, label %interpolate.exit174, label %if.else23.i172

if.else23.i172:                                   ; preds = %if.else.i165
  %mul26.i166 = mul nsw i32 %conv15.i161, %conv1.i148
  %sub28.i167 = sub nsw i32 100, %conv15.i161
  %mul30.i168 = mul i32 %sub28.i167, %conv.i147
  %add.i169 = add i32 %mul30.i168, %mul26.i166
  %div31.i170 = sdiv i32 %add.i169, 100
  %conv32.i171 = trunc i32 %div31.i170 to i16
  br label %interpolate.exit174

interpolate.exit174:                              ; preds = %for.end27, %if.end.i153, %if.then7.i163, %if.else.i165, %if.else23.i172
  %retval.0.i173 = phi i16 [ 0, %for.end27 ], [ %conv32.i171, %if.else23.i172 ], [ %15, %if.then7.i163 ], [ %16, %if.else.i165 ], [ %15, %if.end.i153 ]
  %twicePwr6_2434 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %pNewPower, i64 0, i32 3
  store i16 %retval.0.i173, i16* %twicePwr6_2434, align 2
  %twicePwr36 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %idxprom28, i32 2
  %17 = load i16, i16* %twicePwr36, align 2
  %twicePwr3639 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %ixhi.0, i32 2
  %18 = load i16, i16* %twicePwr3639, align 2
  %conv.i119 = zext i16 %17 to i32
  %conv1.i120 = zext i16 %18 to i32
  %mul.i121 = mul nuw i32 %conv1.i120, %conv.i119
  %cmp.i122 = icmp eq i32 %mul.i121, 0
  br i1 %cmp.i122, label %interpolate.exit146, label %if.end.i125

if.end.i125:                                      ; preds = %interpolate.exit174
  %conv4.i123 = zext i16 %clo.0 to i32
  %cmp5.i124 = icmp eq i16 %chi.0, %clo.0
  br i1 %cmp5.i124, label %interpolate.exit146, label %if.then7.i135

if.then7.i135:                                    ; preds = %if.end.i125
  %conv3.i126 = zext i16 %chi.0 to i32
  %sub.i128 = sub nsw i32 %conv.i175, %conv4.i123
  %mul10.i129 = mul nsw i32 %sub.i128, 100
  %sub13.i130 = sub nsw i32 %conv3.i126, %conv4.i123
  %div.i131 = sdiv i32 %mul10.i129, %sub13.i130
  %sext.i132 = shl i32 %div.i131, 16
  %conv15.i133 = ashr exact i32 %sext.i132, 16
  %cmp16.i134 = icmp slt i32 %sext.i132, 0
  br i1 %cmp16.i134, label %interpolate.exit146, label %if.else.i137

if.else.i137:                                     ; preds = %if.then7.i135
  %cmp20.i136 = icmp sgt i32 %sext.i132, 6553600
  br i1 %cmp20.i136, label %interpolate.exit146, label %if.else23.i144

if.else23.i144:                                   ; preds = %if.else.i137
  %mul26.i138 = mul nsw i32 %conv15.i133, %conv1.i120
  %sub28.i139 = sub nsw i32 100, %conv15.i133
  %mul30.i140 = mul i32 %sub28.i139, %conv.i119
  %add.i141 = add i32 %mul30.i140, %mul26.i138
  %div31.i142 = sdiv i32 %add.i141, 100
  %conv32.i143 = trunc i32 %div31.i142 to i16
  br label %interpolate.exit146

interpolate.exit146:                              ; preds = %interpolate.exit174, %if.end.i125, %if.then7.i135, %if.else.i137, %if.else23.i144
  %retval.0.i145 = phi i16 [ 0, %interpolate.exit174 ], [ %conv32.i143, %if.else23.i144 ], [ %17, %if.then7.i135 ], [ %18, %if.else.i137 ], [ %17, %if.end.i125 ]
  %twicePwr3641 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %pNewPower, i64 0, i32 2
  store i16 %retval.0.i145, i16* %twicePwr3641, align 2
  %twicePwr48 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %idxprom28, i32 1
  %19 = load i16, i16* %twicePwr48, align 2
  %twicePwr4846 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %ixhi.0, i32 1
  %20 = load i16, i16* %twicePwr4846, align 2
  %conv.i91 = zext i16 %19 to i32
  %conv1.i92 = zext i16 %20 to i32
  %mul.i93 = mul nuw i32 %conv1.i92, %conv.i91
  %cmp.i94 = icmp eq i32 %mul.i93, 0
  br i1 %cmp.i94, label %interpolate.exit118, label %if.end.i97

if.end.i97:                                       ; preds = %interpolate.exit146
  %conv4.i95 = zext i16 %clo.0 to i32
  %cmp5.i96 = icmp eq i16 %chi.0, %clo.0
  br i1 %cmp5.i96, label %interpolate.exit118, label %if.then7.i107

if.then7.i107:                                    ; preds = %if.end.i97
  %conv3.i98 = zext i16 %chi.0 to i32
  %sub.i100 = sub nsw i32 %conv.i175, %conv4.i95
  %mul10.i101 = mul nsw i32 %sub.i100, 100
  %sub13.i102 = sub nsw i32 %conv3.i98, %conv4.i95
  %div.i103 = sdiv i32 %mul10.i101, %sub13.i102
  %sext.i104 = shl i32 %div.i103, 16
  %conv15.i105 = ashr exact i32 %sext.i104, 16
  %cmp16.i106 = icmp slt i32 %sext.i104, 0
  br i1 %cmp16.i106, label %interpolate.exit118, label %if.else.i109

if.else.i109:                                     ; preds = %if.then7.i107
  %cmp20.i108 = icmp sgt i32 %sext.i104, 6553600
  br i1 %cmp20.i108, label %interpolate.exit118, label %if.else23.i116

if.else23.i116:                                   ; preds = %if.else.i109
  %mul26.i110 = mul nsw i32 %conv15.i105, %conv1.i92
  %sub28.i111 = sub nsw i32 100, %conv15.i105
  %mul30.i112 = mul i32 %sub28.i111, %conv.i91
  %add.i113 = add i32 %mul30.i112, %mul26.i110
  %div31.i114 = sdiv i32 %add.i113, 100
  %conv32.i115 = trunc i32 %div31.i114 to i16
  br label %interpolate.exit118

interpolate.exit118:                              ; preds = %interpolate.exit146, %if.end.i97, %if.then7.i107, %if.else.i109, %if.else23.i116
  %retval.0.i117 = phi i16 [ 0, %interpolate.exit146 ], [ %conv32.i115, %if.else23.i116 ], [ %19, %if.then7.i107 ], [ %20, %if.else.i109 ], [ %19, %if.end.i97 ]
  %twicePwr4848 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %pNewPower, i64 0, i32 1
  store i16 %retval.0.i117, i16* %twicePwr4848, align 2
  %twicePwr54 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %idxprom28, i32 0
  %21 = load i16, i16* %twicePwr54, align 2
  %twicePwr5453 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %powInfo, i64 %ixhi.0, i32 0
  %22 = load i16, i16* %twicePwr5453, align 2
  %conv.i = zext i16 %21 to i32
  %conv1.i = zext i16 %22 to i32
  %mul.i = mul nuw i32 %conv1.i, %conv.i
  %cmp.i = icmp eq i32 %mul.i, 0
  br i1 %cmp.i, label %interpolate.exit, label %if.end.i

if.end.i:                                         ; preds = %interpolate.exit118
  %conv4.i = zext i16 %clo.0 to i32
  %cmp5.i = icmp eq i16 %chi.0, %clo.0
  br i1 %cmp5.i, label %interpolate.exit, label %if.then7.i

if.then7.i:                                       ; preds = %if.end.i
  %conv3.i = zext i16 %chi.0 to i32
  %sub.i = sub nsw i32 %conv.i175, %conv4.i
  %mul10.i = mul nsw i32 %sub.i, 100
  %sub13.i = sub nsw i32 %conv3.i, %conv4.i
  %div.i = sdiv i32 %mul10.i, %sub13.i
  %sext.i = shl i32 %div.i, 16
  %conv15.i = ashr exact i32 %sext.i, 16
  %cmp16.i = icmp slt i32 %sext.i, 0
  br i1 %cmp16.i, label %interpolate.exit, label %if.else.i

if.else.i:                                        ; preds = %if.then7.i
  %cmp20.i = icmp sgt i32 %sext.i, 6553600
  br i1 %cmp20.i, label %interpolate.exit, label %if.else23.i

if.else23.i:                                      ; preds = %if.else.i
  %mul26.i = mul nsw i32 %conv15.i, %conv1.i
  %sub28.i = sub nsw i32 100, %conv15.i
  %mul30.i = mul i32 %sub28.i, %conv.i
  %add.i = add i32 %mul30.i, %mul26.i
  %div31.i = sdiv i32 %add.i, 100
  %conv32.i = trunc i32 %div31.i to i16
  br label %interpolate.exit

interpolate.exit:                                 ; preds = %interpolate.exit118, %if.end.i, %if.then7.i, %if.else.i, %if.else23.i
  %retval.0.i = phi i16 [ 0, %interpolate.exit118 ], [ %conv32.i, %if.else23.i ], [ %21, %if.then7.i ], [ %22, %if.else.i ], [ %21, %if.end.i ]
  %twicePwr5455 = getelementptr inbounds %struct.trgtPowerInfo, %struct.trgtPowerInfo* %pNewPower, i64 0, i32 0
  store i16 %retval.0.i, i16* %twicePwr5455, align 2
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #5
  ret void
}

attributes #0 = { noimplicitfloat noredzone nounwind ssp "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+x87,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noimplicitfloat noredzone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+x87,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noimplicitfloat norecurse noredzone nounwind ssp "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+x87,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noimplicitfloat norecurse noredzone nounwind readonly ssp "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+x87,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nobuiltin noimplicitfloat noredzone nounwind }
attributes #7 = { nobuiltin noimplicitfloat noredzone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.1 (tags/RELEASE_701/final)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
