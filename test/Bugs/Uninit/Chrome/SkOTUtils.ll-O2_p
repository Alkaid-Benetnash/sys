; ModuleID = '../../third_party/skia/src/sfnt/SkOTUtils.cpp'
source_filename = "../../third_party/skia/src/sfnt/SkOTUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { i32 }
%class.SkStreamAsset = type { %class.SkStreamSeekable }
%class.SkStreamSeekable = type { %class.SkStreamRewindable }
%class.SkStreamRewindable = type { %class.SkStream }
%class.SkStream = type { i32 (...)** }
%struct.SkSFNTHeader = type { i32, i16, i16, i16, i16 }
%"struct.SkSFNTHeader::TableDirectoryEntry" = type { i32, i32, i32, i32 }
%class.sk_sp = type { %class.SkData* }
%class.sk_sp.4 = type { %"class.SkOTUtils::LocalizedStrings_NameTable"* }
%"class.SkOTUtils::LocalizedStrings_NameTable" = type <{ %"class.SkTypeface::LocalizedStrings", i16*, i32, i32, %"class.std::__1::unique_ptr", %"class.SkOTTableName::Iterator", [4 x i8] }>
%"class.SkTypeface::LocalizedStrings" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.SkOTTableName::Iterator" = type <{ i8*, i64, i64, i32 }>
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { i8 }
%"struct.SkTypeface::LocalizedString" = type { %class.SkString, %class.SkString }
%class.SkString = type { %class.sk_sp.6 }
%class.sk_sp.6 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.SkOTTableName::Iterator::Record" = type <{ %class.SkString, %class.SkString, i16 }>
%struct.SkAdvancedTypefaceMetrics = type { %class.SkString, %class.SkString, i32, i8, i8, i16, i16, i16, i16, i16, %struct.SkIRect }
%struct.SkIRect = type { i32, i32, i32, i32 }

$_ZN9SkOTUtils26LocalizedStrings_NameTableD2Ev = comdat any

$_ZN9SkOTUtils26LocalizedStrings_NameTableD0Ev = comdat any

@SK_OT_GlyphData_NoOutline = hidden local_unnamed_addr constant [12 x i8] zeroinitializer, align 1
@_ZN9SkOTUtils26LocalizedStrings_NameTable15familyNameTypesE = hidden global [3 x i16] [i16 256, i16 4096, i16 5376], align 2
@_ZTVN9SkOTUtils26LocalizedStrings_NameTableE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkOTUtils::LocalizedStrings_NameTable"*)* @_ZN9SkOTUtils26LocalizedStrings_NameTableD2Ev to i8*), i8* bitcast (void (%"class.SkOTUtils::LocalizedStrings_NameTable"*)* @_ZN9SkOTUtils26LocalizedStrings_NameTableD0Ev to i8*), i8* bitcast (i1 (%"class.SkOTUtils::LocalizedStrings_NameTable"*, %"struct.SkTypeface::LocalizedString"*)* @_ZN9SkOTUtils26LocalizedStrings_NameTable4nextEPN10SkTypeface15LocalizedStringE to i8*)] }, align 8

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN9SkOTUtils17CalcTableChecksumEPjm(i32* readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = add i64 %1, 3
  %4 = lshr i64 %3, 2
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = icmp eq i64 %4, 0
  br i1 %6, label %97, label %7

; <label>:7:                                      ; preds = %2
  %8 = ptrtoint i32* %0 to i64
  %9 = getelementptr i32, i32* %0, i64 1
  %10 = icmp ugt i32* %5, %9
  %11 = select i1 %10, i32* %5, i32* %9
  %12 = bitcast i32* %11 to i8*
  %13 = xor i64 %8, -1
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = ptrtoint i8* %14 to i64
  %16 = lshr i64 %15, 2
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %17, 8
  br i1 %18, label %86, label %19

; <label>:19:                                     ; preds = %7
  %20 = and i64 %17, 9223372036854775800
  %21 = getelementptr i32, i32* %0, i64 %20
  %22 = add nsw i64 %20, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %58, label %27

; <label>:27:                                     ; preds = %19
  %28 = sub nsw i64 %24, %25
  br label %29

; <label>:29:                                     ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %55, %29 ]
  %31 = phi <4 x i32> [ zeroinitializer, %27 ], [ %53, %29 ]
  %32 = phi <4 x i32> [ zeroinitializer, %27 ], [ %54, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %34 = getelementptr i32, i32* %0, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %36)
  %41 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %39)
  %42 = add <4 x i32> %40, %31
  %43 = add <4 x i32> %41, %32
  %44 = or i64 %30, 8
  %45 = getelementptr i32, i32* %0, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %47)
  %52 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %50)
  %53 = add <4 x i32> %51, %42
  %54 = add <4 x i32> %52, %43
  %55 = add i64 %30, 16
  %56 = add i64 %33, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %29, !llvm.loop !2

; <label>:58:                                     ; preds = %29, %19
  %59 = phi <4 x i32> [ undef, %19 ], [ %53, %29 ]
  %60 = phi <4 x i32> [ undef, %19 ], [ %54, %29 ]
  %61 = phi i64 [ 0, %19 ], [ %55, %29 ]
  %62 = phi <4 x i32> [ zeroinitializer, %19 ], [ %53, %29 ]
  %63 = phi <4 x i32> [ zeroinitializer, %19 ], [ %54, %29 ]
  %64 = icmp eq i64 %25, 0
  br i1 %64, label %76, label %65

; <label>:65:                                     ; preds = %58
  %66 = getelementptr i32, i32* %0, i64 %61
  %67 = getelementptr i32, i32* %66, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %69)
  %71 = add <4 x i32> %70, %63
  %72 = bitcast i32* %66 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %73)
  %75 = add <4 x i32> %74, %62
  br label %76

; <label>:76:                                     ; preds = %58, %65
  %77 = phi <4 x i32> [ %59, %58 ], [ %75, %65 ]
  %78 = phi <4 x i32> [ %60, %58 ], [ %71, %65 ]
  %79 = add <4 x i32> %78, %77
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %81 = add <4 x i32> %79, %80
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %83 = add <4 x i32> %81, %82
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = icmp eq i64 %17, %20
  br i1 %85, label %97, label %86

; <label>:86:                                     ; preds = %76, %7
  %87 = phi i32* [ %0, %7 ], [ %21, %76 ]
  %88 = phi i32 [ 0, %7 ], [ %84, %76 ]
  br label %89

; <label>:89:                                     ; preds = %86, %89
  %90 = phi i32* [ %95, %89 ], [ %87, %86 ]
  %91 = phi i32 [ %94, %89 ], [ %88, %86 ]
  %92 = load i32, i32* %90, align 4
  %93 = tail call i32 @llvm.bswap.i32(i32 %92) #9
  %94 = add i32 %93, %91
  %95 = getelementptr inbounds i32, i32* %90, i64 1
  %96 = icmp ult i32* %95, %5
  br i1 %96, label %89, label %97, !llvm.loop !4

; <label>:97:                                     ; preds = %89, %76, %2
  %98 = phi i32 [ 0, %2 ], [ %84, %76 ], [ %94, %89 ]
  ret i32 %98
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkData* @_ZN9SkOTUtils10RenameFontEP13SkStreamAssetPKci(%class.SkStreamAsset*, i8* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %4 = alloca %struct.SkSFNTHeader, align 1
  %5 = alloca %"struct.SkSFNTHeader::TableDirectoryEntry", align 4
  %6 = alloca %class.sk_sp, align 8
  %7 = bitcast %struct.SkSFNTHeader* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7) #9
  %8 = getelementptr inbounds %class.SkStreamAsset, %class.SkStreamAsset* %0, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %class.SkStreamAsset* %0 to i64 (%class.SkStream*, i8*, i64)***
  %10 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %11 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %10, i64 2
  %12 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %11, align 8
  %13 = call i64 %12(%class.SkStream* %8, i8* nonnull %7, i64 12) #9
  %14 = icmp ult i64 %13, 12
  br i1 %14, label %601, label %15

; <label>:15:                                     ; preds = %3
  %16 = bitcast %"struct.SkSFNTHeader::TableDirectoryEntry"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #9
  %17 = getelementptr inbounds %struct.SkSFNTHeader, %struct.SkSFNTHeader* %4, i64 0, i32 1
  %18 = load i16, i16* %17, align 1
  %19 = call i16 @llvm.bswap.i16(i16 %18) #9
  %20 = zext i16 %19 to i32
  %21 = icmp eq i16 %18, 0
  br i1 %21, label %37, label %22

; <label>:22:                                     ; preds = %15
  %23 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %5, i64 0, i32 0
  br label %24

; <label>:24:                                     ; preds = %22, %34
  %25 = phi i32 [ 0, %22 ], [ %35, %34 ]
  %26 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %27 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %26, i64 2
  %28 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %27, align 8
  %29 = call i64 %28(%class.SkStream* %8, i8* nonnull %16, i64 16) #9
  %30 = icmp ult i64 %29, 16
  br i1 %30, label %599, label %31

; <label>:31:                                     ; preds = %24
  %32 = load i32, i32* %23, align 4
  %33 = icmp eq i32 %32, 1701667182
  br i1 %33, label %37, label %34

; <label>:34:                                     ; preds = %31
  %35 = add nuw nsw i32 %25, 1
  %36 = icmp ult i32 %35, %20
  br i1 %36, label %24, label %37

; <label>:37:                                     ; preds = %34, %31, %15
  %38 = phi i32 [ 0, %15 ], [ %25, %31 ], [ %35, %34 ]
  %39 = icmp eq i32 %38, %20
  br i1 %39, label %599, label %40

; <label>:40:                                     ; preds = %37
  %41 = getelementptr inbounds %class.SkStreamAsset, %class.SkStreamAsset* %0, i64 0, i32 0, i32 0
  %42 = bitcast %class.SkStreamAsset* %0 to i1 (%class.SkStreamRewindable*)***
  %43 = load i1 (%class.SkStreamRewindable*)**, i1 (%class.SkStreamRewindable*)*** %42, align 8
  %44 = getelementptr inbounds i1 (%class.SkStreamRewindable*)*, i1 (%class.SkStreamRewindable*)** %43, i64 5
  %45 = load i1 (%class.SkStreamRewindable*)*, i1 (%class.SkStreamRewindable*)** %44, align 8
  %46 = call zeroext i1 %45(%class.SkStreamRewindable* %41) #9
  br i1 %46, label %47, label %599

; <label>:47:                                     ; preds = %40
  %48 = sext i32 %2 to i64
  %49 = shl nsw i64 %48, 2
  %50 = add nsw i64 %49, 66
  %51 = add nsw i64 %49, 69
  %52 = and i64 %51, -4
  %53 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %5, i64 0, i32 3
  %54 = load i32, i32* %53, align 4
  %55 = call i32 @llvm.bswap.i32(i32 %54) #9
  %56 = add i32 %55, 3
  %57 = and i32 %56, -4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %5, i64 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = call i32 @llvm.bswap.i32(i32 %60) #9
  %62 = zext i32 %61 to i64
  %63 = bitcast %class.SkStreamAsset* %0 to i64 (%class.SkStreamAsset*)***
  %64 = load i64 (%class.SkStreamAsset*)**, i64 (%class.SkStreamAsset*)*** %63, align 8
  %65 = getelementptr inbounds i64 (%class.SkStreamAsset*)*, i64 (%class.SkStreamAsset*)** %64, i64 11
  %66 = load i64 (%class.SkStreamAsset*)*, i64 (%class.SkStreamAsset*)** %65, align 8
  %67 = call i64 %66(%class.SkStreamAsset* nonnull %0) #9
  %68 = sub i64 %67, %58
  %69 = add i64 %68, %52
  %70 = bitcast %class.sk_sp* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70) #9
  call void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp* nonnull sret %6, i64 %69) #9
  %71 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 0, i32 0
  %72 = load %class.SkData*, %class.SkData** %71, align 8
  %73 = getelementptr inbounds %class.SkData, %class.SkData* %72, i64 0, i32 3
  %74 = load i8*, i8** %73, align 8
  %75 = ptrtoint i8* %74 to i64
  %76 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %77 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %76, i64 2
  %78 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %77, align 8
  %79 = call i64 %78(%class.SkStream* nonnull %8, i8* %74, i64 %62) #9
  %80 = icmp ult i64 %79, %62
  br i1 %80, label %588, label %81

; <label>:81:                                     ; preds = %47
  %82 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %83 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %82, i64 2
  %84 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %83, align 8
  %85 = call i64 %84(%class.SkStream* nonnull %8, i8* null, i64 %58) #9
  %86 = icmp ult i64 %85, %58
  br i1 %86, label %588, label %87

; <label>:87:                                     ; preds = %81
  %88 = getelementptr inbounds i8, i8* %74, i64 %62
  %89 = sub i64 %68, %62
  %90 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %91 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %90, i64 2
  %92 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %91, align 8
  %93 = call i64 %92(%class.SkStream* nonnull %8, i8* %88, i64 %89) #9
  %94 = icmp ult i64 %93, %89
  br i1 %94, label %588, label %95

; <label>:95:                                     ; preds = %87
  %96 = getelementptr inbounds i8, i8* %74, i64 12
  %97 = bitcast i8* %96 to %"struct.SkSFNTHeader::TableDirectoryEntry"*
  %98 = zext i16 %19 to i64
  %99 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %97, i64 %98
  %100 = icmp ugt %"struct.SkSFNTHeader::TableDirectoryEntry"* %99, %97
  br i1 %100, label %101, label %147

; <label>:101:                                    ; preds = %95
  %102 = shl nuw nsw i64 %98, 4
  %103 = add nsw i64 %102, -1
  %104 = and i64 %103, 16
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %122

; <label>:106:                                    ; preds = %101
  %107 = getelementptr inbounds i8, i8* %74, i64 20
  %108 = bitcast i8* %107 to i32*
  %109 = load i32, i32* %108, align 1
  %110 = call i32 @llvm.bswap.i32(i32 %109) #9
  %111 = icmp ugt i32 %110, %61
  br i1 %111, label %112, label %115

; <label>:112:                                    ; preds = %106
  %113 = sub i32 %110, %57
  %114 = call i32 @llvm.bswap.i32(i32 %113) #9
  store i32 %114, i32* %108, align 1
  br label %115

; <label>:115:                                    ; preds = %112, %106
  %116 = bitcast i8* %96 to i32*
  %117 = load i32, i32* %116, align 1
  %118 = icmp eq i32 %117, 1684104552
  %119 = select i1 %118, %"struct.SkSFNTHeader::TableDirectoryEntry"* %97, %"struct.SkSFNTHeader::TableDirectoryEntry"* null
  %120 = getelementptr inbounds i8, i8* %74, i64 28
  %121 = bitcast i8* %120 to %"struct.SkSFNTHeader::TableDirectoryEntry"*
  br label %122

; <label>:122:                                    ; preds = %115, %101
  %123 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ %97, %101 ], [ %121, %115 ]
  %124 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ null, %101 ], [ %119, %115 ]
  %125 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ undef, %101 ], [ %119, %115 ]
  %126 = icmp eq i64 %103, 15
  br i1 %126, label %147, label %127

; <label>:127:                                    ; preds = %122, %606
  %128 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ %611, %606 ], [ %123, %122 ]
  %129 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ %610, %606 ], [ %124, %122 ]
  %130 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %128, i64 0, i32 2
  %131 = load i32, i32* %130, align 1
  %132 = call i32 @llvm.bswap.i32(i32 %131) #9
  %133 = icmp ugt i32 %132, %61
  br i1 %133, label %134, label %137

; <label>:134:                                    ; preds = %127
  %135 = sub i32 %132, %57
  %136 = call i32 @llvm.bswap.i32(i32 %135) #9
  store i32 %136, i32* %130, align 1
  br label %137

; <label>:137:                                    ; preds = %134, %127
  %138 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %128, i64 0, i32 0
  %139 = load i32, i32* %138, align 1
  %140 = icmp eq i32 %139, 1684104552
  %141 = select i1 %140, %"struct.SkSFNTHeader::TableDirectoryEntry"* %128, %"struct.SkSFNTHeader::TableDirectoryEntry"* %129
  %142 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %128, i64 1
  %143 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %128, i64 1, i32 2
  %144 = load i32, i32* %143, align 1
  %145 = call i32 @llvm.bswap.i32(i32 %144) #9
  %146 = icmp ugt i32 %145, %61
  br i1 %146, label %603, label %606

; <label>:147:                                    ; preds = %122, %606, %95
  %148 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ null, %95 ], [ %125, %122 ], [ %610, %606 ]
  %149 = zext i32 %38 to i64
  %150 = trunc i64 %50 to i32
  %151 = call i32 @llvm.bswap.i32(i32 %150) #9
  %152 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %97, i64 %149, i32 3
  store i32 %151, i32* %152, align 1
  %153 = trunc i64 %68 to i32
  %154 = call i32 @llvm.bswap.i32(i32 %153) #9
  %155 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %97, i64 %149, i32 2
  store i32 %154, i32* %155, align 1
  %156 = getelementptr inbounds i8, i8* %74, i64 %68
  %157 = bitcast i8* %156 to i16*
  store i16 0, i16* %157, align 1
  %158 = getelementptr inbounds i8, i8* %156, i64 2
  %159 = bitcast i8* %158 to i16*
  store i16 1280, i16* %159, align 1
  %160 = getelementptr inbounds i8, i8* %156, i64 4
  %161 = bitcast i8* %160 to i16*
  store i16 16896, i16* %161, align 1
  %162 = getelementptr inbounds i8, i8* %156, i64 6
  %163 = trunc i64 %49 to i16
  %164 = call i16 @llvm.bswap.i16(i16 %163) #9
  %165 = bitcast i8* %162 to i16*
  store i16 768, i16* %165, align 1
  %166 = getelementptr inbounds i8, i8* %162, i64 2
  %167 = bitcast i8* %166 to i16*
  store i16 256, i16* %167, align 1
  %168 = getelementptr inbounds i8, i8* %162, i64 4
  %169 = bitcast i8* %168 to i16*
  store i16 2308, i16* %169, align 1
  %170 = getelementptr inbounds i8, i8* %162, i64 6
  %171 = bitcast i8* %170 to i16*
  store i16 256, i16* %171, align 1
  %172 = getelementptr inbounds i8, i8* %162, i64 10
  %173 = bitcast i8* %172 to i16*
  store i16 0, i16* %173, align 1
  %174 = getelementptr inbounds i8, i8* %162, i64 8
  %175 = bitcast i8* %174 to i16*
  store i16 %164, i16* %175, align 1
  %176 = getelementptr inbounds i8, i8* %162, i64 12
  %177 = bitcast i8* %176 to i16*
  store i16 768, i16* %177, align 1
  %178 = getelementptr inbounds i8, i8* %162, i64 14
  %179 = bitcast i8* %178 to i16*
  store i16 256, i16* %179, align 1
  %180 = getelementptr inbounds i8, i8* %162, i64 16
  %181 = bitcast i8* %180 to i16*
  store i16 2308, i16* %181, align 1
  %182 = getelementptr inbounds i8, i8* %162, i64 18
  %183 = bitcast i8* %182 to i16*
  store i16 512, i16* %183, align 1
  %184 = getelementptr inbounds i8, i8* %162, i64 22
  %185 = bitcast i8* %184 to i16*
  store i16 0, i16* %185, align 1
  %186 = getelementptr inbounds i8, i8* %162, i64 20
  %187 = bitcast i8* %186 to i16*
  store i16 %164, i16* %187, align 1
  %188 = getelementptr inbounds i8, i8* %162, i64 24
  %189 = bitcast i8* %188 to i16*
  store i16 768, i16* %189, align 1
  %190 = getelementptr inbounds i8, i8* %162, i64 26
  %191 = bitcast i8* %190 to i16*
  store i16 256, i16* %191, align 1
  %192 = getelementptr inbounds i8, i8* %162, i64 28
  %193 = bitcast i8* %192 to i16*
  store i16 2308, i16* %193, align 1
  %194 = getelementptr inbounds i8, i8* %162, i64 30
  %195 = bitcast i8* %194 to i16*
  store i16 768, i16* %195, align 1
  %196 = getelementptr inbounds i8, i8* %162, i64 34
  %197 = bitcast i8* %196 to i16*
  store i16 0, i16* %197, align 1
  %198 = getelementptr inbounds i8, i8* %162, i64 32
  %199 = bitcast i8* %198 to i16*
  store i16 %164, i16* %199, align 1
  %200 = getelementptr inbounds i8, i8* %162, i64 36
  %201 = bitcast i8* %200 to i16*
  store i16 768, i16* %201, align 1
  %202 = getelementptr inbounds i8, i8* %162, i64 38
  %203 = bitcast i8* %202 to i16*
  store i16 256, i16* %203, align 1
  %204 = getelementptr inbounds i8, i8* %162, i64 40
  %205 = bitcast i8* %204 to i16*
  store i16 2308, i16* %205, align 1
  %206 = getelementptr inbounds i8, i8* %162, i64 42
  %207 = bitcast i8* %206 to i16*
  store i16 1024, i16* %207, align 1
  %208 = getelementptr inbounds i8, i8* %162, i64 46
  %209 = bitcast i8* %208 to i16*
  store i16 0, i16* %209, align 1
  %210 = getelementptr inbounds i8, i8* %162, i64 44
  %211 = bitcast i8* %210 to i16*
  store i16 %164, i16* %211, align 1
  %212 = getelementptr inbounds i8, i8* %162, i64 48
  %213 = bitcast i8* %212 to i16*
  store i16 768, i16* %213, align 1
  %214 = getelementptr inbounds i8, i8* %162, i64 50
  %215 = bitcast i8* %214 to i16*
  store i16 256, i16* %215, align 1
  %216 = getelementptr inbounds i8, i8* %162, i64 52
  %217 = bitcast i8* %216 to i16*
  store i16 2308, i16* %217, align 1
  %218 = getelementptr inbounds i8, i8* %162, i64 54
  %219 = bitcast i8* %218 to i16*
  store i16 1536, i16* %219, align 1
  %220 = getelementptr inbounds i8, i8* %162, i64 58
  %221 = bitcast i8* %220 to i16*
  store i16 0, i16* %221, align 1
  %222 = getelementptr inbounds i8, i8* %162, i64 56
  %223 = bitcast i8* %222 to i16*
  store i16 %164, i16* %223, align 1
  %224 = getelementptr inbounds i8, i8* %156, i64 66
  %225 = bitcast i8* %224 to i16*
  %226 = icmp sgt i32 %2, 0
  br i1 %226, label %227, label %324

; <label>:227:                                    ; preds = %147
  %228 = zext i32 %2 to i64
  %229 = icmp ult i32 %2, 16
  br i1 %229, label %230, label %250

; <label>:230:                                    ; preds = %322, %250, %227
  %231 = phi i64 [ 0, %250 ], [ 0, %227 ], [ %261, %322 ]
  %232 = xor i64 %231, -1
  %233 = add nsw i64 %232, %228
  %234 = and i64 %228, 3
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %247, label %236

; <label>:236:                                    ; preds = %230, %236
  %237 = phi i64 [ %244, %236 ], [ %231, %230 ]
  %238 = phi i64 [ %245, %236 ], [ %234, %230 ]
  %239 = getelementptr inbounds i8, i8* %1, i64 %237
  %240 = load i8, i8* %239, align 1
  %241 = sext i8 %240 to i16
  %242 = call i16 @llvm.bswap.i16(i16 %241) #9
  %243 = getelementptr inbounds i16, i16* %225, i64 %237
  store i16 %242, i16* %243, align 2
  %244 = add nuw nsw i64 %237, 1
  %245 = add i64 %238, -1
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %247, label %236, !llvm.loop !6

; <label>:247:                                    ; preds = %236, %230
  %248 = phi i64 [ %231, %230 ], [ %244, %236 ]
  %249 = icmp ult i64 %233, 3
  br i1 %249, label %324, label %341

; <label>:250:                                    ; preds = %227
  %251 = shl nuw nsw i64 %228, 1
  %252 = add i64 %67, %251
  %253 = add i64 %252, 66
  %254 = sub i64 %253, %58
  %255 = getelementptr i8, i8* %74, i64 %254
  %256 = getelementptr i8, i8* %1, i64 %228
  %257 = icmp ult i8* %224, %256
  %258 = icmp ugt i8* %255, %1
  %259 = and i1 %257, %258
  br i1 %259, label %230, label %260

; <label>:260:                                    ; preds = %250
  %261 = and i64 %228, 4294967280
  %262 = add nsw i64 %261, -16
  %263 = lshr exact i64 %262, 4
  %264 = add nuw nsw i64 %263, 1
  %265 = and i64 %264, 1
  %266 = icmp eq i64 %262, 0
  br i1 %266, label %304, label %267

; <label>:267:                                    ; preds = %260
  %268 = sub nsw i64 %264, %265
  br label %269

; <label>:269:                                    ; preds = %269, %267
  %270 = phi i64 [ 0, %267 ], [ %301, %269 ]
  %271 = phi i64 [ %268, %267 ], [ %302, %269 ]
  %272 = getelementptr inbounds i8, i8* %1, i64 %270
  %273 = bitcast i8* %272 to <8 x i8>*
  %274 = load <8 x i8>, <8 x i8>* %273, align 1, !alias.scope !8
  %275 = getelementptr inbounds i8, i8* %272, i64 8
  %276 = bitcast i8* %275 to <8 x i8>*
  %277 = load <8 x i8>, <8 x i8>* %276, align 1, !alias.scope !8
  %278 = sext <8 x i8> %274 to <8 x i16>
  %279 = sext <8 x i8> %277 to <8 x i16>
  %280 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %278)
  %281 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %279)
  %282 = getelementptr inbounds i16, i16* %225, i64 %270
  %283 = bitcast i16* %282 to <8 x i16>*
  store <8 x i16> %280, <8 x i16>* %283, align 2, !alias.scope !11, !noalias !8
  %284 = getelementptr inbounds i16, i16* %282, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %281, <8 x i16>* %285, align 2, !alias.scope !11, !noalias !8
  %286 = or i64 %270, 16
  %287 = getelementptr inbounds i8, i8* %1, i64 %286
  %288 = bitcast i8* %287 to <8 x i8>*
  %289 = load <8 x i8>, <8 x i8>* %288, align 1, !alias.scope !8
  %290 = getelementptr inbounds i8, i8* %287, i64 8
  %291 = bitcast i8* %290 to <8 x i8>*
  %292 = load <8 x i8>, <8 x i8>* %291, align 1, !alias.scope !8
  %293 = sext <8 x i8> %289 to <8 x i16>
  %294 = sext <8 x i8> %292 to <8 x i16>
  %295 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %293)
  %296 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %294)
  %297 = getelementptr inbounds i16, i16* %225, i64 %286
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %298, align 2, !alias.scope !11, !noalias !8
  %299 = getelementptr inbounds i16, i16* %297, i64 8
  %300 = bitcast i16* %299 to <8 x i16>*
  store <8 x i16> %296, <8 x i16>* %300, align 2, !alias.scope !11, !noalias !8
  %301 = add i64 %270, 32
  %302 = add i64 %271, -2
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %304, label %269, !llvm.loop !13

; <label>:304:                                    ; preds = %269, %260
  %305 = phi i64 [ 0, %260 ], [ %301, %269 ]
  %306 = icmp eq i64 %265, 0
  br i1 %306, label %322, label %307

; <label>:307:                                    ; preds = %304
  %308 = getelementptr inbounds i8, i8* %1, i64 %305
  %309 = bitcast i8* %308 to <8 x i8>*
  %310 = load <8 x i8>, <8 x i8>* %309, align 1, !alias.scope !8
  %311 = getelementptr inbounds i8, i8* %308, i64 8
  %312 = bitcast i8* %311 to <8 x i8>*
  %313 = load <8 x i8>, <8 x i8>* %312, align 1, !alias.scope !8
  %314 = sext <8 x i8> %310 to <8 x i16>
  %315 = sext <8 x i8> %313 to <8 x i16>
  %316 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %314)
  %317 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %315)
  %318 = getelementptr inbounds i16, i16* %225, i64 %305
  %319 = bitcast i16* %318 to <8 x i16>*
  store <8 x i16> %316, <8 x i16>* %319, align 2, !alias.scope !11, !noalias !8
  %320 = getelementptr inbounds i16, i16* %318, i64 8
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %321, align 2, !alias.scope !11, !noalias !8
  br label %322

; <label>:322:                                    ; preds = %304, %307
  %323 = icmp eq i64 %261, %228
  br i1 %323, label %324, label %230

; <label>:324:                                    ; preds = %247, %341, %322, %147
  %325 = getelementptr inbounds i8, i8* %156, i64 %52
  %326 = icmp slt i64 %50, %52
  br i1 %326, label %327, label %368

; <label>:327:                                    ; preds = %324
  %328 = getelementptr inbounds i8, i8* %156, i64 %50
  %329 = add i64 %67, %49
  %330 = add i64 %329, 67
  %331 = sub i64 %330, %58
  %332 = getelementptr i8, i8* %74, i64 %331
  %333 = icmp ugt i8* %332, %325
  %334 = select i1 %333, i8* %332, i8* %325
  %335 = add nsw i64 %58, -66
  %336 = sub nsw i64 %335, %49
  %337 = sub i64 %336, %75
  %338 = sub i64 %337, %67
  %339 = getelementptr i8, i8* %334, i64 %338
  %340 = ptrtoint i8* %339 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %328, i8 0, i64 %340, i1 false)
  br label %368

; <label>:341:                                    ; preds = %247, %341
  %342 = phi i64 [ %366, %341 ], [ %248, %247 ]
  %343 = getelementptr inbounds i8, i8* %1, i64 %342
  %344 = load i8, i8* %343, align 1
  %345 = sext i8 %344 to i16
  %346 = call i16 @llvm.bswap.i16(i16 %345) #9
  %347 = getelementptr inbounds i16, i16* %225, i64 %342
  store i16 %346, i16* %347, align 2
  %348 = add nuw nsw i64 %342, 1
  %349 = getelementptr inbounds i8, i8* %1, i64 %348
  %350 = load i8, i8* %349, align 1
  %351 = sext i8 %350 to i16
  %352 = call i16 @llvm.bswap.i16(i16 %351) #9
  %353 = getelementptr inbounds i16, i16* %225, i64 %348
  store i16 %352, i16* %353, align 2
  %354 = add nsw i64 %342, 2
  %355 = getelementptr inbounds i8, i8* %1, i64 %354
  %356 = load i8, i8* %355, align 1
  %357 = sext i8 %356 to i16
  %358 = call i16 @llvm.bswap.i16(i16 %357) #9
  %359 = getelementptr inbounds i16, i16* %225, i64 %354
  store i16 %358, i16* %359, align 2
  %360 = add nsw i64 %342, 3
  %361 = getelementptr inbounds i8, i8* %1, i64 %360
  %362 = load i8, i8* %361, align 1
  %363 = sext i8 %362 to i16
  %364 = call i16 @llvm.bswap.i16(i16 %363) #9
  %365 = getelementptr inbounds i16, i16* %225, i64 %360
  store i16 %364, i16* %365, align 2
  %366 = add nsw i64 %342, 4
  %367 = icmp eq i64 %366, %228
  br i1 %367, label %324, label %341, !llvm.loop !14

; <label>:368:                                    ; preds = %327, %324
  %369 = bitcast i8* %156 to i32*
  %370 = lshr i64 %51, 2
  %371 = getelementptr inbounds i32, i32* %369, i64 %370
  %372 = icmp eq i64 %370, 0
  br i1 %372, label %469, label %373

; <label>:373:                                    ; preds = %368
  %374 = and i64 %51, -4
  %375 = add i64 %67, %374
  %376 = sub i64 %375, %58
  %377 = getelementptr i8, i8* %74, i64 %376
  %378 = add i64 %67, 4
  %379 = sub i64 %378, %58
  %380 = getelementptr i8, i8* %74, i64 %379
  %381 = icmp ugt i8* %377, %380
  %382 = select i1 %381, i8* %377, i8* %380
  %383 = xor i64 %75, -1
  %384 = add i64 %383, %58
  %385 = sub i64 %384, %67
  %386 = getelementptr i8, i8* %382, i64 %385
  %387 = ptrtoint i8* %386 to i64
  %388 = lshr i64 %387, 2
  %389 = add nuw nsw i64 %388, 1
  %390 = icmp ult i64 %389, 8
  br i1 %390, label %458, label %391

; <label>:391:                                    ; preds = %373
  %392 = and i64 %389, 9223372036854775800
  %393 = getelementptr i32, i32* %369, i64 %392
  %394 = add nsw i64 %392, -8
  %395 = lshr exact i64 %394, 3
  %396 = add nuw nsw i64 %395, 1
  %397 = and i64 %396, 1
  %398 = icmp eq i64 %394, 0
  br i1 %398, label %430, label %399

; <label>:399:                                    ; preds = %391
  %400 = sub nsw i64 %396, %397
  br label %401

; <label>:401:                                    ; preds = %401, %399
  %402 = phi i64 [ 0, %399 ], [ %427, %401 ]
  %403 = phi <4 x i32> [ zeroinitializer, %399 ], [ %425, %401 ]
  %404 = phi <4 x i32> [ zeroinitializer, %399 ], [ %426, %401 ]
  %405 = phi i64 [ %400, %399 ], [ %428, %401 ]
  %406 = getelementptr i32, i32* %369, i64 %402
  %407 = bitcast i32* %406 to <4 x i32>*
  %408 = load <4 x i32>, <4 x i32>* %407, align 4
  %409 = getelementptr i32, i32* %406, i64 4
  %410 = bitcast i32* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 4
  %412 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %408)
  %413 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %411)
  %414 = add <4 x i32> %412, %403
  %415 = add <4 x i32> %413, %404
  %416 = or i64 %402, 8
  %417 = getelementptr i32, i32* %369, i64 %416
  %418 = bitcast i32* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 4
  %420 = getelementptr i32, i32* %417, i64 4
  %421 = bitcast i32* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 4
  %423 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %419)
  %424 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %422)
  %425 = add <4 x i32> %423, %414
  %426 = add <4 x i32> %424, %415
  %427 = add i64 %402, 16
  %428 = add i64 %405, -2
  %429 = icmp eq i64 %428, 0
  br i1 %429, label %430, label %401, !llvm.loop !15

; <label>:430:                                    ; preds = %401, %391
  %431 = phi <4 x i32> [ undef, %391 ], [ %425, %401 ]
  %432 = phi <4 x i32> [ undef, %391 ], [ %426, %401 ]
  %433 = phi i64 [ 0, %391 ], [ %427, %401 ]
  %434 = phi <4 x i32> [ zeroinitializer, %391 ], [ %425, %401 ]
  %435 = phi <4 x i32> [ zeroinitializer, %391 ], [ %426, %401 ]
  %436 = icmp eq i64 %397, 0
  br i1 %436, label %448, label %437

; <label>:437:                                    ; preds = %430
  %438 = getelementptr i32, i32* %369, i64 %433
  %439 = getelementptr i32, i32* %438, i64 4
  %440 = bitcast i32* %439 to <4 x i32>*
  %441 = load <4 x i32>, <4 x i32>* %440, align 4
  %442 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %441)
  %443 = add <4 x i32> %442, %435
  %444 = bitcast i32* %438 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 4
  %446 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %445)
  %447 = add <4 x i32> %446, %434
  br label %448

; <label>:448:                                    ; preds = %430, %437
  %449 = phi <4 x i32> [ %431, %430 ], [ %447, %437 ]
  %450 = phi <4 x i32> [ %432, %430 ], [ %443, %437 ]
  %451 = add <4 x i32> %450, %449
  %452 = shufflevector <4 x i32> %451, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %453 = add <4 x i32> %451, %452
  %454 = shufflevector <4 x i32> %453, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %455 = add <4 x i32> %453, %454
  %456 = extractelement <4 x i32> %455, i32 0
  %457 = icmp eq i64 %389, %392
  br i1 %457, label %469, label %458

; <label>:458:                                    ; preds = %448, %373
  %459 = phi i32* [ %369, %373 ], [ %393, %448 ]
  %460 = phi i32 [ 0, %373 ], [ %456, %448 ]
  br label %461

; <label>:461:                                    ; preds = %458, %461
  %462 = phi i32* [ %467, %461 ], [ %459, %458 ]
  %463 = phi i32 [ %466, %461 ], [ %460, %458 ]
  %464 = load i32, i32* %462, align 4
  %465 = call i32 @llvm.bswap.i32(i32 %464) #9
  %466 = add i32 %465, %463
  %467 = getelementptr inbounds i32, i32* %462, i64 1
  %468 = icmp ult i32* %467, %371
  br i1 %468, label %461, label %469, !llvm.loop !16

; <label>:469:                                    ; preds = %461, %448, %368
  %470 = phi i32 [ 0, %368 ], [ %456, %448 ], [ %466, %461 ]
  %471 = call i32 @llvm.bswap.i32(i32 %470) #9
  %472 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %97, i64 %149, i32 1
  store i32 %471, i32* %472, align 1
  %473 = icmp eq %"struct.SkSFNTHeader::TableDirectoryEntry"* %148, null
  br i1 %473, label %586, label %474

; <label>:474:                                    ; preds = %469
  %475 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %148, i64 0, i32 2
  %476 = load i32, i32* %475, align 1
  %477 = call i32 @llvm.bswap.i32(i32 %476) #9
  %478 = zext i32 %477 to i64
  %479 = add nuw nsw i64 %478, 54
  %480 = icmp ult i64 %479, %68
  br i1 %480, label %481, label %586

; <label>:481:                                    ; preds = %474
  %482 = getelementptr inbounds i8, i8* %74, i64 %478
  %483 = getelementptr inbounds i8, i8* %482, i64 8
  %484 = bitcast i8* %483 to i32*
  store i32 0, i32* %484, align 1
  %485 = bitcast i8* %74 to i32*
  %486 = add i64 %69, 3
  %487 = lshr i64 %486, 2
  %488 = getelementptr inbounds i32, i32* %485, i64 %487
  %489 = icmp eq i64 %487, 0
  br i1 %489, label %583, label %490

; <label>:490:                                    ; preds = %481
  %491 = and i64 %486, -4
  %492 = getelementptr i8, i8* %74, i64 %491
  %493 = getelementptr i8, i8* %74, i64 4
  %494 = icmp ugt i8* %492, %493
  %495 = select i1 %494, i8* %492, i8* %493
  %496 = xor i64 %75, -1
  %497 = getelementptr i8, i8* %495, i64 %496
  %498 = ptrtoint i8* %497 to i64
  %499 = lshr i64 %498, 2
  %500 = add nuw nsw i64 %499, 1
  %501 = icmp ult i64 %500, 8
  br i1 %501, label %569, label %502

; <label>:502:                                    ; preds = %490
  %503 = and i64 %500, 9223372036854775800
  %504 = getelementptr i32, i32* %485, i64 %503
  %505 = add nsw i64 %503, -8
  %506 = lshr exact i64 %505, 3
  %507 = add nuw nsw i64 %506, 1
  %508 = and i64 %507, 1
  %509 = icmp eq i64 %505, 0
  br i1 %509, label %541, label %510

; <label>:510:                                    ; preds = %502
  %511 = sub nsw i64 %507, %508
  br label %512

; <label>:512:                                    ; preds = %512, %510
  %513 = phi i64 [ 0, %510 ], [ %538, %512 ]
  %514 = phi <4 x i32> [ zeroinitializer, %510 ], [ %536, %512 ]
  %515 = phi <4 x i32> [ zeroinitializer, %510 ], [ %537, %512 ]
  %516 = phi i64 [ %511, %510 ], [ %539, %512 ]
  %517 = getelementptr i32, i32* %485, i64 %513
  %518 = bitcast i32* %517 to <4 x i32>*
  %519 = load <4 x i32>, <4 x i32>* %518, align 4
  %520 = getelementptr i32, i32* %517, i64 4
  %521 = bitcast i32* %520 to <4 x i32>*
  %522 = load <4 x i32>, <4 x i32>* %521, align 4
  %523 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %519)
  %524 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %522)
  %525 = add <4 x i32> %523, %514
  %526 = add <4 x i32> %524, %515
  %527 = or i64 %513, 8
  %528 = getelementptr i32, i32* %485, i64 %527
  %529 = bitcast i32* %528 to <4 x i32>*
  %530 = load <4 x i32>, <4 x i32>* %529, align 4
  %531 = getelementptr i32, i32* %528, i64 4
  %532 = bitcast i32* %531 to <4 x i32>*
  %533 = load <4 x i32>, <4 x i32>* %532, align 4
  %534 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %530)
  %535 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %533)
  %536 = add <4 x i32> %534, %525
  %537 = add <4 x i32> %535, %526
  %538 = add i64 %513, 16
  %539 = add i64 %516, -2
  %540 = icmp eq i64 %539, 0
  br i1 %540, label %541, label %512, !llvm.loop !17

; <label>:541:                                    ; preds = %512, %502
  %542 = phi <4 x i32> [ undef, %502 ], [ %536, %512 ]
  %543 = phi <4 x i32> [ undef, %502 ], [ %537, %512 ]
  %544 = phi i64 [ 0, %502 ], [ %538, %512 ]
  %545 = phi <4 x i32> [ zeroinitializer, %502 ], [ %536, %512 ]
  %546 = phi <4 x i32> [ zeroinitializer, %502 ], [ %537, %512 ]
  %547 = icmp eq i64 %508, 0
  br i1 %547, label %559, label %548

; <label>:548:                                    ; preds = %541
  %549 = getelementptr i32, i32* %485, i64 %544
  %550 = getelementptr i32, i32* %549, i64 4
  %551 = bitcast i32* %550 to <4 x i32>*
  %552 = load <4 x i32>, <4 x i32>* %551, align 4
  %553 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %552)
  %554 = add <4 x i32> %553, %546
  %555 = bitcast i32* %549 to <4 x i32>*
  %556 = load <4 x i32>, <4 x i32>* %555, align 4
  %557 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %556)
  %558 = add <4 x i32> %557, %545
  br label %559

; <label>:559:                                    ; preds = %541, %548
  %560 = phi <4 x i32> [ %542, %541 ], [ %558, %548 ]
  %561 = phi <4 x i32> [ %543, %541 ], [ %554, %548 ]
  %562 = add <4 x i32> %561, %560
  %563 = shufflevector <4 x i32> %562, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %564 = add <4 x i32> %562, %563
  %565 = shufflevector <4 x i32> %564, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %566 = add <4 x i32> %564, %565
  %567 = extractelement <4 x i32> %566, i32 0
  %568 = icmp eq i64 %500, %503
  br i1 %568, label %580, label %569

; <label>:569:                                    ; preds = %559, %490
  %570 = phi i32* [ %485, %490 ], [ %504, %559 ]
  %571 = phi i32 [ 0, %490 ], [ %567, %559 ]
  br label %572

; <label>:572:                                    ; preds = %569, %572
  %573 = phi i32* [ %578, %572 ], [ %570, %569 ]
  %574 = phi i32 [ %577, %572 ], [ %571, %569 ]
  %575 = load i32, i32* %573, align 4
  %576 = call i32 @llvm.bswap.i32(i32 %575) #9
  %577 = add i32 %576, %574
  %578 = getelementptr inbounds i32, i32* %573, i64 1
  %579 = icmp ult i32* %578, %488
  br i1 %579, label %572, label %580, !llvm.loop !18

; <label>:580:                                    ; preds = %572, %559
  %581 = phi i32 [ %567, %559 ], [ %577, %572 ]
  %582 = sub i32 -1313820742, %581
  br label %583

; <label>:583:                                    ; preds = %580, %481
  %584 = phi i32 [ -1313820742, %481 ], [ %582, %580 ]
  %585 = call i32 @llvm.bswap.i32(i32 %584) #9
  store i32 %585, i32* %484, align 1
  br label %586

; <label>:586:                                    ; preds = %469, %583, %474
  %587 = load %class.SkData*, %class.SkData** %71, align 8
  store %class.SkData* null, %class.SkData** %71, align 8
  br label %597

; <label>:588:                                    ; preds = %87, %81, %47
  %589 = load %class.SkData*, %class.SkData** %71, align 8
  %590 = icmp eq %class.SkData* %589, null
  br i1 %590, label %597, label %591

; <label>:591:                                    ; preds = %588
  %592 = getelementptr inbounds %class.SkData, %class.SkData* %589, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %593 = atomicrmw add i32* %592, i32 -1 acq_rel
  %594 = icmp eq i32 %593, 1
  br i1 %594, label %595, label %597

; <label>:595:                                    ; preds = %591
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %589) #9
  %596 = bitcast %class.SkData* %589 to i8*
  call void @_ZN6SkDatadlEPv(i8* %596) #9
  br label %597

; <label>:597:                                    ; preds = %586, %588, %591, %595
  %598 = phi %class.SkData* [ %587, %586 ], [ null, %588 ], [ null, %591 ], [ null, %595 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70) #9
  br label %599

; <label>:599:                                    ; preds = %24, %40, %37, %597
  %600 = phi %class.SkData* [ %598, %597 ], [ null, %37 ], [ null, %40 ], [ null, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #9
  br label %601

; <label>:601:                                    ; preds = %3, %599
  %602 = phi %class.SkData* [ %600, %599 ], [ null, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7) #9
  ret %class.SkData* %602

; <label>:603:                                    ; preds = %137
  %604 = sub i32 %145, %57
  %605 = call i32 @llvm.bswap.i32(i32 %604) #9
  store i32 %605, i32* %143, align 1
  br label %606

; <label>:606:                                    ; preds = %603, %137
  %607 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %142, i64 0, i32 0
  %608 = load i32, i32* %607, align 1
  %609 = icmp eq i32 %608, 1684104552
  %610 = select i1 %609, %"struct.SkSFNTHeader::TableDirectoryEntry"* %142, %"struct.SkSFNTHeader::TableDirectoryEntry"* %141
  %611 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %128, i64 2
  %612 = icmp ult %"struct.SkSFNTHeader::TableDirectoryEntry"* %611, %99
  br i1 %612, label %127, label %147
}

declare void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp* sret, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOTUtils26LocalizedStrings_NameTable4MakeERK10SkTypefacePti(%class.sk_sp.4* noalias nocapture sret, %class.SkTypeface* dereferenceable(48), i16*, i32) local_unnamed_addr #2 align 2 {
  %5 = tail call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* nonnull %1, i32 1851878757) #9
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds %class.sk_sp.4, %class.sk_sp.4* %0, i64 0, i32 0
  store %"class.SkOTUtils::LocalizedStrings_NameTable"* null, %"class.SkOTUtils::LocalizedStrings_NameTable"** %8, align 8
  br label %38

; <label>:9:                                      ; preds = %4
  %10 = tail call i8* @_Znam(i64 %5) #10
  %11 = ptrtoint i8* %10 to i64
  %12 = tail call i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface* nonnull %1, i32 1851878757, i64 0, i64 %5, i8* nonnull %10) #9
  %13 = icmp eq i64 %12, %5
  br i1 %13, label %14, label %36

; <label>:14:                                     ; preds = %9
  %15 = tail call i8* @_Znwm(i64 64) #10
  %16 = bitcast i8* %15 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9SkOTUtils26LocalizedStrings_NameTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %17 = getelementptr inbounds i8, i8* %15, i64 8
  %18 = bitcast i8* %17 to i16**
  store i16* %2, i16** %18, align 8
  %19 = getelementptr inbounds i8, i8* %15, i64 16
  %20 = bitcast i8* %19 to i32*
  store i32 %3, i32* %20, align 8
  %21 = getelementptr inbounds i8, i8* %15, i64 20
  %22 = bitcast i8* %21 to i32*
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %15, i64 24
  %24 = bitcast i8* %23 to i64*
  store i64 %11, i64* %24, align 8
  %25 = getelementptr inbounds i8, i8* %15, i64 32
  %26 = load i16, i16* %2, align 2
  %27 = bitcast i8* %25 to i64*
  store i64 %11, i64* %27, align 1
  %28 = getelementptr inbounds i8, i8* %15, i64 40
  %29 = bitcast i8* %28 to i64*
  store i64 %5, i64* %29, align 1
  %30 = getelementptr inbounds i8, i8* %15, i64 48
  %31 = bitcast i8* %30 to i64*
  store i64 0, i64* %31, align 1
  %32 = getelementptr inbounds i8, i8* %15, i64 56
  %33 = bitcast i8* %32 to i32*
  %34 = zext i16 %26 to i32
  store i32 %34, i32* %33, align 1
  %35 = bitcast %class.sk_sp.4* %0 to i8**
  store i8* %15, i8** %35, align 8
  br label %38

; <label>:36:                                     ; preds = %9
  %37 = getelementptr inbounds %class.sk_sp.4, %class.sk_sp.4* %0, i64 0, i32 0
  store %"class.SkOTUtils::LocalizedStrings_NameTable"* null, %"class.SkOTUtils::LocalizedStrings_NameTable"** %37, align 8
  tail call void @_ZdaPv(i8* nonnull %10) #10
  br label %38

; <label>:38:                                     ; preds = %36, %14, %7
  ret void
}

declare i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface*, i32) local_unnamed_addr #3

; Function Attrs: nobuiltin
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

declare i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface*, i32, i64, i64, i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOTUtils26LocalizedStrings_NameTable18MakeForFamilyNamesERK10SkTypeface(%class.sk_sp.4* noalias nocapture sret, %class.SkTypeface* dereferenceable(48)) local_unnamed_addr #2 align 2 {
  tail call void @_ZN9SkOTUtils26LocalizedStrings_NameTable4MakeERK10SkTypefacePti(%class.sk_sp.4* sret %0, %class.SkTypeface* nonnull dereferenceable(48) %1, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @_ZN9SkOTUtils26LocalizedStrings_NameTable15familyNameTypesE, i64 0, i64 0), i32 3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOTUtils26LocalizedStrings_NameTable4nextEPN10SkTypeface15LocalizedStringE(%"class.SkOTUtils::LocalizedStrings_NameTable"*, %"struct.SkTypeface::LocalizedString"*) unnamed_addr #2 align 2 {
  %3 = alloca %"struct.SkOTTableName::Iterator::Record", align 1
  %4 = bitcast %"struct.SkOTTableName::Iterator::Record"* %3 to i8*
  %5 = getelementptr inbounds %"struct.SkOTTableName::Iterator::Record", %"struct.SkOTTableName::Iterator::Record"* %3, i64 0, i32 0
  %6 = getelementptr inbounds %"struct.SkOTTableName::Iterator::Record", %"struct.SkOTTableName::Iterator::Record"* %3, i64 0, i32 1
  %7 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 5
  %8 = getelementptr inbounds %"struct.SkTypeface::LocalizedString", %"struct.SkTypeface::LocalizedString"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"struct.SkTypeface::LocalizedString", %"struct.SkTypeface::LocalizedString"* %1, i64 0, i32 1
  %10 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 1
  %13 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 5, i32 2
  %14 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 5, i32 3
  br label %15

; <label>:15:                                     ; preds = %32, %2
  %16 = phi i1 [ undef, %2 ], [ %33, %32 ]
  call void @llvm.lifetime.start.p0i8(i64 18, i8* nonnull %4) #9
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %5) #9
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %6) #9
  %17 = call zeroext i1 @_ZN13SkOTTableName8Iterator4nextERNS0_6RecordE(%"class.SkOTTableName::Iterator"* nonnull %7, %"struct.SkOTTableName::Iterator::Record"* nonnull dereferenceable(18) %3) #9
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %15
  %19 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSERKS_(%class.SkString* %8, %class.SkString* nonnull dereferenceable(8) %5) #9
  %20 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSERKS_(%class.SkString* nonnull %9, %class.SkString* nonnull dereferenceable(8) %6) #9
  br label %32

; <label>:21:                                     ; preds = %15
  %22 = load i32, i32* %10, align 8
  %23 = load i32, i32* %11, align 4
  %24 = add nsw i32 %23, 1
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %32, label %26

; <label>:26:                                     ; preds = %21
  store i32 %24, i32* %11, align 4
  %27 = load i16*, i16** %12, align 8
  %28 = sext i32 %24 to i64
  %29 = getelementptr inbounds i16, i16* %27, i64 %28
  %30 = load i16, i16* %29, align 2
  store i64 0, i64* %13, align 1
  %31 = zext i16 %30 to i32
  store i32 %31, i32* %14, align 1
  br label %32

; <label>:32:                                     ; preds = %21, %26, %18
  %33 = phi i1 [ true, %18 ], [ %16, %26 ], [ false, %21 ]
  %34 = phi i1 [ false, %18 ], [ true, %26 ], [ false, %21 ]
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %6) #9
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 18, i8* nonnull %4) #9
  br i1 %34, label %15, label %35

; <label>:35:                                     ; preds = %32
  ret i1 %33
}

declare zeroext i1 @_ZN13SkOTTableName8Iterator4nextERNS0_6RecordE(%"class.SkOTTableName::Iterator"*, %"struct.SkOTTableName::Iterator::Record"* dereferenceable(18)) local_unnamed_addr #3

declare dereferenceable(8) %class.SkString* @_ZN8SkStringaSERKS_(%class.SkString*, %class.SkString* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOTUtils24SetAdvancedTypefaceFlagsEN15SkOTTableOS2_V44TypeEP25SkAdvancedTypefaceMetrics(i16, %struct.SkAdvancedTypefaceMetrics* nocapture) local_unnamed_addr #2 align 2 {
  %3 = icmp eq i16 %0, 0
  br i1 %3, label %18, label %4

; <label>:4:                                      ; preds = %2
  %5 = and i16 %0, 514
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds %struct.SkAdvancedTypefaceMetrics, %struct.SkAdvancedTypefaceMetrics* %1, i64 0, i32 4
  %9 = load i8, i8* %8, align 1
  %10 = or i8 %9, 2
  store i8 %10, i8* %8, align 1
  br label %11

; <label>:11:                                     ; preds = %4, %7
  %12 = and i16 %0, 1
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %11
  %15 = getelementptr inbounds %struct.SkAdvancedTypefaceMetrics, %struct.SkAdvancedTypefaceMetrics* %1, i64 0, i32 4
  %16 = load i8, i8* %15, align 1
  %17 = or i8 %16, 4
  store i8 %17, i8* %15, align 1
  br label %18

; <label>:18:                                     ; preds = %11, %2, %14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkOTUtils26LocalizedStrings_NameTableD2Ev(%"class.SkOTUtils::LocalizedStrings_NameTable"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9SkOTUtils26LocalizedStrings_NameTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %4) #10
  br label %7

; <label>:7:                                      ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkOTUtils26LocalizedStrings_NameTableD0Ev(%"class.SkOTUtils::LocalizedStrings_NameTable"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9SkOTUtils26LocalizedStrings_NameTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %4) #10
  br label %7

; <label>:7:                                      ; preds = %1, %6
  %8 = bitcast %"class.SkOTUtils::LocalizedStrings_NameTable"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #10
  ret void
}

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #8

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.bswap.v8i16(<8 x i16>) #8

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !5, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !5, !3}
