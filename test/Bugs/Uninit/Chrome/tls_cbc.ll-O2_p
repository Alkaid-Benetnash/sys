; ModuleID = '../../third_party/boringssl/src/crypto/cipher_extra/tls_cbc.c'
source_filename = "../../third_party/boringssl/src/crypto/cipher_extra/tls_cbc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.env_md_st = type opaque
%union.HASH_CTX = type { %struct.sha512_state_st }
%struct.sha512_state_st = type { [8 x i64], i64, i64, %union.anon.0, i32, i32 }
%union.anon.0 = type { [16 x i64] }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.sha_state_st = type { %union.anon, i32, i32, [64 x i8], i32 }
%union.anon = type { [5 x i32] }
%struct.sha256_state_st = type { [8 x i32], i32, i32, [64 x i8], i32, i32 }
%struct.engine_st = type opaque

; Function Attrs: norecurse nounwind ssp uwtable
define hidden i32 @EVP_tls_cbc_remove_padding(i64* nocapture, i64* nocapture, i8* nocapture readonly, i64, i64, i64) local_unnamed_addr #0 {
  %7 = add i64 %5, 1
  %8 = icmp ugt i64 %7, %3
  br i1 %8, label %110, label %9

; <label>:9:                                      ; preds = %6
  %10 = add i64 %3, -1
  %11 = getelementptr inbounds i8, i8* %2, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i64
  %14 = add i64 %7, %13
  %15 = xor i64 %14, %3
  %16 = sub i64 %3, %14
  %17 = xor i64 %16, %3
  %18 = or i64 %17, %15
  %19 = xor i64 %18, %3
  %20 = ashr i64 %19, 63
  %21 = xor i64 %20, -1
  %22 = icmp ult i64 %3, 256
  %23 = select i1 %22, i64 %3, i64 256
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %85, label %25

; <label>:25:                                     ; preds = %9
  %26 = icmp ult i64 %23, 4
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %79, %25
  %28 = phi i64 [ 0, %25 ], [ %31, %79 ]
  %29 = phi i64 [ %21, %25 ], [ %83, %79 ]
  br label %93

; <label>:30:                                     ; preds = %25
  %31 = and i64 %23, 508
  %32 = insertelement <2 x i64> undef, i64 %13, i32 0
  %33 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> zeroinitializer
  %34 = insertelement <2 x i64> undef, i64 %13, i32 0
  %35 = shufflevector <2 x i64> %34, <2 x i64> undef, <2 x i32> zeroinitializer
  %36 = insertelement <2 x i8> undef, i8 %12, i32 0
  %37 = shufflevector <2 x i8> %36, <2 x i8> undef, <2 x i32> zeroinitializer
  %38 = insertelement <2 x i8> undef, i8 %12, i32 0
  %39 = shufflevector <2 x i8> %38, <2 x i8> undef, <2 x i32> zeroinitializer
  %40 = insertelement <2 x i64> <i64 undef, i64 -1>, i64 %21, i32 0
  br label %41

; <label>:41:                                     ; preds = %41, %30
  %42 = phi i64 [ 0, %30 ], [ %76, %41 ]
  %43 = phi <2 x i64> [ <i64 0, i64 1>, %30 ], [ %77, %41 ]
  %44 = phi <2 x i64> [ %40, %30 ], [ %74, %41 ]
  %45 = phi <2 x i64> [ <i64 -1, i64 -1>, %30 ], [ %75, %41 ]
  %46 = add <2 x i64> %43, <i64 2, i64 2>
  %47 = sub nsw <2 x i64> %33, %43
  %48 = sub nsw <2 x i64> %35, %46
  %49 = ashr <2 x i64> %47, <i64 63, i64 63>
  %50 = ashr <2 x i64> %48, <i64 63, i64 63>
  %51 = trunc <2 x i64> %49 to <2 x i8>
  %52 = trunc <2 x i64> %50 to <2 x i8>
  %53 = xor <2 x i8> %51, <i8 -1, i8 -1>
  %54 = xor <2 x i8> %52, <i8 -1, i8 -1>
  %55 = sub i64 %10, %42
  %56 = getelementptr inbounds i8, i8* %2, i64 %55
  %57 = getelementptr inbounds i8, i8* %56, i64 -1
  %58 = bitcast i8* %57 to <2 x i8>*
  %59 = load <2 x i8>, <2 x i8>* %58, align 1
  %60 = shufflevector <2 x i8> %59, <2 x i8> undef, <2 x i32> <i32 1, i32 0>
  %61 = getelementptr inbounds i8, i8* %56, i64 -2
  %62 = getelementptr inbounds i8, i8* %61, i64 -1
  %63 = bitcast i8* %62 to <2 x i8>*
  %64 = load <2 x i8>, <2 x i8>* %63, align 1
  %65 = shufflevector <2 x i8> %64, <2 x i8> undef, <2 x i32> <i32 1, i32 0>
  %66 = xor <2 x i8> %60, %37
  %67 = xor <2 x i8> %65, %39
  %68 = and <2 x i8> %66, %53
  %69 = and <2 x i8> %67, %54
  %70 = zext <2 x i8> %68 to <2 x i64>
  %71 = zext <2 x i8> %69 to <2 x i64>
  %72 = xor <2 x i64> %70, <i64 -1, i64 -1>
  %73 = xor <2 x i64> %71, <i64 -1, i64 -1>
  %74 = and <2 x i64> %44, %72
  %75 = and <2 x i64> %45, %73
  %76 = add i64 %42, 4
  %77 = add <2 x i64> %43, <i64 4, i64 4>
  %78 = icmp eq i64 %76, %31
  br i1 %78, label %79, label %41, !llvm.loop !2

; <label>:79:                                     ; preds = %41
  %80 = and <2 x i64> %75, %74
  %81 = shufflevector <2 x i64> %80, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %82 = and <2 x i64> %80, %81
  %83 = extractelement <2 x i64> %82, i32 0
  %84 = icmp eq i64 %23, %31
  br i1 %84, label %85, label %27

; <label>:85:                                     ; preds = %93, %79, %9
  %86 = phi i64 [ %21, %9 ], [ %83, %79 ], [ %107, %93 ]
  %87 = and i64 %86, 255
  %88 = sub nsw i64 254, %87
  %89 = ashr i64 %88, 63
  %90 = add nuw nsw i64 %13, 1
  %91 = and i64 %89, %90
  %92 = sub i64 %3, %91
  store i64 %92, i64* %1, align 8
  store i64 %89, i64* %0, align 8
  br label %110

; <label>:93:                                     ; preds = %27, %93
  %94 = phi i64 [ %108, %93 ], [ %28, %27 ]
  %95 = phi i64 [ %107, %93 ], [ %29, %27 ]
  %96 = sub nsw i64 %13, %94
  %97 = ashr i64 %96, 63
  %98 = trunc i64 %97 to i8
  %99 = xor i8 %98, -1
  %100 = sub i64 %10, %94
  %101 = getelementptr inbounds i8, i8* %2, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = xor i8 %102, %12
  %104 = and i8 %103, %99
  %105 = zext i8 %104 to i64
  %106 = xor i64 %105, -1
  %107 = and i64 %95, %106
  %108 = add nuw nsw i64 %94, 1
  %109 = icmp ult i64 %108, %23
  br i1 %109, label %93, label %85, !llvm.loop !4

; <label>:110:                                    ; preds = %6, %85
  %111 = phi i32 [ 1, %85 ], [ 0, %6 ]
  ret i32 %111
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @EVP_tls_cbc_copy_mac(i8* nocapture, i64, i8* nocapture readonly, i64, i64) local_unnamed_addr #2 {
  %6 = alloca [64 x i8], align 16
  %7 = alloca [64 x i8], align 16
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #4
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #4
  %10 = sub i64 %3, %1
  %11 = add i64 %1, 256
  %12 = icmp ult i64 %11, %4
  %13 = select i1 %12, i64 %4, i64 %11
  %14 = sub i64 %13, %11
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 %1, i1 false) #4
  br label %17

; <label>:17:                                     ; preds = %5, %16
  %18 = icmp ult i64 %14, %4
  br i1 %18, label %27, label %19

; <label>:19:                                     ; preds = %27, %17
  %20 = phi i64 [ 0, %17 ], [ %57, %27 ]
  %21 = icmp ugt i64 %1, 1
  br i1 %21, label %22, label %61

; <label>:22:                                     ; preds = %19
  %23 = and i64 %1, 1
  %24 = icmp eq i64 %1, 1
  %25 = sub i64 %1, %23
  %26 = icmp eq i64 %23, 0
  br label %65

; <label>:27:                                     ; preds = %17, %27
  %28 = phi i64 [ %57, %27 ], [ 0, %17 ]
  %29 = phi i64 [ %59, %27 ], [ 0, %17 ]
  %30 = phi i64 [ %58, %27 ], [ %14, %17 ]
  %31 = phi i64 [ %41, %27 ], [ 0, %17 ]
  %32 = icmp ult i64 %29, %1
  %33 = select i1 %32, i64 0, i64 %1
  %34 = sub i64 %29, %33
  %35 = xor i64 %30, %10
  %36 = xor i64 %35, -9223372036854775808
  %37 = add i64 %35, -1
  %38 = and i64 %37, %36
  %39 = ashr i64 %38, 63
  %40 = and i64 %31, 255
  %41 = or i64 %39, %40
  %42 = xor i64 %30, %3
  %43 = sub i64 %30, %3
  %44 = xor i64 %43, %30
  %45 = or i64 %44, %42
  %46 = xor i64 %45, %30
  %47 = ashr i64 %46, 63
  %48 = getelementptr inbounds i8, i8* %2, i64 %30
  %49 = load i8, i8* %48, align 1
  %50 = and i64 %47, %41
  %51 = trunc i64 %50 to i8
  %52 = and i8 %49, %51
  %53 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 %34
  %54 = load i8, i8* %53, align 1
  %55 = or i8 %52, %54
  store i8 %55, i8* %53, align 1
  %56 = and i64 %34, %39
  %57 = or i64 %56, %28
  %58 = add i64 %30, 1
  %59 = add i64 %34, 1
  %60 = icmp ult i64 %58, %4
  br i1 %60, label %27, label %19

; <label>:61:                                     ; preds = %89, %19
  %62 = phi i8* [ %8, %19 ], [ %67, %89 ]
  br i1 %15, label %64, label %63

; <label>:63:                                     ; preds = %61
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* nonnull align 1 %62, i64 %1, i1 false) #4
  br label %64

; <label>:64:                                     ; preds = %61, %63
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #4
  ret void

; <label>:65:                                     ; preds = %22, %89
  %66 = phi i8* [ %67, %89 ], [ %8, %22 ]
  %67 = phi i8* [ %66, %89 ], [ %9, %22 ]
  %68 = phi i64 [ %90, %89 ], [ 1, %22 ]
  %69 = phi i64 [ %91, %89 ], [ %20, %22 ]
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = add nsw i8 %71, -1
  %73 = sub nsw i8 0, %71
  br i1 %24, label %74, label %93

; <label>:74:                                     ; preds = %93, %65
  %75 = phi i64 [ %68, %65 ], [ %122, %93 ]
  %76 = phi i64 [ 0, %65 ], [ %121, %93 ]
  br i1 %26, label %89, label %77

; <label>:77:                                     ; preds = %74
  %78 = icmp ult i64 %75, %1
  %79 = select i1 %78, i64 0, i64 %1
  %80 = sub i64 %75, %79
  %81 = getelementptr inbounds i8, i8* %66, i64 %76
  %82 = load i8, i8* %81, align 1
  %83 = getelementptr inbounds i8, i8* %66, i64 %80
  %84 = load i8, i8* %83, align 1
  %85 = and i8 %82, %72
  %86 = and i8 %84, %73
  %87 = or i8 %86, %85
  %88 = getelementptr inbounds i8, i8* %67, i64 %76
  store i8 %87, i8* %88, align 1
  br label %89

; <label>:89:                                     ; preds = %74, %77
  %90 = shl i64 %68, 1
  %91 = lshr i64 %69, 1
  %92 = icmp ult i64 %90, %1
  br i1 %92, label %65, label %61

; <label>:93:                                     ; preds = %65, %93
  %94 = phi i64 [ %122, %93 ], [ %68, %65 ]
  %95 = phi i64 [ %121, %93 ], [ 0, %65 ]
  %96 = phi i64 [ %123, %93 ], [ %25, %65 ]
  %97 = icmp ult i64 %94, %1
  %98 = select i1 %97, i64 0, i64 %1
  %99 = sub i64 %94, %98
  %100 = getelementptr inbounds i8, i8* %66, i64 %95
  %101 = load i8, i8* %100, align 1
  %102 = getelementptr inbounds i8, i8* %66, i64 %99
  %103 = load i8, i8* %102, align 1
  %104 = and i8 %101, %72
  %105 = and i8 %103, %73
  %106 = or i8 %105, %104
  %107 = getelementptr inbounds i8, i8* %67, i64 %95
  store i8 %106, i8* %107, align 1
  %108 = or i64 %95, 1
  %109 = add i64 %99, 1
  %110 = icmp ult i64 %109, %1
  %111 = select i1 %110, i64 0, i64 %1
  %112 = sub i64 %109, %111
  %113 = getelementptr inbounds i8, i8* %66, i64 %108
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds i8, i8* %66, i64 %112
  %116 = load i8, i8* %115, align 1
  %117 = and i8 %114, %72
  %118 = and i8 %116, %73
  %119 = or i8 %118, %117
  %120 = getelementptr inbounds i8, i8* %67, i64 %108
  store i8 %119, i8* %120, align 1
  %121 = add i64 %95, 2
  %122 = add i64 %112, 1
  %123 = add i64 %96, -2
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %74, label %93
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_tls_cbc_record_digest_supported(%struct.env_md_st*) local_unnamed_addr #2 {
  %2 = tail call i32 @EVP_MD_type(%struct.env_md_st* %0) #4
  switch i32 %2, label %3 [
    i32 64, label %4
    i32 672, label %4
    i32 673, label %4
  ]

; <label>:3:                                      ; preds = %1
  br label %4

; <label>:4:                                      ; preds = %1, %1, %1, %3
  %5 = phi i32 [ 0, %3 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ]
  ret i32 %5
}

declare i32 @EVP_MD_type(%struct.env_md_st*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_tls_cbc_digest_record(%struct.env_md_st*, i8*, i64* nocapture, i8* nocapture readonly, i8*, i64, i64, i8* nocapture readonly, i32) local_unnamed_addr #2 {
  %10 = alloca %union.HASH_CTX, align 8
  %11 = alloca [128 x i8], align 16
  %12 = alloca [16 x i8], align 16
  %13 = alloca [128 x i8], align 16
  %14 = alloca [64 x i8], align 16
  %15 = alloca [128 x i8], align 16
  %16 = alloca %struct.env_md_ctx_st, align 8
  %17 = alloca i32, align 4
  %18 = bitcast %union.HASH_CTX* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18) #4
  %19 = icmp ugt i64 %6, 1048575
  br i1 %19, label %341, label %20

; <label>:20:                                     ; preds = %9
  %21 = tail call i32 @EVP_MD_type(%struct.env_md_st* %0) #4
  switch i32 %21, label %31 [
    i32 64, label %22
    i32 672, label %25
    i32 673, label %28
  ]

; <label>:22:                                     ; preds = %20
  %23 = bitcast %union.HASH_CTX* %10 to %struct.sha_state_st*
  %24 = call i32 @SHA1_Init(%struct.sha_state_st* nonnull %23) #4
  br label %32

; <label>:25:                                     ; preds = %20
  %26 = bitcast %union.HASH_CTX* %10 to %struct.sha256_state_st*
  %27 = call i32 @SHA256_Init(%struct.sha256_state_st* nonnull %26) #4
  br label %32

; <label>:28:                                     ; preds = %20
  %29 = getelementptr inbounds %union.HASH_CTX, %union.HASH_CTX* %10, i64 0, i32 0
  %30 = call i32 @SHA384_Init(%struct.sha512_state_st* nonnull %29) #4
  br label %32

; <label>:31:                                     ; preds = %20
  store i64 0, i64* %2, align 8
  br label %341

; <label>:32:                                     ; preds = %28, %25, %22
  %33 = phi i32 [ 16, %28 ], [ 8, %25 ], [ 8, %22 ]
  %34 = phi i64 [ 7, %28 ], [ 6, %25 ], [ 6, %22 ]
  %35 = phi i32 [ 128, %28 ], [ 64, %25 ], [ 64, %22 ]
  %36 = phi i32 [ 48, %28 ], [ 32, %25 ], [ 20, %22 ]
  %37 = phi void (%union.HASH_CTX*, i8*)* [ @tls1_sha512_transform, %28 ], [ @tls1_sha256_transform, %25 ], [ @tls1_sha1_transform, %22 ]
  %38 = phi void (%union.HASH_CTX*, i8*)* [ @tls1_sha512_final_raw, %28 ], [ @tls1_sha256_final_raw, %25 ], [ @tls1_sha1_final_raw, %22 ]
  %39 = or i32 %35, %36
  %40 = or i32 %39, 256
  %41 = add nsw i32 %40, -1
  %42 = udiv i32 %41, %35
  %43 = add nuw nsw i32 %42, 1
  %44 = zext i32 %43 to i64
  %45 = add i64 %6, 13
  %46 = zext i32 %36 to i64
  %47 = zext i32 %33 to i64
  %48 = zext i32 %35 to i64
  %49 = add i64 %6, 12
  %50 = add i64 %49, %47
  %51 = add i64 %50, %48
  %52 = sub i64 %51, %46
  %53 = udiv i64 %52, %48
  %54 = add i64 %5, 13
  %55 = sub i64 %54, %46
  %56 = add nsw i32 %35, -1
  %57 = zext i32 %56 to i64
  %58 = and i64 %55, %57
  %59 = lshr i64 %55, %34
  %60 = add i64 %55, %47
  %61 = lshr i64 %60, %34
  %62 = icmp ugt i64 %53, %44
  %63 = sub i64 %53, %44
  %64 = mul i64 %63, %48
  %65 = select i1 %62, i64 %63, i64 0
  %66 = select i1 %62, i64 %64, i64 0
  %67 = shl i64 %55, 3
  %68 = shl nuw nsw i32 %35, 3
  %69 = zext i32 %68 to i64
  %70 = add i64 %67, %69
  %71 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %71) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %71, i8 0, i64 %48, i1 false) #4
  %72 = icmp eq i32 %8, 0
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %32
  %74 = zext i32 %8 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %71, i8* align 1 %7, i64 %74, i1 false) #4
  br label %75

; <label>:75:                                     ; preds = %32, %73
  %76 = bitcast [128 x i8]* %11 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 16
  %78 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 16
  %81 = xor <16 x i8> %77, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %82 = xor <16 x i8> %80, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %83 = bitcast [128 x i8]* %11 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %83, align 16
  %84 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 16
  %85 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 32
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 16
  %88 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 48
  %89 = bitcast i8* %88 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 16
  %91 = xor <16 x i8> %87, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %92 = xor <16 x i8> %90, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %93 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %93, align 16
  %94 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %94, align 16
  %95 = icmp eq i32 %35, 64
  br i1 %95, label %96, label %364, !llvm.loop !6

; <label>:96:                                     ; preds = %364, %75
  call void %37(%union.HASH_CTX* nonnull %10, i8* nonnull %71) #4, !callees !7
  %97 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %97) #4
  %98 = add nsw i32 %33, -4
  %99 = zext i32 %98 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %97, i8 0, i64 %99, i1 false) #4
  %100 = lshr i64 %70, 24
  %101 = trunc i64 %100 to i8
  %102 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %99
  store i8 %101, i8* %102, align 4
  %103 = lshr i64 %70, 16
  %104 = trunc i64 %103 to i8
  %105 = add nsw i32 %33, -3
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %106
  store i8 %104, i8* %107, align 1
  %108 = lshr i64 %70, 8
  %109 = trunc i64 %108 to i8
  %110 = add nsw i32 %33, -2
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %111
  store i8 %109, i8* %112, align 2
  %113 = trunc i64 %70 to i8
  %114 = add nsw i32 %33, -1
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %115
  store i8 %113, i8* %116, align 1
  %117 = icmp eq i64 %66, 0
  br i1 %117, label %134, label %118

; <label>:118:                                    ; preds = %96
  %119 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %119) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %119, i8* align 1 %3, i64 13, i1 false) #4
  %120 = getelementptr inbounds [128 x i8], [128 x i8]* %13, i64 0, i64 13
  %121 = add nsw i32 %35, -13
  %122 = zext i32 %121 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %120, i8* align 1 %4, i64 %122, i1 false) #4
  call void %37(%union.HASH_CTX* nonnull %10, i8* nonnull %119) #4, !callees !7
  %123 = udiv i64 %66, %48
  %124 = icmp ugt i64 %123, 1
  br i1 %124, label %125, label %127

; <label>:125:                                    ; preds = %118
  %126 = getelementptr inbounds i8, i8* %4, i64 -13
  br label %128

; <label>:127:                                    ; preds = %128, %118
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %119) #4
  br label %134

; <label>:128:                                    ; preds = %125, %128
  %129 = phi i64 [ 1, %125 ], [ %132, %128 ]
  %130 = mul i64 %129, %48
  %131 = getelementptr inbounds i8, i8* %126, i64 %130
  call void %37(%union.HASH_CTX* nonnull %10, i8* nonnull %131) #4, !callees !7
  %132 = add nuw nsw i64 %129, 1
  %133 = icmp ult i64 %132, %123
  br i1 %133, label %128, label %127

; <label>:134:                                    ; preds = %96, %127
  %135 = getelementptr inbounds [64 x i8], [64 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %135) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %135, i8 0, i64 64, i1 false) #4
  %136 = add i64 %65, %44
  %137 = icmp ugt i64 %65, %136
  br i1 %137, label %154, label %138

; <label>:138:                                    ; preds = %134
  %139 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 0
  %140 = sub nsw i32 %35, %33
  %141 = zext i32 %140 to i64
  %142 = xor i64 %58, -1
  %143 = and i64 %46, 32
  %144 = add nsw i64 %143, -32
  %145 = lshr exact i64 %144, 5
  %146 = add nuw nsw i64 %145, 1
  %147 = icmp ult i32 %36, 32
  %148 = and i64 %46, 32
  %149 = and i64 %146, 1
  %150 = icmp eq i64 %144, 0
  %151 = sub nsw i64 %146, %149
  %152 = icmp eq i64 %149, 0
  %153 = icmp eq i64 %148, %46
  br label %179

; <label>:154:                                    ; preds = %315, %134
  %155 = bitcast %struct.env_md_ctx_st* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %155) #4
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %16) #4
  %156 = call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* nonnull %16, %struct.env_md_st* %0, %struct.engine_st* null) #4
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %329, label %158

; <label>:158:                                    ; preds = %154
  %159 = bitcast [128 x i8]* %11 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 16
  %161 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 16
  %162 = bitcast i8* %161 to <16 x i8>*
  %163 = load <16 x i8>, <16 x i8>* %162, align 16
  %164 = xor <16 x i8> %160, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %165 = xor <16 x i8> %163, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %166 = bitcast [128 x i8]* %11 to <16 x i8>*
  store <16 x i8> %164, <16 x i8>* %166, align 16
  %167 = bitcast i8* %161 to <16 x i8>*
  store <16 x i8> %165, <16 x i8>* %167, align 16
  %168 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 32
  %169 = bitcast i8* %168 to <16 x i8>*
  %170 = load <16 x i8>, <16 x i8>* %169, align 16
  %171 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 48
  %172 = bitcast i8* %171 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 16
  %174 = xor <16 x i8> %170, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %175 = xor <16 x i8> %173, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %176 = bitcast i8* %168 to <16 x i8>*
  store <16 x i8> %174, <16 x i8>* %176, align 16
  %177 = bitcast i8* %171 to <16 x i8>*
  store <16 x i8> %175, <16 x i8>* %177, align 16
  %178 = icmp eq i32 %35, 64
  br i1 %178, label %331, label %343, !llvm.loop !8

; <label>:179:                                    ; preds = %138, %315
  %180 = phi i64 [ %65, %138 ], [ %317, %315 ]
  %181 = phi i64 [ %66, %138 ], [ %316, %315 ]
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %139) #4
  %182 = xor i64 %180, %59
  %183 = xor i64 %182, -9223372036854775808
  %184 = add i64 %182, -1
  %185 = and i64 %184, %183
  %186 = ashr i64 %185, 63
  %187 = trunc i64 %186 to i8
  %188 = xor i64 %180, %61
  %189 = xor i64 %188, -9223372036854775808
  %190 = add i64 %188, -1
  %191 = and i64 %190, %189
  %192 = ashr i64 %191, 63
  %193 = trunc i64 %192 to i8
  %194 = xor i8 %187, -1
  %195 = xor i8 %193, -1
  %196 = or i8 %187, %195
  br label %270

; <label>:197:                                    ; preds = %310
  call void %37(%union.HASH_CTX* nonnull %10, i8* nonnull %139) #4, !callees !7
  call void %38(%union.HASH_CTX* nonnull %10, i8* nonnull %139) #4, !callees !9
  br i1 %147, label %198, label %200

; <label>:198:                                    ; preds = %269, %197
  %199 = phi i64 [ 0, %197 ], [ %148, %269 ]
  br label %319

; <label>:200:                                    ; preds = %197
  %201 = insertelement <16 x i8> undef, i8 %193, i32 0
  %202 = shufflevector <16 x i8> %201, <16 x i8> undef, <16 x i32> zeroinitializer
  %203 = insertelement <16 x i8> undef, i8 %193, i32 0
  %204 = shufflevector <16 x i8> %203, <16 x i8> undef, <16 x i32> zeroinitializer
  br i1 %150, label %248, label %205

; <label>:205:                                    ; preds = %200, %205
  %206 = phi i64 [ %245, %205 ], [ 0, %200 ]
  %207 = phi i64 [ %246, %205 ], [ %151, %200 ]
  %208 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %206
  %209 = bitcast i8* %208 to <16 x i8>*
  %210 = load <16 x i8>, <16 x i8>* %209, align 16
  %211 = getelementptr inbounds i8, i8* %208, i64 16
  %212 = bitcast i8* %211 to <16 x i8>*
  %213 = load <16 x i8>, <16 x i8>* %212, align 16
  %214 = and <16 x i8> %210, %202
  %215 = and <16 x i8> %213, %204
  %216 = getelementptr inbounds [64 x i8], [64 x i8]* %14, i64 0, i64 %206
  %217 = bitcast i8* %216 to <16 x i8>*
  %218 = load <16 x i8>, <16 x i8>* %217, align 16
  %219 = getelementptr inbounds i8, i8* %216, i64 16
  %220 = bitcast i8* %219 to <16 x i8>*
  %221 = load <16 x i8>, <16 x i8>* %220, align 16
  %222 = or <16 x i8> %218, %214
  %223 = or <16 x i8> %221, %215
  %224 = bitcast i8* %216 to <16 x i8>*
  store <16 x i8> %222, <16 x i8>* %224, align 16
  %225 = bitcast i8* %219 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %225, align 16
  %226 = or i64 %206, 32
  %227 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %226
  %228 = bitcast i8* %227 to <16 x i8>*
  %229 = load <16 x i8>, <16 x i8>* %228, align 16
  %230 = getelementptr inbounds i8, i8* %227, i64 16
  %231 = bitcast i8* %230 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 16
  %233 = and <16 x i8> %229, %202
  %234 = and <16 x i8> %232, %204
  %235 = getelementptr inbounds [64 x i8], [64 x i8]* %14, i64 0, i64 %226
  %236 = bitcast i8* %235 to <16 x i8>*
  %237 = load <16 x i8>, <16 x i8>* %236, align 16
  %238 = getelementptr inbounds i8, i8* %235, i64 16
  %239 = bitcast i8* %238 to <16 x i8>*
  %240 = load <16 x i8>, <16 x i8>* %239, align 16
  %241 = or <16 x i8> %237, %233
  %242 = or <16 x i8> %240, %234
  %243 = bitcast i8* %235 to <16 x i8>*
  store <16 x i8> %241, <16 x i8>* %243, align 16
  %244 = bitcast i8* %238 to <16 x i8>*
  store <16 x i8> %242, <16 x i8>* %244, align 16
  %245 = add i64 %206, 64
  %246 = add i64 %207, -2
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %205, !llvm.loop !10

; <label>:248:                                    ; preds = %205, %200
  %249 = phi i64 [ 0, %200 ], [ %245, %205 ]
  br i1 %152, label %269, label %250

; <label>:250:                                    ; preds = %248
  %251 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %249
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 16
  %254 = getelementptr inbounds i8, i8* %251, i64 16
  %255 = bitcast i8* %254 to <16 x i8>*
  %256 = load <16 x i8>, <16 x i8>* %255, align 16
  %257 = and <16 x i8> %253, %202
  %258 = and <16 x i8> %256, %204
  %259 = getelementptr inbounds [64 x i8], [64 x i8]* %14, i64 0, i64 %249
  %260 = bitcast i8* %259 to <16 x i8>*
  %261 = load <16 x i8>, <16 x i8>* %260, align 16
  %262 = getelementptr inbounds i8, i8* %259, i64 16
  %263 = bitcast i8* %262 to <16 x i8>*
  %264 = load <16 x i8>, <16 x i8>* %263, align 16
  %265 = or <16 x i8> %261, %257
  %266 = or <16 x i8> %264, %258
  %267 = bitcast i8* %259 to <16 x i8>*
  store <16 x i8> %265, <16 x i8>* %267, align 16
  %268 = bitcast i8* %262 to <16 x i8>*
  store <16 x i8> %266, <16 x i8>* %268, align 16
  br label %269

; <label>:269:                                    ; preds = %248, %250
  br i1 %153, label %315, label %198

; <label>:270:                                    ; preds = %310, %179
  %271 = phi i64 [ 0, %179 ], [ %313, %310 ]
  %272 = phi i64 [ %181, %179 ], [ %286, %310 ]
  %273 = icmp ult i64 %272, 13
  br i1 %273, label %274, label %276

; <label>:274:                                    ; preds = %270
  %275 = getelementptr inbounds i8, i8* %3, i64 %272
  br label %281

; <label>:276:                                    ; preds = %270
  %277 = icmp ult i64 %272, %45
  br i1 %277, label %278, label %284

; <label>:278:                                    ; preds = %276
  %279 = add i64 %272, -13
  %280 = getelementptr inbounds i8, i8* %4, i64 %279
  br label %281

; <label>:281:                                    ; preds = %274, %278
  %282 = phi i8* [ %280, %278 ], [ %275, %274 ]
  %283 = load i8, i8* %282, align 1
  br label %284

; <label>:284:                                    ; preds = %281, %276
  %285 = phi i8 [ 0, %276 ], [ %283, %281 ]
  %286 = add i64 %272, 1
  %287 = sub nsw i64 %271, %58
  %288 = ashr i64 %287, 63
  %289 = trunc i64 %288 to i8
  %290 = xor i8 %289, -1
  %291 = and i8 %290, %187
  %292 = add nsw i64 %271, %142
  %293 = ashr i64 %292, 63
  %294 = trunc i64 %293 to i8
  %295 = and i8 %291, -128
  %296 = xor i8 %291, -1
  %297 = and i8 %285, %296
  %298 = or i8 %297, %295
  %299 = or i8 %294, %194
  %300 = and i8 %298, %299
  %301 = and i8 %300, %196
  %302 = icmp ult i64 %271, %141
  br i1 %302, label %310, label %303

; <label>:303:                                    ; preds = %284
  %304 = sub nsw i64 %271, %141
  %305 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = and i8 %306, %193
  %308 = and i8 %300, %195
  %309 = or i8 %307, %308
  br label %310

; <label>:310:                                    ; preds = %284, %303
  %311 = phi i8 [ %309, %303 ], [ %301, %284 ]
  %312 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %271
  store i8 %311, i8* %312, align 1
  %313 = add nuw nsw i64 %271, 1
  %314 = icmp eq i64 %313, %48
  br i1 %314, label %197, label %270

; <label>:315:                                    ; preds = %319, %269
  %316 = add i64 %181, %48
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %139) #4
  %317 = add i64 %180, 1
  %318 = icmp eq i64 %180, %136
  br i1 %318, label %154, label %179

; <label>:319:                                    ; preds = %198, %319
  %320 = phi i64 [ %327, %319 ], [ %199, %198 ]
  %321 = getelementptr inbounds [128 x i8], [128 x i8]* %15, i64 0, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = and i8 %322, %193
  %324 = getelementptr inbounds [64 x i8], [64 x i8]* %14, i64 0, i64 %320
  %325 = load i8, i8* %324, align 1
  %326 = or i8 %325, %323
  store i8 %326, i8* %324, align 1
  %327 = add nuw nsw i64 %320, 1
  %328 = icmp eq i64 %327, %46
  br i1 %328, label %315, label %319, !llvm.loop !11

; <label>:329:                                    ; preds = %154
  %330 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %16) #4
  br label %339

; <label>:331:                                    ; preds = %343, %158
  %332 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %16, i8* nonnull %71, i64 %48) #4
  %333 = call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* nonnull %16, i8* nonnull %135, i64 %46) #4
  %334 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %334) #4
  %335 = call i32 @EVP_DigestFinal(%struct.env_md_ctx_st* nonnull %16, i8* %1, i32* nonnull %17) #4
  %336 = load i32, i32* %17, align 4
  %337 = zext i32 %336 to i64
  store i64 %337, i64* %2, align 8
  %338 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %16) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %334) #4
  br label %339

; <label>:339:                                    ; preds = %331, %329
  %340 = phi i32 [ 1, %331 ], [ 0, %329 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %155) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %135) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %97) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %71) #4
  br label %341

; <label>:341:                                    ; preds = %9, %339, %31
  %342 = phi i32 [ 0, %31 ], [ %340, %339 ], [ 0, %9 ]
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18) #4
  ret i32 %342

; <label>:343:                                    ; preds = %158
  %344 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 64
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 16
  %347 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 80
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 16
  %350 = xor <16 x i8> %346, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %351 = xor <16 x i8> %349, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %352 = bitcast i8* %344 to <16 x i8>*
  store <16 x i8> %350, <16 x i8>* %352, align 16
  %353 = bitcast i8* %347 to <16 x i8>*
  store <16 x i8> %351, <16 x i8>* %353, align 16
  %354 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 96
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 16
  %357 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 112
  %358 = bitcast i8* %357 to <16 x i8>*
  %359 = load <16 x i8>, <16 x i8>* %358, align 16
  %360 = xor <16 x i8> %356, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %361 = xor <16 x i8> %359, <i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106, i8 106>
  %362 = bitcast i8* %354 to <16 x i8>*
  store <16 x i8> %360, <16 x i8>* %362, align 16
  %363 = bitcast i8* %357 to <16 x i8>*
  store <16 x i8> %361, <16 x i8>* %363, align 16
  br label %331

; <label>:364:                                    ; preds = %75
  %365 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 64
  %366 = bitcast i8* %365 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 16
  %368 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 80
  %369 = bitcast i8* %368 to <16 x i8>*
  %370 = load <16 x i8>, <16 x i8>* %369, align 16
  %371 = xor <16 x i8> %367, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %372 = xor <16 x i8> %370, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %373 = bitcast i8* %365 to <16 x i8>*
  store <16 x i8> %371, <16 x i8>* %373, align 16
  %374 = bitcast i8* %368 to <16 x i8>*
  store <16 x i8> %372, <16 x i8>* %374, align 16
  %375 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 96
  %376 = bitcast i8* %375 to <16 x i8>*
  %377 = load <16 x i8>, <16 x i8>* %376, align 16
  %378 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 112
  %379 = bitcast i8* %378 to <16 x i8>*
  %380 = load <16 x i8>, <16 x i8>* %379, align 16
  %381 = xor <16 x i8> %377, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %382 = xor <16 x i8> %380, <i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54, i8 54>
  %383 = bitcast i8* %375 to <16 x i8>*
  store <16 x i8> %381, <16 x i8>* %383, align 16
  %384 = bitcast i8* %378 to <16 x i8>*
  store <16 x i8> %382, <16 x i8>* %384, align 16
  br label %96
}

declare i32 @SHA1_Init(%struct.sha_state_st*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind ssp uwtable
define internal void @tls1_sha1_final_raw(%union.HASH_CTX* nocapture readonly, i8* nocapture) unnamed_addr #0 {
  %3 = bitcast %union.HASH_CTX* %0 to [5 x i32]*
  %4 = bitcast %union.HASH_CTX* %0 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = lshr i32 %5, 24
  %7 = trunc i32 %6 to i8
  %8 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %7, i8* %1, align 1
  %9 = load i32, i32* %4, align 4
  %10 = lshr i32 %9, 16
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %11, i8* %8, align 1
  %13 = load i32, i32* %4, align 4
  %14 = lshr i32 %13, 8
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %15, i8* %12, align 1
  %17 = load i32, i32* %4, align 4
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %18, i8* %16, align 1
  %20 = getelementptr inbounds [5 x i32], [5 x i32]* %3, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = lshr i32 %21, 24
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %23, i8* %19, align 1
  %25 = load i32, i32* %20, align 4
  %26 = lshr i32 %25, 16
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %27, i8* %24, align 1
  %29 = load i32, i32* %20, align 4
  %30 = lshr i32 %29, 8
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %31, i8* %28, align 1
  %33 = load i32, i32* %20, align 4
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %1, i64 8
  store i8 %34, i8* %32, align 1
  %36 = getelementptr inbounds %union.HASH_CTX, %union.HASH_CTX* %0, i64 0, i32 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = lshr i32 %38, 24
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %1, i64 9
  store i8 %40, i8* %35, align 1
  %42 = load i32, i32* %37, align 4
  %43 = lshr i32 %42, 16
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %1, i64 10
  store i8 %44, i8* %41, align 1
  %46 = load i32, i32* %37, align 4
  %47 = lshr i32 %46, 8
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 %48, i8* %45, align 1
  %50 = load i32, i32* %37, align 4
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %1, i64 12
  store i8 %51, i8* %49, align 1
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %3, i64 0, i64 3
  %54 = load i32, i32* %53, align 4
  %55 = lshr i32 %54, 24
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %1, i64 13
  store i8 %56, i8* %52, align 1
  %58 = load i32, i32* %53, align 4
  %59 = lshr i32 %58, 16
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds i8, i8* %1, i64 14
  store i8 %60, i8* %57, align 1
  %62 = load i32, i32* %53, align 4
  %63 = lshr i32 %62, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %1, i64 15
  store i8 %64, i8* %61, align 1
  %66 = load i32, i32* %53, align 4
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %1, i64 16
  store i8 %67, i8* %65, align 1
  %69 = getelementptr inbounds %union.HASH_CTX, %union.HASH_CTX* %0, i64 0, i32 0, i32 0, i64 2
  %70 = bitcast i64* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = lshr i32 %71, 24
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %1, i64 17
  store i8 %73, i8* %68, align 1
  %75 = load i32, i32* %70, align 4
  %76 = lshr i32 %75, 16
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds i8, i8* %1, i64 18
  store i8 %77, i8* %74, align 1
  %79 = load i32, i32* %70, align 4
  %80 = lshr i32 %79, 8
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %1, i64 19
  store i8 %81, i8* %78, align 1
  %83 = load i32, i32* %70, align 4
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %82, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @tls1_sha1_transform(%union.HASH_CTX*, i8*) unnamed_addr #2 {
  %3 = bitcast %union.HASH_CTX* %0 to %struct.sha_state_st*
  tail call void @SHA1_Transform(%struct.sha_state_st* %3, i8* %1) #4
  ret void
}

declare i32 @SHA256_Init(%struct.sha256_state_st*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind ssp uwtable
define internal void @tls1_sha256_final_raw(%union.HASH_CTX* nocapture readonly, i8* nocapture) unnamed_addr #0 {
  %3 = bitcast %union.HASH_CTX* %0 to [8 x i32]*
  %4 = bitcast %union.HASH_CTX* %0 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = lshr i32 %5, 24
  %7 = trunc i32 %6 to i8
  %8 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %7, i8* %1, align 1
  %9 = load i32, i32* %4, align 4
  %10 = lshr i32 %9, 16
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %11, i8* %8, align 1
  %13 = load i32, i32* %4, align 4
  %14 = lshr i32 %13, 8
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %15, i8* %12, align 1
  %17 = load i32, i32* %4, align 4
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %18, i8* %16, align 1
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = lshr i32 %21, 24
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %23, i8* %19, align 1
  %25 = load i32, i32* %20, align 4
  %26 = lshr i32 %25, 16
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %27, i8* %24, align 1
  %29 = load i32, i32* %20, align 4
  %30 = lshr i32 %29, 8
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %31, i8* %28, align 1
  %33 = load i32, i32* %20, align 4
  %34 = trunc i32 %33 to i8
  %35 = getelementptr inbounds i8, i8* %1, i64 8
  store i8 %34, i8* %32, align 1
  %36 = getelementptr inbounds %union.HASH_CTX, %union.HASH_CTX* %0, i64 0, i32 0, i32 0, i64 1
  %37 = bitcast i64* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = lshr i32 %38, 24
  %40 = trunc i32 %39 to i8
  %41 = getelementptr inbounds i8, i8* %1, i64 9
  store i8 %40, i8* %35, align 1
  %42 = load i32, i32* %37, align 4
  %43 = lshr i32 %42, 16
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %1, i64 10
  store i8 %44, i8* %41, align 1
  %46 = load i32, i32* %37, align 4
  %47 = lshr i32 %46, 8
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 %48, i8* %45, align 1
  %50 = load i32, i32* %37, align 4
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %1, i64 12
  store i8 %51, i8* %49, align 1
  %53 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 3
  %54 = load i32, i32* %53, align 4
  %55 = lshr i32 %54, 24
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds i8, i8* %1, i64 13
  store i8 %56, i8* %52, align 1
  %58 = load i32, i32* %53, align 4
  %59 = lshr i32 %58, 16
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds i8, i8* %1, i64 14
  store i8 %60, i8* %57, align 1
  %62 = load i32, i32* %53, align 4
  %63 = lshr i32 %62, 8
  %64 = trunc i32 %63 to i8
  %65 = getelementptr inbounds i8, i8* %1, i64 15
  store i8 %64, i8* %61, align 1
  %66 = load i32, i32* %53, align 4
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %1, i64 16
  store i8 %67, i8* %65, align 1
  %69 = getelementptr inbounds %union.HASH_CTX, %union.HASH_CTX* %0, i64 0, i32 0, i32 0, i64 2
  %70 = bitcast i64* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = lshr i32 %71, 24
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %1, i64 17
  store i8 %73, i8* %68, align 1
  %75 = load i32, i32* %70, align 4
  %76 = lshr i32 %75, 16
  %77 = trunc i32 %76 to i8
  %78 = getelementptr inbounds i8, i8* %1, i64 18
  store i8 %77, i8* %74, align 1
  %79 = load i32, i32* %70, align 4
  %80 = lshr i32 %79, 8
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %1, i64 19
  store i8 %81, i8* %78, align 1
  %83 = load i32, i32* %70, align 4
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds i8, i8* %1, i64 20
  store i8 %84, i8* %82, align 1
  %86 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 5
  %87 = load i32, i32* %86, align 4
  %88 = lshr i32 %87, 24
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds i8, i8* %1, i64 21
  store i8 %89, i8* %85, align 1
  %91 = load i32, i32* %86, align 4
  %92 = lshr i32 %91, 16
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds i8, i8* %1, i64 22
  store i8 %93, i8* %90, align 1
  %95 = load i32, i32* %86, align 4
  %96 = lshr i32 %95, 8
  %97 = trunc i32 %96 to i8
  %98 = getelementptr inbounds i8, i8* %1, i64 23
  store i8 %97, i8* %94, align 1
  %99 = load i32, i32* %86, align 4
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds i8, i8* %1, i64 24
  store i8 %100, i8* %98, align 1
  %102 = getelementptr inbounds %union.HASH_CTX, %union.HASH_CTX* %0, i64 0, i32 0, i32 0, i64 3
  %103 = bitcast i64* %102 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = lshr i32 %104, 24
  %106 = trunc i32 %105 to i8
  %107 = getelementptr inbounds i8, i8* %1, i64 25
  store i8 %106, i8* %101, align 1
  %108 = load i32, i32* %103, align 4
  %109 = lshr i32 %108, 16
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds i8, i8* %1, i64 26
  store i8 %110, i8* %107, align 1
  %112 = load i32, i32* %103, align 4
  %113 = lshr i32 %112, 8
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %1, i64 27
  store i8 %114, i8* %111, align 1
  %116 = load i32, i32* %103, align 4
  %117 = trunc i32 %116 to i8
  %118 = getelementptr inbounds i8, i8* %1, i64 28
  store i8 %117, i8* %115, align 1
  %119 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 7
  %120 = load i32, i32* %119, align 4
  %121 = lshr i32 %120, 24
  %122 = trunc i32 %121 to i8
  %123 = getelementptr inbounds i8, i8* %1, i64 29
  store i8 %122, i8* %118, align 1
  %124 = load i32, i32* %119, align 4
  %125 = lshr i32 %124, 16
  %126 = trunc i32 %125 to i8
  %127 = getelementptr inbounds i8, i8* %1, i64 30
  store i8 %126, i8* %123, align 1
  %128 = load i32, i32* %119, align 4
  %129 = lshr i32 %128, 8
  %130 = trunc i32 %129 to i8
  %131 = getelementptr inbounds i8, i8* %1, i64 31
  store i8 %130, i8* %127, align 1
  %132 = load i32, i32* %119, align 4
  %133 = trunc i32 %132 to i8
  store i8 %133, i8* %131, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @tls1_sha256_transform(%union.HASH_CTX*, i8*) unnamed_addr #2 {
  %3 = bitcast %union.HASH_CTX* %0 to %struct.sha256_state_st*
  tail call void @SHA256_Transform(%struct.sha256_state_st* %3, i8* %1) #4
  ret void
}

declare i32 @SHA384_Init(%struct.sha512_state_st*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind ssp uwtable
define internal void @tls1_sha512_final_raw(%union.HASH_CTX* nocapture readonly, i8* nocapture) unnamed_addr #0 {
  br label %4

; <label>:3:                                      ; preds = %4
  ret void

; <label>:4:                                      ; preds = %4, %2
  %5 = phi i64 [ 0, %2 ], [ %39, %4 ]
  %6 = phi i8* [ %1, %2 ], [ %38, %4 ]
  %7 = getelementptr inbounds %union.HASH_CTX, %union.HASH_CTX* %0, i64 0, i32 0, i32 0, i64 %5
  %8 = load i64, i64* %7, align 8
  %9 = lshr i64 %8, 56
  %10 = trunc i64 %9 to i8
  %11 = getelementptr inbounds i8, i8* %6, i64 1
  store i8 %10, i8* %6, align 1
  %12 = load i64, i64* %7, align 8
  %13 = lshr i64 %12, 48
  %14 = trunc i64 %13 to i8
  %15 = getelementptr inbounds i8, i8* %6, i64 2
  store i8 %14, i8* %11, align 1
  %16 = load i64, i64* %7, align 8
  %17 = lshr i64 %16, 40
  %18 = trunc i64 %17 to i8
  %19 = getelementptr inbounds i8, i8* %6, i64 3
  store i8 %18, i8* %15, align 1
  %20 = load i64, i64* %7, align 8
  %21 = lshr i64 %20, 32
  %22 = trunc i64 %21 to i8
  %23 = getelementptr inbounds i8, i8* %6, i64 4
  store i8 %22, i8* %19, align 1
  %24 = load i64, i64* %7, align 8
  %25 = lshr i64 %24, 24
  %26 = trunc i64 %25 to i8
  %27 = getelementptr inbounds i8, i8* %6, i64 5
  store i8 %26, i8* %23, align 1
  %28 = load i64, i64* %7, align 8
  %29 = lshr i64 %28, 16
  %30 = trunc i64 %29 to i8
  %31 = getelementptr inbounds i8, i8* %6, i64 6
  store i8 %30, i8* %27, align 1
  %32 = load i64, i64* %7, align 8
  %33 = lshr i64 %32, 8
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds i8, i8* %6, i64 7
  store i8 %34, i8* %31, align 1
  %36 = load i64, i64* %7, align 8
  %37 = trunc i64 %36 to i8
  %38 = getelementptr inbounds i8, i8* %6, i64 8
  store i8 %37, i8* %35, align 1
  %39 = add nuw nsw i64 %5, 1
  %40 = icmp eq i64 %39, 8
  br i1 %40, label %3, label %4
}

; Function Attrs: nounwind ssp uwtable
define internal void @tls1_sha512_transform(%union.HASH_CTX*, i8*) unnamed_addr #2 {
  %3 = getelementptr inbounds %union.HASH_CTX, %union.HASH_CTX* %0, i64 0, i32 0
  tail call void @SHA512_Transform(%struct.sha512_state_st* %3, i8* %1) #4
  ret void
}

declare void @EVP_MD_CTX_init(%struct.env_md_ctx_st*) local_unnamed_addr #3

declare i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st*, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #3

declare i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st*) local_unnamed_addr #3

declare i32 @EVP_DigestUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #3

declare i32 @EVP_DigestFinal(%struct.env_md_ctx_st*, i8*, i32*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

declare void @SHA1_Transform(%struct.sha_state_st*, i8*) local_unnamed_addr #3

declare void @SHA256_Transform(%struct.sha256_state_st*, i8*) local_unnamed_addr #3

declare void @SHA512_Transform(%struct.sha512_state_st*, i8*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = !{void (%union.HASH_CTX*, i8*)* @tls1_sha1_transform, void (%union.HASH_CTX*, i8*)* @tls1_sha256_transform, void (%union.HASH_CTX*, i8*)* @tls1_sha512_transform}
!8 = distinct !{!8, !3}
!9 = !{void (%union.HASH_CTX*, i8*)* @tls1_sha1_final_raw, void (%union.HASH_CTX*, i8*)* @tls1_sha256_final_raw, void (%union.HASH_CTX*, i8*)* @tls1_sha512_final_raw}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
