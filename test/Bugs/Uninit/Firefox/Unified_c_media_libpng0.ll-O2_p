; ModuleID = '/home/firefox/firefox/mozilla-unified/obj-opt-x86_64-pc-linux-gnu/media/libpng/Unified_c_media_libpng0.c'
source_filename = "/home/firefox/firefox/mozilla-unified/obj-opt-x86_64-pc-linux-gnu/media/libpng/Unified_c_media_libpng0.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.png_XYZ = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.png_xy = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.png_row_info_struct = type { i32, i64, i8, i8, i8, i8 }
%struct.png_struct_def = type { [1 x %struct.__jmp_buf_tag], void (%struct.__jmp_buf_tag*, i32)*, [1 x %struct.__jmp_buf_tag]*, i64, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*, i8*, void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)*, i8*, i32, i32, i32, i32, %struct.z_stream_s, %struct.png_compression_buffer*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i8*, i8*, i64, i32, i32, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, void (%struct.png_struct_def*)*, i32, i32, i32, i32, i8*, i16**, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, i8*, i8*, i8*, i8*, i32, i32, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, {}*, {}*, i32, i32, i8*, i8, i32, i32, i32, i64, i64, i8*, i64, i8*, [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], %struct.png_colorspace }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%struct.png_compression_buffer = type { %struct.png_compression_buffer*, [1 x i8] }
%struct.png_color_struct = type { i8, i8, i8 }
%struct.png_color_8_struct = type { i8, i8, i8, i8, i8 }
%struct.png_color_16_struct = type { i8, i16, i16, i16, i16 }
%struct.png_info_def = type { i32, i32, i32, i64, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], %struct.png_colorspace, i8*, i8*, i32, i8*, %struct.png_color_16_struct, i32, i32, i32, i32, i32, i32, i32, i16, i16, i8, i8 }
%struct.png_colorspace = type { i32, %struct.png_xy, %struct.png_XYZ, i16, i16 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [33 x i8] c"Too many bytes for PNG signature\00", align 1
@MOZ_PNG_sig_cmp.png_signature = private unnamed_addr constant [8 x i8] c"\89PNG\0D\0A\1A\0A", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Potential overflow in png_zalloc()\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"1.6.35+apng\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c" but running with \00", align 1
@.str.5 = private unnamed_addr constant [42 x i8] c"Unknown freer parameter in png_data_freer\00", align 1
@.str.6 = private unnamed_addr constant [293 x i8] c"\0Alibpng version 1.6.35+apng - July 15, 2018\0ACopyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson\0ACopyright (c) 1996-1997 Andreas Dilger\0ACopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\0APortions Copyright (c) 2006-2007 Andrew Smith\0APortions Copyright (c) 2008-2018 Max Stepin\0A\00", align 1
@.str.7 = private unnamed_addr constant [46 x i8] c" libpng version 1.6.35+apng - July 15, 2018\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"unexpected zlib return code\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"unexpected end of LZ stream\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"missing LZ dictionary\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"zlib IO error\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"bad parameters to zlib\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"damaged LZ stream\00", align 1
@.str.14 = private unnamed_addr constant [20 x i8] c"insufficient memory\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"truncated\00", align 1
@.str.16 = private unnamed_addr constant [25 x i8] c"unsupported zlib version\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"unexpected zlib return\00", align 1
@.str.18 = private unnamed_addr constant [25 x i8] c"gamma value out of range\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"duplicate\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"invalid chromaticities\00", align 1
@.str.21 = private unnamed_addr constant [39 x i8] c"internal error checking chromaticities\00", align 1
@.str.22 = private unnamed_addr constant [19 x i8] c"invalid end points\00", align 1
@MOZ_PNG_cs_set_sRGB.sRGB_XYZ = internal unnamed_addr constant %struct.png_XYZ { i32 41239, i32 21264, i32 1933, i32 35758, i32 71517, i32 11919, i32 18048, i32 7219, i32 95053 }, align 4
@.str.23 = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@.str.24 = private unnamed_addr constant [30 x i8] c"invalid sRGB rendering intent\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"inconsistent rendering intents\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"duplicate sRGB information ignored\00", align 1
@sRGB_xy = internal constant %struct.png_xy { i32 64000, i32 33000, i32 30000, i32 60000, i32 15000, i32 6000, i32 31270, i32 32900 }, align 4
@.str.27 = private unnamed_addr constant [31 x i8] c"cHRM chunk does not match sRGB\00", align 1
@.str.28 = private unnamed_addr constant [27 x i8] c"exceeds application limits\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"length does not match profile\00", align 1
@.str.30 = private unnamed_addr constant [15 x i8] c"invalid length\00", align 1
@.str.31 = private unnamed_addr constant [20 x i8] c"tag count too large\00", align 1
@.str.32 = private unnamed_addr constant [25 x i8] c"invalid rendering intent\00", align 1
@.str.33 = private unnamed_addr constant [29 x i8] c"intent outside defined range\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"invalid signature\00", align 1
@D50_nCIEXYZ = internal constant [12 x i8] c"\00\00\F6\D6\00\01\00\00\00\00\D3-", align 1
@.str.35 = private unnamed_addr constant [26 x i8] c"PCS illuminant is not D50\00", align 1
@.str.36 = private unnamed_addr constant [47 x i8] c"RGB color space not permitted on grayscale PNG\00", align 1
@.str.37 = private unnamed_addr constant [42 x i8] c"Gray color space not permitted on RGB PNG\00", align 1
@.str.38 = private unnamed_addr constant [32 x i8] c"invalid ICC profile color space\00", align 1
@.str.39 = private unnamed_addr constant [38 x i8] c"invalid embedded Abstract ICC profile\00", align 1
@.str.40 = private unnamed_addr constant [40 x i8] c"unexpected DeviceLink ICC profile class\00", align 1
@.str.41 = private unnamed_addr constant [40 x i8] c"unexpected NamedColor ICC profile class\00", align 1
@.str.42 = private unnamed_addr constant [31 x i8] c"unrecognized ICC profile class\00", align 1
@.str.43 = private unnamed_addr constant [28 x i8] c"unexpected ICC PCS encoding\00", align 1
@.str.44 = private unnamed_addr constant [32 x i8] c"ICC profile tag outside profile\00", align 1
@.str.45 = private unnamed_addr constant [42 x i8] c"ICC profile tag start not a multiple of 4\00", align 1
@.str.46 = private unnamed_addr constant [28 x i8] c"Image width is zero in IHDR\00", align 1
@.str.47 = private unnamed_addr constant [28 x i8] c"Invalid image width in IHDR\00", align 1
@.str.49 = private unnamed_addr constant [39 x i8] c"Image width exceeds user limit in IHDR\00", align 1
@.str.50 = private unnamed_addr constant [29 x i8] c"Image height is zero in IHDR\00", align 1
@.str.51 = private unnamed_addr constant [29 x i8] c"Invalid image height in IHDR\00", align 1
@.str.52 = private unnamed_addr constant [40 x i8] c"Image height exceeds user limit in IHDR\00", align 1
@.str.53 = private unnamed_addr constant [26 x i8] c"Invalid bit depth in IHDR\00", align 1
@.str.54 = private unnamed_addr constant [27 x i8] c"Invalid color type in IHDR\00", align 1
@.str.55 = private unnamed_addr constant [49 x i8] c"Invalid color type/bit depth combination in IHDR\00", align 1
@.str.56 = private unnamed_addr constant [33 x i8] c"Unknown interlace method in IHDR\00", align 1
@.str.57 = private unnamed_addr constant [35 x i8] c"Unknown compression method in IHDR\00", align 1
@.str.58 = private unnamed_addr constant [30 x i8] c"Unknown filter method in IHDR\00", align 1
@.str.59 = private unnamed_addr constant [18 x i8] c"Invalid IHDR data\00", align 1
@.str.60 = private unnamed_addr constant [29 x i8] c"fixed point overflow ignored\00", align 1
@.str.61 = private unnamed_addr constant [26 x i8] c"gamma table being rebuilt\00", align 1
@MOZ_PNG_format_number.digits = internal unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 16
@MOZ_PNG_formatted_warning.valid_parameters = internal unnamed_addr constant [10 x i8] c"123456789\00", align 1
@.str.62 = private unnamed_addr constant [25 x i8] c"fixed point overflow in \00", align 1
@.str.63 = private unnamed_addr constant [31 x i8] c"Libpng jmp_buf still allocated\00", align 1
@.str.64 = private unnamed_addr constant [33 x i8] c"Application jmp_buf size changed\00", align 1
@.str.65 = private unnamed_addr constant [14 x i8] c"Out of memory\00", align 1
@.str.66 = private unnamed_addr constant [74 x i8] c"png_process_data_skip is not implemented in any current version of libpng\00", align 1
@.str.67 = private unnamed_addr constant [15 x i8] c"Not a PNG file\00", align 1
@.str.68 = private unnamed_addr constant [39 x i8] c"PNG file corrupted by ASCII conversion\00", align 1
@.str.69 = private unnamed_addr constant [18 x i8] c"out of place IDAT\00", align 1
@.str.70 = private unnamed_addr constant [18 x i8] c"out of place fdAT\00", align 1
@.str.71 = private unnamed_addr constant [28 x i8] c"missing required fcTL chunk\00", align 1
@.str.72 = private unnamed_addr constant [44 x i8] c"Number of actual frames fewer than expected\00", align 1
@.str.73 = private unnamed_addr constant [46 x i8] c"Skipped (ignored) a chunk between APNG chunks\00", align 1
@.str.74 = private unnamed_addr constant [25 x i8] c"Missing IHDR before IDAT\00", align 1
@.str.75 = private unnamed_addr constant [25 x i8] c"Missing PLTE before IDAT\00", align 1
@.str.76 = private unnamed_addr constant [21 x i8] c"Too many IDATs found\00", align 1
@.str.77 = private unnamed_addr constant [20 x i8] c"Invalid IHDR length\00", align 1
@.str.78 = private unnamed_addr constant [34 x i8] c"Potential overflow of save_buffer\00", align 1
@.str.79 = private unnamed_addr constant [36 x i8] c"Insufficient memory for save_buffer\00", align 1
@.str.80 = private unnamed_addr constant [18 x i8] c"save_buffer error\00", align 1
@.str.81 = private unnamed_addr constant [22 x i8] c"Not enough image data\00", align 1
@.str.82 = private unnamed_addr constant [48 x i8] c"Skipping (ignoring) a chunk between APNG chunks\00", align 1
@.str.83 = private unnamed_addr constant [27 x i8] c"Not enough compressed data\00", align 1
@.str.84 = private unnamed_addr constant [30 x i8] c"No IDAT data (internal error)\00", align 1
@.str.85 = private unnamed_addr constant [34 x i8] c"Truncated compressed data in IDAT\00", align 1
@.str.86 = private unnamed_addr constant [32 x i8] c"IDAT: ADLER32 checksum mismatch\00", align 1
@.str.87 = private unnamed_addr constant [28 x i8] c"Decompression error in IDAT\00", align 1
@.str.88 = private unnamed_addr constant [30 x i8] c"Extra compressed data in IDAT\00", align 1
@.str.89 = private unnamed_addr constant [31 x i8] c"Extra compression data in IDAT\00", align 1
@.str.90 = private unnamed_addr constant [26 x i8] c"bad adaptive filter value\00", align 1
@.str.91 = private unnamed_addr constant [25 x i8] c"progressive row overflow\00", align 1
@.str.92 = private unnamed_addr constant [48 x i8] c"internal progressive row size calculation error\00", align 1
@MOZ_PNG_read_push_finish_row.png_pass_ystart = internal unnamed_addr constant [7 x i8] c"\00\00\04\00\02\00\01", align 1
@MOZ_PNG_read_push_finish_row.png_pass_yinc = internal unnamed_addr constant [7 x i8] c"\08\08\08\04\04\02\02", align 1
@.str.93 = private unnamed_addr constant [53 x i8] c"attempt to png_read_frame_head() but no acTL present\00", align 1
@.str.94 = private unnamed_addr constant [41 x i8] c"png_read_frame_head(): out of place IDAT\00", align 1
@.str.95 = private unnamed_addr constant [41 x i8] c"png_read_frame_head(): out of place fdAT\00", align 1
@.str.96 = private unnamed_addr constant [58 x i8] c"png_read_update_info/png_start_read_image: duplicate call\00", align 1
@.str.97 = private unnamed_addr constant [27 x i8] c"Call to NULL read function\00", align 1
@.str.98 = private unnamed_addr constant [11 x i8] c"Read Error\00", align 1
@.str.99 = private unnamed_addr constant [68 x i8] c"Can't set both read_data_fn and write_data_fn in the same structure\00", align 1
@.str.100 = private unnamed_addr constant [41 x i8] c"Can't discard critical data on CRC error\00", align 1
@.str.101 = private unnamed_addr constant [36 x i8] c"invalid file gamma in png_set_gamma\00", align 1
@.str.102 = private unnamed_addr constant [38 x i8] c"invalid screen gamma in png_set_gamma\00", align 1
@.str.103 = private unnamed_addr constant [33 x i8] c"Palette is NULL in indexed image\00", align 1
@.str.104 = private unnamed_addr constant [16 x i8] c"NULL row buffer\00", align 1
@.str.105 = private unnamed_addr constant [18 x i8] c"Uninitialized row\00", align 1
@.str.106 = private unnamed_addr constant [34 x i8] c"PNG unsigned integer out of range\00", align 1
@.str.107 = private unnamed_addr constant [10 x i8] c"CRC error\00", align 1
@.str.108 = private unnamed_addr constant [29 x i8] c"invalid window size (libpng)\00", align 1
@.str.109 = private unnamed_addr constant [13 x i8] c"out of place\00", align 1
@.str.110 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.111 = private unnamed_addr constant [13 x i8] c"missing IHDR\00", align 1
@.str.112 = private unnamed_addr constant [25 x i8] c"ignored in grayscale PNG\00", align 1
@.str.113 = private unnamed_addr constant [19 x i8] c"tRNS must be after\00", align 1
@.str.114 = private unnamed_addr constant [15 x i8] c"invalid values\00", align 1
@.str.115 = private unnamed_addr constant [18 x i8] c"too many profiles\00", align 1
@.str.116 = private unnamed_addr constant [10 x i8] c"too short\00", align 1
@.str.117 = private unnamed_addr constant [22 x i8] c"extra compressed data\00", align 1
@.str.118 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str.119 = private unnamed_addr constant [23 x i8] c"bad compression method\00", align 1
@.str.120 = private unnamed_addr constant [12 x i8] c"bad keyword\00", align 1
@.str.121 = private unnamed_addr constant [27 x i8] c"invalid with alpha channel\00", align 1
@.str.122 = private unnamed_addr constant [25 x i8] c"Missing IHDR before acTL\00", align 1
@.str.123 = private unnamed_addr constant [32 x i8] c"Invalid acTL after IDAT skipped\00", align 1
@.str.124 = private unnamed_addr constant [23 x i8] c"Duplicate acTL skipped\00", align 1
@.str.125 = private unnamed_addr constant [33 x i8] c"acTL with invalid length skipped\00", align 1
@.str.126 = private unnamed_addr constant [25 x i8] c"Missing IHDR before fcTL\00", align 1
@.str.127 = private unnamed_addr constant [32 x i8] c"Invalid fcTL after IDAT skipped\00", align 1
@.str.128 = private unnamed_addr constant [40 x i8] c"Duplicate fcTL within one frame skipped\00", align 1
@.str.129 = private unnamed_addr constant [33 x i8] c"fcTL with invalid length skipped\00", align 1
@.str.130 = private unnamed_addr constant [47 x i8] c"fcTL for the first frame must have zero offset\00", align 1
@.str.131 = private unnamed_addr constant [55 x i8] c"size in first frame's fcTL must match the size in IHDR\00", align 1
@.str.132 = private unnamed_addr constant [20 x i8] c"ignoring fdAT chunk\00", align 1
@.str.133 = private unnamed_addr constant [33 x i8] c"invalid fcTL or fdAT chunk found\00", align 1
@.str.134 = private unnamed_addr constant [59 x i8] c"fcTL or fdAT chunk with out-of-order sequence number found\00", align 1
@.str.135 = private unnamed_addr constant [25 x i8] c"unhandled critical chunk\00", align 1
@.str.136 = private unnamed_addr constant [19 x i8] c"invalid chunk type\00", align 1
@.str.137 = private unnamed_addr constant [24 x i8] c"chunk data is too large\00", align 1
@.str.138 = private unnamed_addr constant [25 x i8] c"internal row logic error\00", align 1
@.str.139 = private unnamed_addr constant [36 x i8] c"internal row size calculation error\00", align 1
@.str.140 = private unnamed_addr constant [25 x i8] c"internal row width error\00", align 1
@MOZ_PNG_combine_row.row_mask = internal unnamed_addr constant [2 x [3 x [6 x i32]]] [[3 x [6 x i32]] [[6 x i32] [i32 16843009, i32 269488144, i32 286331153, i32 1145324612, i32 1431655765, i32 -1431655766], [6 x i32] [i32 196611, i32 50332416, i32 50529027, i32 808464432, i32 858993459, i32 -858993460], [6 x i32] [i32 15, i32 983040, i32 983055, i32 251662080, i32 252645135, i32 -252645136]], [3 x [6 x i32]] [[6 x i32] [i32 -2139062144, i32 134744072, i32 -2004318072, i32 572662306, i32 -1431655766, i32 1431655765], [6 x i32] [i32 12583104, i32 -1073692672, i32 -1061109568, i32 202116108, i32 -858993460, i32 858993459], [6 x i32] [i32 240, i32 15728640, i32 15728880, i32 -268374016, i32 -252645136, i32 252645135]]], align 16
@MOZ_PNG_combine_row.display_mask = internal unnamed_addr constant [2 x [3 x [3 x i32]]] [[3 x [3 x i32]] [[3 x i32] [i32 -252645136, i32 -858993460, i32 -1431655766], [3 x i32] [i32 -16711936, i32 -252645136, i32 -858993460], [3 x i32] [i32 -65536, i32 -16711936, i32 -252645136]], [3 x [3 x i32]] [[3 x i32] [i32 252645135, i32 858993459, i32 1431655765], [3 x i32] [i32 -16711936, i32 252645135, i32 858993459], [3 x i32] [i32 -65536, i32 -16711936, i32 252645135]]], align 16
@.str.141 = private unnamed_addr constant [35 x i8] c"invalid user transform pixel depth\00", align 1
@MOZ_PNG_do_read_int.png_pass_inc = internal unnamed_addr constant [7 x i32] [i32 8, i32 8, i32 4, i32 4, i32 2, i32 2, i32 1], align 16
@.str.142 = private unnamed_addr constant [45 x i8] c"Row has too many bytes to allocate in memory\00", align 1
@MOZ_APNG_prog_read_reset.png_pass_start = internal unnamed_addr constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@MOZ_APNG_prog_read_reset.png_pass_inc = internal unnamed_addr constant [7 x i8] c"\08\08\04\04\02\02\01", align 1
@.str.143 = private unnamed_addr constant [20 x i8] c"inflateReset failed\00", align 1
@.str.144 = private unnamed_addr constant [13 x i8] c"cHRM White X\00", align 1
@.str.145 = private unnamed_addr constant [13 x i8] c"cHRM White Y\00", align 1
@.str.146 = private unnamed_addr constant [11 x i8] c"cHRM Red X\00", align 1
@.str.147 = private unnamed_addr constant [11 x i8] c"cHRM Red Y\00", align 1
@.str.148 = private unnamed_addr constant [13 x i8] c"cHRM Green X\00", align 1
@.str.149 = private unnamed_addr constant [13 x i8] c"cHRM Green Y\00", align 1
@.str.150 = private unnamed_addr constant [12 x i8] c"cHRM Blue X\00", align 1
@.str.151 = private unnamed_addr constant [12 x i8] c"cHRM Blue Y\00", align 1
@.str.152 = private unnamed_addr constant [11 x i8] c"cHRM Red Z\00", align 1
@.str.153 = private unnamed_addr constant [13 x i8] c"cHRM Green Z\00", align 1
@.str.154 = private unnamed_addr constant [12 x i8] c"cHRM Blue Z\00", align 1
@.str.155 = private unnamed_addr constant [13 x i8] c"png_set_gAMA\00", align 1
@.str.156 = private unnamed_addr constant [23 x i8] c"Invalid palette length\00", align 1
@.str.157 = private unnamed_addr constant [16 x i8] c"Invalid palette\00", align 1
@.str.158 = private unnamed_addr constant [32 x i8] c"Invalid iCCP compression method\00", align 1
@.str.159 = private unnamed_addr constant [42 x i8] c"Insufficient memory to process iCCP chunk\00", align 1
@.str.160 = private unnamed_addr constant [44 x i8] c"Insufficient memory to process iCCP profile\00", align 1
@.str.161 = private unnamed_addr constant [50 x i8] c"tRNS chunk has out-of-range samples for bit_depth\00", align 1
@.str.162 = private unnamed_addr constant [61 x i8] c"Call to png_set_acTL() with NULL png_ptr or info_ptr ignored\00", align 1
@.str.163 = private unnamed_addr constant [50 x i8] c"Ignoring attempt to set acTL with num_frames zero\00", align 1
@.str.164 = private unnamed_addr constant [54 x i8] c"Ignoring attempt to set acTL with num_frames > 2^31-1\00", align 1
@.str.165 = private unnamed_addr constant [53 x i8] c"Ignoring attempt to set acTL with num_plays > 2^31-1\00", align 1
@.str.166 = private unnamed_addr constant [61 x i8] c"Call to png_set_fcTL() with NULL png_ptr or info_ptr ignored\00", align 1
@.str.167 = private unnamed_addr constant [73 x i8] c"PNG_BLEND_OP_OVER is meaningless and wasteful for opaque images, ignored\00", align 1
@.str.168 = private unnamed_addr constant [38 x i8] c"invalid width in fcTL (0 or > 2^31-1)\00", align 1
@.str.169 = private unnamed_addr constant [39 x i8] c"invalid height in fcTL (0 or > 2^31-1)\00", align 1
@.str.170 = private unnamed_addr constant [36 x i8] c"invalid x_offset in fcTL (> 2^31-1)\00", align 1
@.str.171 = private unnamed_addr constant [36 x i8] c"invalid y_offset in fcTL (> 2^31-1)\00", align 1
@.str.172 = private unnamed_addr constant [56 x i8] c"dimensions of a frame are greater than the ones in IHDR\00", align 1
@.str.173 = private unnamed_addr constant [27 x i8] c"invalid dispose_op in fcTL\00", align 1
@.str.174 = private unnamed_addr constant [25 x i8] c"invalid blend_op in fcTL\00", align 1
@.str.175 = private unnamed_addr constant [32 x i8] c"invalid compression buffer size\00", align 1
@.str.176 = private unnamed_addr constant [63 x i8] c"Compression buffer size cannot be changed because it is in use\00", align 1
@.str.178 = private unnamed_addr constant [50 x i8] c"Compression buffer size cannot be reduced below 6\00", align 1
@.str.179 = private unnamed_addr constant [18 x i8] c"keyword truncated\00", align 1
@.str.180 = private unnamed_addr constant [35 x i8] c"keyword \22@1\22: bad character '0x@2'\00", align 1
@.str.181 = private unnamed_addr constant [28 x i8] c"Call to NULL write function\00", align 1
@.str.182 = private unnamed_addr constant [12 x i8] c"Write Error\00", align 1
@.str.183 = private unnamed_addr constant [43 x i8] c"Valid palette required for paletted images\00", align 1
@.str.184 = private unnamed_addr constant [27 x i8] c"No IDATs written into file\00", align 1
@.str.185 = private unnamed_addr constant [26 x i8] c"Not enough frames written\00", align 1
@.str.186 = private unnamed_addr constant [53 x i8] c"png_write_info was never called before png_write_row\00", align 1
@.str.187 = private unnamed_addr constant [37 x i8] c"internal write transform logic error\00", align 1
@.str.188 = private unnamed_addr constant [32 x i8] c"Unknown row filter for method 0\00", align 1
@.str.189 = private unnamed_addr constant [29 x i8] c"Unknown custom filter method\00", align 1
@.str.190 = private unnamed_addr constant [37 x i8] c"png_write_frame_head(): acTL not set\00", align 1
@.str.191 = private unnamed_addr constant [38 x i8] c"Invalid bit depth for grayscale image\00", align 1
@.str.192 = private unnamed_addr constant [32 x i8] c"Invalid bit depth for RGB image\00", align 1
@.str.193 = private unnamed_addr constant [37 x i8] c"Invalid bit depth for paletted image\00", align 1
@.str.194 = private unnamed_addr constant [44 x i8] c"Invalid bit depth for grayscale+alpha image\00", align 1
@.str.195 = private unnamed_addr constant [33 x i8] c"Invalid bit depth for RGBA image\00", align 1
@.str.196 = private unnamed_addr constant [35 x i8] c"Invalid image color type specified\00", align 1
@.str.197 = private unnamed_addr constant [35 x i8] c"Invalid compression type specified\00", align 1
@.str.198 = private unnamed_addr constant [30 x i8] c"Invalid filter type specified\00", align 1
@.str.199 = private unnamed_addr constant [36 x i8] c"Invalid number of colors in palette\00", align 1
@.str.200 = private unnamed_addr constant [56 x i8] c"Ignoring request to write a PLTE chunk in grayscale PNG\00", align 1
@.str.201 = private unnamed_addr constant [35 x i8] c"Z_OK on Z_FINISH with output space\00", align 1
@.str.202 = private unnamed_addr constant [47 x i8] c"Invalid number of transparent colors specified\00", align 1
@.str.203 = private unnamed_addr constant [64 x i8] c"Ignoring attempt to write tRNS chunk out-of-range for bit_depth\00", align 1
@.str.204 = private unnamed_addr constant [64 x i8] c"Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8\00", align 1
@.str.205 = private unnamed_addr constant [39 x i8] c"Can't write tRNS with an alpha channel\00", align 1
@.str.206 = private unnamed_addr constant [47 x i8] c"x and/or y offset for the first frame aren't 0\00", align 1
@.str.207 = private unnamed_addr constant [75 x i8] c"width and/or height in the first frame's fcTL don't match the ones in IHDR\00", align 1
@.str.208 = private unnamed_addr constant [62 x i8] c"width and/or height for a frame greater than the ones in IHDR\00", align 1
@.str.209 = private unnamed_addr constant [32 x i8] c"gamma value does not match sRGB\00", align 1
@.str.210 = private unnamed_addr constant [43 x i8] c"gamma value does not match libpng estimate\00", align 1
@.str.211 = private unnamed_addr constant [28 x i8] c"inconsistent chromaticities\00", align 1
@MOZ_PNG_digit = internal unnamed_addr constant [16 x i8] c"0123456789ABCDEF", align 16
@.str.215 = private unnamed_addr constant [59 x i8] c"invalid after png_start_read_image or png_read_update_info\00", align 1
@.str.217 = private unnamed_addr constant [12 x i8] c"gamma value\00", align 1
@.str.219 = private unnamed_addr constant [15 x i8] c" using zstream\00", align 1
@.str.220 = private unnamed_addr constant [7 x i8] c"1.2.11\00", align 1
@.str.221 = private unnamed_addr constant [18 x i8] c"zstream unclaimed\00", align 1
@.str.223 = private unnamed_addr constant [27 x i8] c"length exceeds PNG maximum\00", align 1
@.str.224 = private unnamed_addr constant [28 x i8] c"deflateEnd failed (ignored)\00", align 1
@switch.table.MOZ_PNG_compress_IDAT.225 = private unnamed_addr constant [10 x i8*] [i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0)]

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_filt_row_s3_sse2(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readnone) #0 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 3
  br i1 %6, label %7, label %26

; <label>:7:                                      ; preds = %3, %7
  %8 = phi <16 x i8> [ %15, %7 ], [ zeroinitializer, %3 ]
  %9 = phi i64 [ %24, %7 ], [ %5, %3 ]
  %10 = phi i8* [ %23, %7 ], [ %1, %3 ]
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %12, i32 0
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = add <16 x i8> %8, %14
  %16 = bitcast <16 x i8> %15 to <4 x i32>
  %17 = extractelement <4 x i32> %16, i32 0
  %18 = bitcast i8* %10 to i16*
  %19 = getelementptr inbounds i8, i8* %10, i64 2
  %20 = trunc i32 %17 to i16
  store i16 %20, i16* %18, align 2
  %21 = lshr i32 %17, 16
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %19, align 1
  %23 = getelementptr inbounds i8, i8* %10, i64 3
  %24 = add i64 %9, -3
  %25 = icmp ugt i64 %24, 3
  br i1 %25, label %7, label %28

; <label>:26:                                     ; preds = %3
  %27 = icmp eq i64 %5, 0
  br i1 %27, label %47, label %28

; <label>:28:                                     ; preds = %7, %26
  %29 = phi <16 x i8> [ zeroinitializer, %26 ], [ %15, %7 ]
  %30 = phi i8* [ %1, %26 ], [ %23, %7 ]
  %31 = bitcast i8* %30 to i16*
  %32 = getelementptr inbounds i8, i8* %30, i64 2
  %33 = load i16, i16* %31, align 2
  %34 = zext i16 %33 to i32
  %35 = load i8, i8* %32, align 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 16
  %38 = or i32 %37, %34
  %39 = insertelement <4 x i32> undef, i32 %38, i32 0
  %40 = bitcast <4 x i32> %39 to <16 x i8>
  %41 = add <16 x i8> %29, %40
  %42 = bitcast <16 x i8> %41 to <4 x i32>
  %43 = extractelement <4 x i32> %42, i32 0
  %44 = trunc i32 %43 to i16
  store i16 %44, i16* %31, align 2
  %45 = lshr i32 %43, 16
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %32, align 1
  br label %47

; <label>:47:                                     ; preds = %26, %28
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_filt_row_s4_sse2(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readnone) #0 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 4
  %7 = icmp ugt i64 %6, 4
  br i1 %7, label %8, label %45

; <label>:8:                                      ; preds = %3
  %9 = add i64 %5, -1
  %10 = and i64 %9, 4
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

; <label>:12:                                     ; preds = %8
  %13 = bitcast i8* %1 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %14, i32 0
  %16 = bitcast <4 x i32> %15 to <16 x i8>
  %17 = getelementptr inbounds i8, i8* %1, i64 4
  br label %18

; <label>:18:                                     ; preds = %12, %8
  %19 = phi <16 x i8> [ zeroinitializer, %8 ], [ %16, %12 ]
  %20 = phi i8* [ %1, %8 ], [ %17, %12 ]
  %21 = phi i64 [ %6, %8 ], [ %5, %12 ]
  %22 = icmp ult i64 %9, 4
  br i1 %22, label %45, label %23

; <label>:23:                                     ; preds = %18, %23
  %24 = phi <16 x i8> [ %39, %23 ], [ %19, %18 ]
  %25 = phi i8* [ %42, %23 ], [ %20, %18 ]
  %26 = phi i64 [ %43, %23 ], [ %21, %18 ]
  %27 = bitcast i8* %25 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %28, i32 0
  %30 = bitcast <4 x i32> %29 to <16 x i8>
  %31 = add <16 x i8> %24, %30
  %32 = bitcast <16 x i8> %31 to <4 x i32>
  %33 = extractelement <4 x i32> %32, i32 0
  store i32 %33, i32* %27, align 4
  %34 = getelementptr inbounds i8, i8* %25, i64 4
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %36, i32 0
  %38 = bitcast <4 x i32> %37 to <16 x i8>
  %39 = add <16 x i8> %31, %38
  %40 = bitcast <16 x i8> %39 to <4 x i32>
  %41 = extractelement <4 x i32> %40, i32 0
  store i32 %41, i32* %35, align 4
  %42 = getelementptr inbounds i8, i8* %25, i64 8
  %43 = add i64 %26, -8
  %44 = icmp ugt i64 %43, 4
  br i1 %44, label %23, label %45

; <label>:45:                                     ; preds = %18, %23, %3
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_filt_row_a3_sse2(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readonly) #0 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 3
  br i1 %6, label %7, label %48

; <label>:7:                                      ; preds = %3, %7
  %8 = phi i8* [ %42, %7 ], [ %1, %3 ]
  %9 = phi i8* [ %41, %7 ], [ %2, %3 ]
  %10 = phi <2 x i64> [ %33, %7 ], [ zeroinitializer, %3 ]
  %11 = phi <16 x i8> [ %32, %7 ], [ zeroinitializer, %3 ]
  %12 = phi i64 [ %43, %7 ], [ %5, %3 ]
  %13 = bitcast i8* %9 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %14, i32 0
  %16 = bitcast <4 x i32> %15 to <2 x i64>
  %17 = bitcast i8* %8 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %18, i32 0
  %20 = zext <16 x i8> %11 to <16 x i16>
  %21 = bitcast <4 x i32> %15 to <16 x i8>
  %22 = zext <16 x i8> %21 to <16 x i16>
  %23 = add nuw nsw <16 x i16> %20, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %24 = add nuw nsw <16 x i16> %23, %22
  %25 = lshr <16 x i16> %24, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %26 = trunc <16 x i16> %25 to <16 x i8>
  %27 = xor <2 x i64> %10, %16
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = and <16 x i8> %28, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %30 = sub <16 x i8> %26, %29
  %31 = bitcast <4 x i32> %19 to <16 x i8>
  %32 = add <16 x i8> %30, %31
  %33 = bitcast <16 x i8> %32 to <2 x i64>
  %34 = bitcast <16 x i8> %32 to <4 x i32>
  %35 = extractelement <4 x i32> %34, i32 0
  %36 = bitcast i8* %8 to i16*
  %37 = getelementptr inbounds i8, i8* %8, i64 2
  %38 = trunc i32 %35 to i16
  store i16 %38, i16* %36, align 2
  %39 = lshr i32 %35, 16
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %37, align 1
  %41 = getelementptr inbounds i8, i8* %9, i64 3
  %42 = getelementptr inbounds i8, i8* %8, i64 3
  %43 = add i64 %12, -3
  %44 = icmp ugt i64 %43, 3
  br i1 %44, label %7, label %45

; <label>:45:                                     ; preds = %7
  %46 = zext <16 x i8> %32 to <16 x i16>
  %47 = add nuw nsw <16 x i16> %46, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %50

; <label>:48:                                     ; preds = %3
  %49 = icmp eq i64 %5, 0
  br i1 %49, label %90, label %50

; <label>:50:                                     ; preds = %45, %48
  %51 = phi i8* [ %42, %45 ], [ %1, %48 ]
  %52 = phi i8* [ %41, %45 ], [ %2, %48 ]
  %53 = phi <2 x i64> [ %33, %45 ], [ zeroinitializer, %48 ]
  %54 = phi <16 x i16> [ %47, %45 ], [ <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, %48 ]
  %55 = bitcast i8* %52 to i16*
  %56 = getelementptr inbounds i8, i8* %52, i64 2
  %57 = load i16, i16* %55, align 2
  %58 = zext i16 %57 to i32
  %59 = load i8, i8* %56, align 1
  %60 = zext i8 %59 to i32
  %61 = shl nuw nsw i32 %60, 16
  %62 = or i32 %61, %58
  %63 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %62, i32 0
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = bitcast i8* %51 to i16*
  %66 = getelementptr inbounds i8, i8* %51, i64 2
  %67 = load i16, i16* %65, align 2
  %68 = zext i16 %67 to i32
  %69 = load i8, i8* %66, align 1
  %70 = zext i8 %69 to i32
  %71 = shl nuw nsw i32 %70, 16
  %72 = or i32 %71, %68
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = bitcast <4 x i32> %63 to <16 x i8>
  %75 = zext <16 x i8> %74 to <16 x i16>
  %76 = add nuw nsw <16 x i16> %54, %75
  %77 = lshr <16 x i16> %76, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %78 = trunc <16 x i16> %77 to <16 x i8>
  %79 = xor <2 x i64> %53, %64
  %80 = bitcast <2 x i64> %79 to <16 x i8>
  %81 = and <16 x i8> %80, <i8 1, i8 1, i8 1, i8 1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>
  %82 = bitcast <4 x i32> %73 to <16 x i8>
  %83 = sub <16 x i8> %82, %81
  %84 = add <16 x i8> %83, %78
  %85 = bitcast <16 x i8> %84 to <4 x i32>
  %86 = extractelement <4 x i32> %85, i32 0
  %87 = trunc i32 %86 to i16
  store i16 %87, i16* %65, align 2
  %88 = lshr i32 %86, 16
  %89 = trunc i32 %88 to i8
  store i8 %89, i8* %66, align 1
  br label %90

; <label>:90:                                     ; preds = %48, %50
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_filt_row_a4_sse2(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readonly) #0 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 4
  %7 = icmp ugt i64 %6, 4
  br i1 %7, label %8, label %41

; <label>:8:                                      ; preds = %3, %8
  %9 = phi i8* [ %38, %8 ], [ %1, %3 ]
  %10 = phi <2 x i64> [ %34, %8 ], [ zeroinitializer, %3 ]
  %11 = phi <16 x i8> [ %33, %8 ], [ zeroinitializer, %3 ]
  %12 = phi i8* [ %37, %8 ], [ %2, %3 ]
  %13 = phi i64 [ %39, %8 ], [ %6, %3 ]
  %14 = bitcast i8* %12 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = bitcast i8* %9 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %19, i32 0
  %21 = zext <16 x i8> %11 to <16 x i16>
  %22 = bitcast <4 x i32> %16 to <16 x i8>
  %23 = zext <16 x i8> %22 to <16 x i16>
  %24 = add nuw nsw <16 x i16> %21, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %25 = add nuw nsw <16 x i16> %24, %23
  %26 = lshr <16 x i16> %25, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %27 = trunc <16 x i16> %26 to <16 x i8>
  %28 = xor <2 x i64> %10, %17
  %29 = bitcast <2 x i64> %28 to <16 x i8>
  %30 = and <16 x i8> %29, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %31 = sub <16 x i8> %27, %30
  %32 = bitcast <4 x i32> %20 to <16 x i8>
  %33 = add <16 x i8> %31, %32
  %34 = bitcast <16 x i8> %33 to <2 x i64>
  %35 = bitcast <16 x i8> %33 to <4 x i32>
  %36 = extractelement <4 x i32> %35, i32 0
  store i32 %36, i32* %18, align 4
  %37 = getelementptr inbounds i8, i8* %12, i64 4
  %38 = getelementptr inbounds i8, i8* %9, i64 4
  %39 = add i64 %13, -4
  %40 = icmp ugt i64 %39, 4
  br i1 %40, label %8, label %41

; <label>:41:                                     ; preds = %8, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_filt_row_p3_sse2(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readonly) #2 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 3
  br i1 %6, label %7, label %73

; <label>:7:                                      ; preds = %3, %7
  %8 = phi i8* [ %70, %7 ], [ %1, %3 ]
  %9 = phi i8* [ %69, %7 ], [ %2, %3 ]
  %10 = phi i64 [ %71, %7 ], [ %5, %3 ]
  %11 = phi <2 x i64> [ %18, %7 ], [ zeroinitializer, %3 ]
  %12 = phi <2 x i64> [ %59, %7 ], [ zeroinitializer, %3 ]
  %13 = bitcast i8* %9 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %14, i32 0
  %16 = bitcast <4 x i32> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = bitcast <16 x i8> %17 to <2 x i64>
  %19 = bitcast i8* %8 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = bitcast <4 x i32> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = bitcast <16 x i8> %17 to <8 x i16>
  %25 = bitcast <2 x i64> %11 to <8 x i16>
  %26 = sub <8 x i16> %24, %25
  %27 = bitcast <2 x i64> %12 to <8 x i16>
  %28 = sub <8 x i16> %27, %25
  %29 = add <8 x i16> %26, %28
  %30 = icmp slt <8 x i16> %26, zeroinitializer
  %31 = sub <8 x i16> zeroinitializer, %26
  %32 = select <8 x i1> %30, <8 x i16> %31, <8 x i16> %26
  %33 = icmp slt <8 x i16> %28, zeroinitializer
  %34 = sub <8 x i16> zeroinitializer, %28
  %35 = select <8 x i1> %33, <8 x i16> %34, <8 x i16> %28
  %36 = icmp slt <8 x i16> %29, zeroinitializer
  %37 = sub <8 x i16> zeroinitializer, %29
  %38 = select <8 x i1> %36, <8 x i16> %37, <8 x i16> %29
  %39 = icmp slt <8 x i16> %32, %35
  %40 = select <8 x i1> %39, <8 x i16> %32, <8 x i16> %35
  %41 = icmp slt <8 x i16> %38, %40
  %42 = select <8 x i1> %41, <8 x i16> %38, <8 x i16> %40
  %43 = icmp eq <8 x i16> %42, %32
  %44 = sext <8 x i1> %43 to <8 x i16>
  %45 = bitcast <8 x i16> %44 to <2 x i64>
  %46 = icmp eq <8 x i16> %42, %35
  %47 = sext <8 x i1> %46 to <8 x i16>
  %48 = bitcast <8 x i16> %47 to <2 x i64>
  %49 = and <2 x i64> %48, %18
  %50 = xor <2 x i64> %48, <i64 -1, i64 -1>
  %51 = and <2 x i64> %11, %50
  %52 = or <2 x i64> %51, %49
  %53 = and <2 x i64> %12, %45
  %54 = xor <2 x i64> %45, <i64 -1, i64 -1>
  %55 = and <2 x i64> %52, %54
  %56 = or <2 x i64> %55, %53
  %57 = bitcast <2 x i64> %56 to <16 x i8>
  %58 = add <16 x i8> %23, %57
  %59 = bitcast <16 x i8> %58 to <2 x i64>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> undef) #18
  %62 = bitcast <16 x i8> %61 to <4 x i32>
  %63 = extractelement <4 x i32> %62, i32 0
  %64 = bitcast i8* %8 to i16*
  %65 = getelementptr inbounds i8, i8* %8, i64 2
  %66 = trunc i32 %63 to i16
  store i16 %66, i16* %64, align 2
  %67 = lshr i32 %63, 16
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %65, align 1
  %69 = getelementptr inbounds i8, i8* %9, i64 3
  %70 = getelementptr inbounds i8, i8* %8, i64 3
  %71 = add i64 %10, -3
  %72 = icmp ugt i64 %71, 3
  br i1 %72, label %7, label %75

; <label>:73:                                     ; preds = %3
  %74 = icmp eq i64 %5, 0
  br i1 %74, label %145, label %75

; <label>:75:                                     ; preds = %7, %73
  %76 = phi i8* [ %1, %73 ], [ %70, %7 ]
  %77 = phi i8* [ %2, %73 ], [ %69, %7 ]
  %78 = phi <2 x i64> [ zeroinitializer, %73 ], [ %18, %7 ]
  %79 = phi <2 x i64> [ zeroinitializer, %73 ], [ %59, %7 ]
  %80 = bitcast i8* %77 to i16*
  %81 = getelementptr inbounds i8, i8* %77, i64 2
  %82 = load i16, i16* %80, align 2
  %83 = zext i16 %82 to i32
  %84 = load i8, i8* %81, align 1
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 16
  %87 = or i32 %86, %83
  %88 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %87, i32 0
  %89 = bitcast <4 x i32> %88 to <16 x i8>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %91 = bitcast <16 x i8> %90 to <2 x i64>
  %92 = bitcast i8* %76 to i16*
  %93 = getelementptr inbounds i8, i8* %76, i64 2
  %94 = load i16, i16* %92, align 2
  %95 = zext i16 %94 to i32
  %96 = load i8, i8* %93, align 1
  %97 = zext i8 %96 to i32
  %98 = shl nuw nsw i32 %97, 16
  %99 = or i32 %98, %95
  %100 = insertelement <4 x i32> undef, i32 %99, i32 0
  %101 = bitcast <4 x i32> %100 to <16 x i8>
  %102 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %103 = bitcast <16 x i8> %90 to <8 x i16>
  %104 = bitcast <2 x i64> %78 to <8 x i16>
  %105 = sub <8 x i16> %103, %104
  %106 = bitcast <2 x i64> %79 to <8 x i16>
  %107 = sub <8 x i16> %106, %104
  %108 = add <8 x i16> %105, %107
  %109 = icmp slt <8 x i16> %105, zeroinitializer
  %110 = sub <8 x i16> zeroinitializer, %105
  %111 = select <8 x i1> %109, <8 x i16> %110, <8 x i16> %105
  %112 = icmp slt <8 x i16> %107, zeroinitializer
  %113 = sub <8 x i16> zeroinitializer, %107
  %114 = select <8 x i1> %112, <8 x i16> %113, <8 x i16> %107
  %115 = icmp slt <8 x i16> %108, zeroinitializer
  %116 = sub <8 x i16> zeroinitializer, %108
  %117 = select <8 x i1> %115, <8 x i16> %116, <8 x i16> %108
  %118 = icmp slt <8 x i16> %111, %114
  %119 = select <8 x i1> %118, <8 x i16> %111, <8 x i16> %114
  %120 = icmp slt <8 x i16> %117, %119
  %121 = select <8 x i1> %120, <8 x i16> %117, <8 x i16> %119
  %122 = icmp eq <8 x i16> %121, %111
  %123 = sext <8 x i1> %122 to <8 x i16>
  %124 = bitcast <8 x i16> %123 to <2 x i64>
  %125 = icmp eq <8 x i16> %121, %114
  %126 = sext <8 x i1> %125 to <8 x i16>
  %127 = bitcast <8 x i16> %126 to <2 x i64>
  %128 = and <2 x i64> %127, %91
  %129 = xor <2 x i64> %127, <i64 -1, i64 undef>
  %130 = and <2 x i64> %129, %78
  %131 = or <2 x i64> %130, %128
  %132 = and <2 x i64> %79, %124
  %133 = xor <2 x i64> %124, <i64 -1, i64 undef>
  %134 = and <2 x i64> %131, %133
  %135 = or <2 x i64> %134, %132
  %136 = bitcast <2 x i64> %135 to <16 x i8>
  %137 = add <16 x i8> %102, %136
  %138 = bitcast <16 x i8> %137 to <8 x i16>
  %139 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %138, <8 x i16> undef) #18
  %140 = bitcast <16 x i8> %139 to <4 x i32>
  %141 = extractelement <4 x i32> %140, i32 0
  %142 = trunc i32 %141 to i16
  store i16 %142, i16* %92, align 2
  %143 = lshr i32 %141, 16
  %144 = trunc i32 %143 to i8
  store i8 %144, i8* %93, align 1
  br label %145

; <label>:145:                                    ; preds = %73, %75
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_filt_row_p4_sse2(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readonly) #2 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 4
  %7 = icmp ugt i64 %6, 4
  br i1 %7, label %8, label %69

; <label>:8:                                      ; preds = %3, %8
  %9 = phi <2 x i64> [ %60, %8 ], [ zeroinitializer, %3 ]
  %10 = phi i8* [ %66, %8 ], [ %1, %3 ]
  %11 = phi <2 x i64> [ %19, %8 ], [ zeroinitializer, %3 ]
  %12 = phi i8* [ %65, %8 ], [ %2, %3 ]
  %13 = phi i64 [ %67, %8 ], [ %6, %3 ]
  %14 = bitcast i8* %12 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %15, i32 0
  %17 = bitcast <4 x i32> %16 to <16 x i8>
  %18 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = bitcast <16 x i8> %18 to <2 x i64>
  %20 = bitcast i8* %10 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %21, i32 0
  %23 = bitcast <4 x i32> %22 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast <16 x i8> %18 to <8 x i16>
  %26 = bitcast <2 x i64> %11 to <8 x i16>
  %27 = sub <8 x i16> %25, %26
  %28 = bitcast <2 x i64> %9 to <8 x i16>
  %29 = sub <8 x i16> %28, %26
  %30 = add <8 x i16> %27, %29
  %31 = icmp slt <8 x i16> %27, zeroinitializer
  %32 = sub <8 x i16> zeroinitializer, %27
  %33 = select <8 x i1> %31, <8 x i16> %32, <8 x i16> %27
  %34 = icmp slt <8 x i16> %29, zeroinitializer
  %35 = sub <8 x i16> zeroinitializer, %29
  %36 = select <8 x i1> %34, <8 x i16> %35, <8 x i16> %29
  %37 = icmp slt <8 x i16> %30, zeroinitializer
  %38 = sub <8 x i16> zeroinitializer, %30
  %39 = select <8 x i1> %37, <8 x i16> %38, <8 x i16> %30
  %40 = icmp slt <8 x i16> %33, %36
  %41 = select <8 x i1> %40, <8 x i16> %33, <8 x i16> %36
  %42 = icmp slt <8 x i16> %39, %41
  %43 = select <8 x i1> %42, <8 x i16> %39, <8 x i16> %41
  %44 = icmp eq <8 x i16> %43, %33
  %45 = sext <8 x i1> %44 to <8 x i16>
  %46 = bitcast <8 x i16> %45 to <2 x i64>
  %47 = icmp eq <8 x i16> %43, %36
  %48 = sext <8 x i1> %47 to <8 x i16>
  %49 = bitcast <8 x i16> %48 to <2 x i64>
  %50 = and <2 x i64> %49, %19
  %51 = xor <2 x i64> %49, <i64 -1, i64 -1>
  %52 = and <2 x i64> %11, %51
  %53 = or <2 x i64> %52, %50
  %54 = and <2 x i64> %9, %46
  %55 = xor <2 x i64> %46, <i64 -1, i64 -1>
  %56 = and <2 x i64> %53, %55
  %57 = or <2 x i64> %56, %54
  %58 = bitcast <2 x i64> %57 to <16 x i8>
  %59 = add <16 x i8> %24, %58
  %60 = bitcast <16 x i8> %59 to <2 x i64>
  %61 = bitcast <16 x i8> %59 to <8 x i16>
  %62 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %61, <8 x i16> undef) #18
  %63 = bitcast <16 x i8> %62 to <4 x i32>
  %64 = extractelement <4 x i32> %63, i32 0
  store i32 %64, i32* %20, align 4
  %65 = getelementptr inbounds i8, i8* %12, i64 4
  %66 = getelementptr inbounds i8, i8* %10, i64 4
  %67 = add i64 %13, -4
  %68 = icmp ugt i64 %67, 4
  br i1 %68, label %8, label %69

; <label>:69:                                     ; preds = %8, %3
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_init_filt_func_sse2(%struct.png_struct_def* nocapture, i32) local_unnamed_addr #3 {
  switch i32 %1, label %10 [
    i32 3, label %4
    i32 4, label %3
  ]

; <label>:3:                                      ; preds = %2
  br label %4

; <label>:4:                                      ; preds = %2, %3
  %5 = phi void (%struct.png_row_info_struct*, i8*, i8*)* [ @MOZ_PNG_read_filt_row_s4_sse2, %3 ], [ @MOZ_PNG_read_filt_row_s3_sse2, %2 ]
  %6 = phi <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> [ <void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_a4_sse2, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p4_sse2>, %3 ], [ <void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_a3_sse2, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p3_sse2>, %2 ]
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 0
  store void (%struct.png_row_info_struct*, i8*, i8*)* %5, void (%struct.png_row_info_struct*, i8*, i8*)** %7, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 2
  %9 = bitcast void (%struct.png_row_info_struct*, i8*, i8*)** %8 to <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>*
  store <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> %6, <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>* %9, align 8
  br label %10

; <label>:10:                                     ; preds = %4, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_sig_b(%struct.png_struct_def* noalias, i32) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %12, label %4

; <label>:4:                                      ; preds = %2
  %5 = icmp sgt i32 %1, 0
  %6 = select i1 %5, i32 %1, i32 0
  %7 = icmp ugt i32 %6, 8
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %4
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0)) #19
  unreachable

; <label>:9:                                      ; preds = %4
  %10 = trunc i32 %6 to i8
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  store i8 %10, i8* %11, align 1
  br label %12

; <label>:12:                                     ; preds = %2, %9
  ret void
}

; Function Attrs: noreturn nounwind sspstrong uwtable
define hidden void @png_error(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #5 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %9, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 4
  %6 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %5, align 8
  %7 = icmp eq void (%struct.png_struct_def*, i8*)* %6, null
  br i1 %7, label %9, label %8

; <label>:8:                                      ; preds = %4
  tail call void %6(%struct.png_struct_def* nonnull %0, i8* %1) #18
  br label %9

; <label>:9:                                      ; preds = %4, %2, %8
  tail call fastcc void @MOZ_PNG_def_error(%struct.png_struct_def* %0) #19
  unreachable
}

; Function Attrs: nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_PNG_sig_cmp(i8* nocapture readonly, i64, i64) local_unnamed_addr #6 {
  %4 = icmp ugt i64 %2, 8
  br i1 %4, label %7, label %5

; <label>:5:                                      ; preds = %3
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %18, label %7

; <label>:7:                                      ; preds = %3, %5
  %8 = phi i64 [ %2, %5 ], [ 8, %3 ]
  %9 = icmp ugt i64 %1, 7
  br i1 %9, label %18, label %10

; <label>:10:                                     ; preds = %7
  %11 = add i64 %8, %1
  %12 = icmp ugt i64 %11, 8
  %13 = sub i64 8, %1
  %14 = select i1 %12, i64 %13, i64 %8
  %15 = getelementptr inbounds i8, i8* %0, i64 %1
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* @MOZ_PNG_sig_cmp.png_signature, i64 0, i64 %1
  %17 = tail call i32 @memcmp(i8* %15, i8* nonnull %16, i64 %14) #20
  br label %18

; <label>:18:                                     ; preds = %7, %5, %10
  %19 = phi i32 [ %17, %10 ], [ -1, %5 ], [ -1, %7 ]
  ret i32 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #1

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias i8* @MOZ_PNG_zalloc(i8*, i32, i32) #4 {
  %4 = zext i32 %2 to i64
  %5 = icmp eq i8* %0, null
  br i1 %5, label %25, label %6

; <label>:6:                                      ; preds = %3
  %7 = zext i32 %1 to i64
  %8 = udiv i64 -1, %4
  %9 = icmp ugt i64 %8, %7
  br i1 %9, label %12, label %10

; <label>:10:                                     ; preds = %6
  %11 = bitcast i8* %0 to %struct.png_struct_def*
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* %11, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  br label %25

; <label>:12:                                     ; preds = %6
  %13 = mul nuw i64 %4, %7
  %14 = bitcast i8* %0 to %struct.png_struct_def*
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %19, label %16

; <label>:16:                                     ; preds = %12
  %17 = tail call noalias i8* @malloc(i64 %13) #18
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %25

; <label>:19:                                     ; preds = %16, %12
  %20 = getelementptr inbounds i8, i8* %0, i64 232
  %21 = bitcast i8* %20 to void (%struct.png_struct_def*, i8*)**
  %22 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %21, align 8, !alias.scope !3
  %23 = icmp eq void (%struct.png_struct_def*, i8*)* %22, null
  br i1 %23, label %25, label %24

; <label>:24:                                     ; preds = %19
  tail call void %22(%struct.png_struct_def* nonnull %14, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %25

; <label>:25:                                     ; preds = %24, %19, %16, %3, %10
  %26 = phi i8* [ null, %10 ], [ null, %3 ], [ %17, %16 ], [ null, %19 ], [ null, %24 ]
  ret i8* %26
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_warning(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %22, label %4

; <label>:4:                                      ; preds = %2
  %5 = load i8, i8* %1, align 1
  %6 = icmp eq i8 %5, 35
  br i1 %6, label %7, label %15

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 32
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds i8, i8* %1, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 32
  br i1 %14, label %15, label %23

; <label>:15:                                     ; preds = %67, %7, %11, %23, %27, %31, %35, %39, %43, %47, %51, %55, %59, %63, %4
  %16 = phi i64 [ 0, %4 ], [ 1, %7 ], [ 2, %11 ], [ 3, %23 ], [ 4, %27 ], [ 5, %31 ], [ 6, %35 ], [ 7, %39 ], [ 8, %43 ], [ 9, %47 ], [ 10, %51 ], [ 11, %55 ], [ 12, %59 ], [ 13, %63 ], [ %71, %67 ]
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %18 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %17, align 8
  %19 = icmp eq void (%struct.png_struct_def*, i8*)* %18, null
  br i1 %19, label %22, label %20

; <label>:20:                                     ; preds = %15
  %21 = getelementptr inbounds i8, i8* %1, i64 %16
  tail call void %18(%struct.png_struct_def* nonnull %0, i8* %21) #18
  br label %22

; <label>:22:                                     ; preds = %2, %15, %20
  ret void

; <label>:23:                                     ; preds = %11
  %24 = getelementptr inbounds i8, i8* %1, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 32
  br i1 %26, label %15, label %27

; <label>:27:                                     ; preds = %23
  %28 = getelementptr inbounds i8, i8* %1, i64 4
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 32
  br i1 %30, label %15, label %31

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds i8, i8* %1, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 32
  br i1 %34, label %15, label %35

; <label>:35:                                     ; preds = %31
  %36 = getelementptr inbounds i8, i8* %1, i64 6
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 32
  br i1 %38, label %15, label %39

; <label>:39:                                     ; preds = %35
  %40 = getelementptr inbounds i8, i8* %1, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 32
  br i1 %42, label %15, label %43

; <label>:43:                                     ; preds = %39
  %44 = getelementptr inbounds i8, i8* %1, i64 8
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  br i1 %46, label %15, label %47

; <label>:47:                                     ; preds = %43
  %48 = getelementptr inbounds i8, i8* %1, i64 9
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 32
  br i1 %50, label %15, label %51

; <label>:51:                                     ; preds = %47
  %52 = getelementptr inbounds i8, i8* %1, i64 10
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, 32
  br i1 %54, label %15, label %55

; <label>:55:                                     ; preds = %51
  %56 = getelementptr inbounds i8, i8* %1, i64 11
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 32
  br i1 %58, label %15, label %59

; <label>:59:                                     ; preds = %55
  %60 = getelementptr inbounds i8, i8* %1, i64 12
  %61 = load i8, i8* %60, align 1
  %62 = icmp eq i8 %61, 32
  br i1 %62, label %15, label %63

; <label>:63:                                     ; preds = %59
  %64 = getelementptr inbounds i8, i8* %1, i64 13
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, 32
  br i1 %66, label %15, label %67

; <label>:67:                                     ; preds = %63
  %68 = getelementptr inbounds i8, i8* %1, i64 14
  %69 = load i8, i8* %68, align 1
  %70 = icmp eq i8 %69, 32
  %71 = select i1 %70, i64 14, i64 15
  br label %15
}

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias i8* @MOZ_PNG_malloc_warn(%struct.png_struct_def* noalias, i64) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %14, label %4

; <label>:4:                                      ; preds = %2
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %9, label %6

; <label>:6:                                      ; preds = %4
  %7 = tail call noalias i8* @malloc(i64 %1) #18
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %14

; <label>:9:                                      ; preds = %4, %6
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %11 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %10, align 8, !alias.scope !8
  %12 = icmp eq void (%struct.png_struct_def*, i8*)* %11, null
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %9
  tail call void %11(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %14

; <label>:14:                                     ; preds = %13, %9, %2, %6
  %15 = phi i8* [ %7, %6 ], [ null, %2 ], [ null, %9 ], [ null, %13 ]
  ret i8* %15
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_zfree(i8* readnone, i8*) #4 {
  %3 = icmp eq i8* %0, null
  %4 = icmp eq i8* %1, null
  %5 = or i1 %3, %4
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %2
  tail call void @free(i8* nonnull %1) #18
  br label %7

; <label>:7:                                      ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_free(%struct.png_struct_def* noalias readnone, i8*) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq i8* %1, null
  %5 = or i1 %3, %4
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %2
  tail call void @free(i8* nonnull %1) #18
  br label %7

; <label>:7:                                      ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_reset_crc(%struct.png_struct_def* noalias nocapture) local_unnamed_addr #4 {
  %2 = tail call i64 @MOZ_Z_crc32(i64 0, i8* null, i32 0) #18
  %3 = trunc i64 %2 to i32
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %3, i32* %4, align 4
  ret void
}

declare hidden i64 @MOZ_Z_crc32(i64, i8*, i32) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_calc_crc(%struct.png_struct_def* noalias nocapture, i8*, i64) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 536870912
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 768
  %11 = icmp ne i32 %10, 768
  %12 = and i32 %9, 2048
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %7, i1 %13, i1 %11
  %15 = icmp ne i64 %2, 0
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %35

; <label>:17:                                     ; preds = %3
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  br label %21

; <label>:21:                                     ; preds = %21, %17
  %22 = phi i64 [ %2, %17 ], [ %31, %21 ]
  %23 = phi i64 [ %20, %17 ], [ %28, %21 ]
  %24 = phi i8* [ %1, %17 ], [ %30, %21 ]
  %25 = trunc i64 %22 to i32
  %26 = icmp eq i32 %25, 0
  %27 = select i1 %26, i32 -1, i32 %25
  %28 = tail call i64 @MOZ_Z_crc32(i64 %23, i8* %24, i32 %27) #18
  %29 = zext i32 %27 to i64
  %30 = getelementptr inbounds i8, i8* %24, i64 %29
  %31 = sub i64 %22, %29
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %21

; <label>:33:                                     ; preds = %21
  %34 = trunc i64 %28 to i32
  store i32 %34, i32* %18, align 4
  br label %35

; <label>:35:                                     ; preds = %33, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_user_version_check(%struct.png_struct_def* noalias, i8* readonly) local_unnamed_addr #4 {
  %3 = alloca [128 x i8], align 16
  %4 = icmp eq i8* %1, null
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  br i1 %4, label %27, label %6

; <label>:6:                                      ; preds = %2, %23
  %7 = phi i64 [ %9, %23 ], [ -1, %2 ]
  %8 = phi i32 [ %21, %23 ], [ 0, %2 ]
  %9 = add nsw i64 %7, 1
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds [12 x i8], [12 x i8]* @.str.2, i64 0, i64 %9
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %11, %13
  br i1 %14, label %18, label %15

; <label>:15:                                     ; preds = %6
  %16 = load i32, i32* %5, align 4
  %17 = or i32 %16, 131072
  store i32 %17, i32* %5, align 4
  br label %18

; <label>:18:                                     ; preds = %6, %15
  %19 = icmp eq i8 %11, 46
  %20 = zext i1 %19 to i32
  %21 = add nuw nsw i32 %8, %20
  %22 = icmp ult i32 %21, 2
  br i1 %22, label %23, label %30

; <label>:23:                                     ; preds = %18
  %24 = icmp eq i8 %11, 0
  %25 = icmp eq i64 %9, 11
  %26 = or i1 %25, %24
  br i1 %26, label %30, label %6

; <label>:27:                                     ; preds = %2
  %28 = load i32, i32* %5, align 4
  %29 = or i32 %28, 131072
  store i32 %29, i32* %5, align 4
  br label %32

; <label>:30:                                     ; preds = %23, %18
  %31 = load i32, i32* %5, align 4
  br label %32

; <label>:32:                                     ; preds = %30, %27
  %33 = phi i32 [ %31, %30 ], [ %29, %27 ]
  %34 = and i32 %33, 131072
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %104, label %36

; <label>:36:                                     ; preds = %32
  %37 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %37) #18
  %38 = bitcast [128 x i8]* %3 to <16 x i8>*
  store <16 x i8> <i8 65, i8 112, i8 112, i8 108, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 32, i8 98, i8 117, i8 105, i8 108>, <16 x i8>* %38, align 16
  %39 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 16
  store i8 116, i8* %39, align 16
  %40 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 17
  store i8 32, i8* %40, align 1
  %41 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 18
  store i8 119, i8* %41, align 2
  %42 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 19
  store i8 105, i8* %42, align 1
  %43 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 20
  store i8 116, i8* %43, align 4
  %44 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 21
  store i8 104, i8* %44, align 1
  %45 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 22
  store i8 32, i8* %45, align 2
  %46 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 23
  store i8 108, i8* %46, align 1
  %47 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 24
  store i8 105, i8* %47, align 8
  %48 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 25
  store i8 98, i8* %48, align 1
  %49 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 26
  store i8 112, i8* %49, align 2
  %50 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 27
  store i8 110, i8* %50, align 1
  %51 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 28
  store i8 103, i8* %51, align 4
  %52 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 29
  store i8 45, i8* %52, align 1
  %53 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 30
  store i8 0, i8* %53, align 2
  br i1 %4, label %68, label %54

; <label>:54:                                     ; preds = %36
  %55 = load i8, i8* %1, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %68, label %57

; <label>:57:                                     ; preds = %54, %57
  %58 = phi i8 [ %64, %57 ], [ %55, %54 ]
  %59 = phi i8* [ %61, %57 ], [ %1, %54 ]
  %60 = phi i64 [ %62, %57 ], [ 30, %54 ]
  %61 = getelementptr inbounds i8, i8* %59, i64 1
  %62 = add nuw nsw i64 %60, 1
  %63 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 %60
  store i8 %58, i8* %63, align 1
  %64 = load i8, i8* %61, align 1
  %65 = icmp ne i8 %64, 0
  %66 = icmp ult i64 %62, 127
  %67 = and i1 %66, %65
  br i1 %67, label %57, label %69

; <label>:68:                                     ; preds = %54, %36
  store i8 0, i8* %53, align 2
  br label %72

; <label>:69:                                     ; preds = %57
  %70 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 %62
  store i8 0, i8* %70, align 1
  %71 = icmp ult i64 %62, 127
  br i1 %71, label %72, label %74

; <label>:72:                                     ; preds = %68, %69
  %73 = phi i64 [ %62, %69 ], [ 30, %68 ]
  br label %76

; <label>:74:                                     ; preds = %69
  %75 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 127
  store i8 0, i8* %75, align 1
  br label %101

; <label>:76:                                     ; preds = %72, %76
  %77 = phi i8 [ %83, %76 ], [ 32, %72 ]
  %78 = phi i8* [ %80, %76 ], [ getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), %72 ]
  %79 = phi i64 [ %81, %76 ], [ %73, %72 ]
  %80 = getelementptr inbounds i8, i8* %78, i64 1
  %81 = add nuw nsw i64 %79, 1
  %82 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 %79
  store i8 %77, i8* %82, align 1
  %83 = load i8, i8* %80, align 1
  %84 = icmp ne i8 %83, 0
  %85 = icmp ult i64 %81, 127
  %86 = and i1 %85, %84
  br i1 %86, label %76, label %87

; <label>:87:                                     ; preds = %76
  %88 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 %81
  store i8 0, i8* %88, align 1
  %89 = icmp ult i64 %81, 127
  br i1 %89, label %90, label %101

; <label>:90:                                     ; preds = %87, %90
  %91 = phi i8 [ %97, %90 ], [ 49, %87 ]
  %92 = phi i8* [ %94, %90 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), %87 ]
  %93 = phi i64 [ %95, %90 ], [ %81, %87 ]
  %94 = getelementptr inbounds i8, i8* %92, i64 1
  %95 = add nuw nsw i64 %93, 1
  %96 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 %93
  store i8 %91, i8* %96, align 1
  %97 = load i8, i8* %94, align 1
  %98 = icmp ne i8 %97, 0
  %99 = icmp ult i64 %95, 127
  %100 = and i1 %99, %98
  br i1 %100, label %90, label %101

; <label>:101:                                    ; preds = %90, %74, %87
  %102 = phi i64 [ 127, %87 ], [ 127, %74 ], [ %95, %90 ]
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %3, i64 0, i64 %102
  store i8 0, i8* %103, align 1
  call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* nonnull %37)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %37) #18
  br label %104

; <label>:104:                                    ; preds = %32, %101
  %105 = phi i32 [ 0, %101 ], [ 1, %32 ]
  ret i32 %105
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i64 @MOZ_PNG_safecat(i8*, i64, i64, i8* readonly) local_unnamed_addr #3 {
  %5 = icmp ne i8* %0, null
  %6 = icmp ult i64 %2, %1
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %30

; <label>:8:                                      ; preds = %4
  %9 = icmp eq i8* %3, null
  br i1 %9, label %27, label %10

; <label>:10:                                     ; preds = %8
  %11 = load i8, i8* %3, align 1
  %12 = icmp ne i8 %11, 0
  %13 = add i64 %1, -1
  %14 = icmp ugt i64 %13, %2
  %15 = and i1 %14, %12
  br i1 %15, label %16, label %27

; <label>:16:                                     ; preds = %10, %16
  %17 = phi i8 [ %23, %16 ], [ %11, %10 ]
  %18 = phi i8* [ %20, %16 ], [ %3, %10 ]
  %19 = phi i64 [ %21, %16 ], [ %2, %10 ]
  %20 = getelementptr inbounds i8, i8* %18, i64 1
  %21 = add nuw i64 %19, 1
  %22 = getelementptr inbounds i8, i8* %0, i64 %19
  store i8 %17, i8* %22, align 1
  %23 = load i8, i8* %20, align 1
  %24 = icmp ne i8 %23, 0
  %25 = icmp ult i64 %21, %13
  %26 = and i1 %25, %24
  br i1 %26, label %16, label %27

; <label>:27:                                     ; preds = %16, %10, %8
  %28 = phi i64 [ %2, %8 ], [ %2, %10 ], [ %21, %16 ]
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  store i8 0, i8* %29, align 1
  br label %30

; <label>:30:                                     ; preds = %4, %27
  %31 = phi i64 [ %28, %27 ], [ %2, %4 ]
  ret i64 %31
}

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias %struct.png_struct_def* @MOZ_PNG_create_png_struct(i8* readonly, i8*, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*, i8* nocapture readnone, i8* (%struct.png_struct_def*, i64)* nocapture readnone, void (%struct.png_struct_def*, i8*)* nocapture readnone) local_unnamed_addr #4 {
  %8 = alloca %struct.png_struct_def, align 8
  %9 = alloca [1 x %struct.__jmp_buf_tag], align 16
  %10 = bitcast %struct.png_struct_def* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 984, i8* nonnull %10) #18
  %11 = bitcast [1 x %struct.__jmp_buf_tag]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %11) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 984, i1 false)
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 98
  store i32 2147483647, i32* %12, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 99
  store i32 2147483647, i32* %13, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 100
  store i32 128, i32* %14, align 4
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 101
  store i64 4000000, i64* %15, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 6
  store i8* %1, i8** %16, align 8, !alias.scope !11
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 4
  store void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)** %17, align 8, !alias.scope !11
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 5
  store void (%struct.png_struct_def*, i8*)* %3, void (%struct.png_struct_def*, i8*)** %18, align 8, !alias.scope !11
  %19 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %9, i64 0, i64 0
  %20 = call i32 @_setjmp(%struct.__jmp_buf_tag* nonnull %19) #21
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %41

; <label>:22:                                     ; preds = %7
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 2
  store [1 x %struct.__jmp_buf_tag]* %9, [1 x %struct.__jmp_buf_tag]** %23, align 8
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 3
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* @__longjmp_chk, void (%struct.__jmp_buf_tag*, i32)** %25, align 8
  %26 = call i32 @MOZ_PNG_user_version_check(%struct.png_struct_def* nonnull %8, i8* %0)
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %41, label %28

; <label>:28:                                     ; preds = %22
  %29 = call noalias i8* @malloc(i64 984) #18
  %30 = icmp eq i8* %29, null
  br i1 %30, label %31, label %35

; <label>:31:                                     ; preds = %28
  %32 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %18, align 8, !alias.scope !14
  %33 = icmp eq void (%struct.png_struct_def*, i8*)* %32, null
  br i1 %33, label %41, label %34

; <label>:34:                                     ; preds = %31
  call void %32(%struct.png_struct_def* nonnull %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %41

; <label>:35:                                     ; preds = %28
  %36 = bitcast i8* %29 to %struct.png_struct_def*
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 14, i32 8
  store i8* (i8*, i32, i32)* @MOZ_PNG_zalloc, i8* (i8*, i32, i32)** %37, align 8
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 14, i32 9
  store void (i8*, i8*)* @MOZ_PNG_zfree, void (i8*, i8*)** %38, align 8
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %8, i64 0, i32 14, i32 10
  store i8* %29, i8** %39, align 8
  %40 = bitcast void (%struct.__jmp_buf_tag*, i32)** %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %29, i8* nonnull align 8 %10, i64 984, i1 false)
  br label %41

; <label>:41:                                     ; preds = %34, %31, %7, %22, %35
  %42 = phi %struct.png_struct_def* [ %36, %35 ], [ null, %22 ], [ null, %7 ], [ null, %31 ], [ null, %34 ]
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %11) #18
  call void @llvm.lifetime.end.p0i8(i64 984, i8* nonnull %10) #18
  ret %struct.png_struct_def* %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #1

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_error_fn(%struct.png_struct_def* noalias, i8*, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*) local_unnamed_addr #3 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %10, label %6

; <label>:6:                                      ; preds = %4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 6
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 4
  store void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)** %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  store void (%struct.png_struct_def*, i8*)* %3, void (%struct.png_struct_def*, i8*)** %9, align 8
  br label %10

; <label>:10:                                     ; preds = %4, %6
  ret void
}

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @__longjmp_chk(%struct.__jmp_buf_tag*, i32) #10

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias %struct.png_info_def* @MOZ_PNG_cr_info_str(%struct.png_struct_def* noalias readnone) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %8, label %3

; <label>:3:                                      ; preds = %1
  %4 = tail call noalias i8* @malloc(i64 208) #18
  %5 = bitcast i8* %4 to %struct.png_info_def*
  %6 = icmp eq i8* %4, null
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 208, i1 false)
  br label %8

; <label>:8:                                      ; preds = %7, %3, %1
  %9 = phi %struct.png_info_def* [ null, %1 ], [ %5, %3 ], [ %5, %7 ]
  ret %struct.png_info_def* %9
}

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias i8* @MOZ_PNG_malloc_base(%struct.png_struct_def* noalias nocapture readnone, i64) local_unnamed_addr #4 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %2
  %5 = tail call noalias i8* @malloc(i64 %1) #18
  br label %6

; <label>:6:                                      ; preds = %2, %4
  %7 = phi i8* [ %5, %4 ], [ null, %2 ]
  ret i8* %7
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_dest_info_str(%struct.png_struct_def* noalias readnone, %struct.png_info_def**) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq %struct.png_info_def** %1, null
  %5 = or i1 %3, %4
  br i1 %5, label %11, label %6

; <label>:6:                                      ; preds = %2
  %7 = load %struct.png_info_def*, %struct.png_info_def** %1, align 8
  %8 = icmp eq %struct.png_info_def* %7, null
  br i1 %8, label %11, label %9

; <label>:9:                                      ; preds = %6
  %10 = bitcast %struct.png_info_def* %7 to i8*
  store %struct.png_info_def* null, %struct.png_info_def** %1, align 8
  tail call void @MOZ_PNG_free_data(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %7, i32 65535, i32 -1)
  tail call void @free(i8* nonnull %10) #18
  br label %11

; <label>:11:                                     ; preds = %9, %6, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_free_data(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias, i32, i32) local_unnamed_addr #4 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %72, label %8

; <label>:8:                                      ; preds = %4
  %9 = and i32 %2, 8192
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %9, %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %26, label %14

; <label>:14:                                     ; preds = %8
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, -17
  store i32 %17, i32* %15, align 8
  %18 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 20
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %14
  tail call void @free(i8* nonnull %19) #18
  %22 = load i32, i32* %10, align 4
  br label %23

; <label>:23:                                     ; preds = %14, %21
  %24 = phi i32 [ %11, %14 ], [ %22, %21 ]
  store i8* null, i8** %18, align 8
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 0, i16* %25, align 2
  br label %26

; <label>:26:                                     ; preds = %8, %23
  %27 = phi i32 [ %11, %8 ], [ %24, %23 ]
  %28 = and i32 %2, 16
  %29 = and i32 %28, %27
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %47, label %31

; <label>:31:                                     ; preds = %26
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %33 = load i8*, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

; <label>:35:                                     ; preds = %31
  tail call void @free(i8* nonnull %33) #18
  br label %36

; <label>:36:                                     ; preds = %31, %35
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

; <label>:40:                                     ; preds = %36
  tail call void @free(i8* nonnull %38) #18
  br label %41

; <label>:41:                                     ; preds = %36, %40
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %43 = bitcast i8** %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 0, i64 16, i1 false)
  %44 = load i32, i32* %42, align 8
  %45 = and i32 %44, -4097
  store i32 %45, i32* %42, align 8
  %46 = load i32, i32* %10, align 4
  br label %47

; <label>:47:                                     ; preds = %26, %41
  %48 = phi i32 [ %27, %26 ], [ %46, %41 ]
  %49 = and i32 %2, 4096
  %50 = and i32 %49, %48
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %65, label %52

; <label>:52:                                     ; preds = %47
  %53 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 4
  %54 = bitcast %struct.png_color_struct** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %59, label %57

; <label>:57:                                     ; preds = %52
  tail call void @free(i8* nonnull %55) #18
  %58 = load i32, i32* %10, align 4
  br label %59

; <label>:59:                                     ; preds = %52, %57
  %60 = phi i32 [ %48, %52 ], [ %58, %57 ]
  store %struct.png_color_struct* null, %struct.png_color_struct** %53, align 8
  %61 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = and i32 %62, -9
  store i32 %63, i32* %61, align 8
  %64 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 5
  store i16 0, i16* %64, align 8
  br label %65

; <label>:65:                                     ; preds = %47, %59
  %66 = phi i32 [ %48, %47 ], [ %60, %59 ]
  %67 = icmp eq i32 %3, -1
  %68 = and i32 %2, -16929
  %69 = select i1 %67, i32 %2, i32 %68
  %70 = xor i32 %69, -1
  %71 = and i32 %66, %70
  store i32 %71, i32* %10, align 4
  br label %72

; <label>:72:                                     ; preds = %4, %65
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_info_init_3(%struct.png_info_def** nocapture, i64) local_unnamed_addr #4 {
  %3 = load %struct.png_info_def*, %struct.png_info_def** %0, align 8
  %4 = icmp eq %struct.png_info_def* %3, null
  br i1 %4, label %17, label %5

; <label>:5:                                      ; preds = %2
  %6 = icmp ult i64 %1, 208
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %5
  store %struct.png_info_def* null, %struct.png_info_def** %0, align 8
  %8 = bitcast %struct.png_info_def* %3 to i8*
  tail call void @free(i8* %8) #18
  %9 = tail call noalias i8* @malloc(i64 208) #18
  %10 = icmp eq i8* %9, null
  br i1 %10, label %17, label %11

; <label>:11:                                     ; preds = %7
  %12 = bitcast i8* %9 to %struct.png_info_def*
  %13 = bitcast %struct.png_info_def** %0 to i8**
  store i8* %9, i8** %13, align 8
  br label %14

; <label>:14:                                     ; preds = %11, %5
  %15 = phi %struct.png_info_def* [ %12, %11 ], [ %3, %5 ]
  %16 = bitcast %struct.png_info_def* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 208, i1 false)
  br label %17

; <label>:17:                                     ; preds = %7, %2, %14
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_data_freer(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32, i32) local_unnamed_addr #4 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %19, label %8

; <label>:8:                                      ; preds = %4
  switch i32 %2, label %18 [
    i32 1, label %9
    i32 2, label %13
  ]

; <label>:9:                                      ; preds = %8
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %11 = load i32, i32* %10, align 4
  %12 = or i32 %11, %3
  store i32 %12, i32* %10, align 4
  br label %19

; <label>:13:                                     ; preds = %8
  %14 = xor i32 %3, -1
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, %14
  store i32 %17, i32* %15, align 4
  br label %19

; <label>:18:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0)) #19
  unreachable

; <label>:19:                                     ; preds = %4, %13, %9
  ret void
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i8* @MOZ_PNG_get_io_ptr(%struct.png_struct_def* noalias readonly) local_unnamed_addr #12 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  %5 = load i8*, i8** %4, align 8
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %7
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_init_io(%struct.png_struct_def* noalias, %struct._IO_FILE*) local_unnamed_addr #3 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %7, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  %6 = bitcast i8** %5 to %struct._IO_FILE**
  store %struct._IO_FILE* %1, %struct._IO_FILE** %6, align 8
  br label %7

; <label>:7:                                      ; preds = %2, %4
  ret void
}

; Function Attrs: norecurse nounwind readnone sspstrong uwtable
define hidden i8* @MOZ_PNG_get_copyright(%struct.png_struct_def* noalias nocapture readnone) local_unnamed_addr #13 {
  ret i8* getelementptr inbounds ([293 x i8], [293 x i8]* @.str.6, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone sspstrong uwtable
define hidden i8* @MOZ_PNG_get_libpng_ver(%struct.png_struct_def* noalias nocapture readnone) local_unnamed_addr #13 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone sspstrong uwtable
define hidden i8* @MOZ_PNG_get_hdr_ver(%struct.png_struct_def* noalias nocapture readnone) local_unnamed_addr #13 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone sspstrong uwtable
define hidden i8* @MOZ_PNG_get_hdr_vn(%struct.png_struct_def* noalias nocapture readnone) local_unnamed_addr #13 {
  ret i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.7, i64 0, i64 0)
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_reset_zs(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %5 = tail call i32 @MOZ_Z_inflateReset(%struct.z_stream_s* nonnull %4) #18
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ -2, %1 ]
  ret i32 %7
}

declare hidden i32 @MOZ_Z_inflateReset(%struct.z_stream_s*) local_unnamed_addr #8

; Function Attrs: norecurse nounwind readnone sspstrong uwtable
define hidden i32 @MOZ_PNG_access_vn() local_unnamed_addr #13 {
  ret i32 10635
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_zstream_error(%struct.png_struct_def* noalias nocapture, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %15

; <label>:6:                                      ; preds = %2
  %7 = add i32 %1, 7
  %8 = icmp ult i32 %7, 10
  br i1 %8, label %9, label %13

; <label>:9:                                      ; preds = %6
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds [10 x i8*], [10 x i8*]* @switch.table.MOZ_PNG_compress_IDAT.225, i64 0, i64 %10
  %12 = load i8*, i8** %11, align 8
  br label %13

; <label>:13:                                     ; preds = %6, %9
  %14 = phi i8* [ %12, %9 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), %6 ]
  store i8* %14, i8** %3, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_cs_set_gamma(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias nocapture, i32) local_unnamed_addr #4 {
  %4 = add i32 %2, -16
  %5 = icmp ugt i32 %4, 624999984
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %3
  %7 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %8 = load i16, i16* %7, align 2
  br label %49

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %11 = load i32, i32* %10, align 8
  %12 = trunc i32 %11 to i16
  %13 = icmp sgt i16 %12, -1
  %14 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %15 = load i16, i16* %14, align 2
  %16 = and i16 %15, 8
  %17 = icmp eq i16 %16, 0
  %18 = or i1 %13, %17
  br i1 %18, label %19, label %49

; <label>:19:                                     ; preds = %9
  %20 = icmp slt i16 %15, 0
  br i1 %20, label %54, label %21

; <label>:21:                                     ; preds = %19
  %22 = and i16 %15, 1
  %23 = icmp eq i16 %22, 0
  %24 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 0
  br i1 %23, label %47, label %25

; <label>:25:                                     ; preds = %21
  %26 = load i32, i32* %24, align 4, !alias.scope !19, !noalias !22
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %42, label %28

; <label>:28:                                     ; preds = %25
  %29 = sitofp i32 %26 to double
  %30 = fmul double %29, 1.000000e+05
  %31 = sitofp i32 %2 to double
  %32 = fdiv double %30, %31
  %33 = fadd double %32, 5.000000e-01
  %34 = tail call double @llvm.floor.f64(double %33) #18
  %35 = fcmp ole double %34, 0x41DFFFFFFFC00000
  %36 = fcmp oge double %34, 0xC1E0000000000000
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %42

; <label>:38:                                     ; preds = %28
  %39 = fptosi double %34 to i32
  %40 = add i32 %39, -95000
  %41 = icmp ult i32 %40, 10001
  br i1 %41, label %47, label %42

; <label>:42:                                     ; preds = %38, %28, %25
  %43 = and i16 %15, 32
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %45, label %46

; <label>:45:                                     ; preds = %42
  tail call void @MOZ_PNG_chunk_report(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.210, i64 0, i64 0), i32 0) #18, !noalias !19
  br label %47

; <label>:46:                                     ; preds = %42
  tail call void @MOZ_PNG_chunk_report(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.209, i64 0, i64 0), i32 2) #18, !noalias !19
  br label %54

; <label>:47:                                     ; preds = %21, %38, %45
  store i32 %2, i32* %24, align 4
  %48 = or i16 %15, 9
  store i16 %48, i16* %14, align 2
  br label %54

; <label>:49:                                     ; preds = %9, %6
  %50 = phi i16* [ %7, %6 ], [ %14, %9 ]
  %51 = phi i16 [ %8, %6 ], [ %15, %9 ]
  %52 = phi i8* [ getelementptr inbounds ([25 x i8], [25 x i8]* @.str.18, i64 0, i64 0), %6 ], [ getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0), %9 ]
  %53 = or i16 %51, -32768
  store i16 %53, i16* %50, align 2
  tail call void @MOZ_PNG_chunk_report(%struct.png_struct_def* %0, i8* nonnull %52, i32 1)
  br label %54

; <label>:54:                                     ; preds = %46, %47, %19, %49
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_chunk_report(%struct.png_struct_def* noalias, i8*, i32) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = trunc i32 %5 to i16
  %7 = icmp sgt i16 %6, -1
  br i1 %7, label %18, label %8

; <label>:8:                                      ; preds = %3
  %9 = icmp slt i32 %2, 2
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %8
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* %1)
  br label %164

; <label>:11:                                     ; preds = %8
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %13 = load i32, i32* %12, align 4, !alias.scope !24
  %14 = and i32 %13, 1048576
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %11
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* %1) #22
  unreachable

; <label>:17:                                     ; preds = %11
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* %1) #18
  br label %164

; <label>:18:                                     ; preds = %3
  %19 = icmp slt i32 %2, 1
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %21 = load i32, i32* %20, align 4
  br i1 %19, label %22, label %93

; <label>:22:                                     ; preds = %18
  %23 = and i32 %21, 2097152
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %22
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* %1) #22
  unreachable

; <label>:26:                                     ; preds = %22
  %27 = load i8, i8* %1, align 1, !noalias !27
  %28 = icmp eq i8 %27, 35
  br i1 %28, label %29, label %37

; <label>:29:                                     ; preds = %26
  %30 = getelementptr inbounds i8, i8* %1, i64 1
  %31 = load i8, i8* %30, align 1, !noalias !27
  %32 = icmp eq i8 %31, 32
  br i1 %32, label %37, label %33

; <label>:33:                                     ; preds = %29
  %34 = getelementptr inbounds i8, i8* %1, i64 2
  %35 = load i8, i8* %34, align 1, !noalias !27
  %36 = icmp eq i8 %35, 32
  br i1 %36, label %37, label %44

; <label>:37:                                     ; preds = %88, %84, %80, %76, %72, %68, %64, %60, %56, %52, %48, %44, %33, %29, %26
  %38 = phi i64 [ 0, %26 ], [ 1, %29 ], [ 2, %33 ], [ 3, %44 ], [ 4, %48 ], [ 5, %52 ], [ 6, %56 ], [ 7, %60 ], [ 8, %64 ], [ 9, %68 ], [ 10, %72 ], [ 11, %76 ], [ 12, %80 ], [ 13, %84 ], [ %92, %88 ]
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %40 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %39, align 8, !alias.scope !27
  %41 = icmp eq void (%struct.png_struct_def*, i8*)* %40, null
  br i1 %41, label %164, label %42

; <label>:42:                                     ; preds = %37
  %43 = getelementptr inbounds i8, i8* %1, i64 %38
  tail call void %40(%struct.png_struct_def* nonnull %0, i8* %43) #18
  br label %164

; <label>:44:                                     ; preds = %33
  %45 = getelementptr inbounds i8, i8* %1, i64 3
  %46 = load i8, i8* %45, align 1, !noalias !27
  %47 = icmp eq i8 %46, 32
  br i1 %47, label %37, label %48

; <label>:48:                                     ; preds = %44
  %49 = getelementptr inbounds i8, i8* %1, i64 4
  %50 = load i8, i8* %49, align 1, !noalias !27
  %51 = icmp eq i8 %50, 32
  br i1 %51, label %37, label %52

; <label>:52:                                     ; preds = %48
  %53 = getelementptr inbounds i8, i8* %1, i64 5
  %54 = load i8, i8* %53, align 1, !noalias !27
  %55 = icmp eq i8 %54, 32
  br i1 %55, label %37, label %56

; <label>:56:                                     ; preds = %52
  %57 = getelementptr inbounds i8, i8* %1, i64 6
  %58 = load i8, i8* %57, align 1, !noalias !27
  %59 = icmp eq i8 %58, 32
  br i1 %59, label %37, label %60

; <label>:60:                                     ; preds = %56
  %61 = getelementptr inbounds i8, i8* %1, i64 7
  %62 = load i8, i8* %61, align 1, !noalias !27
  %63 = icmp eq i8 %62, 32
  br i1 %63, label %37, label %64

; <label>:64:                                     ; preds = %60
  %65 = getelementptr inbounds i8, i8* %1, i64 8
  %66 = load i8, i8* %65, align 1, !noalias !27
  %67 = icmp eq i8 %66, 32
  br i1 %67, label %37, label %68

; <label>:68:                                     ; preds = %64
  %69 = getelementptr inbounds i8, i8* %1, i64 9
  %70 = load i8, i8* %69, align 1, !noalias !27
  %71 = icmp eq i8 %70, 32
  br i1 %71, label %37, label %72

; <label>:72:                                     ; preds = %68
  %73 = getelementptr inbounds i8, i8* %1, i64 10
  %74 = load i8, i8* %73, align 1, !noalias !27
  %75 = icmp eq i8 %74, 32
  br i1 %75, label %37, label %76

; <label>:76:                                     ; preds = %72
  %77 = getelementptr inbounds i8, i8* %1, i64 11
  %78 = load i8, i8* %77, align 1, !noalias !27
  %79 = icmp eq i8 %78, 32
  br i1 %79, label %37, label %80

; <label>:80:                                     ; preds = %76
  %81 = getelementptr inbounds i8, i8* %1, i64 12
  %82 = load i8, i8* %81, align 1, !noalias !27
  %83 = icmp eq i8 %82, 32
  br i1 %83, label %37, label %84

; <label>:84:                                     ; preds = %80
  %85 = getelementptr inbounds i8, i8* %1, i64 13
  %86 = load i8, i8* %85, align 1, !noalias !27
  %87 = icmp eq i8 %86, 32
  br i1 %87, label %37, label %88

; <label>:88:                                     ; preds = %84
  %89 = getelementptr inbounds i8, i8* %1, i64 14
  %90 = load i8, i8* %89, align 1, !noalias !27
  %91 = icmp eq i8 %90, 32
  %92 = select i1 %91, i64 14, i64 15
  br label %37

; <label>:93:                                     ; preds = %18
  %94 = and i32 %21, 4194304
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %97

; <label>:96:                                     ; preds = %93
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* %1) #22
  unreachable

; <label>:97:                                     ; preds = %93
  %98 = load i8, i8* %1, align 1, !noalias !30
  %99 = icmp eq i8 %98, 35
  br i1 %99, label %100, label %108

; <label>:100:                                    ; preds = %97
  %101 = getelementptr inbounds i8, i8* %1, i64 1
  %102 = load i8, i8* %101, align 1, !noalias !30
  %103 = icmp eq i8 %102, 32
  br i1 %103, label %108, label %104

; <label>:104:                                    ; preds = %100
  %105 = getelementptr inbounds i8, i8* %1, i64 2
  %106 = load i8, i8* %105, align 1, !noalias !30
  %107 = icmp eq i8 %106, 32
  br i1 %107, label %108, label %115

; <label>:108:                                    ; preds = %159, %155, %151, %147, %143, %139, %135, %131, %127, %123, %119, %115, %104, %100, %97
  %109 = phi i64 [ 0, %97 ], [ 1, %100 ], [ 2, %104 ], [ 3, %115 ], [ 4, %119 ], [ 5, %123 ], [ 6, %127 ], [ 7, %131 ], [ 8, %135 ], [ 9, %139 ], [ 10, %143 ], [ 11, %147 ], [ 12, %151 ], [ 13, %155 ], [ %163, %159 ]
  %110 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %111 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %110, align 8, !alias.scope !30
  %112 = icmp eq void (%struct.png_struct_def*, i8*)* %111, null
  br i1 %112, label %164, label %113

; <label>:113:                                    ; preds = %108
  %114 = getelementptr inbounds i8, i8* %1, i64 %109
  tail call void %111(%struct.png_struct_def* nonnull %0, i8* %114) #18
  br label %164

; <label>:115:                                    ; preds = %104
  %116 = getelementptr inbounds i8, i8* %1, i64 3
  %117 = load i8, i8* %116, align 1, !noalias !30
  %118 = icmp eq i8 %117, 32
  br i1 %118, label %108, label %119

; <label>:119:                                    ; preds = %115
  %120 = getelementptr inbounds i8, i8* %1, i64 4
  %121 = load i8, i8* %120, align 1, !noalias !30
  %122 = icmp eq i8 %121, 32
  br i1 %122, label %108, label %123

; <label>:123:                                    ; preds = %119
  %124 = getelementptr inbounds i8, i8* %1, i64 5
  %125 = load i8, i8* %124, align 1, !noalias !30
  %126 = icmp eq i8 %125, 32
  br i1 %126, label %108, label %127

; <label>:127:                                    ; preds = %123
  %128 = getelementptr inbounds i8, i8* %1, i64 6
  %129 = load i8, i8* %128, align 1, !noalias !30
  %130 = icmp eq i8 %129, 32
  br i1 %130, label %108, label %131

; <label>:131:                                    ; preds = %127
  %132 = getelementptr inbounds i8, i8* %1, i64 7
  %133 = load i8, i8* %132, align 1, !noalias !30
  %134 = icmp eq i8 %133, 32
  br i1 %134, label %108, label %135

; <label>:135:                                    ; preds = %131
  %136 = getelementptr inbounds i8, i8* %1, i64 8
  %137 = load i8, i8* %136, align 1, !noalias !30
  %138 = icmp eq i8 %137, 32
  br i1 %138, label %108, label %139

; <label>:139:                                    ; preds = %135
  %140 = getelementptr inbounds i8, i8* %1, i64 9
  %141 = load i8, i8* %140, align 1, !noalias !30
  %142 = icmp eq i8 %141, 32
  br i1 %142, label %108, label %143

; <label>:143:                                    ; preds = %139
  %144 = getelementptr inbounds i8, i8* %1, i64 10
  %145 = load i8, i8* %144, align 1, !noalias !30
  %146 = icmp eq i8 %145, 32
  br i1 %146, label %108, label %147

; <label>:147:                                    ; preds = %143
  %148 = getelementptr inbounds i8, i8* %1, i64 11
  %149 = load i8, i8* %148, align 1, !noalias !30
  %150 = icmp eq i8 %149, 32
  br i1 %150, label %108, label %151

; <label>:151:                                    ; preds = %147
  %152 = getelementptr inbounds i8, i8* %1, i64 12
  %153 = load i8, i8* %152, align 1, !noalias !30
  %154 = icmp eq i8 %153, 32
  br i1 %154, label %108, label %155

; <label>:155:                                    ; preds = %151
  %156 = getelementptr inbounds i8, i8* %1, i64 13
  %157 = load i8, i8* %156, align 1, !noalias !30
  %158 = icmp eq i8 %157, 32
  br i1 %158, label %108, label %159

; <label>:159:                                    ; preds = %155
  %160 = getelementptr inbounds i8, i8* %1, i64 14
  %161 = load i8, i8* %160, align 1, !noalias !30
  %162 = icmp eq i8 %161, 32
  %163 = select i1 %162, i64 14, i64 15
  br label %108

; <label>:164:                                    ; preds = %113, %108, %42, %37, %10, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %4 = load i16, i16* %3, align 2
  %5 = icmp slt i16 %4, 0
  br i1 %5, label %6, label %30

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, -6150
  store i32 %9, i32* %7, align 8
  %10 = icmp eq %struct.png_struct_def* %0, null
  br i1 %10, label %49, label %11

; <label>:11:                                     ; preds = %6
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %13 = load i32, i32* %12, align 4, !alias.scope !33, !noalias !36
  %14 = and i32 %13, 16
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %11
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %18 = load i8*, i8** %17, align 8, !alias.scope !33, !noalias !36
  %19 = icmp eq i8* %18, null
  br i1 %19, label %21, label %20

; <label>:20:                                     ; preds = %16
  tail call void @free(i8* nonnull %18) #18
  br label %21

; <label>:21:                                     ; preds = %20, %16
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %23 = load i8*, i8** %22, align 8, !alias.scope !33, !noalias !36
  %24 = icmp eq i8* %23, null
  br i1 %24, label %26, label %25

; <label>:25:                                     ; preds = %21
  tail call void @free(i8* nonnull %23) #18
  br label %26

; <label>:26:                                     ; preds = %25, %21
  %27 = bitcast i8** %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 16, i1 false) #18, !alias.scope !33, !noalias !36
  store i32 %9, i32* %7, align 8, !alias.scope !33, !noalias !36
  br label %28

; <label>:28:                                     ; preds = %26, %11
  %29 = and i32 %13, -17
  store i32 %29, i32* %12, align 4, !alias.scope !33, !noalias !36
  br label %49

; <label>:30:                                     ; preds = %2
  %31 = trunc i16 %4 to i8
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = and i32 %34, -2049
  %36 = or i32 %34, 2048
  %37 = select i1 %32, i32 %36, i32 %35
  %38 = and i16 %4, 2
  %39 = icmp eq i16 %38, 0
  %40 = and i32 %37, -5
  %41 = or i32 %37, 4
  %42 = select i1 %39, i32 %40, i32 %41
  store i32 %42, i32* %33, align 8
  %43 = and i16 %4, 1
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %47, label %45

; <label>:45:                                     ; preds = %30
  %46 = or i32 %42, 1
  store i32 %46, i32* %33, align 8
  br label %49

; <label>:47:                                     ; preds = %30
  %48 = and i32 %42, -2
  store i32 %48, i32* %33, align 8
  br label %49

; <label>:49:                                     ; preds = %28, %6, %45, %47
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_cs_sync(%struct.png_struct_def* noalias readonly, %struct.png_info_def* noalias) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_info_def* %1, null
  br i1 %3, label %9, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107
  %7 = bitcast %struct.png_colorspace* %5 to i8*
  %8 = bitcast %struct.png_colorspace* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %7, i8* nonnull align 8 %8, i64 76, i1 false)
  tail call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* %0, %struct.png_info_def* nonnull %1)
  br label %9

; <label>:9:                                      ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_cs_set_chromats(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias nocapture, %struct.png_xy* nocapture readonly, i32) local_unnamed_addr #4 {
  %5 = alloca %struct.png_XYZ, align 4
  %6 = bitcast %struct.png_XYZ* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %6) #18
  %7 = call fastcc i32 @png_colorspace_check_xy(%struct.png_XYZ* nonnull %5, %struct.png_xy* %2)
  switch i32 %7, label %92 [
    i32 0, label %8
    i32 1, label %62
  ]

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %10 = load i16, i16* %9, align 2, !alias.scope !38, !noalias !41
  %11 = icmp slt i16 %10, 0
  br i1 %11, label %96, label %12

; <label>:12:                                     ; preds = %8
  %13 = icmp sgt i32 %3, 1
  %14 = and i16 %10, 2
  %15 = icmp eq i16 %14, 0
  %16 = or i1 %13, %15
  %17 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  br i1 %16, label %51, label %18

; <label>:18:                                     ; preds = %12
  %19 = tail call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* %2, %struct.png_xy* nonnull %17, i32 100) #18, !noalias !41
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %49

; <label>:21:                                     ; preds = %18
  %22 = or i16 %10, -32768
  store i16 %22, i16* %9, align 2, !alias.scope !38, !noalias !41
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %24 = load i32, i32* %23, align 4, !alias.scope !43
  %25 = and i32 %24, 1048576
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %28 = load i32, i32* %27, align 8, !alias.scope !43
  %29 = trunc i32 %28 to i16
  %30 = icmp slt i16 %29, 0
  br i1 %26, label %42, label %31

; <label>:31:                                     ; preds = %21
  br i1 %30, label %32, label %37

; <label>:32:                                     ; preds = %31
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %34 = load i32, i32* %33, align 8, !alias.scope !43
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %37, label %36

; <label>:36:                                     ; preds = %32
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.211, i64 0, i64 0)) #18
  br label %96

; <label>:37:                                     ; preds = %31, %32
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %39 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %38, align 8, !alias.scope !46
  %40 = icmp eq void (%struct.png_struct_def*, i8*)* %39, null
  br i1 %40, label %96, label %41

; <label>:41:                                     ; preds = %37
  tail call void %39(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.211, i64 0, i64 0)) #18
  br label %96

; <label>:42:                                     ; preds = %21
  br i1 %30, label %43, label %48

; <label>:43:                                     ; preds = %42
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %45 = load i32, i32* %44, align 8, !alias.scope !43
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %48, label %47

; <label>:47:                                     ; preds = %43
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.211, i64 0, i64 0)) #22
  unreachable

; <label>:48:                                     ; preds = %43, %42
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.211, i64 0, i64 0)) #22
  unreachable

; <label>:49:                                     ; preds = %18
  %50 = icmp eq i32 %3, 0
  br i1 %50, label %96, label %51

; <label>:51:                                     ; preds = %49, %12
  %52 = bitcast %struct.png_xy* %17 to i8*
  %53 = bitcast %struct.png_xy* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %52, i8* align 4 %53, i64 32, i1 false) #18, !noalias !41
  %54 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 2
  %55 = bitcast %struct.png_XYZ* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %55, i8* nonnull align 4 %6, i64 36, i1 false) #18, !noalias !41
  %56 = tail call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* %2, %struct.png_xy* nonnull @sRGB_xy, i32 1000) #18, !noalias !38
  %57 = icmp eq i32 %56, 0
  %58 = and i16 %10, -67
  %59 = or i16 %58, 2
  %60 = or i16 %10, 66
  %61 = select i1 %57, i16 %59, i16 %60
  store i16 %61, i16* %9, align 2, !alias.scope !38, !noalias !41
  br label %96

; <label>:62:                                     ; preds = %4
  %63 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %64 = load i16, i16* %63, align 2
  %65 = or i16 %64, -32768
  store i16 %65, i16* %63, align 2
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %67 = load i32, i32* %66, align 4, !alias.scope !49
  %68 = and i32 %67, 1048576
  %69 = icmp eq i32 %68, 0
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %71 = load i32, i32* %70, align 8, !alias.scope !49
  %72 = trunc i32 %71 to i16
  %73 = icmp slt i16 %72, 0
  br i1 %69, label %85, label %74

; <label>:74:                                     ; preds = %62
  br i1 %73, label %75, label %80

; <label>:75:                                     ; preds = %74
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %77 = load i32, i32* %76, align 8, !alias.scope !49
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

; <label>:79:                                     ; preds = %75
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)) #18
  br label %96

; <label>:80:                                     ; preds = %74, %75
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %82 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %81, align 8, !alias.scope !52
  %83 = icmp eq void (%struct.png_struct_def*, i8*)* %82, null
  br i1 %83, label %96, label %84

; <label>:84:                                     ; preds = %80
  tail call void %82(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)) #18
  br label %96

; <label>:85:                                     ; preds = %62
  br i1 %73, label %86, label %91

; <label>:86:                                     ; preds = %85
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %88 = load i32, i32* %87, align 8, !alias.scope !49
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %91, label %90

; <label>:90:                                     ; preds = %86
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)) #22
  unreachable

; <label>:91:                                     ; preds = %86, %85
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)) #22
  unreachable

; <label>:92:                                     ; preds = %4
  %93 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %94 = load i16, i16* %93, align 2
  %95 = or i16 %94, -32768
  store i16 %95, i16* %93, align 2
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21, i64 0, i64 0)) #19
  unreachable

; <label>:96:                                     ; preds = %79, %80, %84, %51, %49, %8, %41, %37, %36
  %97 = phi i32 [ 2, %51 ], [ 0, %8 ], [ 1, %49 ], [ 0, %41 ], [ 0, %37 ], [ 0, %36 ], [ 0, %84 ], [ 0, %80 ], [ 0, %79 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %6) #18
  ret i32 %97
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @png_colorspace_check_xy(%struct.png_XYZ* nocapture, %struct.png_xy* nocapture readonly) unnamed_addr #4 {
  %3 = alloca %struct.png_xy, align 4
  %4 = bitcast %struct.png_xy* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #18
  %5 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp ugt i32 %6, 100000
  br i1 %7, label %390, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, 0
  %12 = sub nsw i32 100000, %6
  %13 = icmp sgt i32 %10, %12
  %14 = or i1 %11, %13
  br i1 %14, label %390, label %15

; <label>:15:                                     ; preds = %8
  %16 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %17, 100000
  br i1 %18, label %390, label %19

; <label>:19:                                     ; preds = %15
  %20 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %21, 0
  %23 = sub nsw i32 100000, %17
  %24 = icmp sgt i32 %21, %23
  %25 = or i1 %22, %24
  br i1 %25, label %390, label %26

; <label>:26:                                     ; preds = %19
  %27 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 4
  %28 = load i32, i32* %27, align 4
  %29 = icmp ugt i32 %28, 100000
  br i1 %29, label %390, label %30

; <label>:30:                                     ; preds = %26
  %31 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  %34 = sub nsw i32 100000, %28
  %35 = icmp sgt i32 %32, %34
  %36 = or i1 %33, %35
  br i1 %36, label %390, label %37

; <label>:37:                                     ; preds = %30
  %38 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 6
  %39 = load i32, i32* %38, align 4
  %40 = icmp ugt i32 %39, 100000
  br i1 %40, label %390, label %41

; <label>:41:                                     ; preds = %37
  %42 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 7
  %43 = load i32, i32* %42, align 4
  %44 = icmp slt i32 %43, 5
  %45 = sub nsw i32 100000, %39
  %46 = icmp sgt i32 %43, %45
  %47 = or i1 %44, %46
  br i1 %47, label %390, label %48

; <label>:48:                                     ; preds = %41
  %49 = sub nsw i32 %17, %28
  %50 = sub nsw i32 %10, %32
  %51 = icmp eq i32 %49, 0
  %52 = icmp eq i32 %50, 0
  %53 = or i1 %51, %52
  br i1 %53, label %66, label %54

; <label>:54:                                     ; preds = %48
  %55 = sitofp i32 %49 to double
  %56 = sitofp i32 %50 to double
  %57 = fmul double %55, %56
  %58 = fdiv double %57, 7.000000e+00
  %59 = fadd double %58, 5.000000e-01
  %60 = tail call double @llvm.floor.f64(double %59) #18
  %61 = fcmp ole double %60, 0x41DFFFFFFFC00000
  %62 = fcmp oge double %60, 0xC1E0000000000000
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %390

; <label>:64:                                     ; preds = %54
  %65 = fptosi double %60 to i32
  br label %66

; <label>:66:                                     ; preds = %64, %48
  %67 = phi i32 [ 0, %48 ], [ %65, %64 ]
  %68 = sub nsw i32 %21, %32
  %69 = sub nsw i32 %6, %28
  %70 = icmp eq i32 %68, 0
  %71 = icmp eq i32 %69, 0
  %72 = or i1 %71, %70
  br i1 %72, label %85, label %73

; <label>:73:                                     ; preds = %66
  %74 = sitofp i32 %68 to double
  %75 = sitofp i32 %69 to double
  %76 = fmul double %75, %74
  %77 = fdiv double %76, 7.000000e+00
  %78 = fadd double %77, 5.000000e-01
  %79 = tail call double @llvm.floor.f64(double %78) #18
  %80 = fcmp ole double %79, 0x41DFFFFFFFC00000
  %81 = fcmp oge double %79, 0xC1E0000000000000
  %82 = and i1 %80, %81
  br i1 %82, label %83, label %390

; <label>:83:                                     ; preds = %73
  %84 = fptosi double %79 to i32
  br label %85

; <label>:85:                                     ; preds = %83, %66
  %86 = phi i32 [ 0, %66 ], [ %84, %83 ]
  %87 = sub nsw i32 %67, %86
  %88 = sub nsw i32 %43, %32
  %89 = icmp eq i32 %88, 0
  %90 = or i1 %51, %89
  br i1 %90, label %103, label %91

; <label>:91:                                     ; preds = %85
  %92 = sitofp i32 %49 to double
  %93 = sitofp i32 %88 to double
  %94 = fmul double %92, %93
  %95 = fdiv double %94, 7.000000e+00
  %96 = fadd double %95, 5.000000e-01
  %97 = tail call double @llvm.floor.f64(double %96) #18
  %98 = fcmp ole double %97, 0x41DFFFFFFFC00000
  %99 = fcmp oge double %97, 0xC1E0000000000000
  %100 = and i1 %98, %99
  br i1 %100, label %101, label %390

; <label>:101:                                    ; preds = %91
  %102 = fptosi double %97 to i32
  br label %103

; <label>:103:                                    ; preds = %101, %85
  %104 = phi i32 [ 0, %85 ], [ %102, %101 ]
  %105 = sub nsw i32 %39, %28
  %106 = icmp eq i32 %105, 0
  %107 = or i1 %70, %106
  br i1 %107, label %120, label %108

; <label>:108:                                    ; preds = %103
  %109 = sitofp i32 %68 to double
  %110 = sitofp i32 %105 to double
  %111 = fmul double %109, %110
  %112 = fdiv double %111, 7.000000e+00
  %113 = fadd double %112, 5.000000e-01
  %114 = tail call double @llvm.floor.f64(double %113) #18
  %115 = fcmp ole double %114, 0x41DFFFFFFFC00000
  %116 = fcmp oge double %114, 0xC1E0000000000000
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %390

; <label>:118:                                    ; preds = %108
  %119 = fptosi double %114 to i32
  br label %120

; <label>:120:                                    ; preds = %118, %103
  %121 = phi i32 [ 0, %103 ], [ %119, %118 ]
  %122 = sub nsw i32 %104, %121
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %390, label %124

; <label>:124:                                    ; preds = %120
  %125 = icmp eq i32 %87, 0
  br i1 %125, label %139, label %126

; <label>:126:                                    ; preds = %124
  %127 = sitofp i32 %43 to double
  %128 = sitofp i32 %87 to double
  %129 = fmul double %127, %128
  %130 = sitofp i32 %122 to double
  %131 = fdiv double %129, %130
  %132 = fadd double %131, 5.000000e-01
  %133 = tail call double @llvm.floor.f64(double %132) #18
  %134 = fcmp ole double %133, 0x41DFFFFFFFC00000
  %135 = fcmp oge double %133, 0xC1E0000000000000
  %136 = and i1 %134, %135
  br i1 %136, label %137, label %390

; <label>:137:                                    ; preds = %126
  %138 = fptosi double %133 to i32
  br label %139

; <label>:139:                                    ; preds = %137, %124
  %140 = phi i32 [ %138, %137 ], [ 0, %124 ]
  %141 = icmp sgt i32 %140, %43
  br i1 %141, label %142, label %390

; <label>:142:                                    ; preds = %139
  %143 = or i1 %52, %106
  br i1 %143, label %156, label %144

; <label>:144:                                    ; preds = %142
  %145 = sitofp i32 %50 to double
  %146 = sitofp i32 %105 to double
  %147 = fmul double %145, %146
  %148 = fdiv double %147, 7.000000e+00
  %149 = fadd double %148, 5.000000e-01
  %150 = tail call double @llvm.floor.f64(double %149) #18
  %151 = fcmp ole double %150, 0x41DFFFFFFFC00000
  %152 = fcmp oge double %150, 0xC1E0000000000000
  %153 = and i1 %151, %152
  br i1 %153, label %154, label %390

; <label>:154:                                    ; preds = %144
  %155 = fptosi double %150 to i32
  br label %156

; <label>:156:                                    ; preds = %154, %142
  %157 = phi i32 [ 0, %142 ], [ %155, %154 ]
  %158 = or i1 %71, %89
  br i1 %158, label %171, label %159

; <label>:159:                                    ; preds = %156
  %160 = sitofp i32 %69 to double
  %161 = sitofp i32 %88 to double
  %162 = fmul double %160, %161
  %163 = fdiv double %162, 7.000000e+00
  %164 = fadd double %163, 5.000000e-01
  %165 = tail call double @llvm.floor.f64(double %164) #18
  %166 = fcmp ole double %165, 0x41DFFFFFFFC00000
  %167 = fcmp oge double %165, 0xC1E0000000000000
  %168 = and i1 %166, %167
  br i1 %168, label %169, label %390

; <label>:169:                                    ; preds = %159
  %170 = fptosi double %165 to i32
  br label %171

; <label>:171:                                    ; preds = %169, %156
  %172 = phi i32 [ 0, %156 ], [ %170, %169 ]
  %173 = sub nsw i32 %157, %172
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %390, label %175

; <label>:175:                                    ; preds = %171
  br i1 %125, label %189, label %176

; <label>:176:                                    ; preds = %175
  %177 = sitofp i32 %43 to double
  %178 = sitofp i32 %87 to double
  %179 = fmul double %177, %178
  %180 = sitofp i32 %173 to double
  %181 = fdiv double %179, %180
  %182 = fadd double %181, 5.000000e-01
  %183 = tail call double @llvm.floor.f64(double %182) #18
  %184 = fcmp ole double %183, 0x41DFFFFFFFC00000
  %185 = fcmp oge double %183, 0xC1E0000000000000
  %186 = and i1 %184, %185
  br i1 %186, label %187, label %390

; <label>:187:                                    ; preds = %176
  %188 = fptosi double %183 to i32
  br label %189

; <label>:189:                                    ; preds = %187, %175
  %190 = phi i32 [ %188, %187 ], [ 0, %175 ]
  %191 = icmp sgt i32 %190, %43
  br i1 %191, label %192, label %390

; <label>:192:                                    ; preds = %189
  %193 = sitofp i32 %43 to double
  %194 = fdiv double 1.000000e+10, %193
  %195 = fadd double %194, 5.000000e-01
  %196 = tail call double @llvm.floor.f64(double %195) #18
  %197 = fcmp ole double %196, 0x41DFFFFFFFC00000
  %198 = fcmp oge double %196, 0xC1E0000000000000
  %199 = and i1 %197, %198
  %200 = fptosi double %196 to i32
  %201 = select i1 %199, i32 %200, i32 0
  %202 = sitofp i32 %140 to double
  %203 = fdiv double 1.000000e+10, %202
  %204 = fadd double %203, 5.000000e-01
  %205 = tail call double @llvm.floor.f64(double %204) #18
  %206 = fcmp ole double %205, 0x41DFFFFFFFC00000
  %207 = fcmp oge double %205, 0xC1E0000000000000
  %208 = and i1 %206, %207
  %209 = fptosi double %205 to i32
  %210 = select i1 %208, i32 %209, i32 0
  %211 = sub nsw i32 %201, %210
  %212 = sitofp i32 %190 to double
  %213 = fdiv double 1.000000e+10, %212
  %214 = fadd double %213, 5.000000e-01
  %215 = tail call double @llvm.floor.f64(double %214) #18
  %216 = fcmp ole double %215, 0x41DFFFFFFFC00000
  %217 = fcmp oge double %215, 0xC1E0000000000000
  %218 = and i1 %216, %217
  %219 = fptosi double %215 to i32
  %220 = sub i32 0, %219
  %221 = select i1 %218, i32 %220, i32 0
  %222 = add i32 %221, %211
  %223 = icmp slt i32 %222, 1
  br i1 %223, label %390, label %224

; <label>:224:                                    ; preds = %192
  %225 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 0
  %226 = icmp eq i32 %140, 0
  br i1 %226, label %390, label %227

; <label>:227:                                    ; preds = %224
  %228 = icmp eq i32 %6, 0
  br i1 %228, label %240, label %229

; <label>:229:                                    ; preds = %227
  %230 = sitofp i32 %6 to double
  %231 = fmul double %230, 1.000000e+05
  %232 = fdiv double %231, %202
  %233 = fadd double %232, 5.000000e-01
  %234 = tail call double @llvm.floor.f64(double %233) #18
  %235 = fcmp ole double %234, 0x41DFFFFFFFC00000
  %236 = fcmp oge double %234, 0xC1E0000000000000
  %237 = and i1 %235, %236
  br i1 %237, label %238, label %390

; <label>:238:                                    ; preds = %229
  %239 = fptosi double %234 to i32
  br label %240

; <label>:240:                                    ; preds = %238, %227
  %241 = phi i32 [ %239, %238 ], [ 0, %227 ]
  store i32 %241, i32* %225, align 4
  %242 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 1
  %243 = load i32, i32* %9, align 4
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %256, label %245

; <label>:245:                                    ; preds = %240
  %246 = sitofp i32 %243 to double
  %247 = fmul double %246, 1.000000e+05
  %248 = fdiv double %247, %202
  %249 = fadd double %248, 5.000000e-01
  %250 = tail call double @llvm.floor.f64(double %249) #18
  %251 = fcmp ole double %250, 0x41DFFFFFFFC00000
  %252 = fcmp oge double %250, 0xC1E0000000000000
  %253 = and i1 %251, %252
  br i1 %253, label %254, label %390

; <label>:254:                                    ; preds = %245
  %255 = fptosi double %250 to i32
  br label %256

; <label>:256:                                    ; preds = %254, %240
  %257 = phi i32 [ %255, %254 ], [ 0, %240 ]
  store i32 %257, i32* %242, align 4
  %258 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 2
  %259 = load i32, i32* %5, align 4
  %260 = sub nsw i32 100000, %259
  %261 = load i32, i32* %9, align 4
  %262 = sub i32 %260, %261
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %275, label %264

; <label>:264:                                    ; preds = %256
  %265 = sitofp i32 %262 to double
  %266 = fmul double %265, 1.000000e+05
  %267 = fdiv double %266, %202
  %268 = fadd double %267, 5.000000e-01
  %269 = tail call double @llvm.floor.f64(double %268) #18
  %270 = fcmp ole double %269, 0x41DFFFFFFFC00000
  %271 = fcmp oge double %269, 0xC1E0000000000000
  %272 = and i1 %270, %271
  br i1 %272, label %273, label %390

; <label>:273:                                    ; preds = %264
  %274 = fptosi double %269 to i32
  br label %275

; <label>:275:                                    ; preds = %273, %256
  %276 = phi i32 [ %274, %273 ], [ 0, %256 ]
  store i32 %276, i32* %258, align 4
  %277 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 3
  %278 = load i32, i32* %16, align 4
  %279 = icmp eq i32 %190, 0
  br i1 %279, label %390, label %280

; <label>:280:                                    ; preds = %275
  %281 = icmp eq i32 %278, 0
  br i1 %281, label %293, label %282

; <label>:282:                                    ; preds = %280
  %283 = sitofp i32 %278 to double
  %284 = fmul double %283, 1.000000e+05
  %285 = fdiv double %284, %212
  %286 = fadd double %285, 5.000000e-01
  %287 = tail call double @llvm.floor.f64(double %286) #18
  %288 = fcmp ole double %287, 0x41DFFFFFFFC00000
  %289 = fcmp oge double %287, 0xC1E0000000000000
  %290 = and i1 %288, %289
  br i1 %290, label %291, label %390

; <label>:291:                                    ; preds = %282
  %292 = fptosi double %287 to i32
  br label %293

; <label>:293:                                    ; preds = %291, %280
  %294 = phi i32 [ %292, %291 ], [ 0, %280 ]
  store i32 %294, i32* %277, align 4
  %295 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 4
  %296 = load i32, i32* %20, align 4
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %309, label %298

; <label>:298:                                    ; preds = %293
  %299 = sitofp i32 %296 to double
  %300 = fmul double %299, 1.000000e+05
  %301 = fdiv double %300, %212
  %302 = fadd double %301, 5.000000e-01
  %303 = tail call double @llvm.floor.f64(double %302) #18
  %304 = fcmp ole double %303, 0x41DFFFFFFFC00000
  %305 = fcmp oge double %303, 0xC1E0000000000000
  %306 = and i1 %304, %305
  br i1 %306, label %307, label %390

; <label>:307:                                    ; preds = %298
  %308 = fptosi double %303 to i32
  br label %309

; <label>:309:                                    ; preds = %307, %293
  %310 = phi i32 [ %308, %307 ], [ 0, %293 ]
  store i32 %310, i32* %295, align 4
  %311 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 5
  %312 = load i32, i32* %16, align 4
  %313 = sub nsw i32 100000, %312
  %314 = load i32, i32* %20, align 4
  %315 = sub i32 %313, %314
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %328, label %317

; <label>:317:                                    ; preds = %309
  %318 = sitofp i32 %315 to double
  %319 = fmul double %318, 1.000000e+05
  %320 = fdiv double %319, %212
  %321 = fadd double %320, 5.000000e-01
  %322 = tail call double @llvm.floor.f64(double %321) #18
  %323 = fcmp ole double %322, 0x41DFFFFFFFC00000
  %324 = fcmp oge double %322, 0xC1E0000000000000
  %325 = and i1 %323, %324
  br i1 %325, label %326, label %390

; <label>:326:                                    ; preds = %317
  %327 = fptosi double %322 to i32
  br label %328

; <label>:328:                                    ; preds = %326, %309
  %329 = phi i32 [ %327, %326 ], [ 0, %309 ]
  store i32 %329, i32* %311, align 4
  %330 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 6
  %331 = load i32, i32* %27, align 4
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %345, label %333

; <label>:333:                                    ; preds = %328
  %334 = sitofp i32 %331 to double
  %335 = sitofp i32 %222 to double
  %336 = fmul double %335, %334
  %337 = fdiv double %336, 1.000000e+05
  %338 = fadd double %337, 5.000000e-01
  %339 = tail call double @llvm.floor.f64(double %338) #18
  %340 = fcmp ole double %339, 0x41DFFFFFFFC00000
  %341 = fcmp oge double %339, 0xC1E0000000000000
  %342 = and i1 %340, %341
  br i1 %342, label %343, label %390

; <label>:343:                                    ; preds = %333
  %344 = fptosi double %339 to i32
  br label %345

; <label>:345:                                    ; preds = %343, %328
  %346 = phi i32 [ %344, %343 ], [ 0, %328 ]
  store i32 %346, i32* %330, align 4
  %347 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 7
  %348 = load i32, i32* %31, align 4
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %362, label %350

; <label>:350:                                    ; preds = %345
  %351 = sitofp i32 %348 to double
  %352 = sitofp i32 %222 to double
  %353 = fmul double %352, %351
  %354 = fdiv double %353, 1.000000e+05
  %355 = fadd double %354, 5.000000e-01
  %356 = tail call double @llvm.floor.f64(double %355) #18
  %357 = fcmp ole double %356, 0x41DFFFFFFFC00000
  %358 = fcmp oge double %356, 0xC1E0000000000000
  %359 = and i1 %357, %358
  br i1 %359, label %360, label %390

; <label>:360:                                    ; preds = %350
  %361 = fptosi double %356 to i32
  br label %362

; <label>:362:                                    ; preds = %360, %345
  %363 = phi i32 [ %361, %360 ], [ 0, %345 ]
  store i32 %363, i32* %347, align 4
  %364 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %0, i64 0, i32 8
  %365 = load i32, i32* %27, align 4
  %366 = sub nsw i32 100000, %365
  %367 = load i32, i32* %31, align 4
  %368 = sub i32 %366, %367
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %382, label %370

; <label>:370:                                    ; preds = %362
  %371 = sitofp i32 %368 to double
  %372 = sitofp i32 %222 to double
  %373 = fmul double %372, %371
  %374 = fdiv double %373, 1.000000e+05
  %375 = fadd double %374, 5.000000e-01
  %376 = tail call double @llvm.floor.f64(double %375) #18
  %377 = fcmp ole double %376, 0x41DFFFFFFFC00000
  %378 = fcmp oge double %376, 0xC1E0000000000000
  %379 = and i1 %377, %378
  br i1 %379, label %380, label %390

; <label>:380:                                    ; preds = %370
  %381 = fptosi double %376 to i32
  br label %382

; <label>:382:                                    ; preds = %362, %380
  %383 = phi i32 [ %381, %380 ], [ 0, %362 ]
  store i32 %383, i32* %364, align 4
  %384 = call fastcc i32 @MOZ_PNG_xy_from_XYZ(%struct.png_xy* nonnull %3, %struct.png_XYZ* nonnull %0)
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %386, label %390

; <label>:386:                                    ; preds = %382
  %387 = call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nonnull %1, %struct.png_xy* nonnull %3, i32 5)
  %388 = icmp eq i32 %387, 0
  %389 = zext i1 %388 to i32
  br label %390

; <label>:390:                                    ; preds = %275, %282, %224, %229, %171, %176, %120, %126, %370, %350, %333, %317, %298, %264, %245, %159, %144, %108, %91, %73, %54, %192, %189, %139, %41, %37, %30, %26, %19, %15, %8, %2, %386, %382
  %391 = phi i32 [ %384, %382 ], [ %389, %386 ], [ 1, %275 ], [ 1, %282 ], [ 1, %224 ], [ 1, %229 ], [ 1, %171 ], [ 1, %176 ], [ 1, %120 ], [ 1, %126 ], [ 1, %370 ], [ 1, %350 ], [ 1, %333 ], [ 1, %317 ], [ 1, %298 ], [ 1, %264 ], [ 1, %245 ], [ 2, %159 ], [ 2, %144 ], [ 2, %108 ], [ 2, %91 ], [ 2, %73 ], [ 2, %54 ], [ 1, %192 ], [ 1, %189 ], [ 1, %139 ], [ 1, %41 ], [ 1, %37 ], [ 1, %30 ], [ 1, %26 ], [ 1, %19 ], [ 1, %15 ], [ 1, %8 ], [ 1, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #18
  ret i32 %391
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_benign_err(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 1048576
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %8 = load i32, i32* %7, align 8
  %9 = trunc i32 %8 to i16
  %10 = icmp slt i16 %9, 0
  br i1 %6, label %18, label %11

; <label>:11:                                     ; preds = %2
  br i1 %10, label %12, label %17

; <label>:12:                                     ; preds = %11
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %12
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* %1)
  br label %25

; <label>:17:                                     ; preds = %12, %11
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* %1)
  br label %25

; <label>:18:                                     ; preds = %2
  br i1 %10, label %19, label %24

; <label>:19:                                     ; preds = %18
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %24, label %23

; <label>:23:                                     ; preds = %19
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* %1) #19
  unreachable

; <label>:24:                                     ; preds = %19, %18
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* %1) #19
  unreachable

; <label>:25:                                     ; preds = %16, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_cs_set_endpts(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias nocapture, %struct.png_XYZ* nocapture readonly, i32) local_unnamed_addr #4 {
  %5 = alloca %struct.png_XYZ, align 4
  %6 = alloca %struct.png_XYZ, align 4
  %7 = alloca %struct.png_xy, align 4
  %8 = bitcast %struct.png_XYZ* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %8) #18
  %9 = bitcast %struct.png_XYZ* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* align 4 %9, i64 36, i1 false)
  %10 = bitcast %struct.png_xy* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #18
  %11 = bitcast %struct.png_XYZ* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %11) #18
  %12 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %197, label %15

; <label>:15:                                     ; preds = %4
  %16 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %197, label %19

; <label>:19:                                     ; preds = %15
  %20 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %197, label %23

; <label>:23:                                     ; preds = %19
  %24 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %197, label %27

; <label>:27:                                     ; preds = %23
  %28 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %197, label %31

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 6
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %197, label %35

; <label>:35:                                     ; preds = %31
  %36 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 2
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %197, label %39

; <label>:39:                                     ; preds = %35
  %40 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 5
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %197, label %43

; <label>:43:                                     ; preds = %39
  %44 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %6, i64 0, i32 8
  %45 = load i32, i32* %44, align 4
  %46 = icmp slt i32 %45, 0
  %47 = sub nsw i32 2147483647, %13
  %48 = icmp slt i32 %47, %29
  %49 = or i1 %48, %46
  br i1 %49, label %197, label %50

; <label>:50:                                     ; preds = %43
  %51 = add nsw i32 %17, %13
  %52 = sub nsw i32 2147483647, %51
  %53 = icmp slt i32 %52, %33
  br i1 %53, label %197, label %54

; <label>:54:                                     ; preds = %50
  %55 = add nsw i32 %21, %51
  switch i32 %55, label %56 [
    i32 100000, label %192
    i32 0, label %197
  ]

; <label>:56:                                     ; preds = %54
  %57 = icmp eq i32 %25, 0
  br i1 %57, label %70, label %58

; <label>:58:                                     ; preds = %56
  %59 = sitofp i32 %25 to double
  %60 = fmul double %59, 1.000000e+05
  %61 = sitofp i32 %55 to double
  %62 = fdiv double %60, %61
  %63 = fadd double %62, 5.000000e-01
  %64 = tail call double @llvm.floor.f64(double %63) #18
  %65 = fcmp ole double %64, 0x41DFFFFFFFC00000
  %66 = fcmp oge double %64, 0xC1E0000000000000
  %67 = and i1 %65, %66
  br i1 %67, label %68, label %197

; <label>:68:                                     ; preds = %58
  %69 = fptosi double %64 to i32
  br label %70

; <label>:70:                                     ; preds = %68, %56
  %71 = phi i32 [ %69, %68 ], [ 0, %56 ]
  store i32 %71, i32* %24, align 4
  %72 = icmp eq i32 %13, 0
  br i1 %72, label %85, label %73

; <label>:73:                                     ; preds = %70
  %74 = sitofp i32 %13 to double
  %75 = fmul double %74, 1.000000e+05
  %76 = sitofp i32 %55 to double
  %77 = fdiv double %75, %76
  %78 = fadd double %77, 5.000000e-01
  %79 = tail call double @llvm.floor.f64(double %78) #18
  %80 = fcmp ole double %79, 0x41DFFFFFFFC00000
  %81 = fcmp oge double %79, 0xC1E0000000000000
  %82 = and i1 %80, %81
  br i1 %82, label %83, label %197

; <label>:83:                                     ; preds = %73
  %84 = fptosi double %79 to i32
  br label %85

; <label>:85:                                     ; preds = %83, %70
  %86 = phi i32 [ %84, %83 ], [ 0, %70 ]
  store i32 %86, i32* %12, align 4
  %87 = icmp eq i32 %37, 0
  br i1 %87, label %100, label %88

; <label>:88:                                     ; preds = %85
  %89 = sitofp i32 %37 to double
  %90 = fmul double %89, 1.000000e+05
  %91 = sitofp i32 %55 to double
  %92 = fdiv double %90, %91
  %93 = fadd double %92, 5.000000e-01
  %94 = tail call double @llvm.floor.f64(double %93) #18
  %95 = fcmp ole double %94, 0x41DFFFFFFFC00000
  %96 = fcmp oge double %94, 0xC1E0000000000000
  %97 = and i1 %95, %96
  br i1 %97, label %98, label %197

; <label>:98:                                     ; preds = %88
  %99 = fptosi double %94 to i32
  br label %100

; <label>:100:                                    ; preds = %98, %85
  %101 = phi i32 [ %99, %98 ], [ 0, %85 ]
  store i32 %101, i32* %36, align 4
  %102 = icmp eq i32 %29, 0
  br i1 %102, label %115, label %103

; <label>:103:                                    ; preds = %100
  %104 = sitofp i32 %29 to double
  %105 = fmul double %104, 1.000000e+05
  %106 = sitofp i32 %55 to double
  %107 = fdiv double %105, %106
  %108 = fadd double %107, 5.000000e-01
  %109 = tail call double @llvm.floor.f64(double %108) #18
  %110 = fcmp ole double %109, 0x41DFFFFFFFC00000
  %111 = fcmp oge double %109, 0xC1E0000000000000
  %112 = and i1 %110, %111
  br i1 %112, label %113, label %197

; <label>:113:                                    ; preds = %103
  %114 = fptosi double %109 to i32
  br label %115

; <label>:115:                                    ; preds = %113, %100
  %116 = phi i32 [ %114, %113 ], [ 0, %100 ]
  store i32 %116, i32* %28, align 4
  %117 = icmp eq i32 %17, 0
  br i1 %117, label %130, label %118

; <label>:118:                                    ; preds = %115
  %119 = sitofp i32 %17 to double
  %120 = fmul double %119, 1.000000e+05
  %121 = sitofp i32 %55 to double
  %122 = fdiv double %120, %121
  %123 = fadd double %122, 5.000000e-01
  %124 = tail call double @llvm.floor.f64(double %123) #18
  %125 = fcmp ole double %124, 0x41DFFFFFFFC00000
  %126 = fcmp oge double %124, 0xC1E0000000000000
  %127 = and i1 %125, %126
  br i1 %127, label %128, label %197

; <label>:128:                                    ; preds = %118
  %129 = fptosi double %124 to i32
  br label %130

; <label>:130:                                    ; preds = %128, %115
  %131 = phi i32 [ %129, %128 ], [ 0, %115 ]
  store i32 %131, i32* %16, align 4
  %132 = icmp eq i32 %41, 0
  br i1 %132, label %145, label %133

; <label>:133:                                    ; preds = %130
  %134 = sitofp i32 %41 to double
  %135 = fmul double %134, 1.000000e+05
  %136 = sitofp i32 %55 to double
  %137 = fdiv double %135, %136
  %138 = fadd double %137, 5.000000e-01
  %139 = tail call double @llvm.floor.f64(double %138) #18
  %140 = fcmp ole double %139, 0x41DFFFFFFFC00000
  %141 = fcmp oge double %139, 0xC1E0000000000000
  %142 = and i1 %140, %141
  br i1 %142, label %143, label %197

; <label>:143:                                    ; preds = %133
  %144 = fptosi double %139 to i32
  br label %145

; <label>:145:                                    ; preds = %143, %130
  %146 = phi i32 [ %144, %143 ], [ 0, %130 ]
  store i32 %146, i32* %40, align 4
  %147 = icmp eq i32 %33, 0
  br i1 %147, label %160, label %148

; <label>:148:                                    ; preds = %145
  %149 = sitofp i32 %33 to double
  %150 = fmul double %149, 1.000000e+05
  %151 = sitofp i32 %55 to double
  %152 = fdiv double %150, %151
  %153 = fadd double %152, 5.000000e-01
  %154 = tail call double @llvm.floor.f64(double %153) #18
  %155 = fcmp ole double %154, 0x41DFFFFFFFC00000
  %156 = fcmp oge double %154, 0xC1E0000000000000
  %157 = and i1 %155, %156
  br i1 %157, label %158, label %197

; <label>:158:                                    ; preds = %148
  %159 = fptosi double %154 to i32
  br label %160

; <label>:160:                                    ; preds = %158, %145
  %161 = phi i32 [ %159, %158 ], [ 0, %145 ]
  store i32 %161, i32* %32, align 4
  %162 = icmp eq i32 %21, 0
  br i1 %162, label %175, label %163

; <label>:163:                                    ; preds = %160
  %164 = sitofp i32 %21 to double
  %165 = fmul double %164, 1.000000e+05
  %166 = sitofp i32 %55 to double
  %167 = fdiv double %165, %166
  %168 = fadd double %167, 5.000000e-01
  %169 = tail call double @llvm.floor.f64(double %168) #18
  %170 = fcmp ole double %169, 0x41DFFFFFFFC00000
  %171 = fcmp oge double %169, 0xC1E0000000000000
  %172 = and i1 %170, %171
  br i1 %172, label %173, label %197

; <label>:173:                                    ; preds = %163
  %174 = fptosi double %169 to i32
  br label %175

; <label>:175:                                    ; preds = %173, %160
  %176 = phi i32 [ %174, %173 ], [ 0, %160 ]
  store i32 %176, i32* %20, align 4
  %177 = icmp eq i32 %45, 0
  br i1 %177, label %190, label %178

; <label>:178:                                    ; preds = %175
  %179 = sitofp i32 %45 to double
  %180 = fmul double %179, 1.000000e+05
  %181 = sitofp i32 %55 to double
  %182 = fdiv double %180, %181
  %183 = fadd double %182, 5.000000e-01
  %184 = tail call double @llvm.floor.f64(double %183) #18
  %185 = fcmp ole double %184, 0x41DFFFFFFFC00000
  %186 = fcmp oge double %184, 0xC1E0000000000000
  %187 = and i1 %185, %186
  br i1 %187, label %188, label %197

; <label>:188:                                    ; preds = %178
  %189 = fptosi double %184 to i32
  br label %190

; <label>:190:                                    ; preds = %175, %188
  %191 = phi i32 [ %189, %188 ], [ 0, %175 ]
  store i32 %191, i32* %44, align 4
  br label %192

; <label>:192:                                    ; preds = %190, %54
  %193 = call fastcc i32 @MOZ_PNG_xy_from_XYZ(%struct.png_xy* nonnull %7, %struct.png_XYZ* nonnull %6) #18
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %198

; <label>:195:                                    ; preds = %192
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %11, i8* nonnull align 4 %8, i64 36, i1 false) #18
  %196 = call fastcc i32 @png_colorspace_check_xy(%struct.png_XYZ* nonnull %5, %struct.png_xy* nonnull %7) #18
  br label %198

; <label>:197:                                    ; preds = %43, %39, %35, %31, %27, %23, %19, %15, %4, %50, %73, %88, %103, %118, %133, %148, %163, %178, %58, %54
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %11) #18
  br label %253

; <label>:198:                                    ; preds = %192, %195
  %199 = phi i32 [ %196, %195 ], [ %193, %192 ]
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %11) #18
  switch i32 %199, label %283 [
    i32 0, label %200
    i32 1, label %253
  ]

; <label>:200:                                    ; preds = %198
  %201 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %202 = load i16, i16* %201, align 2, !alias.scope !55, !noalias !58
  %203 = icmp slt i16 %202, 0
  br i1 %203, label %287, label %204

; <label>:204:                                    ; preds = %200
  %205 = icmp sgt i32 %3, 1
  %206 = and i16 %202, 2
  %207 = icmp eq i16 %206, 0
  %208 = or i1 %205, %207
  %209 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  br i1 %208, label %243, label %210

; <label>:210:                                    ; preds = %204
  %211 = call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nonnull %7, %struct.png_xy* nonnull %209, i32 100) #18, !noalias !58
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %241

; <label>:213:                                    ; preds = %210
  %214 = or i16 %202, -32768
  store i16 %214, i16* %201, align 2, !alias.scope !55, !noalias !58
  %215 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %216 = load i32, i32* %215, align 4, !alias.scope !60
  %217 = and i32 %216, 1048576
  %218 = icmp eq i32 %217, 0
  %219 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %220 = load i32, i32* %219, align 8, !alias.scope !60
  %221 = trunc i32 %220 to i16
  %222 = icmp slt i16 %221, 0
  br i1 %218, label %234, label %223

; <label>:223:                                    ; preds = %213
  br i1 %222, label %224, label %229

; <label>:224:                                    ; preds = %223
  %225 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %226 = load i32, i32* %225, align 8, !alias.scope !60
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %229, label %228

; <label>:228:                                    ; preds = %224
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.211, i64 0, i64 0)) #18
  br label %287

; <label>:229:                                    ; preds = %223, %224
  %230 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %231 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %230, align 8, !alias.scope !63
  %232 = icmp eq void (%struct.png_struct_def*, i8*)* %231, null
  br i1 %232, label %287, label %233

; <label>:233:                                    ; preds = %229
  tail call void %231(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.211, i64 0, i64 0)) #18
  br label %287

; <label>:234:                                    ; preds = %213
  br i1 %222, label %235, label %240

; <label>:235:                                    ; preds = %234
  %236 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %237 = load i32, i32* %236, align 8, !alias.scope !60
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %240, label %239

; <label>:239:                                    ; preds = %235
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.211, i64 0, i64 0)) #22
  unreachable

; <label>:240:                                    ; preds = %235, %234
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.211, i64 0, i64 0)) #22
  unreachable

; <label>:241:                                    ; preds = %210
  %242 = icmp eq i32 %3, 0
  br i1 %242, label %287, label %243

; <label>:243:                                    ; preds = %241, %204
  %244 = bitcast %struct.png_xy* %209 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %244, i8* nonnull align 4 %10, i64 32, i1 false) #18, !noalias !58
  %245 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 2
  %246 = bitcast %struct.png_XYZ* %245 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %246, i8* nonnull align 4 %8, i64 36, i1 false) #18, !noalias !58
  %247 = call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nonnull %7, %struct.png_xy* nonnull @sRGB_xy, i32 1000) #18, !noalias !55
  %248 = icmp eq i32 %247, 0
  %249 = and i16 %202, -67
  %250 = or i16 %249, 2
  %251 = or i16 %202, 66
  %252 = select i1 %248, i16 %250, i16 %251
  store i16 %252, i16* %201, align 2, !alias.scope !55, !noalias !58
  br label %287

; <label>:253:                                    ; preds = %197, %198
  %254 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %255 = load i16, i16* %254, align 2
  %256 = or i16 %255, -32768
  store i16 %256, i16* %254, align 2
  %257 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %258 = load i32, i32* %257, align 4, !alias.scope !66
  %259 = and i32 %258, 1048576
  %260 = icmp eq i32 %259, 0
  %261 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %262 = load i32, i32* %261, align 8, !alias.scope !66
  %263 = trunc i32 %262 to i16
  %264 = icmp slt i16 %263, 0
  br i1 %260, label %276, label %265

; <label>:265:                                    ; preds = %253
  br i1 %264, label %266, label %271

; <label>:266:                                    ; preds = %265
  %267 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %268 = load i32, i32* %267, align 8, !alias.scope !66
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %271, label %270

; <label>:270:                                    ; preds = %266
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0)) #18
  br label %287

; <label>:271:                                    ; preds = %265, %266
  %272 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %273 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %272, align 8, !alias.scope !69
  %274 = icmp eq void (%struct.png_struct_def*, i8*)* %273, null
  br i1 %274, label %287, label %275

; <label>:275:                                    ; preds = %271
  tail call void %273(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0)) #18
  br label %287

; <label>:276:                                    ; preds = %253
  br i1 %264, label %277, label %282

; <label>:277:                                    ; preds = %276
  %278 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %279 = load i32, i32* %278, align 8, !alias.scope !66
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %282, label %281

; <label>:281:                                    ; preds = %277
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0)) #22
  unreachable

; <label>:282:                                    ; preds = %277, %276
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0)) #22
  unreachable

; <label>:283:                                    ; preds = %198
  %284 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %285 = load i16, i16* %284, align 2
  %286 = or i16 %285, -32768
  store i16 %286, i16* %284, align 2
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21, i64 0, i64 0)) #19
  unreachable

; <label>:287:                                    ; preds = %270, %271, %275, %243, %241, %200, %233, %229, %228
  %288 = phi i32 [ 2, %243 ], [ 0, %200 ], [ 1, %241 ], [ 0, %233 ], [ 0, %229 ], [ 0, %228 ], [ 0, %275 ], [ 0, %271 ], [ 0, %270 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #18
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %8) #18
  ret i32 %288
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_cs_set_sRGB(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i32) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %5 = load i16, i16* %4, align 2
  %6 = icmp slt i16 %5, 0
  br i1 %6, label %93, label %7

; <label>:7:                                      ; preds = %3
  %8 = icmp ugt i32 %2, 3
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %7
  %10 = sext i32 %2 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* nonnull %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i64 %10, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.24, i64 0, i64 0))
  br label %93

; <label>:11:                                     ; preds = %7
  %12 = and i16 %5, 4
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %21, label %14

; <label>:14:                                     ; preds = %11
  %15 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 3
  %16 = load i16, i16* %15, align 4
  %17 = zext i16 %16 to i32
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %14
  %20 = sext i32 %2 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* nonnull %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i64 %20, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.25, i64 0, i64 0))
  br label %93

; <label>:21:                                     ; preds = %14, %11
  %22 = zext i16 %5 to i32
  %23 = and i32 %22, 32
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %52, label %25

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %27 = load i32, i32* %26, align 4, !alias.scope !72
  %28 = and i32 %27, 1048576
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %31 = load i32, i32* %30, align 8, !alias.scope !72
  %32 = trunc i32 %31 to i16
  %33 = icmp slt i16 %32, 0
  br i1 %29, label %45, label %34

; <label>:34:                                     ; preds = %25
  br i1 %33, label %35, label %40

; <label>:35:                                     ; preds = %34
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %37 = load i32, i32* %36, align 8, !alias.scope !72
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %40, label %39

; <label>:39:                                     ; preds = %35
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0)) #18
  br label %93

; <label>:40:                                     ; preds = %34, %35
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %42 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %41, align 8, !alias.scope !75
  %43 = icmp eq void (%struct.png_struct_def*, i8*)* %42, null
  br i1 %43, label %93, label %44

; <label>:44:                                     ; preds = %40
  tail call void %42(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0)) #18
  br label %93

; <label>:45:                                     ; preds = %25
  br i1 %33, label %46, label %51

; <label>:46:                                     ; preds = %45
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %48 = load i32, i32* %47, align 8, !alias.scope !72
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %51, label %50

; <label>:50:                                     ; preds = %46
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0)) #22
  unreachable

; <label>:51:                                     ; preds = %46, %45
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0)) #22
  unreachable

; <label>:52:                                     ; preds = %21
  %53 = and i32 %22, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %61, label %55

; <label>:55:                                     ; preds = %52
  %56 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  %57 = tail call fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nonnull @sRGB_xy, %struct.png_xy* nonnull %56, i32 100)
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

; <label>:59:                                     ; preds = %55
  tail call void @MOZ_PNG_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.27, i64 0, i64 0), i32 2)
  %60 = load i16, i16* %4, align 2, !alias.scope !78, !noalias !81
  br label %61

; <label>:61:                                     ; preds = %55, %52, %59
  %62 = phi i16 [ %5, %55 ], [ %5, %52 ], [ %60, %59 ]
  %63 = and i16 %62, 1
  %64 = icmp eq i16 %63, 0
  %65 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 0
  br i1 %64, label %84, label %66

; <label>:66:                                     ; preds = %61
  %67 = load i32, i32* %65, align 4, !alias.scope !78, !noalias !81
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %82, label %69

; <label>:69:                                     ; preds = %66
  %70 = sitofp i32 %67 to double
  %71 = fmul double %70, 1.000000e+05
  %72 = fdiv double %71, 4.545500e+04
  %73 = fadd double %72, 5.000000e-01
  %74 = tail call double @llvm.floor.f64(double %73) #18
  %75 = fcmp ole double %74, 0x41DFFFFFFFC00000
  %76 = fcmp oge double %74, 0xC1E0000000000000
  %77 = and i1 %75, %76
  br i1 %77, label %78, label %82

; <label>:78:                                     ; preds = %69
  %79 = fptosi double %74 to i32
  %80 = add i32 %79, -95000
  %81 = icmp ult i32 %80, 10001
  br i1 %81, label %84, label %82

; <label>:82:                                     ; preds = %78, %69, %66
  tail call void @MOZ_PNG_chunk_report(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.209, i64 0, i64 0), i32 2) #18, !noalias !78
  %83 = load i16, i16* %4, align 2
  br label %84

; <label>:84:                                     ; preds = %61, %78, %82
  %85 = phi i16 [ %62, %78 ], [ %83, %82 ], [ %62, %61 ]
  %86 = trunc i32 %2 to i16
  %87 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 3
  store i16 %86, i16* %87, align 4
  %88 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 1
  %89 = bitcast %struct.png_xy* %88 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %89, i8* align 4 bitcast (%struct.png_xy* @sRGB_xy to i8*), i64 32, i1 false)
  %90 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 2
  %91 = bitcast %struct.png_XYZ* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %91, i8* align 4 bitcast (%struct.png_XYZ* @MOZ_PNG_cs_set_sRGB.sRGB_XYZ to i8*), i64 36, i1 false)
  store i32 45455, i32* %65, align 4
  %92 = or i16 %85, 231
  store i16 %92, i16* %4, align 2
  br label %93

; <label>:93:                                     ; preds = %39, %40, %44, %3, %84, %19, %9
  %94 = phi i32 [ 0, %9 ], [ 0, %19 ], [ 1, %84 ], [ 0, %3 ], [ 0, %44 ], [ 0, %40 ], [ 0, %39 ]
  ret i32 %94
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @png_icc_profile_error(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8* readonly, i64, i8* readonly) unnamed_addr #4 {
  %6 = alloca [196 x i8], align 16
  %7 = alloca [24 x i8], align 16
  %8 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 196, i8* nonnull %8) #18
  %9 = icmp ne %struct.png_colorspace* %1, null
  br i1 %9, label %10, label %14

; <label>:10:                                     ; preds = %5
  %11 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %12 = load i16, i16* %11, align 2
  %13 = or i16 %12, -32768
  store i16 %13, i16* %11, align 2
  br label %14

; <label>:14:                                     ; preds = %5, %10
  store i8 112, i8* %8, align 16
  %15 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 1
  store i8 114, i8* %15, align 1
  %16 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 2
  store i8 111, i8* %16, align 2
  %17 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 3
  store i8 102, i8* %17, align 1
  %18 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 4
  store i8 105, i8* %18, align 4
  %19 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 5
  store i8 108, i8* %19, align 1
  %20 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 6
  store i8 101, i8* %20, align 2
  %21 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 7
  store i8 32, i8* %21, align 1
  %22 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 8
  store i8 39, i8* %22, align 8
  %23 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 9
  store i8 0, i8* %23, align 1
  %24 = icmp eq i8* %2, null
  br i1 %24, label %41, label %25

; <label>:25:                                     ; preds = %14
  %26 = load i8, i8* %2, align 1
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %41, label %28

; <label>:28:                                     ; preds = %25, %28
  %29 = phi i8 [ %35, %28 ], [ %26, %25 ]
  %30 = phi i8* [ %32, %28 ], [ %2, %25 ]
  %31 = phi i64 [ %33, %28 ], [ 9, %25 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 1
  %33 = add nuw nsw i64 %31, 1
  %34 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %31
  store i8 %29, i8* %34, align 1
  %35 = load i8, i8* %32, align 1
  %36 = icmp ne i8 %35, 0
  %37 = icmp ult i64 %33, 87
  %38 = and i1 %37, %36
  br i1 %38, label %28, label %39

; <label>:39:                                     ; preds = %28
  %40 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %33
  br label %41

; <label>:41:                                     ; preds = %14, %25, %39
  %42 = phi i8* [ %40, %39 ], [ %23, %25 ], [ %23, %14 ]
  %43 = phi i64 [ %33, %39 ], [ 9, %25 ], [ 9, %14 ]
  store i8 0, i8* %42, align 1
  %44 = add nuw nsw i64 %43, 1
  %45 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %43
  store i8 39, i8* %45, align 1
  %46 = add nsw i64 %43, 2
  %47 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %44
  store i8 58, i8* %47, align 1
  %48 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %46
  store i8 32, i8* %48, align 1
  %49 = add i64 %43, 3
  %50 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %49
  store i8 0, i8* %50, align 1
  %51 = lshr i64 %3, 24
  %52 = icmp eq i64 %51, 32
  %53 = add nsw i64 %51, -48
  %54 = icmp ult i64 %53, 10
  %55 = or i1 %52, %54
  %56 = and i64 %51, 1099511627743
  %57 = add nsw i64 %56, -65
  %58 = icmp ult i64 %57, 26
  %59 = or i1 %58, %55
  br i1 %59, label %60, label %127

; <label>:60:                                     ; preds = %41
  %61 = lshr i64 %3, 16
  %62 = and i64 %61, 255
  %63 = icmp eq i64 %62, 32
  %64 = add nsw i64 %62, -48
  %65 = icmp ult i64 %64, 10
  %66 = or i1 %63, %65
  %67 = and i64 %61, 223
  %68 = add nsw i64 %67, -65
  %69 = icmp ult i64 %68, 26
  %70 = or i1 %69, %66
  br i1 %70, label %71, label %127

; <label>:71:                                     ; preds = %60
  %72 = lshr i64 %3, 8
  %73 = and i64 %72, 255
  %74 = icmp eq i64 %73, 32
  %75 = add nsw i64 %73, -48
  %76 = icmp ult i64 %75, 10
  %77 = or i1 %74, %76
  %78 = and i64 %72, 223
  %79 = add nsw i64 %78, -65
  %80 = icmp ult i64 %79, 26
  %81 = or i1 %80, %77
  br i1 %81, label %82, label %127

; <label>:82:                                     ; preds = %71
  %83 = and i64 %3, 255
  %84 = icmp eq i64 %83, 32
  %85 = add nsw i64 %83, -48
  %86 = icmp ult i64 %85, 10
  %87 = or i1 %84, %86
  %88 = and i64 %3, 223
  %89 = add nsw i64 %88, -65
  %90 = icmp ult i64 %89, 26
  %91 = or i1 %90, %87
  br i1 %91, label %92, label %127

; <label>:92:                                     ; preds = %82
  %93 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %49
  %94 = trunc i64 %3 to i32
  store i8 39, i8* %93, align 1
  %95 = lshr i32 %94, 24
  %96 = add nsw i32 %95, -32
  %97 = icmp ult i32 %96, 95
  %98 = trunc i32 %95 to i8
  %99 = select i1 %97, i8 %98, i8 63
  %100 = getelementptr inbounds i8, i8* %93, i64 1
  store i8 %99, i8* %100, align 1
  %101 = lshr i32 %94, 16
  %102 = and i32 %101, 255
  %103 = add nsw i32 %102, -32
  %104 = icmp ult i32 %103, 95
  %105 = trunc i32 %101 to i8
  %106 = select i1 %104, i8 %105, i8 63
  %107 = getelementptr inbounds i8, i8* %93, i64 2
  store i8 %106, i8* %107, align 1
  %108 = lshr i32 %94, 8
  %109 = and i32 %108, 255
  %110 = add nsw i32 %109, -32
  %111 = icmp ult i32 %110, 95
  %112 = trunc i32 %108 to i8
  %113 = select i1 %111, i8 %112, i8 63
  %114 = getelementptr inbounds i8, i8* %93, i64 3
  store i8 %113, i8* %114, align 1
  %115 = and i32 %94, 255
  %116 = add nsw i32 %115, -32
  %117 = icmp ult i32 %116, 95
  %118 = trunc i64 %3 to i8
  %119 = select i1 %117, i8 %118, i8 63
  %120 = getelementptr inbounds i8, i8* %93, i64 4
  store i8 %119, i8* %120, align 1
  %121 = getelementptr inbounds i8, i8* %93, i64 5
  store i8 39, i8* %121, align 1
  %122 = add i64 %43, 9
  %123 = add i64 %43, 10
  %124 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %122
  store i8 58, i8* %124, align 1
  %125 = add i64 %43, 11
  %126 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %123
  store i8 32, i8* %126, align 1
  br label %168

; <label>:127:                                    ; preds = %82, %41, %60, %71
  %128 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %128) #18
  %129 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i64 0, i64 23
  store i8 0, i8* %129, align 1
  br label %130

; <label>:130:                                    ; preds = %130, %127
  %131 = phi i8* [ %129, %127 ], [ %136, %130 ]
  %132 = phi i64 [ %3, %127 ], [ %137, %130 ]
  %133 = and i64 %132, 15
  %134 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %131, i64 -1
  store i8 %135, i8* %136, align 1
  %137 = lshr i64 %132, 4
  %138 = icmp ule i8* %136, %128
  %139 = icmp eq i64 %137, 0
  %140 = or i1 %138, %139
  br i1 %140, label %141, label %130

; <label>:141:                                    ; preds = %130
  %142 = icmp ult i64 %49, 196
  br i1 %142, label %143, label %167

; <label>:143:                                    ; preds = %141
  %144 = icmp eq i64 %49, 195
  br i1 %144, label %156, label %145

; <label>:145:                                    ; preds = %143, %145
  %146 = phi i8 [ %152, %145 ], [ %135, %143 ]
  %147 = phi i8* [ %149, %145 ], [ %136, %143 ]
  %148 = phi i64 [ %150, %145 ], [ %49, %143 ]
  %149 = getelementptr inbounds i8, i8* %147, i64 1
  %150 = add nuw nsw i64 %148, 1
  %151 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %148
  store i8 %146, i8* %151, align 1
  %152 = load i8, i8* %149, align 1
  %153 = icmp ne i8 %152, 0
  %154 = icmp ult i64 %150, 195
  %155 = and i1 %154, %153
  br i1 %155, label %145, label %156

; <label>:156:                                    ; preds = %145, %143
  %157 = phi i64 [ %49, %143 ], [ %150, %145 ]
  %158 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %157
  store i8 0, i8* %158, align 1
  %159 = icmp ult i64 %157, 195
  br i1 %159, label %160, label %164

; <label>:160:                                    ; preds = %156
  %161 = add nuw nsw i64 %157, 1
  %162 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %157
  store i8 104, i8* %162, align 1
  %163 = icmp ult i64 %161, 195
  br i1 %163, label %192, label %164

; <label>:164:                                    ; preds = %160, %192, %196, %156
  %165 = phi i64 [ 195, %156 ], [ %161, %160 ], [ %193, %192 ], [ %197, %196 ]
  %166 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %165
  store i8 0, i8* %166, align 1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %128) #18
  br label %168

; <label>:167:                                    ; preds = %141
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %128) #18
  br label %190

; <label>:168:                                    ; preds = %164, %92
  %169 = phi i64 [ %125, %92 ], [ %165, %164 ]
  %170 = icmp eq i8* %4, null
  br i1 %170, label %187, label %171

; <label>:171:                                    ; preds = %168
  %172 = load i8, i8* %4, align 1
  %173 = icmp ne i8 %172, 0
  %174 = icmp ult i64 %169, 195
  %175 = and i1 %174, %173
  br i1 %175, label %176, label %187

; <label>:176:                                    ; preds = %171, %176
  %177 = phi i8 [ %183, %176 ], [ %172, %171 ]
  %178 = phi i8* [ %180, %176 ], [ %4, %171 ]
  %179 = phi i64 [ %181, %176 ], [ %169, %171 ]
  %180 = getelementptr inbounds i8, i8* %178, i64 1
  %181 = add nuw nsw i64 %179, 1
  %182 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %179
  store i8 %177, i8* %182, align 1
  %183 = load i8, i8* %180, align 1
  %184 = icmp ne i8 %183, 0
  %185 = icmp ult i64 %181, 195
  %186 = and i1 %185, %184
  br i1 %186, label %176, label %187

; <label>:187:                                    ; preds = %176, %171, %168
  %188 = phi i64 [ %169, %168 ], [ %169, %171 ], [ %181, %176 ]
  %189 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %188
  store i8 0, i8* %189, align 1
  br label %190

; <label>:190:                                    ; preds = %167, %187
  %191 = select i1 %9, i32 2, i32 1
  call void @MOZ_PNG_chunk_report(%struct.png_struct_def* %0, i8* nonnull %8, i32 %191)
  call void @llvm.lifetime.end.p0i8(i64 196, i8* nonnull %8) #18
  ret void

; <label>:192:                                    ; preds = %160
  %193 = add nsw i64 %157, 2
  %194 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %161
  store i8 58, i8* %194, align 1
  %195 = icmp ult i64 %193, 195
  br i1 %195, label %196, label %164

; <label>:196:                                    ; preds = %192
  %197 = add nsw i64 %157, 3
  %198 = getelementptr inbounds [196 x i8], [196 x i8]* %6, i64 0, i64 %193
  store i8 32, i8* %198, align 1
  br label %164
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define internal fastcc i32 @png_colorspace_endpoints_match(%struct.png_xy* nocapture readonly, %struct.png_xy* nocapture readonly, i32) unnamed_addr #12 {
  %4 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 6
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 6
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %7, %2
  %9 = icmp slt i32 %5, %8
  %10 = add nsw i32 %7, %2
  %11 = icmp sgt i32 %5, %10
  %12 = or i1 %9, %11
  br i1 %12, label %84, label %13

; <label>:13:                                     ; preds = %3
  %14 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 7
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = sub nsw i32 %17, %2
  %19 = icmp slt i32 %15, %18
  %20 = add nsw i32 %17, %2
  %21 = icmp sgt i32 %15, %20
  %22 = or i1 %19, %21
  br i1 %22, label %84, label %23

; <label>:23:                                     ; preds = %13
  %24 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = sub nsw i32 %27, %2
  %29 = icmp slt i32 %25, %28
  %30 = add nsw i32 %27, %2
  %31 = icmp sgt i32 %25, %30
  %32 = or i1 %29, %31
  br i1 %32, label %84, label %33

; <label>:33:                                     ; preds = %23
  %34 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = sub nsw i32 %37, %2
  %39 = icmp slt i32 %35, %38
  %40 = add nsw i32 %37, %2
  %41 = icmp sgt i32 %35, %40
  %42 = or i1 %39, %41
  br i1 %42, label %84, label %43

; <label>:43:                                     ; preds = %33
  %44 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = sub nsw i32 %47, %2
  %49 = icmp slt i32 %45, %48
  %50 = add nsw i32 %47, %2
  %51 = icmp sgt i32 %45, %50
  %52 = or i1 %49, %51
  br i1 %52, label %84, label %53

; <label>:53:                                     ; preds = %43
  %54 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 3
  %57 = load i32, i32* %56, align 4
  %58 = sub nsw i32 %57, %2
  %59 = icmp slt i32 %55, %58
  %60 = add nsw i32 %57, %2
  %61 = icmp sgt i32 %55, %60
  %62 = or i1 %59, %61
  br i1 %62, label %84, label %63

; <label>:63:                                     ; preds = %53
  %64 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 4
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 4
  %67 = load i32, i32* %66, align 4
  %68 = sub nsw i32 %67, %2
  %69 = icmp slt i32 %65, %68
  %70 = add nsw i32 %67, %2
  %71 = icmp sgt i32 %65, %70
  %72 = or i1 %69, %71
  br i1 %72, label %84, label %73

; <label>:73:                                     ; preds = %63
  %74 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 5
  %75 = load i32, i32* %74, align 4
  %76 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 5
  %77 = load i32, i32* %76, align 4
  %78 = sub nsw i32 %77, %2
  %79 = icmp sge i32 %75, %78
  %80 = add nsw i32 %77, %2
  %81 = icmp sle i32 %75, %80
  %82 = and i1 %81, %79
  %83 = zext i1 %82 to i32
  ret i32 %83

; <label>:84:                                     ; preds = %3, %13, %23, %33, %43, %53, %63
  ret i32 0
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_icc_check_length(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8* readonly, i32) local_unnamed_addr #4 {
  %5 = icmp ult i32 %3, 132
  br i1 %5, label %6, label %8

; <label>:6:                                      ; preds = %4
  %7 = zext i32 %3 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i64 0, i64 0)) #18
  br label %16

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 101
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %16, label %12

; <label>:12:                                     ; preds = %8
  %13 = zext i32 %3 to i64
  %14 = icmp ult i64 %10, %13
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %12
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* %1, i8* %2, i64 %13, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.28, i64 0, i64 0))
  br label %16

; <label>:16:                                     ; preds = %6, %12, %8, %15
  %17 = phi i32 [ 0, %15 ], [ 1, %8 ], [ 1, %12 ], [ 0, %6 ]
  ret i32 %17
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_icc_check_header(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8* readonly, i32, i8* readonly, i32) local_unnamed_addr #4 {
  %7 = load i8, i8* %4, align 1
  %8 = zext i8 %7 to i32
  %9 = shl nuw i32 %8, 24
  %10 = getelementptr inbounds i8, i8* %4, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 16
  %14 = or i32 %13, %9
  %15 = getelementptr inbounds i8, i8* %4, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %14, %18
  %20 = getelementptr inbounds i8, i8* %4, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = or i32 %19, %22
  %24 = icmp eq i32 %23, %3
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %6
  %26 = zext i32 %23 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %26, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i64 0, i64 0))
  br label %189

; <label>:27:                                     ; preds = %6
  %28 = getelementptr inbounds i8, i8* %4, i64 8
  %29 = load i8, i8* %28, align 1
  %30 = icmp ult i8 %29, 4
  %31 = and i32 %3, 3
  %32 = icmp eq i32 %31, 0
  %33 = or i1 %32, %30
  br i1 %33, label %36, label %34

; <label>:34:                                     ; preds = %27
  %35 = zext i32 %3 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %35, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.30, i64 0, i64 0))
  br label %189

; <label>:36:                                     ; preds = %27
  %37 = getelementptr inbounds i8, i8* %4, i64 128
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = shl nuw i32 %39, 24
  %41 = getelementptr inbounds i8, i8* %4, i64 129
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 16
  %45 = or i32 %44, %40
  %46 = getelementptr inbounds i8, i8* %4, i64 130
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl nuw nsw i32 %48, 8
  %50 = or i32 %45, %49
  %51 = getelementptr inbounds i8, i8* %4, i64 131
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = or i32 %50, %53
  %55 = icmp ugt i32 %54, 357913930
  br i1 %55, label %60, label %56

; <label>:56:                                     ; preds = %36
  %57 = mul i32 %54, 12
  %58 = add i32 %57, 132
  %59 = icmp ugt i32 %58, %3
  br i1 %59, label %60, label %62

; <label>:60:                                     ; preds = %56, %36
  %61 = zext i32 %54 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %61, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0))
  br label %189

; <label>:62:                                     ; preds = %56
  %63 = getelementptr inbounds i8, i8* %4, i64 64
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = shl nuw i32 %65, 24
  %67 = getelementptr inbounds i8, i8* %4, i64 65
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl nuw nsw i32 %69, 16
  %71 = or i32 %70, %66
  %72 = getelementptr inbounds i8, i8* %4, i64 66
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = shl nuw nsw i32 %74, 8
  %76 = or i32 %71, %75
  %77 = getelementptr inbounds i8, i8* %4, i64 67
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = or i32 %76, %79
  %81 = icmp ugt i32 %80, 65534
  br i1 %81, label %82, label %84

; <label>:82:                                     ; preds = %62
  %83 = zext i32 %80 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %83, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.32, i64 0, i64 0))
  br label %189

; <label>:84:                                     ; preds = %62
  %85 = icmp ugt i32 %80, 3
  br i1 %85, label %86, label %88

; <label>:86:                                     ; preds = %84
  %87 = zext i32 %80 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %87, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.33, i64 0, i64 0))
  br label %88

; <label>:88:                                     ; preds = %86, %84
  %89 = getelementptr inbounds i8, i8* %4, i64 36
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = shl nuw i32 %91, 24
  %93 = getelementptr inbounds i8, i8* %4, i64 37
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = shl nuw nsw i32 %95, 16
  %97 = or i32 %96, %92
  %98 = getelementptr inbounds i8, i8* %4, i64 38
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 8
  %102 = or i32 %97, %101
  %103 = getelementptr inbounds i8, i8* %4, i64 39
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = or i32 %102, %105
  %107 = icmp eq i32 %106, 1633907568
  br i1 %107, label %110, label %108

; <label>:108:                                    ; preds = %88
  %109 = zext i32 %106 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %109, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i64 0, i64 0))
  br label %189

; <label>:110:                                    ; preds = %88
  %111 = getelementptr inbounds i8, i8* %4, i64 68
  %112 = tail call i32 @memcmp(i8* nonnull %111, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @D50_nCIEXYZ, i64 0, i64 0), i64 12) #20
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %115, label %114

; <label>:114:                                    ; preds = %110
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.35, i64 0, i64 0))
  br label %115

; <label>:115:                                    ; preds = %110, %114
  %116 = getelementptr inbounds i8, i8* %4, i64 16
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = shl nuw i32 %118, 24
  %120 = getelementptr inbounds i8, i8* %4, i64 17
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 16
  %124 = or i32 %123, %119
  %125 = getelementptr inbounds i8, i8* %4, i64 18
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = shl nuw nsw i32 %127, 8
  %129 = or i32 %124, %128
  %130 = getelementptr inbounds i8, i8* %4, i64 19
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = or i32 %129, %132
  switch i32 %133, label %142 [
    i32 1380401696, label %134
    i32 1196573017, label %138
  ]

; <label>:134:                                    ; preds = %115
  %135 = and i32 %5, 2
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %144

; <label>:137:                                    ; preds = %134
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 1380401696, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.36, i64 0, i64 0))
  br label %189

; <label>:138:                                    ; preds = %115
  %139 = and i32 %5, 2
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %144, label %141

; <label>:141:                                    ; preds = %138
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 1196573017, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.37, i64 0, i64 0))
  br label %189

; <label>:142:                                    ; preds = %115
  %143 = zext i32 %133 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %143, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.38, i64 0, i64 0))
  br label %189

; <label>:144:                                    ; preds = %138, %134
  %145 = getelementptr inbounds i8, i8* %4, i64 12
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = shl nuw i32 %147, 24
  %149 = getelementptr inbounds i8, i8* %4, i64 13
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = shl nuw nsw i32 %151, 16
  %153 = or i32 %152, %148
  %154 = getelementptr inbounds i8, i8* %4, i64 14
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = shl nuw nsw i32 %156, 8
  %158 = or i32 %153, %157
  %159 = getelementptr inbounds i8, i8* %4, i64 15
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  %162 = or i32 %158, %161
  switch i32 %162, label %166 [
    i32 1935896178, label %168
    i32 1835955314, label %168
    i32 1886549106, label %168
    i32 1936744803, label %168
    i32 1633842036, label %163
    i32 1818848875, label %164
    i32 1852662636, label %165
  ]

; <label>:163:                                    ; preds = %144
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 1633842036, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.39, i64 0, i64 0))
  br label %189

; <label>:164:                                    ; preds = %144
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 1818848875, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.40, i64 0, i64 0))
  br label %189

; <label>:165:                                    ; preds = %144
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 1852662636, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.41, i64 0, i64 0))
  br label %168

; <label>:166:                                    ; preds = %144
  %167 = zext i32 %162 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %167, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.42, i64 0, i64 0))
  br label %168

; <label>:168:                                    ; preds = %144, %144, %144, %144, %166, %165
  %169 = getelementptr inbounds i8, i8* %4, i64 20
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = shl nuw i32 %171, 24
  %173 = getelementptr inbounds i8, i8* %4, i64 21
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = shl nuw nsw i32 %175, 16
  %177 = or i32 %176, %172
  %178 = getelementptr inbounds i8, i8* %4, i64 22
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = shl nuw nsw i32 %180, 8
  %182 = or i32 %177, %181
  %183 = getelementptr inbounds i8, i8* %4, i64 23
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = or i32 %182, %185
  switch i32 %186, label %187 [
    i32 1482250784, label %189
    i32 1281450528, label %189
  ]

; <label>:187:                                    ; preds = %168
  %188 = zext i32 %186 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %188, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.43, i64 0, i64 0))
  br label %189

; <label>:189:                                    ; preds = %168, %168, %187, %164, %163, %142, %141, %137, %108, %82, %60, %34, %25
  %190 = phi i32 [ 0, %25 ], [ 0, %34 ], [ 0, %60 ], [ 0, %82 ], [ 0, %108 ], [ 0, %142 ], [ 0, %141 ], [ 0, %187 ], [ 0, %164 ], [ 0, %163 ], [ 0, %137 ], [ 1, %168 ], [ 1, %168 ]
  ret i32 %190
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_icc_check_tags(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8* readonly, i32, i8* nocapture readonly) local_unnamed_addr #4 {
  %6 = getelementptr inbounds i8, i8* %4, i64 128
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = shl nuw i32 %8, 24
  %10 = getelementptr inbounds i8, i8* %4, i64 129
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 16
  %14 = or i32 %13, %9
  %15 = getelementptr inbounds i8, i8* %4, i64 130
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %14, %18
  %20 = getelementptr inbounds i8, i8* %4, i64 131
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = or i32 %19, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %98, label %25

; <label>:25:                                     ; preds = %5
  %26 = getelementptr inbounds i8, i8* %4, i64 132
  br label %27

; <label>:27:                                     ; preds = %25, %94
  %28 = phi i32 [ %95, %94 ], [ 0, %25 ]
  %29 = phi i8* [ %96, %94 ], [ %26, %25 ]
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl nuw i32 %31, 24
  %33 = getelementptr inbounds i8, i8* %29, i64 1
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 16
  %37 = or i32 %36, %32
  %38 = getelementptr inbounds i8, i8* %29, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = or i32 %37, %41
  %43 = getelementptr inbounds i8, i8* %29, i64 3
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %42, %45
  %47 = getelementptr inbounds i8, i8* %29, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = shl nuw i32 %49, 24
  %51 = getelementptr inbounds i8, i8* %29, i64 5
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = shl nuw nsw i32 %53, 16
  %55 = or i32 %54, %50
  %56 = getelementptr inbounds i8, i8* %29, i64 6
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 8
  %60 = or i32 %55, %59
  %61 = getelementptr inbounds i8, i8* %29, i64 7
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %60, %63
  %65 = icmp ugt i32 %64, %3
  br i1 %65, label %87, label %66

; <label>:66:                                     ; preds = %27
  %67 = getelementptr inbounds i8, i8* %29, i64 8
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl nuw i32 %69, 24
  %71 = getelementptr inbounds i8, i8* %29, i64 9
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl nuw nsw i32 %73, 16
  %75 = or i32 %74, %70
  %76 = getelementptr inbounds i8, i8* %29, i64 10
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = shl nuw nsw i32 %78, 8
  %80 = or i32 %75, %79
  %81 = getelementptr inbounds i8, i8* %29, i64 11
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = or i32 %80, %83
  %85 = sub i32 %3, %64
  %86 = icmp ugt i32 %84, %85
  br i1 %86, label %87, label %89

; <label>:87:                                     ; preds = %66, %27
  %88 = zext i32 %46 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* %1, i8* %2, i64 %88, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.44, i64 0, i64 0))
  br label %98

; <label>:89:                                     ; preds = %66
  %90 = and i32 %63, 3
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %94, label %92

; <label>:92:                                     ; preds = %89
  %93 = zext i32 %46 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* null, i8* %2, i64 %93, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.45, i64 0, i64 0))
  br label %94

; <label>:94:                                     ; preds = %89, %92
  %95 = add nuw i32 %28, 1
  %96 = getelementptr inbounds i8, i8* %29, i64 12
  %97 = icmp ult i32 %95, %23
  br i1 %97, label %27, label %98

; <label>:98:                                     ; preds = %94, %5, %87
  %99 = phi i32 [ 0, %87 ], [ 1, %5 ], [ 1, %94 ]
  ret i32 %99
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_cs_set_ICC(%struct.png_struct_def* noalias, %struct.png_colorspace* noalias, i8* readonly, i32, i8* readonly, i32) local_unnamed_addr #4 {
  %7 = getelementptr inbounds %struct.png_colorspace, %struct.png_colorspace* %1, i64 0, i32 4
  %8 = load i16, i16* %7, align 2
  %9 = icmp slt i16 %8, 0
  br i1 %9, label %21, label %10

; <label>:10:                                     ; preds = %6
  %11 = icmp ult i32 %3, 132
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %10
  %13 = zext i32 %3 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* %0, %struct.png_colorspace* nonnull %1, i8* %2, i64 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i64 0, i64 0)) #18
  br label %20

; <label>:14:                                     ; preds = %10
  %15 = tail call i32 @MOZ_PNG_icc_check_header(%struct.png_struct_def* %0, %struct.png_colorspace* nonnull %1, i8* %2, i32 %3, i8* %4, i32 %5)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

; <label>:17:                                     ; preds = %14
  %18 = tail call i32 @MOZ_PNG_icc_check_tags(%struct.png_struct_def* %0, %struct.png_colorspace* nonnull %1, i8* %2, i32 %3, i8* %4)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %12, %17, %14
  br label %21

; <label>:21:                                     ; preds = %17, %6, %20
  %22 = phi i32 [ 0, %20 ], [ 0, %6 ], [ 1, %17 ]
  ret i32 %22
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_ck_IHDR(%struct.png_struct_def* noalias, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %9 = icmp eq i32 %1, 0
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %8
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.46, i64 0, i64 0))
  br label %14

; <label>:11:                                     ; preds = %8
  %12 = icmp slt i32 %1, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %11
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0))
  br label %14

; <label>:14:                                     ; preds = %11, %13, %10
  %15 = phi i32 [ 1, %13 ], [ 0, %11 ], [ 1, %10 ]
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 98
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %17, %1
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %14
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.49, i64 0, i64 0))
  br label %20

; <label>:20:                                     ; preds = %19, %14
  %21 = phi i32 [ 1, %19 ], [ %15, %14 ]
  %22 = icmp eq i32 %2, 0
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %20
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.50, i64 0, i64 0))
  br label %27

; <label>:24:                                     ; preds = %20
  %25 = icmp slt i32 %2, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %24
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.51, i64 0, i64 0))
  br label %27

; <label>:27:                                     ; preds = %23, %26, %24
  %28 = phi i32 [ 1, %26 ], [ %21, %24 ], [ 1, %23 ]
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 99
  %30 = load i32, i32* %29, align 8
  %31 = icmp ult i32 %30, %2
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %27
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.52, i64 0, i64 0))
  br label %33

; <label>:33:                                     ; preds = %32, %27
  %34 = phi i32 [ 1, %32 ], [ %28, %27 ]
  switch i32 %3, label %35 [
    i32 16, label %36
    i32 8, label %36
    i32 4, label %36
    i32 2, label %36
    i32 1, label %36
  ]

; <label>:35:                                     ; preds = %33
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.53, i64 0, i64 0))
  br label %36

; <label>:36:                                     ; preds = %33, %33, %33, %33, %33, %35
  %37 = phi i32 [ 1, %35 ], [ %34, %33 ], [ %34, %33 ], [ %34, %33 ], [ %34, %33 ], [ %34, %33 ]
  %38 = or i32 %4, 4
  %39 = icmp eq i32 %38, 5
  %40 = icmp ugt i32 %4, 6
  %41 = or i1 %40, %39
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %36
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.54, i64 0, i64 0))
  br label %43

; <label>:43:                                     ; preds = %36, %42
  %44 = phi i32 [ 1, %42 ], [ %37, %36 ]
  %45 = icmp eq i32 %4, 3
  %46 = icmp sgt i32 %3, 8
  %47 = and i1 %46, %45
  br i1 %47, label %54, label %48

; <label>:48:                                     ; preds = %43
  %49 = icmp eq i32 %4, 4
  %50 = icmp eq i32 %38, 6
  %51 = or i1 %49, %50
  %52 = icmp slt i32 %3, 8
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %55

; <label>:54:                                     ; preds = %48, %43
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.55, i64 0, i64 0))
  br label %55

; <label>:55:                                     ; preds = %48, %54
  %56 = phi i32 [ 1, %54 ], [ %44, %48 ]
  %57 = icmp sgt i32 %5, 1
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %55
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.56, i64 0, i64 0))
  br label %59

; <label>:59:                                     ; preds = %58, %55
  %60 = phi i32 [ 1, %58 ], [ %56, %55 ]
  %61 = icmp eq i32 %6, 0
  br i1 %61, label %63, label %62

; <label>:62:                                     ; preds = %59
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.57, i64 0, i64 0))
  br label %63

; <label>:63:                                     ; preds = %59, %62
  %64 = phi i32 [ 1, %62 ], [ %60, %59 ]
  %65 = icmp eq i32 %7, 0
  br i1 %65, label %67, label %66

; <label>:66:                                     ; preds = %63
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.58, i64 0, i64 0))
  br label %69

; <label>:67:                                     ; preds = %63
  %68 = icmp eq i32 %64, 1
  br i1 %68, label %69, label %70

; <label>:69:                                     ; preds = %66, %67
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.59, i64 0, i64 0)) #19
  unreachable

; <label>:70:                                     ; preds = %67
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_fixed(%struct.png_struct_def* noalias, double, i8* readonly) local_unnamed_addr #4 {
  %4 = fmul double %1, 1.000000e+05
  %5 = fadd double %4, 5.000000e-01
  %6 = tail call double @llvm.floor.f64(double %5)
  %7 = fcmp ogt double %6, 0x41DFFFFFFFC00000
  %8 = fcmp olt double %6, 0xC1E0000000000000
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %3
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* %2) #19
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = fptosi double %6 to i32
  ret i32 %12
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #14

; Function Attrs: noreturn nounwind sspstrong uwtable
define hidden void @MOZ_PNG_fixed_err(%struct.png_struct_def* noalias, i8* readonly) local_unnamed_addr #5 {
  %3 = alloca [220 x i8], align 16
  %4 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 220, i8* nonnull %4) #18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %4, i8* align 1 getelementptr inbounds ([25 x i8], [25 x i8]* @.str.62, i64 0, i64 0), i64 24, i1 false)
  %5 = icmp eq i8* %1, null
  br i1 %5, label %20, label %6

; <label>:6:                                      ; preds = %2, %33
  %7 = phi i32 [ %36, %33 ], [ 0, %2 ]
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %1, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %20, label %12

; <label>:12:                                     ; preds = %6
  %13 = add nuw nsw i64 %8, 24
  %14 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i64 0, i64 %13
  store i8 %10, i8* %14, align 1
  %15 = add nuw nsw i32 %7, 1
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %1, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %25

; <label>:20:                                     ; preds = %6, %12, %25, %33, %2
  %21 = phi i32 [ 0, %2 ], [ %7, %6 ], [ %15, %12 ], [ %28, %25 ], [ %36, %33 ]
  %22 = zext i32 %21 to i64
  %23 = add nuw nsw i64 %22, 24
  %24 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i64 0, i64 %23
  store i8 0, i8* %24, align 1
  call void @png_error(%struct.png_struct_def* %0, i8* nonnull %4) #19
  unreachable

; <label>:25:                                     ; preds = %12
  %26 = add nuw nsw i64 %16, 24
  %27 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i64 0, i64 %26
  store i8 %18, i8* %27, align 1
  %28 = add nuw nsw i32 %7, 2
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %1, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %20, label %33

; <label>:33:                                     ; preds = %25
  %34 = add nuw nsw i64 %29, 24
  %35 = getelementptr inbounds [220 x i8], [220 x i8]* %3, i64 0, i64 %34
  store i8 %31, i8* %35, align 1
  %36 = add nuw nsw i32 %7, 3
  %37 = icmp ult i32 %36, 195
  br i1 %37, label %6, label %20
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_muldiv(i32* nocapture, i32, i32, i32) local_unnamed_addr #4 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %24, label %6

; <label>:6:                                      ; preds = %4
  %7 = icmp eq i32 %1, 0
  %8 = icmp eq i32 %2, 0
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %6
  store i32 0, i32* %0, align 4
  br label %24

; <label>:11:                                     ; preds = %6
  %12 = sitofp i32 %1 to double
  %13 = sitofp i32 %2 to double
  %14 = fmul double %12, %13
  %15 = sitofp i32 %3 to double
  %16 = fdiv double %14, %15
  %17 = fadd double %16, 5.000000e-01
  %18 = tail call double @llvm.floor.f64(double %17)
  %19 = fcmp ole double %18, 0x41DFFFFFFFC00000
  %20 = fcmp oge double %18, 0xC1E0000000000000
  %21 = and i1 %19, %20
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %11
  %23 = fptosi double %18 to i32
  store i32 %23, i32* %0, align 4
  br label %24

; <label>:24:                                     ; preds = %4, %11, %22, %10
  %25 = phi i32 [ 1, %10 ], [ 1, %22 ], [ 0, %11 ], [ 0, %4 ]
  ret i32 %25
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_muldiv_warn(%struct.png_struct_def* noalias, i32, i32, i32) local_unnamed_addr #4 {
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %23, label %6

; <label>:6:                                      ; preds = %4
  %7 = icmp eq i32 %1, 0
  %8 = icmp eq i32 %2, 0
  %9 = or i1 %7, %8
  br i1 %9, label %24, label %10

; <label>:10:                                     ; preds = %6
  %11 = sitofp i32 %1 to double
  %12 = sitofp i32 %2 to double
  %13 = fmul double %11, %12
  %14 = sitofp i32 %3 to double
  %15 = fdiv double %13, %14
  %16 = fadd double %15, 5.000000e-01
  %17 = tail call double @llvm.floor.f64(double %16) #18
  %18 = fcmp ole double %17, 0x41DFFFFFFFC00000
  %19 = fcmp oge double %17, 0xC1E0000000000000
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %10
  %22 = fptosi double %17 to i32
  br label %24

; <label>:23:                                     ; preds = %10, %4
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.60, i64 0, i64 0))
  br label %24

; <label>:24:                                     ; preds = %6, %21, %23
  %25 = phi i32 [ 0, %23 ], [ %22, %21 ], [ 0, %6 ]
  ret i32 %25
}

; Function Attrs: nounwind readnone sspstrong uwtable
define hidden i32 @MOZ_PNG_reciprocal(i32) local_unnamed_addr #15 {
  %2 = sitofp i32 %0 to double
  %3 = fdiv double 1.000000e+10, %2
  %4 = fadd double %3, 5.000000e-01
  %5 = tail call double @llvm.floor.f64(double %4)
  %6 = fcmp ole double %5, 0x41DFFFFFFFC00000
  %7 = fcmp oge double %5, 0xC1E0000000000000
  %8 = and i1 %6, %7
  %9 = fptosi double %5 to i32
  %10 = select i1 %8, i32 %9, i32 0
  ret i32 %10
}

; Function Attrs: norecurse nounwind readnone sspstrong uwtable
define hidden i32 @MOZ_PNG_gamma_significant(i32) local_unnamed_addr #13 {
  %2 = add i32 %0, -95000
  %3 = icmp ugt i32 %2, 10000
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone sspstrong uwtable
define hidden i32 @MOZ_PNG_reciprocal2(i32, i32) local_unnamed_addr #15 {
  %3 = icmp ne i32 %0, 0
  %4 = icmp ne i32 %1, 0
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %17

; <label>:6:                                      ; preds = %2
  %7 = sitofp i32 %0 to double
  %8 = fdiv double 1.000000e+15, %7
  %9 = sitofp i32 %1 to double
  %10 = fdiv double %8, %9
  %11 = fadd double %10, 5.000000e-01
  %12 = tail call double @llvm.floor.f64(double %11)
  %13 = fcmp ugt double %12, 0x41DFFFFFFFC00000
  %14 = fcmp ult double %12, 0xC1E0000000000000
  %15 = fptosi double %12 to i32
  %16 = or i1 %14, %13
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %6, %2
  br label %18

; <label>:18:                                     ; preds = %6, %17
  %19 = phi i32 [ 0, %17 ], [ %15, %6 ]
  ret i32 %19
}

; Function Attrs: nounwind readnone sspstrong uwtable
define hidden zeroext i8 @MOZ_PNG_gamma_8bit_correct(i32, i32) local_unnamed_addr #15 {
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 254
  br i1 %4, label %5, label %15

; <label>:5:                                      ; preds = %2
  %6 = sitofp i32 %0 to double
  %7 = fdiv double %6, 2.550000e+02
  %8 = sitofp i32 %1 to double
  %9 = fmul double %8, 1.000000e-05
  %10 = tail call double @llvm.pow.f64(double %7, double %9)
  %11 = fmul double %10, 2.550000e+02
  %12 = fadd double %11, 5.000000e-01
  %13 = tail call double @llvm.floor.f64(double %12)
  %14 = fptoui double %13 to i8
  br label %17

; <label>:15:                                     ; preds = %2
  %16 = trunc i32 %0 to i8
  br label %17

; <label>:17:                                     ; preds = %15, %5
  %18 = phi i8 [ %14, %5 ], [ %16, %15 ]
  ret i8 %18
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #14

; Function Attrs: nounwind readnone sspstrong uwtable
define hidden zeroext i16 @MOZ_PNG_gamma_16bit_correct(i32, i32) local_unnamed_addr #15 {
  %3 = add i32 %0, -1
  %4 = icmp ult i32 %3, 65534
  br i1 %4, label %5, label %15

; <label>:5:                                      ; preds = %2
  %6 = sitofp i32 %0 to double
  %7 = fdiv double %6, 6.553500e+04
  %8 = sitofp i32 %1 to double
  %9 = fmul double %8, 1.000000e-05
  %10 = tail call double @llvm.pow.f64(double %7, double %9)
  %11 = fmul double %10, 6.553500e+04
  %12 = fadd double %11, 5.000000e-01
  %13 = tail call double @llvm.floor.f64(double %12)
  %14 = fptoui double %13 to i16
  br label %17

; <label>:15:                                     ; preds = %2
  %16 = trunc i32 %0 to i16
  br label %17

; <label>:17:                                     ; preds = %15, %5
  %18 = phi i16 [ %14, %5 ], [ %16, %15 ]
  ret i16 %18
}

; Function Attrs: nounwind readonly sspstrong uwtable
define hidden zeroext i16 @MOZ_PNG_gamma_correct(%struct.png_struct_def* noalias nocapture readonly, i32, i32) local_unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %5 = load i8, i8* %4, align 2
  %6 = icmp eq i8 %5, 8
  %7 = add i32 %1, -1
  br i1 %6, label %8, label %25

; <label>:8:                                      ; preds = %3
  %9 = icmp ult i32 %7, 254
  br i1 %9, label %10, label %20

; <label>:10:                                     ; preds = %8
  %11 = sitofp i32 %1 to double
  %12 = fdiv double %11, 2.550000e+02
  %13 = sitofp i32 %2 to double
  %14 = fmul double %13, 1.000000e-05
  %15 = tail call double @llvm.pow.f64(double %12, double %14) #18
  %16 = fmul double %15, 2.550000e+02
  %17 = fadd double %16, 5.000000e-01
  %18 = tail call double @llvm.floor.f64(double %17) #18
  %19 = fptoui double %18 to i8
  br label %22

; <label>:20:                                     ; preds = %8
  %21 = trunc i32 %1 to i8
  br label %22

; <label>:22:                                     ; preds = %10, %20
  %23 = phi i8 [ %19, %10 ], [ %21, %20 ]
  %24 = zext i8 %23 to i16
  br label %39

; <label>:25:                                     ; preds = %3
  %26 = icmp ult i32 %7, 65534
  br i1 %26, label %27, label %37

; <label>:27:                                     ; preds = %25
  %28 = sitofp i32 %1 to double
  %29 = fdiv double %28, 6.553500e+04
  %30 = sitofp i32 %2 to double
  %31 = fmul double %30, 1.000000e-05
  %32 = tail call double @llvm.pow.f64(double %29, double %31) #18
  %33 = fmul double %32, 6.553500e+04
  %34 = fadd double %33, 5.000000e-01
  %35 = tail call double @llvm.floor.f64(double %34) #18
  %36 = fptoui double %35 to i16
  br label %39

; <label>:37:                                     ; preds = %25
  %38 = trunc i32 %1 to i16
  br label %39

; <label>:39:                                     ; preds = %37, %27, %22
  %40 = phi i16 [ %24, %22 ], [ %36, %27 ], [ %38, %37 ]
  ret i16 %40
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_destroy_gamma_table(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq i8* %3, null
  %6 = or i1 %4, %5
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %1
  tail call void @free(i8* nonnull %3) #18
  br label %8

; <label>:8:                                      ; preds = %1, %7
  store i8* null, i8** %2, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  %10 = load i16**, i16*** %9, align 8
  %11 = icmp eq i16** %10, null
  br i1 %11, label %41, label %12

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %14 = load i32, i32* %13, align 8
  %15 = sub nsw i32 8, %14
  %16 = icmp eq i32 %15, 31
  br i1 %16, label %34, label %17

; <label>:17:                                     ; preds = %12
  %18 = shl i32 1, %15
  %19 = sext i32 %18 to i64
  br label %20

; <label>:20:                                     ; preds = %17, %30
  %21 = phi i16** [ %10, %17 ], [ %31, %30 ]
  %22 = phi i64 [ 0, %17 ], [ %32, %30 ]
  %23 = getelementptr inbounds i16*, i16** %21, i64 %22
  %24 = bitcast i16** %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  %27 = or i1 %4, %26
  br i1 %27, label %30, label %28

; <label>:28:                                     ; preds = %20
  tail call void @free(i8* nonnull %25) #18
  %29 = load i16**, i16*** %9, align 8
  br label %30

; <label>:30:                                     ; preds = %20, %28
  %31 = phi i16** [ %21, %20 ], [ %29, %28 ]
  %32 = add nuw nsw i64 %22, 1
  %33 = icmp slt i64 %32, %19
  br i1 %33, label %20, label %34

; <label>:34:                                     ; preds = %30, %12
  %35 = phi i16** [ %10, %12 ], [ %31, %30 ]
  %36 = icmp eq i16** %35, null
  %37 = or i1 %4, %36
  br i1 %37, label %40, label %38

; <label>:38:                                     ; preds = %34
  %39 = bitcast i16** %35 to i8*
  tail call void @free(i8* nonnull %39) #18
  br label %40

; <label>:40:                                     ; preds = %34, %38
  store i16** null, i16*** %9, align 8
  br label %41

; <label>:41:                                     ; preds = %8, %40
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_build_gamma_tab(%struct.png_struct_def* noalias, i32) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %10

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  %8 = load i16**, i16*** %7, align 8
  %9 = icmp eq i16** %8, null
  br i1 %9, label %45, label %10

; <label>:10:                                     ; preds = %6, %2
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.61, i64 0, i64 0))
  %11 = load i8*, i8** %3, align 8, !alias.scope !83
  %12 = icmp eq i8* %11, null
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %10
  tail call void @free(i8* nonnull %11) #18
  br label %14

; <label>:14:                                     ; preds = %13, %10
  store i8* null, i8** %3, align 8, !alias.scope !83
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  %16 = load i16**, i16*** %15, align 8, !alias.scope !83
  %17 = icmp eq i16** %16, null
  br i1 %17, label %45, label %18

; <label>:18:                                     ; preds = %14
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %20 = load i32, i32* %19, align 8, !alias.scope !83
  %21 = sub nsw i32 8, %20
  %22 = icmp eq i32 %21, 31
  br i1 %22, label %41, label %23

; <label>:23:                                     ; preds = %18
  %24 = shl i32 1, %21
  %25 = sext i32 %24 to i64
  br label %26

; <label>:26:                                     ; preds = %35, %23
  %27 = phi i16** [ %16, %23 ], [ %36, %35 ]
  %28 = phi i64 [ 0, %23 ], [ %37, %35 ]
  %29 = getelementptr inbounds i16*, i16** %27, i64 %28
  %30 = bitcast i16** %29 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %35, label %33

; <label>:33:                                     ; preds = %26
  tail call void @free(i8* nonnull %31) #18
  %34 = load i16**, i16*** %15, align 8, !alias.scope !83
  br label %35

; <label>:35:                                     ; preds = %33, %26
  %36 = phi i16** [ %27, %26 ], [ %34, %33 ]
  %37 = add nuw nsw i64 %28, 1
  %38 = icmp slt i64 %37, %25
  br i1 %38, label %26, label %39

; <label>:39:                                     ; preds = %35
  %40 = icmp eq i16** %36, null
  br i1 %40, label %44, label %41

; <label>:41:                                     ; preds = %18, %39
  %42 = phi i16** [ %36, %39 ], [ %16, %18 ]
  %43 = bitcast i16** %42 to i8*
  tail call void @free(i8* nonnull %43) #18
  br label %44

; <label>:44:                                     ; preds = %41, %39
  store i16** null, i16*** %15, align 8, !alias.scope !83
  br label %45

; <label>:45:                                     ; preds = %44, %14, %6
  %46 = icmp slt i32 %1, 9
  br i1 %46, label %47, label %132

; <label>:47:                                     ; preds = %45
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 62
  %49 = load i32, i32* %48, align 4
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %67

; <label>:51:                                     ; preds = %47
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %66, label %55

; <label>:55:                                     ; preds = %51
  %56 = sitofp i32 %53 to double
  %57 = fdiv double 1.000000e+15, %56
  %58 = sitofp i32 %49 to double
  %59 = fdiv double %57, %58
  %60 = fadd double %59, 5.000000e-01
  %61 = tail call double @llvm.floor.f64(double %60) #18
  %62 = fcmp ugt double %61, 0x41DFFFFFFFC00000
  %63 = fcmp ult double %61, 0xC1E0000000000000
  %64 = fptosi double %61 to i32
  %65 = or i1 %63, %62
  br i1 %65, label %66, label %67

; <label>:66:                                     ; preds = %51, %55
  br label %67

; <label>:67:                                     ; preds = %47, %55, %66
  %68 = phi i32 [ 100000, %47 ], [ 0, %66 ], [ %64, %55 ]
  %69 = tail call noalias i8* @malloc(i64 256) #18
  %70 = icmp eq i8* %69, null
  br i1 %70, label %71, label %72

; <label>:71:                                     ; preds = %67
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:72:                                     ; preds = %67
  store i8* %69, i8** %3, align 8, !noalias !86
  %73 = add i32 %68, -95000
  %74 = icmp ult i32 %73, 10001
  br i1 %74, label %75, label %107

; <label>:75:                                     ; preds = %72
  %76 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, <16 x i8>* %76, align 1, !noalias !86
  %77 = getelementptr inbounds i8, i8* %69, i64 16
  %78 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>, <16 x i8>* %78, align 1, !noalias !86
  %79 = getelementptr inbounds i8, i8* %69, i64 32
  %80 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> <i8 32, i8 33, i8 34, i8 35, i8 36, i8 37, i8 38, i8 39, i8 40, i8 41, i8 42, i8 43, i8 44, i8 45, i8 46, i8 47>, <16 x i8>* %80, align 1, !noalias !86
  %81 = getelementptr inbounds i8, i8* %69, i64 48
  %82 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> <i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 58, i8 59, i8 60, i8 61, i8 62, i8 63>, <16 x i8>* %82, align 1, !noalias !86
  %83 = getelementptr inbounds i8, i8* %69, i64 64
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> <i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 75, i8 76, i8 77, i8 78, i8 79>, <16 x i8>* %84, align 1, !noalias !86
  %85 = getelementptr inbounds i8, i8* %69, i64 80
  %86 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> <i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 86, i8 87, i8 88, i8 89, i8 90, i8 91, i8 92, i8 93, i8 94, i8 95>, <16 x i8>* %86, align 1, !noalias !86
  %87 = getelementptr inbounds i8, i8* %69, i64 96
  %88 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> <i8 96, i8 97, i8 98, i8 99, i8 100, i8 101, i8 102, i8 103, i8 104, i8 105, i8 106, i8 107, i8 108, i8 109, i8 110, i8 111>, <16 x i8>* %88, align 1, !noalias !86
  %89 = getelementptr inbounds i8, i8* %69, i64 112
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> <i8 112, i8 113, i8 114, i8 115, i8 116, i8 117, i8 118, i8 119, i8 120, i8 121, i8 122, i8 123, i8 124, i8 125, i8 126, i8 127>, <16 x i8>* %90, align 1, !noalias !86
  %91 = getelementptr inbounds i8, i8* %69, i64 128
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> <i8 -128, i8 -127, i8 -126, i8 -125, i8 -124, i8 -123, i8 -122, i8 -121, i8 -120, i8 -119, i8 -118, i8 -117, i8 -116, i8 -115, i8 -114, i8 -113>, <16 x i8>* %92, align 1, !noalias !86
  %93 = getelementptr inbounds i8, i8* %69, i64 144
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> <i8 -112, i8 -111, i8 -110, i8 -109, i8 -108, i8 -107, i8 -106, i8 -105, i8 -104, i8 -103, i8 -102, i8 -101, i8 -100, i8 -99, i8 -98, i8 -97>, <16 x i8>* %94, align 1, !noalias !86
  %95 = getelementptr inbounds i8, i8* %69, i64 160
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> <i8 -96, i8 -95, i8 -94, i8 -93, i8 -92, i8 -91, i8 -90, i8 -89, i8 -88, i8 -87, i8 -86, i8 -85, i8 -84, i8 -83, i8 -82, i8 -81>, <16 x i8>* %96, align 1, !noalias !86
  %97 = getelementptr inbounds i8, i8* %69, i64 176
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> <i8 -80, i8 -79, i8 -78, i8 -77, i8 -76, i8 -75, i8 -74, i8 -73, i8 -72, i8 -71, i8 -70, i8 -69, i8 -68, i8 -67, i8 -66, i8 -65>, <16 x i8>* %98, align 1, !noalias !86
  %99 = getelementptr inbounds i8, i8* %69, i64 192
  %100 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> <i8 -64, i8 -63, i8 -62, i8 -61, i8 -60, i8 -59, i8 -58, i8 -57, i8 -56, i8 -55, i8 -54, i8 -53, i8 -52, i8 -51, i8 -50, i8 -49>, <16 x i8>* %100, align 1, !noalias !86
  %101 = getelementptr inbounds i8, i8* %69, i64 208
  %102 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> <i8 -48, i8 -47, i8 -46, i8 -45, i8 -44, i8 -43, i8 -42, i8 -41, i8 -40, i8 -39, i8 -38, i8 -37, i8 -36, i8 -35, i8 -34, i8 -33>, <16 x i8>* %102, align 1, !noalias !86
  %103 = getelementptr inbounds i8, i8* %69, i64 224
  %104 = bitcast i8* %103 to <16 x i8>*
  store <16 x i8> <i8 -32, i8 -31, i8 -30, i8 -29, i8 -28, i8 -27, i8 -26, i8 -25, i8 -24, i8 -23, i8 -22, i8 -21, i8 -20, i8 -19, i8 -18, i8 -17>, <16 x i8>* %104, align 1, !noalias !86
  %105 = getelementptr inbounds i8, i8* %69, i64 240
  %106 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> <i8 -16, i8 -15, i8 -14, i8 -13, i8 -12, i8 -11, i8 -10, i8 -9, i8 -8, i8 -7, i8 -6, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8>* %106, align 1, !noalias !86
  br label %538

; <label>:107:                                    ; preds = %72
  %108 = sitofp i32 %68 to double
  %109 = fmul double %108, 1.000000e-05
  br label %110

; <label>:110:                                    ; preds = %126, %107
  %111 = phi i64 [ 0, %107 ], [ %129, %126 ]
  %112 = phi i32 [ 0, %107 ], [ %130, %126 ]
  %113 = trunc i64 %111 to i32
  %114 = add i32 %113, -1
  %115 = icmp ult i32 %114, 254
  br i1 %115, label %116, label %124

; <label>:116:                                    ; preds = %110
  %117 = sitofp i32 %113 to double
  %118 = fdiv double %117, 2.550000e+02
  %119 = tail call double @llvm.pow.f64(double %118, double %109) #18
  %120 = fmul double %119, 2.550000e+02
  %121 = fadd double %120, 5.000000e-01
  %122 = tail call double @llvm.floor.f64(double %121) #18
  %123 = fptoui double %122 to i8
  br label %126

; <label>:124:                                    ; preds = %110
  %125 = trunc i32 %112 to i8
  br label %126

; <label>:126:                                    ; preds = %124, %116
  %127 = phi i8 [ %123, %116 ], [ %125, %124 ]
  %128 = getelementptr inbounds i8, i8* %69, i64 %111
  store i8 %127, i8* %128, align 1, !noalias !86
  %129 = add nuw nsw i64 %111, 1
  %130 = add nuw nsw i32 %112, 1
  %131 = icmp eq i64 %129, 256
  br i1 %131, label %538, label %110

; <label>:132:                                    ; preds = %45
  %133 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %134 = load i8, i8* %133, align 1
  %135 = and i8 %134, 2
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %148, label %137

; <label>:137:                                    ; preds = %132
  %138 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 65, i32 0
  %139 = load i8, i8* %138, align 8
  %140 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 65, i32 1
  %141 = load i8, i8* %140, align 1
  %142 = icmp ugt i8 %141, %139
  %143 = select i1 %142, i8 %141, i8 %139
  %144 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 65, i32 2
  %145 = load i8, i8* %144, align 2
  %146 = icmp ugt i8 %145, %143
  %147 = select i1 %146, i8 %145, i8 %143
  br label %151

; <label>:148:                                    ; preds = %132
  %149 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 65, i32 3
  %150 = load i8, i8* %149, align 1
  br label %151

; <label>:151:                                    ; preds = %137, %148
  %152 = phi i8 [ %150, %148 ], [ %147, %137 ]
  %153 = add i8 %152, -1
  %154 = icmp ult i8 %153, 15
  %155 = sub i8 16, %152
  %156 = select i1 %154, i8 %155, i8 0
  %157 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %158 = load i32, i32* %157, align 8
  %159 = and i32 %158, 67109888
  %160 = icmp ne i32 %159, 0
  %161 = icmp ult i8 %156, 5
  %162 = and i1 %160, %161
  %163 = select i1 %162, i8 5, i8 %156
  %164 = icmp ult i8 %163, 8
  %165 = select i1 %164, i8 %163, i8 8
  %166 = zext i8 %165 to i32
  %167 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  store i32 %166, i32* %167, align 8
  %168 = icmp eq i32 %159, 0
  %169 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  %170 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 62
  %171 = load i32, i32* %170, align 4
  %172 = icmp sgt i32 %171, 0
  br i1 %168, label %365, label %173

; <label>:173:                                    ; preds = %151
  br i1 %172, label %174, label %190

; <label>:174:                                    ; preds = %173
  %175 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = sitofp i32 %176 to double
  %178 = fmul double %177, 1.000000e-05
  %179 = sitofp i32 %171 to double
  %180 = fmul double %178, %179
  %181 = fadd double %180, 5.000000e-01
  %182 = tail call double @llvm.floor.f64(double %181) #18
  %183 = fcmp ole double %182, 0x41DFFFFFFFC00000
  %184 = fcmp oge double %182, 0xC1E0000000000000
  %185 = and i1 %183, %184
  %186 = fptosi double %182 to i32
  %187 = sitofp i32 %186 to double
  %188 = fmul double %187, 1.000000e-05
  %189 = select i1 %185, double %188, double 0.000000e+00
  br label %190

; <label>:190:                                    ; preds = %174, %173
  %191 = phi double [ %189, %174 ], [ 1.000000e+00, %173 ]
  %192 = sub nsw i32 8, %166
  %193 = shl i32 1, %192
  %194 = sub nsw i32 16, %166
  %195 = shl nsw i32 -1, %194
  %196 = xor i32 %195, -1
  %197 = zext i32 %193 to i64
  %198 = shl nuw nsw i64 %197, 3
  %199 = tail call noalias i8* @malloc(i64 %198) #18
  %200 = icmp eq i8* %199, null
  br i1 %200, label %201, label %202

; <label>:201:                                    ; preds = %190
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:202:                                    ; preds = %190
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %199, i8 0, i64 %198, i1 false) #18, !noalias !89
  %203 = bitcast i8* %199 to i16**
  %204 = bitcast i16*** %169 to i8**
  store i8* %199, i8** %204, align 8, !noalias !94
  br label %207

; <label>:205:                                    ; preds = %212
  %206 = lshr i32 255, %166
  br label %242

; <label>:207:                                    ; preds = %202, %212
  %208 = phi i64 [ 0, %202 ], [ %215, %212 ]
  %209 = tail call noalias i8* @malloc(i64 512) #18
  %210 = icmp eq i8* %209, null
  br i1 %210, label %211, label %212

; <label>:211:                                    ; preds = %207
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:212:                                    ; preds = %207
  %213 = getelementptr inbounds i16*, i16** %203, i64 %208
  %214 = bitcast i16** %213 to i8**
  store i8* %209, i8** %214, align 8, !noalias !94
  %215 = add nuw nsw i64 %208, 1
  %216 = icmp ult i64 %215, %197
  br i1 %216, label %207, label %205

; <label>:217:                                    ; preds = %326
  %218 = shl i32 %193, 8
  %219 = icmp ugt i32 %218, %327
  br i1 %219, label %220, label %538

; <label>:220:                                    ; preds = %217
  %221 = sub i32 0, %327
  %222 = xor i32 %327, -1
  %223 = add i32 %218, %222
  %224 = and i32 %221, 3
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %239, label %226

; <label>:226:                                    ; preds = %220, %226
  %227 = phi i32 [ %236, %226 ], [ %327, %220 ]
  %228 = phi i32 [ %237, %226 ], [ %224, %220 ]
  %229 = and i32 %227, %206
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds i16*, i16** %203, i64 %230
  %232 = load i16*, i16** %231, align 8, !noalias !94
  %233 = lshr i32 %227, %192
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds i16, i16* %232, i64 %234
  store i16 -1, i16* %235, align 2
  %236 = add nuw i32 %227, 1
  %237 = add i32 %228, -1
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %226, !llvm.loop !95

; <label>:239:                                    ; preds = %226, %220
  %240 = phi i32 [ %327, %220 ], [ %236, %226 ]
  %241 = icmp ult i32 %223, 3
  br i1 %241, label %538, label %330

; <label>:242:                                    ; preds = %326, %205
  %243 = phi i32 [ 0, %205 ], [ %328, %326 ]
  %244 = phi i32 [ 0, %205 ], [ %327, %326 ]
  %245 = trunc i32 %243 to i16
  %246 = mul i16 %245, 257
  %247 = zext i16 %246 to i32
  %248 = add nuw nsw i32 %247, 128
  %249 = add nuw nsw i32 %247, 127
  %250 = icmp ult i32 %249, 65534
  br i1 %250, label %251, label %259

; <label>:251:                                    ; preds = %242
  %252 = sitofp i32 %248 to double
  %253 = fdiv double %252, 6.553500e+04
  %254 = tail call double @llvm.pow.f64(double %253, double %191) #18
  %255 = fmul double %254, 6.553500e+04
  %256 = fadd double %255, 5.000000e-01
  %257 = tail call double @llvm.floor.f64(double %256) #18
  %258 = fptoui double %257 to i16
  br label %261

; <label>:259:                                    ; preds = %242
  %260 = trunc i32 %248 to i16
  br label %261

; <label>:261:                                    ; preds = %259, %251
  %262 = phi i16 [ %258, %251 ], [ %260, %259 ]
  %263 = zext i16 %262 to i32
  %264 = mul i32 %263, %196
  %265 = add i32 %264, 32768
  %266 = udiv i32 %265, 65535
  %267 = icmp ult i32 %266, %244
  br i1 %267, label %326, label %268

; <label>:268:                                    ; preds = %261
  %269 = add nuw nsw i32 %266, 1
  %270 = add nuw nsw i32 %266, 1
  %271 = sub i32 %270, %244
  %272 = sub i32 %266, %244
  %273 = and i32 %271, 3
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %288, label %275

; <label>:275:                                    ; preds = %268, %275
  %276 = phi i32 [ %285, %275 ], [ %244, %268 ]
  %277 = phi i32 [ %286, %275 ], [ %273, %268 ]
  %278 = and i32 %276, %206
  %279 = zext i32 %278 to i64
  %280 = getelementptr inbounds i16*, i16** %203, i64 %279
  %281 = load i16*, i16** %280, align 8, !noalias !94
  %282 = lshr i32 %276, %192
  %283 = zext i32 %282 to i64
  %284 = getelementptr inbounds i16, i16* %281, i64 %283
  store i16 %246, i16* %284, align 2
  %285 = add nuw nsw i32 %276, 1
  %286 = add i32 %277, -1
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %275, !llvm.loop !97

; <label>:288:                                    ; preds = %275, %268
  %289 = phi i32 [ %244, %268 ], [ %285, %275 ]
  %290 = icmp ult i32 %272, 3
  br i1 %290, label %326, label %291

; <label>:291:                                    ; preds = %288, %291
  %292 = phi i32 [ %324, %291 ], [ %289, %288 ]
  %293 = and i32 %292, %206
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds i16*, i16** %203, i64 %294
  %296 = load i16*, i16** %295, align 8, !noalias !94
  %297 = lshr i32 %292, %192
  %298 = zext i32 %297 to i64
  %299 = getelementptr inbounds i16, i16* %296, i64 %298
  store i16 %246, i16* %299, align 2
  %300 = add nuw nsw i32 %292, 1
  %301 = and i32 %300, %206
  %302 = zext i32 %301 to i64
  %303 = getelementptr inbounds i16*, i16** %203, i64 %302
  %304 = load i16*, i16** %303, align 8, !noalias !94
  %305 = lshr i32 %300, %192
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds i16, i16* %304, i64 %306
  store i16 %246, i16* %307, align 2
  %308 = add nsw i32 %292, 2
  %309 = and i32 %308, %206
  %310 = zext i32 %309 to i64
  %311 = getelementptr inbounds i16*, i16** %203, i64 %310
  %312 = load i16*, i16** %311, align 8, !noalias !94
  %313 = lshr i32 %308, %192
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds i16, i16* %312, i64 %314
  store i16 %246, i16* %315, align 2
  %316 = add nsw i32 %292, 3
  %317 = and i32 %316, %206
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds i16*, i16** %203, i64 %318
  %320 = load i16*, i16** %319, align 8, !noalias !94
  %321 = lshr i32 %316, %192
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds i16, i16* %320, i64 %322
  store i16 %246, i16* %323, align 2
  %324 = add nsw i32 %292, 4
  %325 = icmp eq i32 %324, %269
  br i1 %325, label %326, label %291

; <label>:326:                                    ; preds = %288, %291, %261
  %327 = phi i32 [ %244, %261 ], [ %269, %291 ], [ %269, %288 ]
  %328 = add nuw nsw i32 %243, 1
  %329 = icmp eq i32 %328, 255
  br i1 %329, label %217, label %242

; <label>:330:                                    ; preds = %239, %330
  %331 = phi i32 [ %363, %330 ], [ %240, %239 ]
  %332 = and i32 %331, %206
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds i16*, i16** %203, i64 %333
  %335 = load i16*, i16** %334, align 8, !noalias !94
  %336 = lshr i32 %331, %192
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds i16, i16* %335, i64 %337
  store i16 -1, i16* %338, align 2
  %339 = add nuw i32 %331, 1
  %340 = and i32 %339, %206
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds i16*, i16** %203, i64 %341
  %343 = load i16*, i16** %342, align 8, !noalias !94
  %344 = lshr i32 %339, %192
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds i16, i16* %343, i64 %345
  store i16 -1, i16* %346, align 2
  %347 = add i32 %331, 2
  %348 = and i32 %347, %206
  %349 = zext i32 %348 to i64
  %350 = getelementptr inbounds i16*, i16** %203, i64 %349
  %351 = load i16*, i16** %350, align 8, !noalias !94
  %352 = lshr i32 %347, %192
  %353 = zext i32 %352 to i64
  %354 = getelementptr inbounds i16, i16* %351, i64 %353
  store i16 -1, i16* %354, align 2
  %355 = add i32 %331, 3
  %356 = and i32 %355, %206
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds i16*, i16** %203, i64 %357
  %359 = load i16*, i16** %358, align 8, !noalias !94
  %360 = lshr i32 %355, %192
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds i16, i16* %359, i64 %361
  store i16 -1, i16* %362, align 2
  %363 = add i32 %331, 4
  %364 = icmp eq i32 %363, %218
  br i1 %364, label %538, label %330

; <label>:365:                                    ; preds = %151
  br i1 %172, label %366, label %382

; <label>:366:                                    ; preds = %365
  %367 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 0
  %368 = load i32, i32* %367, align 8
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %381, label %370

; <label>:370:                                    ; preds = %366
  %371 = sitofp i32 %368 to double
  %372 = fdiv double 1.000000e+15, %371
  %373 = sitofp i32 %171 to double
  %374 = fdiv double %372, %373
  %375 = fadd double %374, 5.000000e-01
  %376 = tail call double @llvm.floor.f64(double %375) #18
  %377 = fcmp ugt double %376, 0x41DFFFFFFFC00000
  %378 = fcmp ult double %376, 0xC1E0000000000000
  %379 = fptosi double %376 to i32
  %380 = or i1 %378, %377
  br i1 %380, label %381, label %382

; <label>:381:                                    ; preds = %366, %370
  br label %382

; <label>:382:                                    ; preds = %365, %370, %381
  %383 = phi i32 [ 100000, %365 ], [ 0, %381 ], [ %379, %370 ]
  %384 = sub nsw i32 8, %166
  %385 = shl i32 1, %384
  %386 = sub nsw i32 16, %166
  %387 = shl nsw i32 -1, %386
  %388 = xor i32 %387, -1
  %389 = sitofp i32 %388 to double
  %390 = fdiv double 1.000000e+00, %389
  %391 = xor i32 %166, 15
  %392 = shl i32 1, %391
  %393 = zext i32 %385 to i64
  %394 = shl nuw nsw i64 %393, 3
  %395 = tail call noalias i8* @malloc(i64 %394) #18
  %396 = icmp eq i8* %395, null
  br i1 %396, label %397, label %398

; <label>:397:                                    ; preds = %382
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:398:                                    ; preds = %382
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %395, i8 0, i64 %394, i1 false) #18, !noalias !98
  %399 = bitcast i8* %395 to i16**
  %400 = bitcast i16*** %169 to i8**
  store i8* %395, i8** %400, align 8, !noalias !103
  %401 = add i32 %383, -95000
  %402 = icmp ult i32 %401, 10001
  %403 = icmp eq i8 %165, 0
  %404 = sitofp i32 %383 to double
  %405 = fmul double %404, 1.000000e-05
  %406 = insertelement <8 x i32> undef, i32 %384, i32 0
  %407 = shufflevector <8 x i32> %406, <8 x i32> undef, <8 x i32> zeroinitializer
  %408 = insertelement <8 x i1> undef, i1 %403, i32 0
  %409 = shufflevector <8 x i1> %408, <8 x i1> undef, <8 x i32> zeroinitializer
  %410 = xor <8 x i1> %409, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %411 = extractelement <8 x i1> %410, i32 0
  %412 = extractelement <8 x i1> %410, i32 1
  %413 = extractelement <8 x i1> %410, i32 2
  %414 = extractelement <8 x i1> %410, i32 3
  %415 = extractelement <8 x i1> %410, i32 4
  %416 = extractelement <8 x i1> %410, i32 5
  %417 = extractelement <8 x i1> %410, i32 6
  %418 = extractelement <8 x i1> %410, i32 7
  br label %419

; <label>:419:                                    ; preds = %398, %535
  %420 = phi i64 [ 0, %398 ], [ %536, %535 ]
  %421 = tail call noalias i8* @malloc(i64 512) #18
  %422 = icmp eq i8* %421, null
  br i1 %422, label %423, label %424

; <label>:423:                                    ; preds = %419
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:424:                                    ; preds = %419
  %425 = bitcast i8* %421 to i16*
  %426 = getelementptr inbounds i16*, i16** %399, i64 %420
  %427 = bitcast i16** %426 to i8**
  store i8* %421, i8** %427, align 8, !noalias !103
  %428 = trunc i64 %420 to i32
  br i1 %402, label %429, label %508

; <label>:429:                                    ; preds = %424
  %430 = insertelement <8 x i32> undef, i32 %428, i32 0
  %431 = shufflevector <8 x i32> %430, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %432

; <label>:432:                                    ; preds = %499, %429
  %433 = phi i64 [ 0, %429 ], [ %505, %499 ]
  %434 = phi <8 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, %429 ], [ %506, %499 ]
  %435 = shl <8 x i32> %434, %407
  %436 = add <8 x i32> %435, %431
  br i1 %411, label %437, label %443

; <label>:437:                                    ; preds = %432
  %438 = extractelement <8 x i32> %436, i32 0
  %439 = mul i32 %438, 65535
  %440 = add i32 %439, %392
  %441 = udiv i32 %440, %388
  %442 = insertelement <8 x i32> undef, i32 %441, i32 0
  br label %443

; <label>:443:                                    ; preds = %437, %432
  %444 = phi <8 x i32> [ undef, %432 ], [ %442, %437 ]
  br i1 %412, label %445, label %451

; <label>:445:                                    ; preds = %443
  %446 = extractelement <8 x i32> %436, i32 1
  %447 = mul i32 %446, 65535
  %448 = add i32 %447, %392
  %449 = udiv i32 %448, %388
  %450 = insertelement <8 x i32> %444, i32 %449, i32 1
  br label %451

; <label>:451:                                    ; preds = %445, %443
  %452 = phi <8 x i32> [ %444, %443 ], [ %450, %445 ]
  br i1 %413, label %453, label %459

; <label>:453:                                    ; preds = %451
  %454 = extractelement <8 x i32> %436, i32 2
  %455 = mul i32 %454, 65535
  %456 = add i32 %455, %392
  %457 = udiv i32 %456, %388
  %458 = insertelement <8 x i32> %452, i32 %457, i32 2
  br label %459

; <label>:459:                                    ; preds = %453, %451
  %460 = phi <8 x i32> [ %452, %451 ], [ %458, %453 ]
  br i1 %414, label %461, label %467

; <label>:461:                                    ; preds = %459
  %462 = extractelement <8 x i32> %436, i32 3
  %463 = mul i32 %462, 65535
  %464 = add i32 %463, %392
  %465 = udiv i32 %464, %388
  %466 = insertelement <8 x i32> %460, i32 %465, i32 3
  br label %467

; <label>:467:                                    ; preds = %461, %459
  %468 = phi <8 x i32> [ %460, %459 ], [ %466, %461 ]
  br i1 %415, label %469, label %475

; <label>:469:                                    ; preds = %467
  %470 = extractelement <8 x i32> %436, i32 4
  %471 = mul i32 %470, 65535
  %472 = add i32 %471, %392
  %473 = udiv i32 %472, %388
  %474 = insertelement <8 x i32> %468, i32 %473, i32 4
  br label %475

; <label>:475:                                    ; preds = %469, %467
  %476 = phi <8 x i32> [ %468, %467 ], [ %474, %469 ]
  br i1 %416, label %477, label %483

; <label>:477:                                    ; preds = %475
  %478 = extractelement <8 x i32> %436, i32 5
  %479 = mul i32 %478, 65535
  %480 = add i32 %479, %392
  %481 = udiv i32 %480, %388
  %482 = insertelement <8 x i32> %476, i32 %481, i32 5
  br label %483

; <label>:483:                                    ; preds = %477, %475
  %484 = phi <8 x i32> [ %476, %475 ], [ %482, %477 ]
  br i1 %417, label %485, label %491

; <label>:485:                                    ; preds = %483
  %486 = extractelement <8 x i32> %436, i32 6
  %487 = mul i32 %486, 65535
  %488 = add i32 %487, %392
  %489 = udiv i32 %488, %388
  %490 = insertelement <8 x i32> %484, i32 %489, i32 6
  br label %491

; <label>:491:                                    ; preds = %485, %483
  %492 = phi <8 x i32> [ %484, %483 ], [ %490, %485 ]
  br i1 %418, label %493, label %499

; <label>:493:                                    ; preds = %491
  %494 = extractelement <8 x i32> %436, i32 7
  %495 = mul i32 %494, 65535
  %496 = add i32 %495, %392
  %497 = udiv i32 %496, %388
  %498 = insertelement <8 x i32> %492, i32 %497, i32 7
  br label %499

; <label>:499:                                    ; preds = %493, %491
  %500 = phi <8 x i32> [ %492, %491 ], [ %498, %493 ]
  %501 = select <8 x i1> %409, <8 x i32> %436, <8 x i32> %500
  %502 = trunc <8 x i32> %501 to <8 x i16>
  %503 = getelementptr inbounds i16, i16* %425, i64 %433
  %504 = bitcast i16* %503 to <8 x i16>*
  store <8 x i16> %502, <8 x i16>* %504, align 2, !noalias !103
  %505 = add i64 %433, 8
  %506 = add <8 x i32> %434, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %507 = icmp eq i64 %505, 256
  br i1 %507, label %535, label %432, !llvm.loop !104

; <label>:508:                                    ; preds = %424, %508
  %509 = phi i64 [ %533, %508 ], [ 0, %424 ]
  %510 = trunc i64 %509 to i32
  %511 = shl i32 %510, %384
  %512 = add i32 %511, %428
  %513 = uitofp i32 %512 to double
  %514 = fmul double %390, %513
  %515 = tail call double @llvm.pow.f64(double %514, double %405) #18
  %516 = fmul double %515, 6.553500e+04
  %517 = fadd double %516, 5.000000e-01
  %518 = tail call double @llvm.floor.f64(double %517) #18
  %519 = fptoui double %518 to i16
  %520 = getelementptr inbounds i16, i16* %425, i64 %509
  store i16 %519, i16* %520, align 2, !noalias !103
  %521 = or i64 %509, 1
  %522 = trunc i64 %521 to i32
  %523 = shl i32 %522, %384
  %524 = add i32 %523, %428
  %525 = uitofp i32 %524 to double
  %526 = fmul double %390, %525
  %527 = tail call double @llvm.pow.f64(double %526, double %405) #18
  %528 = fmul double %527, 6.553500e+04
  %529 = fadd double %528, 5.000000e-01
  %530 = tail call double @llvm.floor.f64(double %529) #18
  %531 = fptoui double %530 to i16
  %532 = getelementptr inbounds i16, i16* %425, i64 %521
  store i16 %531, i16* %532, align 2, !noalias !103
  %533 = add nuw nsw i64 %509, 2
  %534 = icmp eq i64 %533, 256
  br i1 %534, label %535, label %508

; <label>:535:                                    ; preds = %508, %499
  %536 = add nuw nsw i64 %420, 1
  %537 = icmp ult i64 %536, %393
  br i1 %537, label %419, label %538

; <label>:538:                                    ; preds = %239, %330, %535, %126, %75, %217
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @png_set_option(%struct.png_struct_def* noalias, i32, i32) local_unnamed_addr #3 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ult i32 %1, 12
  %6 = and i1 %4, %5
  %7 = and i32 %1, 1
  %8 = icmp eq i32 %7, 0
  %9 = and i1 %6, %8
  br i1 %9, label %10, label %22

; <label>:10:                                     ; preds = %3
  %11 = shl i32 3, %1
  %12 = icmp eq i32 %2, 0
  %13 = select i1 %12, i32 2, i32 3
  %14 = shl i32 %13, %1
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 85
  %16 = load i32, i32* %15, align 8
  %17 = xor i32 %11, -1
  %18 = and i32 %16, %17
  %19 = or i32 %18, %14
  store i32 %19, i32* %15, align 8
  %20 = and i32 %16, %11
  %21 = ashr i32 %20, %1
  br label %22

; <label>:22:                                     ; preds = %3, %10
  %23 = phi i32 [ %21, %10 ], [ 1, %3 ]
  ret i32 %23
}

; Function Attrs: noreturn nounwind sspstrong uwtable
define internal fastcc void @MOZ_PNG_def_error(%struct.png_struct_def* noalias readonly) unnamed_addr #5 {
  tail call void @MOZ_PNG_longjmp(%struct.png_struct_def* %0, i32 1) #19
  unreachable
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden nonnull i8* @MOZ_PNG_format_number(i8* readnone, i8*, i32, i64) local_unnamed_addr #3 {
  %5 = getelementptr inbounds i8, i8* %1, i64 -1
  store i8 0, i8* %5, align 1
  %6 = icmp ugt i8* %5, %0
  br i1 %6, label %7, label %78

; <label>:7:                                      ; preds = %4
  %8 = icmp eq i32 %2, 5
  br label %9

; <label>:9:                                      ; preds = %7, %71
  %10 = phi i32 [ 0, %7 ], [ %73, %71 ]
  %11 = phi i32 [ 1, %7 ], [ %74, %71 ]
  %12 = phi i32 [ 0, %7 ], [ %72, %71 ]
  %13 = phi i64 [ %3, %7 ], [ %75, %71 ]
  %14 = phi i8* [ %5, %7 ], [ %76, %71 ]
  %15 = icmp ne i64 %13, 0
  %16 = icmp slt i32 %12, %11
  %17 = or i1 %15, %16
  br i1 %17, label %18, label %78

; <label>:18:                                     ; preds = %9
  switch i32 %2, label %53 [
    i32 5, label %19
    i32 2, label %32
    i32 1, label %33
    i32 4, label %40
    i32 3, label %41
  ]

; <label>:19:                                     ; preds = %18
  %20 = icmp eq i32 %10, 0
  %21 = urem i64 %13, 10
  %22 = icmp eq i64 %21, 0
  %23 = and i1 %22, %20
  br i1 %23, label %28, label %24

; <label>:24:                                     ; preds = %19
  %25 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %21
  %26 = load i8, i8* %25, align 1
  %27 = getelementptr inbounds i8, i8* %14, i64 -1
  store i8 %26, i8* %27, align 1
  br label %28

; <label>:28:                                     ; preds = %19, %24
  %29 = phi i8* [ %27, %24 ], [ %14, %19 ]
  %30 = phi i32 [ 1, %24 ], [ 0, %19 ]
  %31 = udiv i64 %13, 10
  br label %53

; <label>:32:                                     ; preds = %18
  br label %33

; <label>:33:                                     ; preds = %18, %32
  %34 = phi i32 [ %11, %18 ], [ 2, %32 ]
  %35 = urem i64 %13, 10
  %36 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %14, i64 -1
  store i8 %37, i8* %38, align 1
  %39 = udiv i64 %13, 10
  br label %48

; <label>:40:                                     ; preds = %18
  br label %41

; <label>:41:                                     ; preds = %18, %40
  %42 = phi i32 [ %11, %18 ], [ 2, %40 ]
  %43 = and i64 %13, 15
  %44 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds i8, i8* %14, i64 -1
  store i8 %45, i8* %46, align 1
  %47 = lshr i64 %13, 4
  br label %48

; <label>:48:                                     ; preds = %41, %33
  %49 = phi i8* [ %38, %33 ], [ %46, %41 ]
  %50 = phi i64 [ %39, %33 ], [ %47, %41 ]
  %51 = phi i32 [ %34, %33 ], [ %42, %41 ]
  %52 = add nuw nsw i32 %12, 1
  br label %71

; <label>:53:                                     ; preds = %18, %28
  %54 = phi i8* [ %29, %28 ], [ %14, %18 ]
  %55 = phi i64 [ %31, %28 ], [ 0, %18 ]
  %56 = phi i32 [ 5, %28 ], [ %11, %18 ]
  %57 = phi i32 [ %30, %28 ], [ %10, %18 ]
  %58 = add nuw nsw i32 %12, 1
  %59 = icmp eq i32 %58, 5
  %60 = and i1 %8, %59
  %61 = icmp ugt i8* %54, %0
  %62 = and i1 %60, %61
  br i1 %62, label %63, label %71

; <label>:63:                                     ; preds = %53
  %64 = icmp eq i32 %57, 0
  br i1 %64, label %67, label %65

; <label>:65:                                     ; preds = %63
  %66 = getelementptr inbounds i8, i8* %54, i64 -1
  store i8 46, i8* %66, align 1
  br label %71

; <label>:67:                                     ; preds = %63
  %68 = icmp eq i64 %55, 0
  br i1 %68, label %69, label %71

; <label>:69:                                     ; preds = %67
  %70 = getelementptr inbounds i8, i8* %54, i64 -1
  store i8 48, i8* %70, align 1
  br label %71

; <label>:71:                                     ; preds = %48, %65, %69, %67, %53
  %72 = phi i32 [ 5, %65 ], [ 5, %69 ], [ 5, %67 ], [ %58, %53 ], [ %52, %48 ]
  %73 = phi i32 [ %57, %65 ], [ 0, %69 ], [ 0, %67 ], [ %57, %53 ], [ %10, %48 ]
  %74 = phi i32 [ %56, %65 ], [ %56, %69 ], [ %56, %67 ], [ %56, %53 ], [ %51, %48 ]
  %75 = phi i64 [ %55, %65 ], [ 0, %69 ], [ %55, %67 ], [ %55, %53 ], [ %50, %48 ]
  %76 = phi i8* [ %66, %65 ], [ %70, %69 ], [ %54, %67 ], [ %54, %53 ], [ %49, %48 ]
  %77 = icmp ugt i8* %76, %0
  br i1 %77, label %9, label %78

; <label>:78:                                     ; preds = %71, %9, %4
  %79 = phi i8* [ %5, %4 ], [ %14, %9 ], [ %76, %71 ]
  ret i8* %79
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_warn_param([32 x i8]*, i32, i8* readonly) local_unnamed_addr #3 {
  %4 = add i32 %1, -1
  %5 = icmp ult i32 %4, 8
  br i1 %5, label %6, label %30

; <label>:6:                                      ; preds = %3
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %7, i64 0
  %9 = icmp eq i8* %8, null
  br i1 %9, label %30, label %10

; <label>:10:                                     ; preds = %6
  %11 = icmp eq i8* %2, null
  br i1 %11, label %28, label %12

; <label>:12:                                     ; preds = %10
  %13 = load i8, i8* %2, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %28, label %15

; <label>:15:                                     ; preds = %12, %15
  %16 = phi i8 [ %22, %15 ], [ %13, %12 ]
  %17 = phi i8* [ %19, %15 ], [ %2, %12 ]
  %18 = phi i64 [ %20, %15 ], [ 0, %12 ]
  %19 = getelementptr inbounds i8, i8* %17, i64 1
  %20 = add nuw nsw i64 %18, 1
  %21 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %7, i64 %18
  store i8 %16, i8* %21, align 1
  %22 = load i8, i8* %19, align 1
  %23 = icmp ne i8 %22, 0
  %24 = icmp ult i64 %20, 31
  %25 = and i1 %24, %23
  br i1 %25, label %15, label %26

; <label>:26:                                     ; preds = %15
  %27 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %7, i64 %20
  br label %28

; <label>:28:                                     ; preds = %26, %12, %10
  %29 = phi i8* [ %27, %26 ], [ %8, %12 ], [ %8, %10 ]
  store i8 0, i8* %29, align 1
  br label %30

; <label>:30:                                     ; preds = %6, %28, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_warn_param_unsigned([32 x i8]*, i32, i32, i64) local_unnamed_addr #4 {
  %5 = alloca [24 x i8], align 16
  %6 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #18
  %7 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 23
  store i8 0, i8* %7, align 1
  %8 = icmp eq i32 %2, 5
  br label %9

; <label>:9:                                      ; preds = %75, %4
  %10 = phi i8 [ 0, %4 ], [ %76, %75 ]
  %11 = phi i32 [ 0, %4 ], [ %78, %75 ]
  %12 = phi i32 [ 1, %4 ], [ %79, %75 ]
  %13 = phi i32 [ 0, %4 ], [ %77, %75 ]
  %14 = phi i64 [ %3, %4 ], [ %80, %75 ]
  %15 = phi i8* [ %7, %4 ], [ %81, %75 ]
  %16 = icmp ne i64 %14, 0
  %17 = icmp slt i32 %13, %12
  %18 = or i1 %17, %16
  br i1 %18, label %19, label %83

; <label>:19:                                     ; preds = %9
  switch i32 %2, label %56 [
    i32 5, label %20
    i32 2, label %34
    i32 1, label %35
    i32 4, label %42
    i32 3, label %43
  ]

; <label>:20:                                     ; preds = %19
  %21 = icmp eq i32 %11, 0
  %22 = urem i64 %14, 10
  %23 = icmp eq i64 %22, 0
  %24 = and i1 %21, %23
  br i1 %24, label %29, label %25

; <label>:25:                                     ; preds = %20
  %26 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %22
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %15, i64 -1
  store i8 %27, i8* %28, align 1
  br label %29

; <label>:29:                                     ; preds = %25, %20
  %30 = phi i8 [ %27, %25 ], [ %10, %20 ]
  %31 = phi i8* [ %28, %25 ], [ %15, %20 ]
  %32 = phi i32 [ 1, %25 ], [ 0, %20 ]
  %33 = udiv i64 %14, 10
  br label %56

; <label>:34:                                     ; preds = %19
  br label %35

; <label>:35:                                     ; preds = %34, %19
  %36 = phi i32 [ %12, %19 ], [ 2, %34 ]
  %37 = urem i64 %14, 10
  %38 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds i8, i8* %15, i64 -1
  store i8 %39, i8* %40, align 1
  %41 = udiv i64 %14, 10
  br label %50

; <label>:42:                                     ; preds = %19
  br label %43

; <label>:43:                                     ; preds = %42, %19
  %44 = phi i32 [ %12, %19 ], [ 2, %42 ]
  %45 = and i64 %14, 15
  %46 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds i8, i8* %15, i64 -1
  store i8 %47, i8* %48, align 1
  %49 = lshr i64 %14, 4
  br label %50

; <label>:50:                                     ; preds = %43, %35
  %51 = phi i8 [ %39, %35 ], [ %47, %43 ]
  %52 = phi i8* [ %40, %35 ], [ %48, %43 ]
  %53 = phi i64 [ %41, %35 ], [ %49, %43 ]
  %54 = phi i32 [ %36, %35 ], [ %44, %43 ]
  %55 = add nuw nsw i32 %13, 1
  br label %75

; <label>:56:                                     ; preds = %29, %19
  %57 = phi i8 [ %30, %29 ], [ %10, %19 ]
  %58 = phi i8* [ %31, %29 ], [ %15, %19 ]
  %59 = phi i64 [ %33, %29 ], [ 0, %19 ]
  %60 = phi i32 [ 5, %29 ], [ %12, %19 ]
  %61 = phi i32 [ %32, %29 ], [ %11, %19 ]
  %62 = add nuw nsw i32 %13, 1
  %63 = icmp eq i32 %62, 5
  %64 = and i1 %8, %63
  %65 = icmp ugt i8* %58, %6
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %75

; <label>:67:                                     ; preds = %56
  %68 = icmp eq i32 %61, 0
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %67
  %70 = getelementptr inbounds i8, i8* %58, i64 -1
  store i8 46, i8* %70, align 1
  br label %75

; <label>:71:                                     ; preds = %67
  %72 = icmp eq i64 %59, 0
  br i1 %72, label %73, label %75

; <label>:73:                                     ; preds = %71
  %74 = getelementptr inbounds i8, i8* %58, i64 -1
  store i8 48, i8* %74, align 1
  br label %75

; <label>:75:                                     ; preds = %73, %71, %69, %56, %50
  %76 = phi i8 [ 46, %69 ], [ 48, %73 ], [ %57, %71 ], [ %57, %56 ], [ %51, %50 ]
  %77 = phi i32 [ 5, %69 ], [ 5, %73 ], [ 5, %71 ], [ %62, %56 ], [ %55, %50 ]
  %78 = phi i32 [ %61, %69 ], [ 0, %73 ], [ 0, %71 ], [ %61, %56 ], [ %11, %50 ]
  %79 = phi i32 [ %60, %69 ], [ %60, %73 ], [ %60, %71 ], [ %60, %56 ], [ %54, %50 ]
  %80 = phi i64 [ %59, %69 ], [ 0, %73 ], [ %59, %71 ], [ %59, %56 ], [ %53, %50 ]
  %81 = phi i8* [ %70, %69 ], [ %74, %73 ], [ %58, %71 ], [ %58, %56 ], [ %52, %50 ]
  %82 = icmp ugt i8* %81, %6
  br i1 %82, label %9, label %83

; <label>:83:                                     ; preds = %9, %75
  %84 = phi i8 [ %10, %9 ], [ %76, %75 ]
  %85 = phi i8* [ %15, %9 ], [ %81, %75 ]
  %86 = add i32 %1, -1
  %87 = icmp ult i32 %86, 8
  br i1 %87, label %88, label %111

; <label>:88:                                     ; preds = %83
  %89 = sext i32 %86 to i64
  %90 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %89, i64 0
  %91 = icmp eq i8* %90, null
  br i1 %91, label %111, label %92

; <label>:92:                                     ; preds = %88
  %93 = icmp eq i8* %85, null
  %94 = icmp eq i8 %84, 0
  %95 = or i1 %93, %94
  br i1 %95, label %109, label %96

; <label>:96:                                     ; preds = %92, %96
  %97 = phi i8 [ %103, %96 ], [ %84, %92 ]
  %98 = phi i8* [ %100, %96 ], [ %85, %92 ]
  %99 = phi i64 [ %101, %96 ], [ 0, %92 ]
  %100 = getelementptr inbounds i8, i8* %98, i64 1
  %101 = add nuw nsw i64 %99, 1
  %102 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %89, i64 %99
  store i8 %97, i8* %102, align 1
  %103 = load i8, i8* %100, align 1
  %104 = icmp ne i8 %103, 0
  %105 = icmp ult i64 %101, 31
  %106 = and i1 %105, %104
  br i1 %106, label %96, label %107

; <label>:107:                                    ; preds = %96
  %108 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %89, i64 %101
  br label %109

; <label>:109:                                    ; preds = %107, %92
  %110 = phi i8* [ %108, %107 ], [ %90, %92 ]
  store i8 0, i8* %110, align 1
  br label %111

; <label>:111:                                    ; preds = %83, %88, %109
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_warn_param_signed([32 x i8]*, i32, i32, i32) local_unnamed_addr #4 {
  %5 = alloca [24 x i8], align 16
  %6 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #18
  %7 = sext i32 %3 to i64
  %8 = icmp slt i32 %3, 0
  %9 = sub nsw i64 0, %7
  %10 = select i1 %8, i64 %9, i64 %7
  %11 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 23
  store i8 0, i8* %11, align 1
  %12 = icmp eq i32 %2, 5
  br label %13

; <label>:13:                                     ; preds = %79, %4
  %14 = phi i8 [ 0, %4 ], [ %80, %79 ]
  %15 = phi i32 [ 0, %4 ], [ %82, %79 ]
  %16 = phi i32 [ 1, %4 ], [ %83, %79 ]
  %17 = phi i32 [ 0, %4 ], [ %81, %79 ]
  %18 = phi i64 [ %10, %4 ], [ %84, %79 ]
  %19 = phi i8* [ %11, %4 ], [ %85, %79 ]
  %20 = icmp ne i64 %18, 0
  %21 = icmp slt i32 %17, %16
  %22 = or i1 %21, %20
  br i1 %22, label %23, label %87

; <label>:23:                                     ; preds = %13
  switch i32 %2, label %60 [
    i32 5, label %24
    i32 2, label %38
    i32 1, label %39
    i32 4, label %46
    i32 3, label %47
  ]

; <label>:24:                                     ; preds = %23
  %25 = icmp eq i32 %15, 0
  %26 = urem i64 %18, 10
  %27 = icmp eq i64 %26, 0
  %28 = and i1 %25, %27
  br i1 %28, label %33, label %29

; <label>:29:                                     ; preds = %24
  %30 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %26
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds i8, i8* %19, i64 -1
  store i8 %31, i8* %32, align 1
  br label %33

; <label>:33:                                     ; preds = %29, %24
  %34 = phi i8 [ %31, %29 ], [ %14, %24 ]
  %35 = phi i8* [ %32, %29 ], [ %19, %24 ]
  %36 = phi i32 [ 1, %29 ], [ 0, %24 ]
  %37 = udiv i64 %18, 10
  br label %60

; <label>:38:                                     ; preds = %23
  br label %39

; <label>:39:                                     ; preds = %38, %23
  %40 = phi i32 [ %16, %23 ], [ 2, %38 ]
  %41 = urem i64 %18, 10
  %42 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds i8, i8* %19, i64 -1
  store i8 %43, i8* %44, align 1
  %45 = udiv i64 %18, 10
  br label %54

; <label>:46:                                     ; preds = %23
  br label %47

; <label>:47:                                     ; preds = %46, %23
  %48 = phi i32 [ %16, %23 ], [ 2, %46 ]
  %49 = and i64 %18, 15
  %50 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds i8, i8* %19, i64 -1
  store i8 %51, i8* %52, align 1
  %53 = lshr i64 %18, 4
  br label %54

; <label>:54:                                     ; preds = %47, %39
  %55 = phi i8 [ %43, %39 ], [ %51, %47 ]
  %56 = phi i8* [ %44, %39 ], [ %52, %47 ]
  %57 = phi i64 [ %45, %39 ], [ %53, %47 ]
  %58 = phi i32 [ %40, %39 ], [ %48, %47 ]
  %59 = add nuw nsw i32 %17, 1
  br label %79

; <label>:60:                                     ; preds = %33, %23
  %61 = phi i8 [ %34, %33 ], [ %14, %23 ]
  %62 = phi i8* [ %35, %33 ], [ %19, %23 ]
  %63 = phi i64 [ %37, %33 ], [ 0, %23 ]
  %64 = phi i32 [ 5, %33 ], [ %16, %23 ]
  %65 = phi i32 [ %36, %33 ], [ %15, %23 ]
  %66 = add nuw nsw i32 %17, 1
  %67 = icmp eq i32 %66, 5
  %68 = and i1 %12, %67
  %69 = icmp ugt i8* %62, %6
  %70 = and i1 %68, %69
  br i1 %70, label %71, label %79

; <label>:71:                                     ; preds = %60
  %72 = icmp eq i32 %65, 0
  br i1 %72, label %75, label %73

; <label>:73:                                     ; preds = %71
  %74 = getelementptr inbounds i8, i8* %62, i64 -1
  store i8 46, i8* %74, align 1
  br label %79

; <label>:75:                                     ; preds = %71
  %76 = icmp eq i64 %63, 0
  br i1 %76, label %77, label %79

; <label>:77:                                     ; preds = %75
  %78 = getelementptr inbounds i8, i8* %62, i64 -1
  store i8 48, i8* %78, align 1
  br label %79

; <label>:79:                                     ; preds = %77, %75, %73, %60, %54
  %80 = phi i8 [ 46, %73 ], [ 48, %77 ], [ %61, %75 ], [ %61, %60 ], [ %55, %54 ]
  %81 = phi i32 [ 5, %73 ], [ 5, %77 ], [ 5, %75 ], [ %66, %60 ], [ %59, %54 ]
  %82 = phi i32 [ %65, %73 ], [ 0, %77 ], [ 0, %75 ], [ %65, %60 ], [ %15, %54 ]
  %83 = phi i32 [ %64, %73 ], [ %64, %77 ], [ %64, %75 ], [ %64, %60 ], [ %58, %54 ]
  %84 = phi i64 [ %63, %73 ], [ 0, %77 ], [ %63, %75 ], [ %63, %60 ], [ %57, %54 ]
  %85 = phi i8* [ %74, %73 ], [ %78, %77 ], [ %62, %75 ], [ %62, %60 ], [ %56, %54 ]
  %86 = icmp ugt i8* %85, %6
  br i1 %86, label %13, label %87

; <label>:87:                                     ; preds = %13, %79
  %88 = phi i8 [ %14, %13 ], [ %80, %79 ]
  %89 = phi i8* [ %19, %13 ], [ %85, %79 ]
  %90 = icmp ugt i8* %89, %6
  %91 = and i1 %8, %90
  br i1 %91, label %92, label %94

; <label>:92:                                     ; preds = %87
  %93 = getelementptr inbounds i8, i8* %89, i64 -1
  store i8 45, i8* %93, align 1
  br label %94

; <label>:94:                                     ; preds = %92, %87
  %95 = phi i8 [ 45, %92 ], [ %88, %87 ]
  %96 = phi i8* [ %93, %92 ], [ %89, %87 ]
  %97 = add i32 %1, -1
  %98 = icmp ult i32 %97, 8
  br i1 %98, label %99, label %122

; <label>:99:                                     ; preds = %94
  %100 = sext i32 %97 to i64
  %101 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %100, i64 0
  %102 = icmp eq i8* %101, null
  br i1 %102, label %122, label %103

; <label>:103:                                    ; preds = %99
  %104 = icmp eq i8* %96, null
  %105 = icmp eq i8 %95, 0
  %106 = or i1 %104, %105
  br i1 %106, label %120, label %107

; <label>:107:                                    ; preds = %103, %107
  %108 = phi i8 [ %114, %107 ], [ %95, %103 ]
  %109 = phi i8* [ %111, %107 ], [ %96, %103 ]
  %110 = phi i64 [ %112, %107 ], [ 0, %103 ]
  %111 = getelementptr inbounds i8, i8* %109, i64 1
  %112 = add nuw nsw i64 %110, 1
  %113 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %100, i64 %110
  store i8 %108, i8* %113, align 1
  %114 = load i8, i8* %111, align 1
  %115 = icmp ne i8 %114, 0
  %116 = icmp ult i64 %112, 31
  %117 = and i1 %116, %115
  br i1 %117, label %107, label %118

; <label>:118:                                    ; preds = %107
  %119 = getelementptr inbounds [32 x i8], [32 x i8]* %0, i64 %100, i64 %112
  br label %120

; <label>:120:                                    ; preds = %118, %103
  %121 = phi i8* [ %119, %118 ], [ %101, %103 ]
  store i8 0, i8* %121, align 1
  br label %122

; <label>:122:                                    ; preds = %94, %99, %120
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_formatted_warning(%struct.png_struct_def* noalias, [32 x i8]* readonly, i8* nocapture readonly) local_unnamed_addr #4 {
  %4 = alloca [192 x i8], align 16
  %5 = getelementptr inbounds [192 x i8], [192 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %5) #18
  %6 = icmp ne [32 x i8]* %1, null
  br label %7

; <label>:7:                                      ; preds = %3, %57
  %8 = phi i8* [ %2, %3 ], [ %59, %57 ]
  %9 = phi i64 [ 0, %3 ], [ %58, %57 ]
  %10 = load i8, i8* %8, align 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %61, label %12

; <label>:12:                                     ; preds = %7
  %13 = icmp eq i8 %10, 64
  %14 = and i1 %6, %13
  br i1 %14, label %15, label %51

; <label>:15:                                     ; preds = %12
  %16 = getelementptr inbounds i8, i8* %8, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %51, label %19

; <label>:19:                                     ; preds = %15, %19
  %20 = phi i64 [ %26, %19 ], [ 0, %15 ]
  %21 = getelementptr inbounds [10 x i8], [10 x i8]* @MOZ_PNG_formatted_warning.valid_parameters, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = icmp ne i8 %22, %17
  %24 = icmp ne i64 %20, 9
  %25 = and i1 %24, %23
  %26 = add nuw nsw i64 %20, 1
  br i1 %25, label %19, label %27

; <label>:27:                                     ; preds = %19
  %28 = trunc i64 %20 to i32
  %29 = and i64 %20, 4294967295
  %30 = icmp ult i32 %28, 8
  br i1 %30, label %31, label %51

; <label>:31:                                     ; preds = %27
  %32 = getelementptr inbounds [32 x i8], [32 x i8]* %1, i64 %29, i64 32
  %33 = icmp ult i64 %9, 191
  br i1 %33, label %34, label %48

; <label>:34:                                     ; preds = %31
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %1, i64 %29, i64 0
  br label %36

; <label>:36:                                     ; preds = %34, %43
  %37 = phi i8* [ %44, %43 ], [ %35, %34 ]
  %38 = phi i64 [ %45, %43 ], [ %9, %34 ]
  %39 = load i8, i8* %37, align 1
  %40 = icmp ne i8 %39, 0
  %41 = icmp ult i8* %37, %32
  %42 = and i1 %41, %40
  br i1 %42, label %43, label %48

; <label>:43:                                     ; preds = %36
  %44 = getelementptr inbounds i8, i8* %37, i64 1
  %45 = add nuw nsw i64 %38, 1
  %46 = getelementptr inbounds [192 x i8], [192 x i8]* %4, i64 0, i64 %38
  store i8 %39, i8* %46, align 1
  %47 = icmp ult i64 %45, 191
  br i1 %47, label %36, label %48

; <label>:48:                                     ; preds = %36, %43, %31
  %49 = phi i64 [ %9, %31 ], [ %45, %43 ], [ %38, %36 ]
  %50 = getelementptr inbounds i8, i8* %8, i64 2
  br label %57

; <label>:51:                                     ; preds = %27, %12, %15
  %52 = phi i8 [ 64, %15 ], [ %10, %12 ], [ %17, %27 ]
  %53 = phi i8* [ %8, %15 ], [ %8, %12 ], [ %16, %27 ]
  %54 = getelementptr inbounds i8, i8* %53, i64 1
  %55 = add i64 %9, 1
  %56 = getelementptr inbounds [192 x i8], [192 x i8]* %4, i64 0, i64 %9
  store i8 %52, i8* %56, align 1
  br label %57

; <label>:57:                                     ; preds = %51, %48
  %58 = phi i64 [ %55, %51 ], [ %49, %48 ]
  %59 = phi i8* [ %54, %51 ], [ %50, %48 ]
  %60 = icmp ult i64 %58, 191
  br i1 %60, label %7, label %61

; <label>:61:                                     ; preds = %7, %57
  %62 = phi i64 [ %9, %7 ], [ %58, %57 ]
  %63 = getelementptr inbounds [192 x i8], [192 x i8]* %4, i64 0, i64 %62
  store i8 0, i8* %63, align 1
  call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %5) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_chunk_warn(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #4 {
  %3 = alloca [214 x i8], align 16
  %4 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 214, i8* nonnull %4) #18
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* null, i8* %1)
  br label %74

; <label>:7:                                      ; preds = %2
  call fastcc void @MOZ_PNG_format_buf(%struct.png_struct_def* nonnull %0, i8* nonnull %4, i8* %1)
  %8 = load i8, i8* %4, align 16, !noalias !106
  %9 = icmp eq i8 %8, 35
  br i1 %9, label %10, label %18

; <label>:10:                                     ; preds = %7
  %11 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 1
  %12 = load i8, i8* %11, align 1, !noalias !106
  %13 = icmp eq i8 %12, 32
  br i1 %13, label %18, label %14

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 2
  %16 = load i8, i8* %15, align 2, !noalias !106
  %17 = icmp eq i8 %16, 32
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %69, %65, %61, %57, %53, %49, %45, %41, %37, %33, %29, %25, %14, %10, %7
  %19 = phi i64 [ 0, %7 ], [ 1, %10 ], [ 2, %14 ], [ 3, %25 ], [ 4, %29 ], [ 5, %33 ], [ 6, %37 ], [ 7, %41 ], [ 8, %45 ], [ 9, %49 ], [ 10, %53 ], [ 11, %57 ], [ 12, %61 ], [ 13, %65 ], [ %73, %69 ]
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %21 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %20, align 8, !alias.scope !106
  %22 = icmp eq void (%struct.png_struct_def*, i8*)* %21, null
  br i1 %22, label %74, label %23

; <label>:23:                                     ; preds = %18
  %24 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 %19
  call void %21(%struct.png_struct_def* nonnull %0, i8* nonnull %24) #18
  br label %74

; <label>:25:                                     ; preds = %14
  %26 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 3
  %27 = load i8, i8* %26, align 1, !noalias !106
  %28 = icmp eq i8 %27, 32
  br i1 %28, label %18, label %29

; <label>:29:                                     ; preds = %25
  %30 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 4
  %31 = load i8, i8* %30, align 4, !noalias !106
  %32 = icmp eq i8 %31, 32
  br i1 %32, label %18, label %33

; <label>:33:                                     ; preds = %29
  %34 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 5
  %35 = load i8, i8* %34, align 1, !noalias !106
  %36 = icmp eq i8 %35, 32
  br i1 %36, label %18, label %37

; <label>:37:                                     ; preds = %33
  %38 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 6
  %39 = load i8, i8* %38, align 2, !noalias !106
  %40 = icmp eq i8 %39, 32
  br i1 %40, label %18, label %41

; <label>:41:                                     ; preds = %37
  %42 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 7
  %43 = load i8, i8* %42, align 1, !noalias !106
  %44 = icmp eq i8 %43, 32
  br i1 %44, label %18, label %45

; <label>:45:                                     ; preds = %41
  %46 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 8
  %47 = load i8, i8* %46, align 8, !noalias !106
  %48 = icmp eq i8 %47, 32
  br i1 %48, label %18, label %49

; <label>:49:                                     ; preds = %45
  %50 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 9
  %51 = load i8, i8* %50, align 1, !noalias !106
  %52 = icmp eq i8 %51, 32
  br i1 %52, label %18, label %53

; <label>:53:                                     ; preds = %49
  %54 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 10
  %55 = load i8, i8* %54, align 2, !noalias !106
  %56 = icmp eq i8 %55, 32
  br i1 %56, label %18, label %57

; <label>:57:                                     ; preds = %53
  %58 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 11
  %59 = load i8, i8* %58, align 1, !noalias !106
  %60 = icmp eq i8 %59, 32
  br i1 %60, label %18, label %61

; <label>:61:                                     ; preds = %57
  %62 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 12
  %63 = load i8, i8* %62, align 4, !noalias !106
  %64 = icmp eq i8 %63, 32
  br i1 %64, label %18, label %65

; <label>:65:                                     ; preds = %61
  %66 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 13
  %67 = load i8, i8* %66, align 1, !noalias !106
  %68 = icmp eq i8 %67, 32
  br i1 %68, label %18, label %69

; <label>:69:                                     ; preds = %65
  %70 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 14
  %71 = load i8, i8* %70, align 2, !noalias !106
  %72 = icmp eq i8 %71, 32
  %73 = select i1 %72, i64 14, i64 15
  br label %18

; <label>:74:                                     ; preds = %23, %18, %6
  call void @llvm.lifetime.end.p0i8(i64 214, i8* nonnull %4) #18
  ret void
}

; Function Attrs: noreturn nounwind sspstrong uwtable
define hidden void @MOZ_PNG_chunk_err(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #5 {
  %3 = alloca [214 x i8], align 16
  %4 = getelementptr inbounds [214 x i8], [214 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 214, i8* nonnull %4) #18
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  tail call void @png_error(%struct.png_struct_def* null, i8* %1) #19
  unreachable

; <label>:7:                                      ; preds = %2
  call fastcc void @MOZ_PNG_format_buf(%struct.png_struct_def* nonnull %0, i8* nonnull %4, i8* %1)
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* nonnull %4) #19
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_app_warn(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 2097152
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %2
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* %1)
  ret void

; <label>:8:                                      ; preds = %2
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* %1) #19
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_app_err(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 4194304
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %2
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* %1)
  ret void

; <label>:8:                                      ; preds = %2
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* %1) #19
  unreachable
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define internal fastcc void @MOZ_PNG_format_buf(%struct.png_struct_def* noalias nocapture readonly, i8* nocapture, i8* readonly) unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %5 = load i32, i32* %4, align 8
  %6 = lshr i32 %5, 24
  %7 = add nsw i32 %6, -65
  %8 = icmp ugt i32 %7, 57
  %9 = add nsw i32 %6, -91
  %10 = icmp ult i32 %9, 6
  %11 = or i1 %8, %10
  br i1 %11, label %12, label %24

; <label>:12:                                     ; preds = %3
  store i8 91, i8* %1, align 1
  %13 = lshr i32 %5, 28
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* @MOZ_PNG_digit, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %16, i8* %17, align 1
  %18 = and i32 %6, 15
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* @MOZ_PNG_digit, i64 0, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %21, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 93, i8* %23, align 1
  br label %26

; <label>:24:                                     ; preds = %3
  %25 = trunc i32 %6 to i8
  store i8 %25, i8* %1, align 1
  br label %26

; <label>:26:                                     ; preds = %24, %12
  %27 = phi i32 [ 4, %12 ], [ 1, %24 ]
  %28 = lshr i32 %5, 16
  %29 = and i32 %28, 255
  %30 = add nsw i32 %29, -65
  %31 = icmp ugt i32 %30, 57
  %32 = add nsw i32 %29, -91
  %33 = icmp ult i32 %32, 6
  %34 = or i1 %31, %33
  br i1 %34, label %66, label %64

; <label>:35:                                     ; preds = %152
  %36 = add nsw i32 %153, 2
  %37 = sext i32 %157 to i64
  %38 = getelementptr inbounds i8, i8* %1, i64 %37
  store i8 58, i8* %38, align 1
  %39 = add i32 %153, 3
  %40 = sext i32 %36 to i64
  %41 = getelementptr inbounds i8, i8* %1, i64 %40
  store i8 32, i8* %41, align 1
  %42 = sext i32 %39 to i64
  br label %43

; <label>:43:                                     ; preds = %166, %35
  %44 = phi i64 [ %42, %35 ], [ %168, %166 ]
  %45 = phi i64 [ 0, %35 ], [ %167, %166 ]
  %46 = phi i32 [ %39, %35 ], [ %169, %166 ]
  %47 = getelementptr inbounds i8, i8* %2, i64 %45
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %57, label %50

; <label>:50:                                     ; preds = %43
  %51 = add nuw nsw i64 %45, 1
  %52 = add nsw i64 %44, 1
  %53 = getelementptr inbounds i8, i8* %1, i64 %44
  store i8 %48, i8* %53, align 1
  %54 = getelementptr inbounds i8, i8* %2, i64 %51
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %159

; <label>:57:                                     ; preds = %159, %50, %43
  %58 = phi i64 [ %44, %43 ], [ %52, %50 ], [ %161, %159 ]
  %59 = trunc i64 %58 to i32
  br label %60

; <label>:60:                                     ; preds = %166, %57, %152
  %61 = phi i32 [ %157, %152 ], [ %59, %57 ], [ %169, %166 ]
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %1, i64 %62
  store i8 0, i8* %63, align 1
  ret void

; <label>:64:                                     ; preds = %26
  %65 = trunc i32 %28 to i8
  br label %85

; <label>:66:                                     ; preds = %26
  %67 = add nuw nsw i32 %27, 1
  %68 = zext i32 %27 to i64
  %69 = getelementptr inbounds i8, i8* %1, i64 %68
  store i8 91, i8* %69, align 1
  %70 = lshr i32 %5, 20
  %71 = and i32 %70, 15
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* @MOZ_PNG_digit, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = or i32 %27, 2
  %76 = zext i32 %67 to i64
  %77 = getelementptr inbounds i8, i8* %1, i64 %76
  store i8 %74, i8* %77, align 1
  %78 = and i32 %28, 15
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* @MOZ_PNG_digit, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = add nuw nsw i32 %27, 3
  %83 = zext i32 %75 to i64
  %84 = getelementptr inbounds i8, i8* %1, i64 %83
  store i8 %81, i8* %84, align 1
  br label %85

; <label>:85:                                     ; preds = %66, %64
  %86 = phi i32 [ %82, %66 ], [ %27, %64 ]
  %87 = phi i8 [ 93, %66 ], [ %65, %64 ]
  %88 = zext i32 %86 to i64
  %89 = getelementptr inbounds i8, i8* %1, i64 %88
  store i8 %87, i8* %89, align 1
  %90 = add nsw i32 %86, 1
  %91 = lshr i32 %5, 8
  %92 = and i32 %91, 255
  %93 = add nsw i32 %92, -65
  %94 = icmp ugt i32 %93, 57
  %95 = add nsw i32 %92, -91
  %96 = icmp ult i32 %95, 6
  %97 = or i1 %94, %96
  br i1 %97, label %100, label %98

; <label>:98:                                     ; preds = %85
  %99 = trunc i32 %91 to i8
  br label %119

; <label>:100:                                    ; preds = %85
  %101 = add nsw i32 %86, 2
  %102 = sext i32 %90 to i64
  %103 = getelementptr inbounds i8, i8* %1, i64 %102
  store i8 91, i8* %103, align 1
  %104 = lshr i32 %5, 12
  %105 = and i32 %104, 15
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [16 x i8], [16 x i8]* @MOZ_PNG_digit, i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = add nsw i32 %86, 3
  %110 = sext i32 %101 to i64
  %111 = getelementptr inbounds i8, i8* %1, i64 %110
  store i8 %108, i8* %111, align 1
  %112 = and i32 %91, 15
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [16 x i8], [16 x i8]* @MOZ_PNG_digit, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = add nsw i32 %86, 4
  %117 = sext i32 %109 to i64
  %118 = getelementptr inbounds i8, i8* %1, i64 %117
  store i8 %115, i8* %118, align 1
  br label %119

; <label>:119:                                    ; preds = %100, %98
  %120 = phi i32 [ %116, %100 ], [ %90, %98 ]
  %121 = phi i8 [ 93, %100 ], [ %99, %98 ]
  %122 = sext i32 %120 to i64
  %123 = getelementptr inbounds i8, i8* %1, i64 %122
  store i8 %121, i8* %123, align 1
  %124 = add nsw i32 %120, 1
  %125 = and i32 %5, 255
  %126 = add nsw i32 %125, -65
  %127 = icmp ugt i32 %126, 57
  %128 = add nsw i32 %125, -91
  %129 = icmp ult i32 %128, 6
  %130 = or i1 %127, %129
  br i1 %130, label %133, label %131

; <label>:131:                                    ; preds = %119
  %132 = trunc i32 %5 to i8
  br label %152

; <label>:133:                                    ; preds = %119
  %134 = add nsw i32 %120, 2
  %135 = sext i32 %124 to i64
  %136 = getelementptr inbounds i8, i8* %1, i64 %135
  store i8 91, i8* %136, align 1
  %137 = lshr i32 %5, 4
  %138 = and i32 %137, 15
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [16 x i8], [16 x i8]* @MOZ_PNG_digit, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = add nsw i32 %120, 3
  %143 = sext i32 %134 to i64
  %144 = getelementptr inbounds i8, i8* %1, i64 %143
  store i8 %141, i8* %144, align 1
  %145 = and i32 %5, 15
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [16 x i8], [16 x i8]* @MOZ_PNG_digit, i64 0, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = add nsw i32 %120, 4
  %150 = sext i32 %142 to i64
  %151 = getelementptr inbounds i8, i8* %1, i64 %150
  store i8 %148, i8* %151, align 1
  br label %152

; <label>:152:                                    ; preds = %133, %131
  %153 = phi i32 [ %149, %133 ], [ %124, %131 ]
  %154 = phi i8 [ 93, %133 ], [ %132, %131 ]
  %155 = sext i32 %153 to i64
  %156 = getelementptr inbounds i8, i8* %1, i64 %155
  store i8 %154, i8* %156, align 1
  %157 = add nsw i32 %153, 1
  %158 = icmp eq i8* %2, null
  br i1 %158, label %60, label %35

; <label>:159:                                    ; preds = %50
  %160 = add nuw nsw i64 %45, 2
  %161 = add nsw i64 %44, 2
  %162 = getelementptr inbounds i8, i8* %1, i64 %52
  store i8 %55, i8* %162, align 1
  %163 = getelementptr inbounds i8, i8* %2, i64 %160
  %164 = load i8, i8* %163, align 1
  %165 = icmp eq i8 %164, 0
  br i1 %165, label %57, label %166

; <label>:166:                                    ; preds = %159
  %167 = add nuw nsw i64 %45, 3
  %168 = add nsw i64 %44, 3
  %169 = add nsw i32 %46, 3
  %170 = getelementptr inbounds i8, i8* %1, i64 %161
  store i8 %164, i8* %170, align 1
  %171 = icmp ult i64 %167, 195
  br i1 %171, label %43, label %60
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_chunk_benign_err(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 1048576
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %2
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* %1)
  ret void

; <label>:8:                                      ; preds = %2
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* %1) #19
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define hidden [1 x %struct.__jmp_buf_tag]* @MOZ_PNG_set_longjmp_fn(%struct.png_struct_def* noalias, void (%struct.__jmp_buf_tag*, i32)*, i64) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %45, label %5

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 2
  %7 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %6, align 8
  %8 = icmp eq [1 x %struct.__jmp_buf_tag]* %7, null
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 3
  br i1 %8, label %10, label %27

; <label>:10:                                     ; preds = %5
  store i64 0, i64* %9, align 8
  %11 = icmp ult i64 %2, 201
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %10
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 0
  store [1 x %struct.__jmp_buf_tag]* %13, [1 x %struct.__jmp_buf_tag]** %6, align 8
  br label %42

; <label>:14:                                     ; preds = %10
  %15 = tail call noalias i8* @malloc(i64 %2) #18
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %24

; <label>:17:                                     ; preds = %14
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %19 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %18, align 8, !alias.scope !109
  %20 = icmp eq void (%struct.png_struct_def*, i8*)* %19, null
  br i1 %20, label %22, label %21

; <label>:21:                                     ; preds = %17
  tail call void %19(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %22

; <label>:22:                                     ; preds = %17, %21
  %23 = bitcast [1 x %struct.__jmp_buf_tag]** %6 to i8**
  store i8* null, i8** %23, align 8
  br label %45

; <label>:24:                                     ; preds = %14
  %25 = bitcast [1 x %struct.__jmp_buf_tag]** %6 to i8**
  store i8* %15, i8** %25, align 8
  store i64 %2, i64* %9, align 8
  %26 = bitcast i8* %15 to [1 x %struct.__jmp_buf_tag]*
  br label %42

; <label>:27:                                     ; preds = %5
  %28 = load i64, i64* %9, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %27
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 0
  %32 = icmp eq [1 x %struct.__jmp_buf_tag]* %7, %31
  br i1 %32, label %34, label %33

; <label>:33:                                     ; preds = %30
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.63, i64 0, i64 0)) #19
  unreachable

; <label>:34:                                     ; preds = %30, %27
  %35 = phi i64 [ 200, %30 ], [ %28, %27 ]
  %36 = icmp eq i64 %35, %2
  br i1 %36, label %42, label %37

; <label>:37:                                     ; preds = %34
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %39 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %38, align 8, !alias.scope !114
  %40 = icmp eq void (%struct.png_struct_def*, i8*)* %39, null
  br i1 %40, label %45, label %41

; <label>:41:                                     ; preds = %37
  tail call void %39(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.64, i64 0, i64 0)) #18
  br label %45

; <label>:42:                                     ; preds = %34, %12, %24
  %43 = phi [1 x %struct.__jmp_buf_tag]* [ %7, %34 ], [ %13, %12 ], [ %26, %24 ]
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* %1, void (%struct.__jmp_buf_tag*, i32)** %44, align 8
  br label %45

; <label>:45:                                     ; preds = %41, %37, %22, %3, %42
  %46 = phi [1 x %struct.__jmp_buf_tag]* [ %43, %42 ], [ null, %3 ], [ null, %22 ], [ null, %37 ], [ null, %41 ]
  ret [1 x %struct.__jmp_buf_tag]* %46
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_free_jmpbuf(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = alloca [1 x %struct.__jmp_buf_tag], align 16
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %27, label %4

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 2
  %6 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %5, align 8
  %7 = icmp eq [1 x %struct.__jmp_buf_tag]* %6, null
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 3
  br i1 %7, label %24, label %9

; <label>:9:                                      ; preds = %4
  %10 = load i64, i64* %8, align 8
  %11 = icmp eq i64 %10, 0
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 0
  %13 = icmp eq [1 x %struct.__jmp_buf_tag]* %6, %12
  %14 = or i1 %13, %11
  br i1 %14, label %24, label %15

; <label>:15:                                     ; preds = %9
  %16 = bitcast [1 x %struct.__jmp_buf_tag]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %16) #18
  %17 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %2, i64 0, i64 0
  %18 = call i32 @_setjmp(%struct.__jmp_buf_tag* nonnull %17) #21
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %15
  store [1 x %struct.__jmp_buf_tag]* %2, [1 x %struct.__jmp_buf_tag]** %5, align 8
  store i64 0, i64* %8, align 8
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 1
  store void (%struct.__jmp_buf_tag*, i32)* @__longjmp_chk, void (%struct.__jmp_buf_tag*, i32)** %21, align 8
  %22 = bitcast [1 x %struct.__jmp_buf_tag]* %6 to i8*
  call void @free(i8* nonnull %22) #18
  br label %23

; <label>:23:                                     ; preds = %20, %15
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %16) #18
  br label %24

; <label>:24:                                     ; preds = %4, %9, %23
  store i64 0, i64* %8, align 8
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 1
  %26 = bitcast void (%struct.__jmp_buf_tag*, i32)** %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 16, i1 false)
  br label %27

; <label>:27:                                     ; preds = %1, %24
  ret void
}

; Function Attrs: noreturn nounwind sspstrong uwtable
define hidden void @MOZ_PNG_longjmp(%struct.png_struct_def* noalias readonly, i32) local_unnamed_addr #5 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %14, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 1
  %6 = load void (%struct.__jmp_buf_tag*, i32)*, void (%struct.__jmp_buf_tag*, i32)** %5, align 8
  %7 = icmp eq void (%struct.__jmp_buf_tag*, i32)* %6, null
  br i1 %7, label %14, label %8

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 2
  %10 = load [1 x %struct.__jmp_buf_tag]*, [1 x %struct.__jmp_buf_tag]** %9, align 8
  %11 = icmp eq [1 x %struct.__jmp_buf_tag]* %10, null
  br i1 %11, label %14, label %12

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %10, i64 0, i64 0
  tail call void %6(%struct.__jmp_buf_tag* nonnull %13, i32 %1) #18
  br label %14

; <label>:14:                                     ; preds = %8, %4, %2, %12
  tail call void @abort() #22
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i8* @MOZ_PNG_get_error_ptr(%struct.png_struct_def* noalias readonly) local_unnamed_addr #12 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 6
  %5 = load i8*, i8** %4, align 8
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %7
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_PNG_get_valid(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly, i32) local_unnamed_addr #12 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %11

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, %2
  br label %11

; <label>:11:                                     ; preds = %3, %7
  %12 = phi i32 [ %10, %7 ], [ 0, %3 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i64 @MOZ_PNG_get_rowbytes(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i64 [ %8, %6 ], [ 0, %2 ]
  ret i64 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden zeroext i8 @MOZ_PNG_get_channels(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  %8 = load i8, i8* %7, align 1
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i8 [ %8, %6 ], [ 0, %2 ]
  ret i8 %10
}

; Function Attrs: norecurse nounwind readnone sspstrong uwtable
define hidden i8* @MOZ_PNG_get_signature(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readnone) local_unnamed_addr #13 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 15, i64 0
  %7 = select i1 %5, i8* %6, i8* null
  ret i8* %7
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_cHRM(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly, double*, double*, double*, double*, double*, double*, double*, double*) local_unnamed_addr #3 {
  %11 = icmp ne %struct.png_struct_def* %0, null
  %12 = icmp ne %struct.png_info_def* %1, null
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %75

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %16 = load i16, i16* %15, align 2
  %17 = and i16 %16, 2
  %18 = icmp eq i16 %17, 0
  br i1 %18, label %75, label %19

; <label>:19:                                     ; preds = %14
  %20 = icmp eq double* %2, null
  br i1 %20, label %26, label %21

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 1, i32 6
  %23 = load i32, i32* %22, align 4
  %24 = sitofp i32 %23 to double
  %25 = fmul double %24, 1.000000e-05
  store double %25, double* %2, align 8
  br label %26

; <label>:26:                                     ; preds = %19, %21
  %27 = icmp eq double* %3, null
  br i1 %27, label %33, label %28

; <label>:28:                                     ; preds = %26
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 1, i32 7
  %30 = load i32, i32* %29, align 4
  %31 = sitofp i32 %30 to double
  %32 = fmul double %31, 1.000000e-05
  store double %32, double* %3, align 8
  br label %33

; <label>:33:                                     ; preds = %26, %28
  %34 = icmp eq double* %4, null
  br i1 %34, label %40, label %35

; <label>:35:                                     ; preds = %33
  %36 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 1, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = sitofp i32 %37 to double
  %39 = fmul double %38, 1.000000e-05
  store double %39, double* %4, align 8
  br label %40

; <label>:40:                                     ; preds = %33, %35
  %41 = icmp eq double* %5, null
  br i1 %41, label %47, label %42

; <label>:42:                                     ; preds = %40
  %43 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 1, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = sitofp i32 %44 to double
  %46 = fmul double %45, 1.000000e-05
  store double %46, double* %5, align 8
  br label %47

; <label>:47:                                     ; preds = %40, %42
  %48 = icmp eq double* %6, null
  br i1 %48, label %54, label %49

; <label>:49:                                     ; preds = %47
  %50 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 1, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = sitofp i32 %51 to double
  %53 = fmul double %52, 1.000000e-05
  store double %53, double* %6, align 8
  br label %54

; <label>:54:                                     ; preds = %47, %49
  %55 = icmp eq double* %7, null
  br i1 %55, label %61, label %56

; <label>:56:                                     ; preds = %54
  %57 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 1, i32 3
  %58 = load i32, i32* %57, align 4
  %59 = sitofp i32 %58 to double
  %60 = fmul double %59, 1.000000e-05
  store double %60, double* %7, align 8
  br label %61

; <label>:61:                                     ; preds = %54, %56
  %62 = icmp eq double* %8, null
  br i1 %62, label %68, label %63

; <label>:63:                                     ; preds = %61
  %64 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 1, i32 4
  %65 = load i32, i32* %64, align 4
  %66 = sitofp i32 %65 to double
  %67 = fmul double %66, 1.000000e-05
  store double %67, double* %8, align 8
  br label %68

; <label>:68:                                     ; preds = %61, %63
  %69 = icmp eq double* %9, null
  br i1 %69, label %75, label %70

; <label>:70:                                     ; preds = %68
  %71 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 1, i32 5
  %72 = load i32, i32* %71, align 4
  %73 = sitofp i32 %72 to double
  %74 = fmul double %73, 1.000000e-05
  store double %74, double* %9, align 8
  br label %75

; <label>:75:                                     ; preds = %10, %14, %70, %68
  %76 = phi i32 [ 4, %68 ], [ 4, %70 ], [ 0, %14 ], [ 0, %10 ]
  ret i32 %76
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_cHRM_XYZ(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly, double*, double*, double*, double*, double*, double*, double*, double*, double*) local_unnamed_addr #3 {
  %12 = icmp ne %struct.png_struct_def* %0, null
  %13 = icmp ne %struct.png_info_def* %1, null
  %14 = and i1 %12, %13
  br i1 %14, label %15, label %83

; <label>:15:                                     ; preds = %11
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %17 = load i16, i16* %16, align 2
  %18 = and i16 %17, 2
  %19 = icmp eq i16 %18, 0
  br i1 %19, label %83, label %20

; <label>:20:                                     ; preds = %15
  %21 = icmp eq double* %2, null
  br i1 %21, label %27, label %22

; <label>:22:                                     ; preds = %20
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = sitofp i32 %24 to double
  %26 = fmul double %25, 1.000000e-05
  store double %26, double* %2, align 8
  br label %27

; <label>:27:                                     ; preds = %20, %22
  %28 = icmp eq double* %3, null
  br i1 %28, label %34, label %29

; <label>:29:                                     ; preds = %27
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = sitofp i32 %31 to double
  %33 = fmul double %32, 1.000000e-05
  store double %33, double* %3, align 8
  br label %34

; <label>:34:                                     ; preds = %27, %29
  %35 = icmp eq double* %4, null
  br i1 %35, label %41, label %36

; <label>:36:                                     ; preds = %34
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = sitofp i32 %38 to double
  %40 = fmul double %39, 1.000000e-05
  store double %40, double* %4, align 8
  br label %41

; <label>:41:                                     ; preds = %34, %36
  %42 = icmp eq double* %5, null
  br i1 %42, label %48, label %43

; <label>:43:                                     ; preds = %41
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = sitofp i32 %45 to double
  %47 = fmul double %46, 1.000000e-05
  store double %47, double* %5, align 8
  br label %48

; <label>:48:                                     ; preds = %41, %43
  %49 = icmp eq double* %6, null
  br i1 %49, label %55, label %50

; <label>:50:                                     ; preds = %48
  %51 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 4
  %52 = load i32, i32* %51, align 4
  %53 = sitofp i32 %52 to double
  %54 = fmul double %53, 1.000000e-05
  store double %54, double* %6, align 8
  br label %55

; <label>:55:                                     ; preds = %48, %50
  %56 = icmp eq double* %7, null
  br i1 %56, label %62, label %57

; <label>:57:                                     ; preds = %55
  %58 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 5
  %59 = load i32, i32* %58, align 4
  %60 = sitofp i32 %59 to double
  %61 = fmul double %60, 1.000000e-05
  store double %61, double* %7, align 8
  br label %62

; <label>:62:                                     ; preds = %55, %57
  %63 = icmp eq double* %8, null
  br i1 %63, label %69, label %64

; <label>:64:                                     ; preds = %62
  %65 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 6
  %66 = load i32, i32* %65, align 4
  %67 = sitofp i32 %66 to double
  %68 = fmul double %67, 1.000000e-05
  store double %68, double* %8, align 8
  br label %69

; <label>:69:                                     ; preds = %62, %64
  %70 = icmp eq double* %9, null
  br i1 %70, label %76, label %71

; <label>:71:                                     ; preds = %69
  %72 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 7
  %73 = load i32, i32* %72, align 4
  %74 = sitofp i32 %73 to double
  %75 = fmul double %74, 1.000000e-05
  store double %75, double* %9, align 8
  br label %76

; <label>:76:                                     ; preds = %69, %71
  %77 = icmp eq double* %10, null
  br i1 %77, label %83, label %78

; <label>:78:                                     ; preds = %76
  %79 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 2, i32 8
  %80 = load i32, i32* %79, align 4
  %81 = sitofp i32 %80 to double
  %82 = fmul double %81, 1.000000e-05
  store double %82, double* %10, align 8
  br label %83

; <label>:83:                                     ; preds = %11, %15, %78, %76
  %84 = phi i32 [ 4, %76 ], [ 4, %78 ], [ 0, %15 ], [ 0, %11 ]
  ret i32 %84
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_gAMA(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly, double*) local_unnamed_addr #3 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %19

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %9 = load i16, i16* %8, align 2
  %10 = and i16 %9, 1
  %11 = icmp ne i16 %10, 0
  %12 = icmp ne double* %2, null
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %19

; <label>:14:                                     ; preds = %7
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sitofp i32 %16 to double
  %18 = fmul double %17, 1.000000e-05
  store double %18, double* %2, align 8
  br label %19

; <label>:19:                                     ; preds = %3, %7, %14
  %20 = phi i32 [ 1, %14 ], [ 0, %7 ], [ 0, %3 ]
  ret i32 %20
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_sRGB(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly, i32*) local_unnamed_addr #3 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %18

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 2048
  %11 = icmp ne i32 %10, 0
  %12 = icmp ne i32* %2, null
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %7
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 3
  %16 = load i16, i16* %15, align 4
  %17 = zext i16 %16 to i32
  store i32 %17, i32* %2, align 4
  br label %18

; <label>:18:                                     ; preds = %3, %7, %14
  %19 = phi i32 [ 2048, %14 ], [ 0, %7 ], [ 0, %3 ]
  ret i32 %19
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_iCCP(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly, i8**, i32*, i8**, i32*) local_unnamed_addr #3 {
  %7 = icmp ne %struct.png_struct_def* %0, null
  %8 = icmp ne %struct.png_info_def* %1, null
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %50

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = and i32 %12, 4096
  %14 = icmp ne i32 %13, 0
  %15 = icmp ne i8** %2, null
  %16 = and i1 %15, %14
  %17 = icmp ne i8** %4, null
  %18 = and i1 %17, %16
  %19 = icmp ne i32* %5, null
  %20 = and i1 %19, %18
  br i1 %20, label %21, label %50

; <label>:21:                                     ; preds = %10
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %23 = bitcast i8** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast i8** %2 to i64*
  store i64 %24, i64* %25, align 8
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast i8** %4 to i64*
  store i64 %28, i64* %29, align 8
  %30 = inttoptr i64 %28 to i8*
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = shl nuw i32 %32, 24
  %34 = getelementptr inbounds i8, i8* %30, i64 1
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = shl nuw nsw i32 %36, 16
  %38 = or i32 %37, %33
  %39 = getelementptr inbounds i8, i8* %30, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 8
  %43 = or i32 %38, %42
  %44 = getelementptr inbounds i8, i8* %30, i64 3
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = or i32 %43, %46
  store i32 %47, i32* %5, align 4
  %48 = icmp eq i32* %3, null
  br i1 %48, label %50, label %49

; <label>:49:                                     ; preds = %21
  store i32 0, i32* %3, align 4
  br label %50

; <label>:50:                                     ; preds = %6, %10, %49, %21
  %51 = phi i32 [ 4096, %21 ], [ 4096, %49 ], [ 0, %10 ], [ 0, %6 ]
  ret i32 %51
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_IHDR(%struct.png_struct_def* noalias, %struct.png_info_def* noalias readonly, i32*, i32*, i32*, i32*, i32*, i32*, i32*) local_unnamed_addr #4 {
  %10 = icmp eq %struct.png_struct_def* %0, null
  %11 = icmp eq %struct.png_info_def* %1, null
  %12 = or i1 %10, %11
  br i1 %12, label %70, label %13

; <label>:13:                                     ; preds = %9
  %14 = icmp eq i32* %2, null
  br i1 %14, label %18, label %15

; <label>:15:                                     ; preds = %13
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %2, align 4
  br label %18

; <label>:18:                                     ; preds = %13, %15
  %19 = icmp eq i32* %3, null
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %18
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %3, align 4
  br label %23

; <label>:23:                                     ; preds = %18, %20
  %24 = icmp eq i32* %4, null
  br i1 %24, label %29, label %25

; <label>:25:                                     ; preds = %23
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  %27 = load i8, i8* %26, align 4
  %28 = zext i8 %27 to i32
  store i32 %28, i32* %4, align 4
  br label %29

; <label>:29:                                     ; preds = %23, %25
  %30 = icmp eq i32* %5, null
  br i1 %30, label %35, label %31

; <label>:31:                                     ; preds = %29
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  store i32 %34, i32* %5, align 4
  br label %35

; <label>:35:                                     ; preds = %29, %31
  %36 = icmp eq i32* %7, null
  br i1 %36, label %41, label %37

; <label>:37:                                     ; preds = %35
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 9
  %39 = load i8, i8* %38, align 2
  %40 = zext i8 %39 to i32
  store i32 %40, i32* %7, align 4
  br label %41

; <label>:41:                                     ; preds = %35, %37
  %42 = icmp eq i32* %8, null
  br i1 %42, label %47, label %43

; <label>:43:                                     ; preds = %41
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 10
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  store i32 %46, i32* %8, align 4
  br label %47

; <label>:47:                                     ; preds = %41, %43
  %48 = icmp eq i32* %6, null
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 11
  %50 = load i8, i8* %49, align 8
  %51 = zext i8 %50 to i32
  br i1 %48, label %53, label %52

; <label>:52:                                     ; preds = %47
  store i32 %51, i32* %6, align 4
  br label %53

; <label>:53:                                     ; preds = %47, %52
  %54 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  %59 = load i8, i8* %58, align 4
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 9
  %65 = load i8, i8* %64, align 2
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 10
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  tail call void @MOZ_PNG_ck_IHDR(%struct.png_struct_def* nonnull %0, i32 %55, i32 %57, i32 %60, i32 %63, i32 %51, i32 %66, i32 %69)
  br label %70

; <label>:70:                                     ; preds = %9, %53
  %71 = phi i32 [ 1, %53 ], [ 0, %9 ]
  ret i32 %71
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_PLTE(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias readonly, %struct.png_color_struct**, i32* nocapture) local_unnamed_addr #3 {
  %5 = icmp ne %struct.png_struct_def* %0, null
  %6 = icmp ne %struct.png_info_def* %1, null
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %23

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 8
  %12 = icmp ne i32 %11, 0
  %13 = icmp ne %struct.png_color_struct** %2, null
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %23

; <label>:15:                                     ; preds = %8
  %16 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 4
  %17 = bitcast %struct.png_color_struct** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %struct.png_color_struct** %2 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 5
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  store i32 %22, i32* %3, align 4
  br label %23

; <label>:23:                                     ; preds = %4, %8, %15
  %24 = phi i32 [ 8, %15 ], [ 0, %8 ], [ 0, %4 ]
  ret i32 %24
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_tRNS(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias, i8**, i32*, %struct.png_color_16_struct**) local_unnamed_addr #3 {
  %6 = icmp ne %struct.png_struct_def* %0, null
  %7 = icmp ne %struct.png_info_def* %1, null
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %45

; <label>:9:                                      ; preds = %5
  %10 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %45, label %14

; <label>:14:                                     ; preds = %9
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 3
  br i1 %17, label %18, label %30

; <label>:18:                                     ; preds = %14
  %19 = icmp eq i8** %2, null
  br i1 %19, label %25, label %20

; <label>:20:                                     ; preds = %18
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 20
  %22 = bitcast i8** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast i8** %2 to i64*
  store i64 %23, i64* %24, align 8
  br label %25

; <label>:25:                                     ; preds = %18, %20
  %26 = phi i32 [ 16, %20 ], [ 0, %18 ]
  %27 = icmp eq %struct.png_color_16_struct** %4, null
  br i1 %27, label %38, label %28

; <label>:28:                                     ; preds = %25
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 21
  store %struct.png_color_16_struct* %29, %struct.png_color_16_struct** %4, align 8
  br label %38

; <label>:30:                                     ; preds = %14
  %31 = icmp eq %struct.png_color_16_struct** %4, null
  br i1 %31, label %34, label %32

; <label>:32:                                     ; preds = %30
  %33 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 21
  store %struct.png_color_16_struct* %33, %struct.png_color_16_struct** %4, align 8
  br label %34

; <label>:34:                                     ; preds = %30, %32
  %35 = phi i32 [ 16, %32 ], [ 0, %30 ]
  %36 = icmp eq i8** %2, null
  br i1 %36, label %38, label %37

; <label>:37:                                     ; preds = %34
  store i8* null, i8** %2, align 8
  br label %38

; <label>:38:                                     ; preds = %25, %34, %37, %28
  %39 = phi i32 [ %26, %28 ], [ %26, %25 ], [ %35, %37 ], [ %35, %34 ]
  %40 = icmp eq i32* %3, null
  br i1 %40, label %45, label %41

; <label>:41:                                     ; preds = %38
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  store i32 %44, i32* %3, align 4
  br label %45

; <label>:45:                                     ; preds = %38, %9, %41, %5
  %46 = phi i32 [ 16, %41 ], [ %39, %38 ], [ 0, %9 ], [ 0, %5 ]
  ret i32 %46
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i64 @MOZ_PNG_get_comp_buf_siz(%struct.png_struct_def* noalias readonly) local_unnamed_addr #12 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %12, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = trunc i32 %5 to i16
  %7 = icmp slt i16 %6, 0
  br i1 %7, label %12, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  br label %12

; <label>:12:                                     ; preds = %3, %1, %8
  %13 = phi i64 [ %11, %8 ], [ 0, %1 ], [ 8192, %3 ]
  ret i64 %13
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_PNG_get_user_width_max(%struct.png_struct_def* noalias readonly) local_unnamed_addr #12 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 98
  %5 = load i32, i32* %4, align 4
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_PNG_get_user_height_max(%struct.png_struct_def* noalias readonly) local_unnamed_addr #12 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 99
  %5 = load i32, i32* %4, align 8
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_PNG_get_chunk_cache_max(%struct.png_struct_def* noalias readonly) local_unnamed_addr #12 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 100
  %5 = load i32, i32* %4, align 4
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i32 [ %5, %3 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i64 @MOZ_PNG_get_chunk_malloc_max(%struct.png_struct_def* noalias readonly) local_unnamed_addr #12 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 101
  %5 = load i64, i64* %4, align 8
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i64 [ %5, %3 ], [ 0, %1 ]
  ret i64 %7
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_APNG_get_acTL(%struct.png_struct_def* readnone, %struct.png_info_def* readonly, i32*, i32*) local_unnamed_addr #3 {
  %5 = icmp ne %struct.png_struct_def* %0, null
  %6 = icmp ne %struct.png_info_def* %1, null
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %22

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 131072
  %12 = icmp ne i32 %11, 0
  %13 = icmp ne i32* %2, null
  %14 = and i1 %13, %12
  %15 = icmp ne i32* %3, null
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %22

; <label>:17:                                     ; preds = %8
  %18 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  %19 = load i32, i32* %18, align 8
  store i32 %19, i32* %2, align 4
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 24
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %3, align 4
  br label %22

; <label>:22:                                     ; preds = %4, %8, %17
  %23 = phi i32 [ 1, %17 ], [ 0, %8 ], [ 0, %4 ]
  ret i32 %23
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_APNG_set_num_frames(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  %8 = load i32, i32* %7, align 8
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_APNG_set_num_plays(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 24
  %8 = load i32, i32* %7, align 4
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_APNG_get_next_frame_fcTL(%struct.png_struct_def* readnone, %struct.png_info_def* readonly, i32*, i32*, i32*, i32*, i16*, i16*, i8*, i8*) local_unnamed_addr #3 {
  %11 = icmp ne %struct.png_struct_def* %0, null
  %12 = icmp ne %struct.png_info_def* %1, null
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %52

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 262144
  %18 = icmp ne i32 %17, 0
  %19 = icmp ne i32* %2, null
  %20 = and i1 %19, %18
  %21 = icmp ne i32* %3, null
  %22 = and i1 %21, %20
  %23 = icmp ne i32* %4, null
  %24 = and i1 %23, %22
  %25 = icmp ne i32* %5, null
  %26 = and i1 %25, %24
  %27 = icmp ne i16* %6, null
  %28 = and i1 %27, %26
  %29 = icmp ne i16* %7, null
  %30 = and i1 %29, %28
  %31 = icmp ne i8* %8, null
  %32 = and i1 %31, %30
  %33 = icmp ne i8* %9, null
  %34 = and i1 %33, %32
  br i1 %34, label %35, label %52

; <label>:35:                                     ; preds = %14
  %36 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 25
  %37 = load i32, i32* %36, align 8
  store i32 %37, i32* %2, align 4
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 26
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %3, align 4
  %40 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  %41 = load i32, i32* %40, align 8
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 28
  %43 = load i32, i32* %42, align 4
  store i32 %43, i32* %5, align 4
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 29
  %45 = load i16, i16* %44, align 8
  store i16 %45, i16* %6, align 2
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 30
  %47 = load i16, i16* %46, align 2
  store i16 %47, i16* %7, align 2
  %48 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 31
  %49 = load i8, i8* %48, align 4
  store i8 %49, i8* %8, align 1
  %50 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 32
  %51 = load i8, i8* %50, align 1
  store i8 %51, i8* %9, align 1
  br label %52

; <label>:52:                                     ; preds = %10, %14, %35
  %53 = phi i32 [ 1, %35 ], [ 0, %14 ], [ 0, %10 ]
  ret i32 %53
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_APNG_get_next_frame_width(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 25
  %8 = load i32, i32* %7, align 8
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_APNG_get_next_frame_height(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 26
  %8 = load i32, i32* %7, align 4
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_APNG_get_next_frame_x_offset(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  %8 = load i32, i32* %7, align 8
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i32 @MOZ_APNG_get_next_frame_y_offset(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 28
  %8 = load i32, i32* %7, align 4
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %2 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden zeroext i16 @MOZ_APNG_get_next_frame_delay_num(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 29
  %8 = load i16, i16* %7, align 8
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i16 [ %8, %6 ], [ 0, %2 ]
  ret i16 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden zeroext i16 @MOZ_APNG_get_next_frame_delay_den(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 30
  %8 = load i16, i16* %7, align 2
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i16 [ %8, %6 ], [ 0, %2 ]
  ret i16 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden zeroext i8 @MOZ_APNG_get_next_frame_dispose_op(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 31
  %8 = load i8, i8* %7, align 4
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i8 [ %8, %6 ], [ 0, %2 ]
  ret i8 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden zeroext i8 @MOZ_APNG_get_next_frame_blend_op(%struct.png_struct_def* readnone, %struct.png_info_def* readonly) local_unnamed_addr #12 {
  %3 = icmp ne %struct.png_struct_def* %0, null
  %4 = icmp ne %struct.png_info_def* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 32
  %8 = load i8, i8* %7, align 1
  br label %9

; <label>:9:                                      ; preds = %2, %6
  %10 = phi i8 [ %8, %6 ], [ 0, %2 ]
  ret i8 %10
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden zeroext i8 @MOZ_APNG_get_first_frame_is_hidden(%struct.png_struct_def* readonly, %struct.png_info_def* nocapture readnone) local_unnamed_addr #12 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %9, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %6 = load i32, i32* %5, align 8
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  br label %9

; <label>:9:                                      ; preds = %2, %4
  %10 = phi i8 [ %8, %4 ], [ 0, %2 ]
  ret i8 %10
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_destroy_png_struct(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = alloca %struct.png_struct_def, align 8
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %7, label %4

; <label>:4:                                      ; preds = %1
  %5 = bitcast %struct.png_struct_def* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 984, i8* nonnull %5) #18
  %6 = bitcast %struct.png_struct_def* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %6, i64 984, i1 false)
  tail call void @free(i8* nonnull %6) #18
  call void @MOZ_PNG_free_jmpbuf(%struct.png_struct_def* nonnull %2)
  call void @llvm.lifetime.end.p0i8(i64 984, i8* nonnull %5) #18
  br label %7

; <label>:7:                                      ; preds = %1, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias i8* @MOZ_PNG_calloc(%struct.png_struct_def* noalias, i64) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %11, label %4

; <label>:4:                                      ; preds = %2
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %9, label %6

; <label>:6:                                      ; preds = %4
  %7 = tail call noalias i8* @malloc(i64 %1) #18
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %6, %4
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:10:                                     ; preds = %6
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %7, i8 0, i64 %1, i1 false)
  br label %11

; <label>:11:                                     ; preds = %2, %10
  %12 = phi i8* [ %7, %10 ], [ null, %2 ]
  ret i8* %12
}

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias i8* @MOZ_PNG_malloc(%struct.png_struct_def* noalias, i64) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %10, label %4

; <label>:4:                                      ; preds = %2
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %9, label %6

; <label>:6:                                      ; preds = %4
  %7 = tail call noalias i8* @malloc(i64 %1) #18
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %4, %6
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #19
  unreachable

; <label>:10:                                     ; preds = %6, %2
  %11 = phi i8* [ null, %2 ], [ %7, %6 ]
  ret i8* %11
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #11

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_process_data(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i8*, i64) local_unnamed_addr #4 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %30, label %8

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 76
  store i8* %2, i8** %9, align 8, !alias.scope !117
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  store i64 %3, i64* %10, align 8, !alias.scope !117
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %12 = load i64, i64* %11, align 8, !alias.scope !117
  %13 = add i64 %12, %3
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  store i64 %13, i64* %14, align 8, !alias.scope !117
  %15 = ptrtoint i8* %2 to i64
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 75
  %17 = bitcast i8** %16 to i64*
  store i64 %15, i64* %17, align 8, !alias.scope !117
  %18 = icmp eq i64 %13, 0
  br i1 %18, label %30, label %19

; <label>:19:                                     ; preds = %8
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  br label %21

; <label>:21:                                     ; preds = %19, %27
  %22 = load i32, i32* %20, align 8, !alias.scope !120, !noalias !123
  switch i32 %22, label %26 [
    i32 0, label %23
    i32 1, label %24
    i32 2, label %25
  ]

; <label>:23:                                     ; preds = %21
  tail call void @MOZ_PNG_push_read_sig(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1) #18
  br label %27

; <label>:24:                                     ; preds = %21
  tail call void @MOZ_PNG_push_read_chunk(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1) #18
  br label %27

; <label>:25:                                     ; preds = %21
  tail call void @MOZ_PNG_push_read_IDAT(%struct.png_struct_def* nonnull %0) #18
  br label %27

; <label>:26:                                     ; preds = %21
  store i64 0, i64* %14, align 8, !alias.scope !120, !noalias !123
  br label %30

; <label>:27:                                     ; preds = %23, %24, %25
  %28 = load i64, i64* %14, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %21

; <label>:30:                                     ; preds = %27, %26, %8, %4
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_rest_buf(%struct.png_struct_def* noalias nocapture, i8*, i64) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 76
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %2
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  store i64 %8, i64* %9, align 8
  %10 = ptrtoint i8* %1 to i64
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 75
  %12 = bitcast i8** %11 to i64*
  store i64 %10, i64* %12, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_proc_some_data(%struct.png_struct_def* noalias, %struct.png_info_def* noalias) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %12, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  %6 = load i32, i32* %5, align 8
  switch i32 %6, label %10 [
    i32 0, label %7
    i32 1, label %8
    i32 2, label %9
  ]

; <label>:7:                                      ; preds = %4
  tail call void @MOZ_PNG_push_read_sig(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1)
  br label %12

; <label>:8:                                      ; preds = %4
  tail call void @MOZ_PNG_push_read_chunk(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1)
  br label %12

; <label>:9:                                      ; preds = %4
  tail call void @MOZ_PNG_push_read_IDAT(%struct.png_struct_def* nonnull %0)
  br label %12

; <label>:10:                                     ; preds = %4
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  store i64 0, i64* %11, align 8
  br label %12

; <label>:12:                                     ; preds = %2, %10, %9, %8, %7
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i64 @MOZ_PNG_process_data_pause(%struct.png_struct_def* noalias, i32) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %14, label %4

; <label>:4:                                      ; preds = %2
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %4
  tail call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %14

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %9 = load i64, i64* %8, align 8
  store i64 0, i64* %8, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %11 = load i64, i64* %10, align 8
  %12 = icmp ugt i64 %9, %11
  %13 = sub i64 %9, %11
  br i1 %12, label %15, label %14

; <label>:14:                                     ; preds = %7, %2, %6
  br label %15

; <label>:15:                                     ; preds = %7, %14
  %16 = phi i64 [ 0, %14 ], [ %13, %7 ]
  ret i64 %16
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_save_buf(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %156, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 73
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 74
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %7, %9
  br i1 %10, label %156, label %11

; <label>:11:                                     ; preds = %5
  %12 = icmp ult i64 %3, 32
  br i1 %12, label %100, label %13

; <label>:13:                                     ; preds = %11
  %14 = getelementptr i8, i8* %9, i64 %3
  %15 = getelementptr i8, i8* %7, i64 %3
  %16 = icmp ult i8* %9, %15
  %17 = icmp ult i8* %7, %14
  %18 = and i1 %16, %17
  br i1 %18, label %100, label %19

; <label>:19:                                     ; preds = %13
  %20 = and i64 %3, -32
  %21 = getelementptr i8, i8* %7, i64 %20
  %22 = getelementptr i8, i8* %9, i64 %20
  %23 = add i64 %20, -32
  %24 = lshr exact i64 %23, 5
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 3
  %27 = icmp ult i64 %23, 96
  br i1 %27, label %79, label %28

; <label>:28:                                     ; preds = %19
  %29 = sub nsw i64 %25, %26
  br label %30

; <label>:30:                                     ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %76, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %77, %30 ]
  %33 = getelementptr i8, i8* %7, i64 %31
  %34 = getelementptr i8, i8* %9, i64 %31
  %35 = bitcast i8* %33 to <16 x i8>*
  %36 = load <16 x i8>, <16 x i8>* %35, align 1, !alias.scope !125
  %37 = getelementptr i8, i8* %33, i64 16
  %38 = bitcast i8* %37 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1, !alias.scope !125
  %40 = bitcast i8* %34 to <16 x i8>*
  store <16 x i8> %36, <16 x i8>* %40, align 1, !alias.scope !128, !noalias !125
  %41 = getelementptr i8, i8* %34, i64 16
  %42 = bitcast i8* %41 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %42, align 1, !alias.scope !128, !noalias !125
  %43 = or i64 %31, 32
  %44 = getelementptr i8, i8* %7, i64 %43
  %45 = getelementptr i8, i8* %9, i64 %43
  %46 = bitcast i8* %44 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1, !alias.scope !125
  %48 = getelementptr i8, i8* %44, i64 16
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1, !alias.scope !125
  %51 = bitcast i8* %45 to <16 x i8>*
  store <16 x i8> %47, <16 x i8>* %51, align 1, !alias.scope !128, !noalias !125
  %52 = getelementptr i8, i8* %45, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %53, align 1, !alias.scope !128, !noalias !125
  %54 = or i64 %31, 64
  %55 = getelementptr i8, i8* %7, i64 %54
  %56 = getelementptr i8, i8* %9, i64 %54
  %57 = bitcast i8* %55 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !125
  %59 = getelementptr i8, i8* %55, i64 16
  %60 = bitcast i8* %59 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1, !alias.scope !125
  %62 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %62, align 1, !alias.scope !128, !noalias !125
  %63 = getelementptr i8, i8* %56, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %61, <16 x i8>* %64, align 1, !alias.scope !128, !noalias !125
  %65 = or i64 %31, 96
  %66 = getelementptr i8, i8* %7, i64 %65
  %67 = getelementptr i8, i8* %9, i64 %65
  %68 = bitcast i8* %66 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !alias.scope !125
  %70 = getelementptr i8, i8* %66, i64 16
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !alias.scope !125
  %73 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %73, align 1, !alias.scope !128, !noalias !125
  %74 = getelementptr i8, i8* %67, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  store <16 x i8> %72, <16 x i8>* %75, align 1, !alias.scope !128, !noalias !125
  %76 = add i64 %31, 128
  %77 = add i64 %32, -4
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %30, !llvm.loop !130

; <label>:79:                                     ; preds = %30, %19
  %80 = phi i64 [ 0, %19 ], [ %76, %30 ]
  %81 = icmp eq i64 %26, 0
  br i1 %81, label %98, label %82

; <label>:82:                                     ; preds = %79, %82
  %83 = phi i64 [ %95, %82 ], [ %80, %79 ]
  %84 = phi i64 [ %96, %82 ], [ %26, %79 ]
  %85 = getelementptr i8, i8* %7, i64 %83
  %86 = getelementptr i8, i8* %9, i64 %83
  %87 = bitcast i8* %85 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !125
  %89 = getelementptr i8, i8* %85, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !125
  %92 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %92, align 1, !alias.scope !128, !noalias !125
  %93 = getelementptr i8, i8* %86, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %94, align 1, !alias.scope !128, !noalias !125
  %95 = add i64 %83, 32
  %96 = add i64 %84, -1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %82, !llvm.loop !131

; <label>:98:                                     ; preds = %82, %79
  %99 = icmp eq i64 %3, %20
  br i1 %99, label %154, label %100

; <label>:100:                                    ; preds = %98, %13, %11
  %101 = phi i64 [ 0, %13 ], [ 0, %11 ], [ %20, %98 ]
  %102 = phi i8* [ %7, %13 ], [ %7, %11 ], [ %21, %98 ]
  %103 = phi i8* [ %9, %13 ], [ %9, %11 ], [ %22, %98 ]
  %104 = xor i64 %101, -1
  %105 = add i64 %3, %104
  %106 = and i64 %3, 7
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %119, label %108

; <label>:108:                                    ; preds = %100, %108
  %109 = phi i64 [ %114, %108 ], [ %101, %100 ]
  %110 = phi i8* [ %115, %108 ], [ %102, %100 ]
  %111 = phi i8* [ %116, %108 ], [ %103, %100 ]
  %112 = phi i64 [ %117, %108 ], [ %106, %100 ]
  %113 = load i8, i8* %110, align 1
  store i8 %113, i8* %111, align 1
  %114 = add nuw i64 %109, 1
  %115 = getelementptr inbounds i8, i8* %110, i64 1
  %116 = getelementptr inbounds i8, i8* %111, i64 1
  %117 = add i64 %112, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %108, !llvm.loop !132

; <label>:119:                                    ; preds = %108, %100
  %120 = phi i64 [ %101, %100 ], [ %114, %108 ]
  %121 = phi i8* [ %102, %100 ], [ %115, %108 ]
  %122 = phi i8* [ %103, %100 ], [ %116, %108 ]
  %123 = icmp ult i64 %105, 7
  br i1 %123, label %154, label %124

; <label>:124:                                    ; preds = %119, %124
  %125 = phi i64 [ %150, %124 ], [ %120, %119 ]
  %126 = phi i8* [ %151, %124 ], [ %121, %119 ]
  %127 = phi i8* [ %152, %124 ], [ %122, %119 ]
  %128 = load i8, i8* %126, align 1
  store i8 %128, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %126, i64 1
  %130 = getelementptr inbounds i8, i8* %127, i64 1
  %131 = load i8, i8* %129, align 1
  store i8 %131, i8* %130, align 1
  %132 = getelementptr inbounds i8, i8* %126, i64 2
  %133 = getelementptr inbounds i8, i8* %127, i64 2
  %134 = load i8, i8* %132, align 1
  store i8 %134, i8* %133, align 1
  %135 = getelementptr inbounds i8, i8* %126, i64 3
  %136 = getelementptr inbounds i8, i8* %127, i64 3
  %137 = load i8, i8* %135, align 1
  store i8 %137, i8* %136, align 1
  %138 = getelementptr inbounds i8, i8* %126, i64 4
  %139 = getelementptr inbounds i8, i8* %127, i64 4
  %140 = load i8, i8* %138, align 1
  store i8 %140, i8* %139, align 1
  %141 = getelementptr inbounds i8, i8* %126, i64 5
  %142 = getelementptr inbounds i8, i8* %127, i64 5
  %143 = load i8, i8* %141, align 1
  store i8 %143, i8* %142, align 1
  %144 = getelementptr inbounds i8, i8* %126, i64 6
  %145 = getelementptr inbounds i8, i8* %127, i64 6
  %146 = load i8, i8* %144, align 1
  store i8 %146, i8* %145, align 1
  %147 = getelementptr inbounds i8, i8* %126, i64 7
  %148 = getelementptr inbounds i8, i8* %127, i64 7
  %149 = load i8, i8* %147, align 1
  store i8 %149, i8* %148, align 1
  %150 = add i64 %125, 8
  %151 = getelementptr inbounds i8, i8* %126, i64 8
  %152 = getelementptr inbounds i8, i8* %127, i64 8
  %153 = icmp eq i64 %150, %3
  br i1 %153, label %154, label %124, !llvm.loop !133

; <label>:154:                                    ; preds = %119, %124, %98
  %155 = load i64, i64* %2, align 8
  br label %156

; <label>:156:                                    ; preds = %154, %5, %1
  %157 = phi i64 [ %155, %154 ], [ %3, %5 ], [ 0, %1 ]
  %158 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  %159 = load i64, i64* %158, align 8
  %160 = add i64 %159, %157
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 80
  %162 = load i64, i64* %161, align 8
  %163 = icmp ugt i64 %160, %162
  br i1 %163, label %164, label %191

; <label>:164:                                    ; preds = %156
  %165 = sub i64 -257, %159
  %166 = icmp ugt i64 %157, %165
  br i1 %166, label %167, label %168

; <label>:167:                                    ; preds = %164
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.78, i64 0, i64 0)) #19
  unreachable

; <label>:168:                                    ; preds = %164
  %169 = add i64 %160, 256
  %170 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 74
  %171 = load i8*, i8** %170, align 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %176, label %173

; <label>:173:                                    ; preds = %168
  %174 = tail call noalias i8* @malloc(i64 %169) #18
  %175 = icmp eq i8* %174, null
  br i1 %175, label %176, label %182

; <label>:176:                                    ; preds = %173, %168
  %177 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %178 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %177, align 8, !alias.scope !134
  %179 = icmp eq void (%struct.png_struct_def*, i8*)* %178, null
  br i1 %179, label %181, label %180

; <label>:180:                                    ; preds = %176
  tail call void %178(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %181

; <label>:181:                                    ; preds = %176, %180
  store i8* null, i8** %170, align 8
  tail call void @MOZ_PNG_free(%struct.png_struct_def* nonnull %0, i8* %171)
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.79, i64 0, i64 0)) #19
  unreachable

; <label>:182:                                    ; preds = %173
  store i8* %174, i8** %170, align 8
  %183 = icmp eq i8* %171, null
  br i1 %183, label %184, label %187

; <label>:184:                                    ; preds = %182
  %185 = icmp eq i64 %157, 0
  br i1 %185, label %189, label %186

; <label>:186:                                    ; preds = %184
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.80, i64 0, i64 0)) #19
  unreachable

; <label>:187:                                    ; preds = %182
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %174, i8* nonnull align 1 %171, i64 %157, i1 false)
  tail call void @free(i8* nonnull %171) #18
  %188 = load i64, i64* %158, align 8
  br label %189

; <label>:189:                                    ; preds = %184, %187
  %190 = phi i64 [ %159, %184 ], [ %188, %187 ]
  store i64 %169, i64* %161, align 8
  br label %191

; <label>:191:                                    ; preds = %189, %156
  %192 = phi i64 [ %190, %189 ], [ %159, %156 ]
  %193 = icmp eq i64 %192, 0
  %194 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 74
  br i1 %193, label %204, label %195

; <label>:195:                                    ; preds = %191
  %196 = load i8*, i8** %194, align 8
  %197 = load i64, i64* %2, align 8
  %198 = getelementptr inbounds i8, i8* %196, i64 %197
  %199 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 75
  %200 = load i8*, i8** %199, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %198, i8* align 1 %200, i64 %192, i1 false)
  %201 = load i64, i64* %158, align 8
  %202 = load i64, i64* %2, align 8
  %203 = add i64 %202, %201
  store i64 %203, i64* %2, align 8
  store i64 0, i64* %158, align 8
  br label %204

; <label>:204:                                    ; preds = %191, %195
  %205 = bitcast i8** %194 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 73
  %208 = bitcast i8** %207 to i64*
  store i64 %206, i64* %208, align 8
  %209 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  store i64 0, i64* %209, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_process_data_skip(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %3 = load i32, i32* %2, align 4, !alias.scope !139
  %4 = and i32 %3, 2097152
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %1
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.66, i64 0, i64 0)) #22
  unreachable

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %9 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %8, align 8, !alias.scope !142
  %10 = icmp eq void (%struct.png_struct_def*, i8*)* %9, null
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %7
  tail call void %9(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.66, i64 0, i64 0)) #18
  br label %12

; <label>:12:                                     ; preds = %7, %11
  ret i32 0
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_read_sig(%struct.png_struct_def* noalias, %struct.png_info_def* noalias nocapture) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i64
  %6 = sub nsw i64 8, %5
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %6
  %10 = select i1 %9, i64 %8, i64 %6
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 15, i64 %5
  %12 = icmp eq %struct.png_struct_def* %0, null
  br i1 %12, label %44, label %13

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %27, label %17

; <label>:17:                                     ; preds = %13
  %18 = icmp ugt i64 %15, %10
  %19 = select i1 %18, i64 %10, i64 %15
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 73
  %21 = load i8*, i8** %20, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %11, i8* align 1 %21, i64 %19, i1 false) #18
  %22 = sub i64 %10, %19
  %23 = getelementptr inbounds i8, i8* %11, i64 %19
  %24 = sub i64 %8, %19
  store i64 %24, i64* %7, align 8
  %25 = sub i64 %15, %19
  store i64 %25, i64* %14, align 8
  %26 = getelementptr inbounds i8, i8* %21, i64 %19
  store i8* %26, i8** %20, align 8
  br label %27

; <label>:27:                                     ; preds = %17, %13
  %28 = phi i64 [ %24, %17 ], [ %8, %13 ]
  %29 = phi i64 [ %22, %17 ], [ %10, %13 ]
  %30 = phi i8* [ %23, %17 ], [ %11, %13 ]
  %31 = icmp eq i64 %29, 0
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %27
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

; <label>:36:                                     ; preds = %32
  %37 = icmp ult i64 %29, %34
  %38 = select i1 %37, i64 %29, i64 %34
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 75
  %40 = load i8*, i8** %39, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %30, i8* align 1 %40, i64 %38, i1 false) #18
  %41 = sub i64 %28, %38
  store i64 %41, i64* %7, align 8
  %42 = sub i64 %34, %38
  store i64 %42, i64* %33, align 8
  %43 = getelementptr inbounds i8, i8* %40, i64 %38
  store i8* %43, i8** %39, align 8
  br label %44

; <label>:44:                                     ; preds = %2, %27, %32, %36
  %45 = trunc i64 %10 to i8
  %46 = add i8 %4, %45
  store i8 %46, i8* %3, align 1
  %47 = icmp ugt i64 %10, 8
  br i1 %47, label %50, label %48

; <label>:48:                                     ; preds = %44
  %49 = icmp eq i64 %10, 0
  br i1 %49, label %60, label %50

; <label>:50:                                     ; preds = %48, %44
  %51 = phi i64 [ %10, %48 ], [ 8, %44 ]
  %52 = icmp ugt i8 %4, 7
  br i1 %52, label %76, label %53

; <label>:53:                                     ; preds = %50
  %54 = add i64 %51, %5
  %55 = icmp ugt i64 %54, 8
  %56 = select i1 %55, i64 %6, i64 %51
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* @MOZ_PNG_sig_cmp.png_signature, i64 0, i64 %5
  %58 = tail call i32 @memcmp(i8* nonnull %11, i8* nonnull %57, i64 %56) #20
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %77, label %60

; <label>:60:                                     ; preds = %48, %53
  %61 = icmp ult i8 %4, 4
  br i1 %61, label %62, label %76

; <label>:62:                                     ; preds = %60
  %63 = add i64 %10, -4
  %64 = icmp ugt i64 %63, 8
  br i1 %64, label %67, label %65

; <label>:65:                                     ; preds = %62
  %66 = icmp eq i64 %63, 0
  br i1 %66, label %75, label %67

; <label>:67:                                     ; preds = %62, %65
  %68 = phi i64 [ %63, %65 ], [ 8, %62 ]
  %69 = add i64 %68, %5
  %70 = icmp ugt i64 %69, 8
  %71 = select i1 %70, i64 %6, i64 %68
  %72 = getelementptr inbounds [8 x i8], [8 x i8]* @MOZ_PNG_sig_cmp.png_signature, i64 0, i64 %5
  %73 = tail call i32 @memcmp(i8* nonnull %11, i8* nonnull %72, i64 %71) #20
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %76, label %75

; <label>:75:                                     ; preds = %65, %67
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i64 0, i64 0)) #19
  unreachable

; <label>:76:                                     ; preds = %50, %67, %60
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.68, i64 0, i64 0)) #19
  unreachable

; <label>:77:                                     ; preds = %53
  %78 = icmp ugt i8 %46, 7
  br i1 %78, label %79, label %81

; <label>:79:                                     ; preds = %77
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  store i32 1, i32* %80, align 8
  br label %81

; <label>:81:                                     ; preds = %77, %79
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_read_chunk(%struct.png_struct_def* noalias, %struct.png_info_def* noalias) local_unnamed_addr #4 {
  %3 = alloca [4 x i8], align 1
  %4 = alloca [4 x i8], align 1
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 256
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %12, label %9

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %11 = load i32, i32* %10, align 8
  br label %188

; <label>:12:                                     ; preds = %2
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #18
  %14 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #18
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, 8
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %12
  tail call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  br label %572

; <label>:19:                                     ; preds = %12
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %34, label %23

; <label>:23:                                     ; preds = %19
  %24 = icmp ult i64 %21, 4
  %25 = select i1 %24, i64 %21, i64 4
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 73
  %27 = load i8*, i8** %26, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %13, i8* align 1 %27, i64 %25, i1 false) #18
  %28 = sub nsw i64 4, %25
  %29 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 %25
  %30 = sub i64 %16, %25
  store i64 %30, i64* %15, align 8
  %31 = sub i64 %21, %25
  store i64 %31, i64* %20, align 8
  %32 = getelementptr inbounds i8, i8* %27, i64 %25
  store i8* %32, i8** %26, align 8
  %33 = icmp eq i64 %28, 0
  br i1 %33, label %49, label %34

; <label>:34:                                     ; preds = %19, %23
  %35 = phi i64 [ %30, %23 ], [ %16, %19 ]
  %36 = phi i8* [ %29, %23 ], [ %13, %19 ]
  %37 = phi i64 [ %28, %23 ], [ 4, %19 ]
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %49, label %41

; <label>:41:                                     ; preds = %34
  %42 = icmp ult i64 %37, %39
  %43 = select i1 %42, i64 %37, i64 %39
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 75
  %45 = load i8*, i8** %44, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %36, i8* align 1 %45, i64 %43, i1 false) #18
  %46 = sub i64 %35, %43
  store i64 %46, i64* %15, align 8
  %47 = sub i64 %39, %43
  store i64 %47, i64* %38, align 8
  %48 = getelementptr inbounds i8, i8* %45, i64 %43
  store i8* %48, i8** %44, align 8
  br label %49

; <label>:49:                                     ; preds = %23, %34, %41
  %50 = load i8, i8* %13, align 1, !noalias !145
  %51 = zext i8 %50 to i32
  %52 = shl nuw i32 %51, 24
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %54 = load i8, i8* %53, align 1, !noalias !145
  %55 = zext i8 %54 to i32
  %56 = shl nuw nsw i32 %55, 16
  %57 = or i32 %56, %52
  %58 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %59 = load i8, i8* %58, align 1, !noalias !145
  %60 = zext i8 %59 to i32
  %61 = shl nuw nsw i32 %60, 8
  %62 = or i32 %57, %61
  %63 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %64 = load i8, i8* %63, align 1, !noalias !145
  %65 = zext i8 %64 to i32
  %66 = or i32 %62, %65
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %49
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:69:                                     ; preds = %49
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  store i32 %66, i32* %70, align 8
  %71 = tail call i64 @MOZ_Z_crc32(i64 0, i8* null, i32 0) #18, !noalias !148
  %72 = trunc i64 %71 to i32
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %72, i32* %73, align 4, !alias.scope !148
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %75 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %74, align 8, !alias.scope !151
  %76 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %75, null
  br i1 %76, label %77, label %78

; <label>:77:                                     ; preds = %69
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:78:                                     ; preds = %69
  call void %75(%struct.png_struct_def* nonnull %0, i8* nonnull %14, i64 4) #18
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %80 = load i32, i32* %79, align 8, !alias.scope !156
  %81 = and i32 %80, 536870912
  %82 = icmp eq i32 %81, 0
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %84 = load i32, i32* %83, align 4, !alias.scope !156
  %85 = and i32 %84, 768
  %86 = icmp ne i32 %85, 768
  %87 = and i32 %84, 2048
  %88 = icmp eq i32 %87, 0
  %89 = select i1 %82, i1 %88, i1 %86
  br i1 %89, label %90, label %95

; <label>:90:                                     ; preds = %78
  %91 = load i32, i32* %73, align 4, !alias.scope !156
  %92 = zext i32 %91 to i64
  %93 = call i64 @MOZ_Z_crc32(i64 %92, i8* nonnull %14, i32 4) #18, !noalias !159
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %73, align 4, !alias.scope !156
  br label %95

; <label>:95:                                     ; preds = %78, %90
  %96 = load i8, i8* %14, align 1
  %97 = zext i8 %96 to i32
  %98 = shl nuw i32 %97, 24
  %99 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = shl nuw nsw i32 %101, 16
  %103 = or i32 %102, %98
  %104 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = shl nuw nsw i32 %106, 8
  %108 = or i32 %103, %107
  %109 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = or i32 %108, %111
  store i32 %112, i32* %79, align 8
  %113 = add nsw i32 %111, -65
  %114 = icmp ugt i32 %113, 57
  %115 = add nsw i32 %111, -91
  %116 = icmp ult i32 %115, 6
  %117 = or i1 %114, %116
  br i1 %117, label %118, label %119

; <label>:118:                                    ; preds = %131, %125, %119, %95
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.136, i64 0, i64 0)) #22
  unreachable

; <label>:119:                                    ; preds = %95
  %120 = add nsw i32 %106, -65
  %121 = icmp ugt i32 %120, 57
  %122 = add nsw i32 %106, -91
  %123 = icmp ult i32 %122, 6
  %124 = or i1 %121, %123
  br i1 %124, label %118, label %125

; <label>:125:                                    ; preds = %119
  %126 = add nsw i32 %101, -65
  %127 = icmp ugt i32 %126, 57
  %128 = add nsw i32 %101, -91
  %129 = icmp ult i32 %128, 6
  %130 = or i1 %127, %129
  br i1 %130, label %118, label %131

; <label>:131:                                    ; preds = %125
  %132 = add nsw i32 %97, -65
  %133 = icmp ugt i32 %132, 57
  %134 = add nsw i32 %97, -91
  %135 = icmp ult i32 %134, 6
  %136 = or i1 %133, %135
  br i1 %136, label %118, label %137

; <label>:137:                                    ; preds = %131
  %138 = load i32, i32* %70, align 8
  %139 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 101
  %140 = load i64, i64* %139, align 8, !alias.scope !160
  %141 = add i64 %140, -1
  %142 = icmp ult i64 %141, 2147483646
  %143 = select i1 %142, i64 %140, i64 2147483647
  switch i32 %112, label %180 [
    i32 1229209940, label %144
    i32 1717846356, label %144
  ]

; <label>:144:                                    ; preds = %137, %137
  %145 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %146 = load i32, i32* %145, align 4, !alias.scope !160
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 52
  %149 = load i8, i8* %148, align 1, !alias.scope !160
  %150 = zext i8 %149 to i64
  %151 = mul nuw nsw i64 %150, %147
  %152 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %153 = load i8, i8* %152, align 2, !alias.scope !160
  %154 = icmp ugt i8 %153, 8
  %155 = select i1 %154, i64 2, i64 1
  %156 = mul nuw nsw i64 %151, %155
  %157 = add nuw nsw i64 %156, 1
  %158 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %159 = load i8, i8* %158, align 2, !alias.scope !160
  %160 = icmp eq i8 %159, 0
  %161 = select i1 %160, i64 0, i64 6
  %162 = add nuw nsw i64 %157, %161
  %163 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %164 = load i32, i32* %163, align 8, !alias.scope !160
  %165 = zext i32 %164 to i64
  %166 = udiv i64 4294967295, %162
  %167 = icmp ult i64 %166, %165
  %168 = mul i64 %162, %165
  %169 = select i1 %167, i64 2147483647, i64 %168
  %170 = icmp ult i64 %162, 32566
  %171 = select i1 %170, i64 %162, i64 32566
  %172 = udiv i64 %169, %171
  %173 = mul i64 %172, 5
  %174 = add i64 %173, 11
  %175 = add i64 %174, %169
  %176 = icmp ult i64 %175, 2147483647
  %177 = select i1 %176, i64 %175, i64 2147483647
  %178 = icmp ult i64 %143, %177
  %179 = select i1 %178, i64 %177, i64 %143
  br label %180

; <label>:180:                                    ; preds = %144, %137
  %181 = phi i64 [ %179, %144 ], [ %143, %137 ]
  %182 = zext i32 %138 to i64
  %183 = icmp ult i64 %181, %182
  br i1 %183, label %184, label %185

; <label>:184:                                    ; preds = %180
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.137, i64 0, i64 0)) #22
  unreachable

; <label>:185:                                    ; preds = %180
  %186 = load i32, i32* %5, align 8
  %187 = or i32 %186, 256
  store i32 %187, i32* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  br label %188

; <label>:188:                                    ; preds = %9, %185
  %189 = phi i32* [ %10, %9 ], [ %79, %185 ]
  %190 = phi i32 [ %6, %9 ], [ %187, %185 ]
  %191 = phi i32 [ %11, %9 ], [ %112, %185 ]
  %192 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 91
  %193 = load i32, i32* %192, align 8
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %345, label %195

; <label>:195:                                    ; preds = %188
  %196 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  %197 = load i32, i32* %196, align 8
  %198 = icmp ult i32 %193, %197
  br i1 %198, label %199, label %345

; <label>:199:                                    ; preds = %195
  switch i32 %191, label %319 [
    i32 1229209940, label %200
    i32 1717846356, label %219
    i32 1717785676, label %251
  ]

; <label>:200:                                    ; preds = %199
  %201 = and i32 %190, 131072
  %202 = icmp ne i32 %201, 0
  %203 = icmp ugt i32 %193, 1
  %204 = or i1 %203, %202
  br i1 %204, label %205, label %206

; <label>:205:                                    ; preds = %200
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.69, i64 0, i64 0)) #19
  unreachable

; <label>:206:                                    ; preds = %200
  %207 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %208 = load i32, i32* %207, align 8
  %209 = add i32 %208, 4
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %212 = load i64, i64* %211, align 8
  %213 = icmp ult i64 %212, %210
  br i1 %213, label %214, label %215

; <label>:214:                                    ; preds = %206
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:215:                                    ; preds = %206
  %216 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %208)
  %217 = load i32, i32* %5, align 8
  %218 = and i32 %217, -257
  store i32 %218, i32* %5, align 8
  br label %572

; <label>:219:                                    ; preds = %199
  %220 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %221 = load i64, i64* %220, align 8
  %222 = icmp ult i64 %221, 4
  br i1 %222, label %223, label %224

; <label>:223:                                    ; preds = %219
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:224:                                    ; preds = %219
  call void @MOZ_APNG_ensure_seqno(%struct.png_struct_def* nonnull %0, i32 4)
  %225 = load i32, i32* %5, align 8
  %226 = and i32 %225, 131072
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %228, label %244

; <label>:228:                                    ; preds = %224
  %229 = load i32, i32* %192, align 8
  %230 = icmp ult i32 %229, 2
  br i1 %230, label %231, label %232

; <label>:231:                                    ; preds = %228
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.70, i64 0, i64 0)) #19
  unreachable

; <label>:232:                                    ; preds = %228
  %233 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %234 = load i32, i32* %233, align 8
  %235 = add i32 %234, 4
  %236 = zext i32 %235 to i64
  %237 = load i64, i64* %220, align 8
  %238 = icmp ult i64 %237, %236
  br i1 %238, label %239, label %240

; <label>:239:                                    ; preds = %232
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:240:                                    ; preds = %232
  %241 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %234)
  %242 = load i32, i32* %5, align 8
  %243 = and i32 %242, -257
  store i32 %243, i32* %5, align 8
  br label %572

; <label>:244:                                    ; preds = %224
  %245 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %246 = load i32, i32* %245, align 8
  %247 = add i32 %246, -4
  %248 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  store i32 %247, i32* %248, align 8
  %249 = or i32 %225, 4
  store i32 %249, i32* %5, align 8
  %250 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  store i32 2, i32* %250, align 8
  br label %572

; <label>:251:                                    ; preds = %199
  %252 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %253 = load i32, i32* %252, align 8
  %254 = add i32 %253, 4
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %257 = load i64, i64* %256, align 8
  %258 = icmp ult i64 %257, %255
  br i1 %258, label %259, label %260

; <label>:259:                                    ; preds = %251
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:260:                                    ; preds = %251
  %261 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  store i32 0, i32* %261, align 4
  %262 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  store i8 0, i8* %262, align 1
  %263 = and i32 %190, -131085
  store i32 %263, i32* %5, align 8
  call void @MOZ_APNG_handle_fcTL(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1, i32 %253)
  %264 = load i32, i32* %5, align 8
  %265 = and i32 %264, 131072
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %268

; <label>:267:                                    ; preds = %260
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.71, i64 0, i64 0)) #19
  unreachable

; <label>:268:                                    ; preds = %260
  %269 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 25
  %270 = load i32, i32* %269, align 8
  %271 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  store i32 %270, i32* %271, align 4
  %272 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 26
  %273 = load i32, i32* %272, align 4
  %274 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  store i32 %273, i32* %274, align 8
  %275 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %276 = load i8, i8* %275, align 4
  %277 = icmp ugt i8 %276, 7
  %278 = zext i32 %270 to i64
  %279 = zext i8 %276 to i64
  br i1 %277, label %280, label %283

; <label>:280:                                    ; preds = %268
  %281 = lshr i64 %279, 3
  %282 = mul nuw nsw i64 %281, %278
  br label %287

; <label>:283:                                    ; preds = %268
  %284 = mul nuw nsw i64 %279, %278
  %285 = add nuw nsw i64 %284, 7
  %286 = lshr i64 %285, 3
  br label %287

; <label>:287:                                    ; preds = %283, %280
  %288 = phi i64 [ %282, %280 ], [ %286, %283 ]
  %289 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  store i64 %288, i64* %289, align 8
  %290 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 13
  %291 = load i8, i8* %290, align 2
  %292 = icmp ugt i8 %291, 7
  %293 = zext i8 %291 to i64
  br i1 %292, label %294, label %297

; <label>:294:                                    ; preds = %287
  %295 = lshr i64 %293, 3
  %296 = mul nuw nsw i64 %295, %278
  br label %301

; <label>:297:                                    ; preds = %287
  %298 = mul nuw nsw i64 %293, %278
  %299 = add nuw nsw i64 %298, 7
  %300 = lshr i64 %299, 3
  br label %301

; <label>:301:                                    ; preds = %297, %294
  %302 = phi i64 [ %296, %294 ], [ %300, %297 ]
  %303 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  store i64 %302, i64* %303, align 8
  %304 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  %305 = load i8*, i8** %304, align 8
  %306 = icmp eq i8* %305, null
  br i1 %306, label %309, label %307

; <label>:307:                                    ; preds = %301
  %308 = add nsw i64 %288, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %305, i8 0, i64 %308, i1 false) #18
  br label %309

; <label>:309:                                    ; preds = %301, %307
  call void @MOZ_APNG_prog_read_reset(%struct.png_struct_def* nonnull %0)
  %310 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 92
  %311 = bitcast {}** %310 to void (%struct.png_struct_def*, i32)**
  %312 = load void (%struct.png_struct_def*, i32)*, void (%struct.png_struct_def*, i32)** %311, align 8
  %313 = icmp eq void (%struct.png_struct_def*, i32)* %312, null
  br i1 %313, label %316, label %314

; <label>:314:                                    ; preds = %309
  %315 = load i32, i32* %192, align 8
  call void %312(%struct.png_struct_def* nonnull %0, i32 %315) #18
  br label %316

; <label>:316:                                    ; preds = %309, %314
  %317 = load i32, i32* %5, align 8
  %318 = and i32 %317, -257
  store i32 %318, i32* %5, align 8
  br label %572

; <label>:319:                                    ; preds = %199
  %320 = icmp eq i32 %191, 1229278788
  %321 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %322 = load i32, i32* %321, align 8
  %323 = add i32 %322, 4
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %326 = load i64, i64* %325, align 8
  %327 = icmp ult i64 %326, %324
  br i1 %320, label %328, label %338

; <label>:328:                                    ; preds = %319
  br i1 %327, label %329, label %330

; <label>:329:                                    ; preds = %328
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:330:                                    ; preds = %328
  call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.72, i64 0, i64 0))
  %331 = load i32, i32* %321, align 8
  %332 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %331)
  %333 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  store i32 6, i32* %333, align 8
  %334 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 72
  %335 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %334, align 8, !alias.scope !163, !noalias !166
  %336 = icmp eq void (%struct.png_struct_def*, %struct.png_info_def*)* %335, null
  br i1 %336, label %572, label %337

; <label>:337:                                    ; preds = %330
  call void %335(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  br label %572

; <label>:338:                                    ; preds = %319
  br i1 %327, label %339, label %340

; <label>:339:                                    ; preds = %338
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:340:                                    ; preds = %338
  call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.73, i64 0, i64 0))
  %341 = load i32, i32* %321, align 8
  %342 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %341)
  %343 = load i32, i32* %5, align 8
  %344 = and i32 %343, -257
  store i32 %344, i32* %5, align 8
  br label %572

; <label>:345:                                    ; preds = %188, %195
  switch i32 %191, label %549 [
    i32 1229209940, label %346
    i32 1229472850, label %393
    i32 1229278788, label %404
    i32 1347179589, label %434
    i32 1732332865, label %489
    i32 1665684045, label %499
    i32 1934772034, label %509
    i32 1766015824, label %519
    i32 1951551059, label %529
    i32 1633899596, label %539
  ]

; <label>:346:                                    ; preds = %345
  %347 = and i32 %190, 8
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %351, label %349

; <label>:349:                                    ; preds = %346
  %350 = or i32 %190, 8192
  store i32 %350, i32* %5, align 8
  br label %351

; <label>:351:                                    ; preds = %346, %349
  %352 = phi i32 [ %190, %346 ], [ %350, %349 ]
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %356

; <label>:355:                                    ; preds = %351
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.74, i64 0, i64 0)) #19
  unreachable

; <label>:356:                                    ; preds = %351
  %357 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %358 = load i8, i8* %357, align 1
  %359 = icmp eq i8 %358, 3
  %360 = and i32 %352, 2
  %361 = icmp eq i32 %360, 0
  %362 = and i1 %361, %359
  br i1 %362, label %363, label %364

; <label>:363:                                    ; preds = %356
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.75, i64 0, i64 0)) #19
  unreachable

; <label>:364:                                    ; preds = %356
  %365 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  store i32 2, i32* %365, align 8
  %366 = and i32 %352, 8196
  %367 = icmp eq i32 %366, 4
  br i1 %367, label %368, label %372

; <label>:368:                                    ; preds = %364
  %369 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %370 = load i32, i32* %369, align 8
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %572, label %372

; <label>:372:                                    ; preds = %364, %368
  %373 = or i32 %352, 4
  store i32 %373, i32* %5, align 8
  %374 = and i32 %352, 8
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %444, label %376

; <label>:376:                                    ; preds = %372
  %377 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %378 = load i32, i32* %377, align 4, !alias.scope !168
  %379 = and i32 %378, 1048576
  %380 = icmp eq i32 %379, 0
  %381 = trunc i32 %352 to i16
  %382 = icmp slt i16 %381, 0
  br i1 %380, label %390, label %383

; <label>:383:                                    ; preds = %376
  br i1 %382, label %384, label %385

; <label>:384:                                    ; preds = %383
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.76, i64 0, i64 0)) #18
  br label %444

; <label>:385:                                    ; preds = %383
  %386 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %387 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %386, align 8, !alias.scope !171
  %388 = icmp eq void (%struct.png_struct_def*, i8*)* %387, null
  br i1 %388, label %444, label %389

; <label>:389:                                    ; preds = %385
  call void %387(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.76, i64 0, i64 0)) #18
  br label %444

; <label>:390:                                    ; preds = %376
  br i1 %382, label %391, label %392

; <label>:391:                                    ; preds = %390
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.76, i64 0, i64 0)) #22
  unreachable

; <label>:392:                                    ; preds = %390
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.76, i64 0, i64 0)) #22
  unreachable

; <label>:393:                                    ; preds = %345
  %394 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %395 = load i32, i32* %394, align 8
  %396 = icmp eq i32 %395, 13
  br i1 %396, label %398, label %397

; <label>:397:                                    ; preds = %393
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.77, i64 0, i64 0)) #19
  unreachable

; <label>:398:                                    ; preds = %393
  %399 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %400 = load i64, i64* %399, align 8
  %401 = icmp ult i64 %400, 17
  br i1 %401, label %402, label %403

; <label>:402:                                    ; preds = %398
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:403:                                    ; preds = %398
  call void @MOZ_PNG_handle_IHDR(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 13)
  br label %569

; <label>:404:                                    ; preds = %345
  %405 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %406 = load i32, i32* %405, align 8
  %407 = add i32 %406, 4
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %410 = load i64, i64* %409, align 8
  %411 = icmp ult i64 %410, %408
  br i1 %411, label %412, label %413

; <label>:412:                                    ; preds = %404
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:413:                                    ; preds = %404
  %414 = and i32 %190, 5
  %415 = icmp eq i32 %414, 5
  br i1 %415, label %417, label %416

; <label>:416:                                    ; preds = %413
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #22
  unreachable

; <label>:417:                                    ; preds = %413
  %418 = or i32 %190, 24
  store i32 %418, i32* %5, align 8, !alias.scope !174
  %419 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %406) #18
  %420 = icmp eq i32 %406, 0
  br i1 %420, label %428, label %421

; <label>:421:                                    ; preds = %417
  %422 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %423 = load i32, i32* %422, align 4, !alias.scope !177
  %424 = and i32 %423, 1048576
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %426, label %427

; <label>:426:                                    ; preds = %421
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:427:                                    ; preds = %421
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  br label %428

; <label>:428:                                    ; preds = %417, %427
  %429 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  store i32 6, i32* %429, align 8
  %430 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 72
  %431 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %430, align 8, !alias.scope !180, !noalias !183
  %432 = icmp eq void (%struct.png_struct_def*, %struct.png_info_def*)* %431, null
  br i1 %432, label %569, label %433

; <label>:433:                                    ; preds = %428
  call void %431(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1) #18
  br label %569

; <label>:434:                                    ; preds = %345
  %435 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %436 = load i32, i32* %435, align 8
  %437 = add i32 %436, 4
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %440 = load i64, i64* %439, align 8
  %441 = icmp ult i64 %440, %438
  br i1 %441, label %442, label %443

; <label>:442:                                    ; preds = %434
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:443:                                    ; preds = %434
  call void @MOZ_PNG_handle_PLTE(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %436)
  br label %569

; <label>:444:                                    ; preds = %384, %385, %389, %372
  %445 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %446 = load i32, i32* %445, align 8
  %447 = and i32 %446, 393216
  %448 = icmp eq i32 %447, 131072
  br i1 %448, label %449, label %456

; <label>:449:                                    ; preds = %444
  %450 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %451 = load i32, i32* %450, align 8
  %452 = or i32 %451, 1
  store i32 %452, i32* %450, align 8
  %453 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  %454 = load i32, i32* %453, align 8
  %455 = add i32 %454, 1
  store i32 %455, i32* %453, align 8
  br label %456

; <label>:456:                                    ; preds = %444, %449
  %457 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %458 = load i32, i32* %457, align 8
  %459 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  store i32 %458, i32* %459, align 8
  store i32 2, i32* %365, align 8
  %460 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 70
  %461 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %460, align 8, !alias.scope !185, !noalias !188
  %462 = icmp eq void (%struct.png_struct_def*, %struct.png_info_def*)* %461, null
  br i1 %462, label %464, label %463

; <label>:463:                                    ; preds = %456
  call void %461(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  br label %464

; <label>:464:                                    ; preds = %456, %463
  %465 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %466 = load i8, i8* %465, align 4
  %467 = icmp ugt i8 %466, 7
  %468 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  %469 = load i32, i32* %468, align 8
  %470 = zext i32 %469 to i64
  %471 = zext i8 %466 to i64
  br i1 %467, label %472, label %475

; <label>:472:                                    ; preds = %464
  %473 = lshr i64 %471, 3
  %474 = mul nuw nsw i64 %473, %470
  br label %479

; <label>:475:                                    ; preds = %464
  %476 = mul nuw nsw i64 %470, %471
  %477 = add nuw nsw i64 %476, 7
  %478 = lshr i64 %477, 3
  br label %479

; <label>:479:                                    ; preds = %475, %472
  %480 = phi i64 [ %474, %472 ], [ %478, %475 ]
  %481 = trunc i64 %480 to i32
  %482 = add i32 %481, 1
  %483 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 4
  store i32 %482, i32* %483, align 8
  %484 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %485 = bitcast i8** %484 to i64*
  %486 = load i64, i64* %485, align 8
  %487 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 3
  %488 = bitcast i8** %487 to i64*
  store i64 %486, i64* %488, align 8
  br label %572

; <label>:489:                                    ; preds = %345
  %490 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %491 = load i32, i32* %490, align 8
  %492 = add i32 %491, 4
  %493 = zext i32 %492 to i64
  %494 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %495 = load i64, i64* %494, align 8
  %496 = icmp ult i64 %495, %493
  br i1 %496, label %497, label %498

; <label>:497:                                    ; preds = %489
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:498:                                    ; preds = %489
  call void @MOZ_PNG_handle_gAMA(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %491)
  br label %569

; <label>:499:                                    ; preds = %345
  %500 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %501 = load i32, i32* %500, align 8
  %502 = add i32 %501, 4
  %503 = zext i32 %502 to i64
  %504 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %505 = load i64, i64* %504, align 8
  %506 = icmp ult i64 %505, %503
  br i1 %506, label %507, label %508

; <label>:507:                                    ; preds = %499
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:508:                                    ; preds = %499
  call void @MOZ_PNG_handle_cHRM(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %501)
  br label %569

; <label>:509:                                    ; preds = %345
  %510 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %511 = load i32, i32* %510, align 8
  %512 = add i32 %511, 4
  %513 = zext i32 %512 to i64
  %514 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %515 = load i64, i64* %514, align 8
  %516 = icmp ult i64 %515, %513
  br i1 %516, label %517, label %518

; <label>:517:                                    ; preds = %509
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:518:                                    ; preds = %509
  call void @MOZ_PNG_handle_sRGB(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %511)
  br label %569

; <label>:519:                                    ; preds = %345
  %520 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %521 = load i32, i32* %520, align 8
  %522 = add i32 %521, 4
  %523 = zext i32 %522 to i64
  %524 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %525 = load i64, i64* %524, align 8
  %526 = icmp ult i64 %525, %523
  br i1 %526, label %527, label %528

; <label>:527:                                    ; preds = %519
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:528:                                    ; preds = %519
  call void @MOZ_PNG_handle_iCCP(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %521)
  br label %569

; <label>:529:                                    ; preds = %345
  %530 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %531 = load i32, i32* %530, align 8
  %532 = add i32 %531, 4
  %533 = zext i32 %532 to i64
  %534 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %535 = load i64, i64* %534, align 8
  %536 = icmp ult i64 %535, %533
  br i1 %536, label %537, label %538

; <label>:537:                                    ; preds = %529
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:538:                                    ; preds = %529
  call void @MOZ_PNG_handle_tRNS(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %531)
  br label %569

; <label>:539:                                    ; preds = %345
  %540 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %541 = load i32, i32* %540, align 8
  %542 = add i32 %541, 4
  %543 = zext i32 %542 to i64
  %544 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %545 = load i64, i64* %544, align 8
  %546 = icmp ult i64 %545, %543
  br i1 %546, label %547, label %548

; <label>:547:                                    ; preds = %539
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:548:                                    ; preds = %539
  call void @MOZ_APNG_handle_acTL(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %541)
  br label %569

; <label>:549:                                    ; preds = %345
  %550 = icmp eq i32 %191, 1717785676
  %551 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %552 = load i32, i32* %551, align 8
  %553 = add i32 %552, 4
  %554 = zext i32 %553 to i64
  %555 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %556 = load i64, i64* %555, align 8
  %557 = icmp ult i64 %556, %554
  br i1 %550, label %558, label %561

; <label>:558:                                    ; preds = %549
  br i1 %557, label %559, label %560

; <label>:559:                                    ; preds = %558
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:560:                                    ; preds = %558
  call void @MOZ_APNG_handle_fcTL(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %552)
  br label %569

; <label>:561:                                    ; preds = %549
  br i1 %557, label %562, label %563

; <label>:562:                                    ; preds = %561
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %572

; <label>:563:                                    ; preds = %561
  %564 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %552) #18
  %565 = load i32, i32* %189, align 8, !alias.scope !190
  %566 = and i32 %565, 536870912
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %568, label %569

; <label>:568:                                    ; preds = %563
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.135, i64 0, i64 0)) #22
  unreachable

; <label>:569:                                    ; preds = %563, %433, %428, %508, %528, %548, %560, %538, %518, %498, %443, %403
  %570 = load i32, i32* %5, align 8
  %571 = and i32 %570, -257
  store i32 %571, i32* %5, align 8
  br label %572

; <label>:572:                                    ; preds = %337, %330, %368, %215, %316, %340, %240, %244, %18, %569, %562, %559, %547, %537, %527, %517, %507, %497, %479, %442, %412, %402, %339, %329, %259, %239, %223, %214
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_read_IDAT(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = alloca [4 x i8], align 1
  %3 = alloca [4 x i8], align 1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 256
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %10 = load i32, i32* %9, align 8
  br label %179

; <label>:11:                                     ; preds = %1
  %12 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #18
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #18
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, 12
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %11
  tail call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #18
  br label %307

; <label>:18:                                     ; preds = %11
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %33, label %22

; <label>:22:                                     ; preds = %18
  %23 = icmp ult i64 %20, 4
  %24 = select i1 %23, i64 %20, i64 4
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 73
  %26 = load i8*, i8** %25, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %12, i8* align 1 %26, i64 %24, i1 false) #18
  %27 = sub nsw i64 4, %24
  %28 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 %24
  %29 = sub i64 %15, %24
  store i64 %29, i64* %14, align 8
  %30 = sub i64 %20, %24
  store i64 %30, i64* %19, align 8
  %31 = getelementptr inbounds i8, i8* %26, i64 %24
  store i8* %31, i8** %25, align 8
  %32 = icmp eq i64 %27, 0
  br i1 %32, label %48, label %33

; <label>:33:                                     ; preds = %18, %22
  %34 = phi i64 [ %29, %22 ], [ %15, %18 ]
  %35 = phi i8* [ %28, %22 ], [ %12, %18 ]
  %36 = phi i64 [ %27, %22 ], [ 4, %18 ]
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

; <label>:40:                                     ; preds = %33
  %41 = icmp ult i64 %36, %38
  %42 = select i1 %41, i64 %36, i64 %38
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 75
  %44 = load i8*, i8** %43, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %35, i8* align 1 %44, i64 %42, i1 false) #18
  %45 = sub i64 %34, %42
  store i64 %45, i64* %14, align 8
  %46 = sub i64 %38, %42
  store i64 %46, i64* %37, align 8
  %47 = getelementptr inbounds i8, i8* %44, i64 %42
  store i8* %47, i8** %43, align 8
  br label %48

; <label>:48:                                     ; preds = %22, %33, %40
  %49 = load i8, i8* %12, align 1, !noalias !193
  %50 = zext i8 %49 to i32
  %51 = shl nuw i32 %50, 24
  %52 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 1
  %53 = load i8, i8* %52, align 1, !noalias !193
  %54 = zext i8 %53 to i32
  %55 = shl nuw nsw i32 %54, 16
  %56 = or i32 %55, %51
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 2
  %58 = load i8, i8* %57, align 1, !noalias !193
  %59 = zext i8 %58 to i32
  %60 = shl nuw nsw i32 %59, 8
  %61 = or i32 %56, %60
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 3
  %63 = load i8, i8* %62, align 1, !noalias !193
  %64 = zext i8 %63 to i32
  %65 = or i32 %61, %64
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %67, label %68

; <label>:67:                                     ; preds = %48
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:68:                                     ; preds = %48
  %69 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  store i32 %65, i32* %69, align 8
  %70 = tail call i64 @MOZ_Z_crc32(i64 0, i8* null, i32 0) #18, !noalias !196
  %71 = trunc i64 %70 to i32
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %71, i32* %72, align 4, !alias.scope !196
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %74 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %73, align 8, !alias.scope !199
  %75 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %74, null
  br i1 %75, label %76, label %77

; <label>:76:                                     ; preds = %68
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:77:                                     ; preds = %68
  call void %74(%struct.png_struct_def* nonnull %0, i8* nonnull %13, i64 4) #18
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %79 = load i32, i32* %78, align 8, !alias.scope !204
  %80 = and i32 %79, 536870912
  %81 = icmp eq i32 %80, 0
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %83 = load i32, i32* %82, align 4, !alias.scope !204
  %84 = and i32 %83, 768
  %85 = icmp ne i32 %84, 768
  %86 = and i32 %83, 2048
  %87 = icmp eq i32 %86, 0
  %88 = select i1 %81, i1 %87, i1 %85
  br i1 %88, label %89, label %94

; <label>:89:                                     ; preds = %77
  %90 = load i32, i32* %72, align 4, !alias.scope !204
  %91 = zext i32 %90 to i64
  %92 = call i64 @MOZ_Z_crc32(i64 %91, i8* nonnull %13, i32 4) #18, !noalias !207
  %93 = trunc i64 %92 to i32
  store i32 %93, i32* %72, align 4, !alias.scope !204
  br label %94

; <label>:94:                                     ; preds = %77, %89
  %95 = load i8, i8* %13, align 1
  %96 = zext i8 %95 to i32
  %97 = shl nuw i32 %96, 24
  %98 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 16
  %102 = or i32 %101, %97
  %103 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = shl nuw nsw i32 %105, 8
  %107 = or i32 %102, %106
  %108 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = or i32 %107, %110
  store i32 %111, i32* %78, align 8
  %112 = load i32, i32* %4, align 8
  %113 = or i32 %112, 256
  store i32 %113, i32* %4, align 8
  %114 = icmp eq i32 %111, 1717846356
  %115 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 91
  %116 = load i32, i32* %115, align 8
  %117 = icmp eq i32 %116, 0
  br i1 %114, label %154, label %118

; <label>:118:                                    ; preds = %94
  br i1 %117, label %149, label %119

; <label>:119:                                    ; preds = %118
  %120 = load i32, i32* %82, align 4
  %121 = and i32 %120, 8
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %134, label %123

; <label>:123:                                    ; preds = %119
  %124 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  store i32 1, i32* %124, align 8
  %125 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 93
  %126 = bitcast {}** %125 to void (%struct.png_struct_def*, i32)**
  %127 = load void (%struct.png_struct_def*, i32)*, void (%struct.png_struct_def*, i32)** %126, align 8
  %128 = icmp eq void (%struct.png_struct_def*, i32)* %127, null
  br i1 %128, label %131, label %129

; <label>:129:                                    ; preds = %123
  call void %127(%struct.png_struct_def* nonnull %0, i32 %116) #18
  %130 = load i32, i32* %115, align 8
  br label %131

; <label>:131:                                    ; preds = %123, %129
  %132 = phi i32 [ %116, %123 ], [ %130, %129 ]
  %133 = add i32 %132, 1
  store i32 %133, i32* %115, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #18
  br label %307

; <label>:134:                                    ; preds = %119
  %135 = icmp eq i32 %111, 1229278788
  br i1 %135, label %136, label %137

; <label>:136:                                    ; preds = %134
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.81, i64 0, i64 0)) #19
  unreachable

; <label>:137:                                    ; preds = %134
  %138 = load i32, i32* %69, align 8
  %139 = add i32 %138, 4
  %140 = zext i32 %139 to i64
  %141 = load i64, i64* %14, align 8
  %142 = icmp ult i64 %141, %140
  br i1 %142, label %143, label %144

; <label>:143:                                    ; preds = %137
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #18
  br label %307

; <label>:144:                                    ; preds = %137
  call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.82, i64 0, i64 0))
  %145 = load i32, i32* %69, align 8
  %146 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %145)
  %147 = load i32, i32* %4, align 8
  %148 = and i32 %147, -257
  store i32 %148, i32* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #18
  br label %307

; <label>:149:                                    ; preds = %118
  %150 = icmp eq i32 %111, 1229209940
  br i1 %150, label %151, label %155

; <label>:151:                                    ; preds = %149
  %152 = load i32, i32* %69, align 8
  %153 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  store i32 %152, i32* %153, align 8
  br label %176

; <label>:154:                                    ; preds = %94
  br i1 %117, label %155, label %171

; <label>:155:                                    ; preds = %149, %154
  %156 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 83
  store i32 1, i32* %156, align 8
  %157 = load i32, i32* %82, align 4
  %158 = and i32 %157, 8
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

; <label>:160:                                    ; preds = %155
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.83, i64 0, i64 0)) #19
  unreachable

; <label>:161:                                    ; preds = %155
  %162 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 93
  %163 = bitcast {}** %162 to void (%struct.png_struct_def*, i32)**
  %164 = load void (%struct.png_struct_def*, i32)*, void (%struct.png_struct_def*, i32)** %163, align 8
  %165 = icmp eq void (%struct.png_struct_def*, i32)* %164, null
  br i1 %165, label %169, label %166

; <label>:166:                                    ; preds = %161
  call void %164(%struct.png_struct_def* nonnull %0, i32 0) #18
  %167 = load i32, i32* %115, align 8
  %168 = add i32 %167, 1
  br label %169

; <label>:169:                                    ; preds = %161, %166
  %170 = phi i32 [ 1, %161 ], [ %168, %166 ]
  store i32 %170, i32* %115, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #18
  br label %307

; <label>:171:                                    ; preds = %154
  %172 = load i32, i32* %69, align 8
  %173 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  store i32 %172, i32* %173, align 8
  call void @MOZ_APNG_ensure_seqno(%struct.png_struct_def* nonnull %0, i32 4)
  %174 = load i32, i32* %173, align 8
  %175 = add i32 %174, -4
  store i32 %175, i32* %173, align 8
  br label %176

; <label>:176:                                    ; preds = %151, %171
  %177 = phi i32* [ %173, %171 ], [ %153, %151 ]
  %178 = phi i32 [ %175, %171 ], [ %152, %151 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #18
  br label %179

; <label>:179:                                    ; preds = %8, %176
  %180 = phi i32* [ %9, %8 ], [ %177, %176 ]
  %181 = phi i32 [ %10, %8 ], [ %178, %176 ]
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %296, label %183

; <label>:183:                                    ; preds = %179
  %184 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %185 = load i64, i64* %184, align 8
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %238, label %187

; <label>:187:                                    ; preds = %183
  %188 = zext i32 %181 to i64
  %189 = icmp ugt i64 %185, %188
  %190 = trunc i64 %185 to i32
  %191 = select i1 %189, i64 %188, i64 %185
  %192 = select i1 %189, i32 %181, i32 %190
  %193 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 73
  %194 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %195 = load i32, i32* %194, align 8, !alias.scope !208
  %196 = and i32 %195, 536870912
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %199 = load i32, i32* %198, align 4, !alias.scope !208
  %200 = and i32 %199, 768
  %201 = icmp ne i32 %200, 768
  %202 = and i32 %199, 2048
  %203 = icmp eq i32 %202, 0
  %204 = select i1 %197, i1 %203, i1 %201
  %205 = icmp ne i64 %191, 0
  %206 = and i1 %205, %204
  br i1 %206, label %207, label %226

; <label>:207:                                    ; preds = %187
  %208 = load i8*, i8** %193, align 8
  %209 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %210 = load i32, i32* %209, align 4, !alias.scope !208
  %211 = zext i32 %210 to i64
  br label %212

; <label>:212:                                    ; preds = %212, %207
  %213 = phi i64 [ %191, %207 ], [ %222, %212 ]
  %214 = phi i64 [ %211, %207 ], [ %219, %212 ]
  %215 = phi i8* [ %208, %207 ], [ %221, %212 ]
  %216 = trunc i64 %213 to i32
  %217 = icmp eq i32 %216, 0
  %218 = select i1 %217, i32 -1, i32 %216
  %219 = call i64 @MOZ_Z_crc32(i64 %214, i8* %215, i32 %218) #18, !noalias !208
  %220 = zext i32 %218 to i64
  %221 = getelementptr inbounds i8, i8* %215, i64 %220
  %222 = sub i64 %213, %220
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %212

; <label>:224:                                    ; preds = %212
  %225 = trunc i64 %219 to i32
  store i32 %225, i32* %209, align 4, !alias.scope !208
  br label %226

; <label>:226:                                    ; preds = %224, %187
  %227 = load i8*, i8** %193, align 8
  call void @MOZ_PNG_proc_IDAT_data(%struct.png_struct_def* nonnull %0, i8* %227, i64 %191)
  %228 = load i32, i32* %180, align 8
  %229 = sub i32 %228, %192
  store i32 %229, i32* %180, align 8
  %230 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %231 = load i64, i64* %230, align 8
  %232 = sub i64 %231, %191
  store i64 %232, i64* %230, align 8
  %233 = load i64, i64* %184, align 8
  %234 = sub i64 %233, %191
  store i64 %234, i64* %184, align 8
  %235 = load i8*, i8** %193, align 8
  %236 = getelementptr inbounds i8, i8* %235, i64 %191
  store i8* %236, i8** %193, align 8
  %237 = icmp eq i32 %229, 0
  br i1 %237, label %296, label %238

; <label>:238:                                    ; preds = %183, %226
  %239 = phi i32 [ %229, %226 ], [ %181, %183 ]
  %240 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  %241 = load i64, i64* %240, align 8
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %307, label %243

; <label>:243:                                    ; preds = %238
  %244 = zext i32 %239 to i64
  %245 = icmp ugt i64 %241, %244
  %246 = trunc i64 %241 to i32
  %247 = select i1 %245, i64 %244, i64 %241
  %248 = select i1 %245, i32 %239, i32 %246
  %249 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 75
  %250 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %251 = load i32, i32* %250, align 8, !alias.scope !211
  %252 = and i32 %251, 536870912
  %253 = icmp eq i32 %252, 0
  %254 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %255 = load i32, i32* %254, align 4, !alias.scope !211
  %256 = and i32 %255, 768
  %257 = icmp ne i32 %256, 768
  %258 = and i32 %255, 2048
  %259 = icmp eq i32 %258, 0
  %260 = select i1 %253, i1 %259, i1 %257
  %261 = icmp ne i64 %247, 0
  %262 = and i1 %261, %260
  br i1 %262, label %263, label %282

; <label>:263:                                    ; preds = %243
  %264 = load i8*, i8** %249, align 8
  %265 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %266 = load i32, i32* %265, align 4, !alias.scope !211
  %267 = zext i32 %266 to i64
  br label %268

; <label>:268:                                    ; preds = %268, %263
  %269 = phi i64 [ %247, %263 ], [ %278, %268 ]
  %270 = phi i64 [ %267, %263 ], [ %275, %268 ]
  %271 = phi i8* [ %264, %263 ], [ %277, %268 ]
  %272 = trunc i64 %269 to i32
  %273 = icmp eq i32 %272, 0
  %274 = select i1 %273, i32 -1, i32 %272
  %275 = call i64 @MOZ_Z_crc32(i64 %270, i8* %271, i32 %274) #18, !noalias !211
  %276 = zext i32 %274 to i64
  %277 = getelementptr inbounds i8, i8* %271, i64 %276
  %278 = sub i64 %269, %276
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %268

; <label>:280:                                    ; preds = %268
  %281 = trunc i64 %275 to i32
  store i32 %281, i32* %265, align 4, !alias.scope !211
  br label %282

; <label>:282:                                    ; preds = %280, %243
  %283 = load i8*, i8** %249, align 8
  call void @MOZ_PNG_proc_IDAT_data(%struct.png_struct_def* nonnull %0, i8* %283, i64 %247)
  %284 = load i32, i32* %180, align 8
  %285 = sub i32 %284, %248
  store i32 %285, i32* %180, align 8
  %286 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %287 = bitcast i64* %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 8
  %289 = insertelement <2 x i64> undef, i64 %247, i32 0
  %290 = shufflevector <2 x i64> %289, <2 x i64> undef, <2 x i32> zeroinitializer
  %291 = sub <2 x i64> %288, %290
  %292 = bitcast i64* %286 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %292, align 8
  %293 = load i8*, i8** %249, align 8
  %294 = getelementptr inbounds i8, i8* %293, i64 %247
  store i8* %294, i8** %249, align 8
  %295 = icmp eq i32 %285, 0
  br i1 %295, label %296, label %307

; <label>:296:                                    ; preds = %179, %226, %282
  %297 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %298 = load i64, i64* %297, align 8
  %299 = icmp ult i64 %298, 4
  br i1 %299, label %300, label %301

; <label>:300:                                    ; preds = %296
  call void @MOZ_PNG_push_save_buf(%struct.png_struct_def* nonnull %0)
  br label %307

; <label>:301:                                    ; preds = %296
  %302 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 0)
  %303 = load i32, i32* %4, align 8
  %304 = and i32 %303, -265
  %305 = or i32 %304, 8
  store i32 %305, i32* %4, align 8
  %306 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  store i32 0, i32* %306, align 4
  br label %307

; <label>:307:                                    ; preds = %238, %169, %144, %143, %131, %17, %300, %301, %282
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_fill_buffer(%struct.png_struct_def*, i8* nocapture, i64) #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %45, label %5

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 79
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %23, label %9

; <label>:9:                                      ; preds = %5
  %10 = icmp ugt i64 %7, %2
  %11 = select i1 %10, i64 %2, i64 %7
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 73
  %13 = load i8*, i8** %12, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %13, i64 %11, i1 false)
  %14 = sub i64 %2, %11
  %15 = getelementptr inbounds i8, i8* %1, i64 %11
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %11
  store i64 %18, i64* %16, align 8
  %19 = load i64, i64* %6, align 8
  %20 = sub i64 %19, %11
  store i64 %20, i64* %6, align 8
  %21 = load i8*, i8** %12, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %11
  store i8* %22, i8** %12, align 8
  br label %23

; <label>:23:                                     ; preds = %5, %9
  %24 = phi i64 [ %14, %9 ], [ %2, %5 ]
  %25 = phi i8* [ %15, %9 ], [ %1, %5 ]
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %45, label %27

; <label>:27:                                     ; preds = %23
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 82
  %29 = load i64, i64* %28, align 8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %45, label %31

; <label>:31:                                     ; preds = %27
  %32 = icmp ult i64 %24, %29
  %33 = select i1 %32, i64 %24, i64 %29
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 75
  %35 = load i8*, i8** %34, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %35, i64 %33, i1 false)
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 81
  %37 = bitcast i64* %36 to <2 x i64>*
  %38 = load <2 x i64>, <2 x i64>* %37, align 8
  %39 = insertelement <2 x i64> undef, i64 %33, i32 0
  %40 = shufflevector <2 x i64> %39, <2 x i64> undef, <2 x i32> zeroinitializer
  %41 = sub <2 x i64> %38, %40
  %42 = bitcast i64* %36 to <2 x i64>*
  store <2 x i64> %41, <2 x i64>* %42, align 8
  %43 = load i8*, i8** %34, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %33
  store i8* %44, i8** %34, align 8
  br label %45

; <label>:45:                                     ; preds = %31, %23, %27, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_get_uint_31(%struct.png_struct_def* noalias, i8* nocapture readonly) local_unnamed_addr #4 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i32
  %5 = shl nuw i32 %4, 24
  %6 = getelementptr inbounds i8, i8* %1, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = shl nuw nsw i32 %8, 16
  %10 = or i32 %9, %5
  %11 = getelementptr inbounds i8, i8* %1, i64 2
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = shl nuw nsw i32 %13, 8
  %15 = or i32 %10, %14
  %16 = getelementptr inbounds i8, i8* %1, i64 3
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = or i32 %15, %18
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %2
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #19
  unreachable

; <label>:22:                                     ; preds = %2
  ret i32 %19
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_crc_read(%struct.png_struct_def* noalias, i8*, i32) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %43, label %5

; <label>:5:                                      ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %8 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %7, align 8, !alias.scope !214
  %9 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %8, null
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %5
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:11:                                     ; preds = %5
  tail call void %8(%struct.png_struct_def* nonnull %0, i8* %1, i64 %6) #18
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %13 = load i32, i32* %12, align 8, !alias.scope !217
  %14 = and i32 %13, 536870912
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %17 = load i32, i32* %16, align 4, !alias.scope !217
  %18 = and i32 %17, 768
  %19 = icmp ne i32 %18, 768
  %20 = and i32 %17, 2048
  %21 = icmp eq i32 %20, 0
  %22 = select i1 %15, i1 %21, i1 %19
  %23 = icmp ne i32 %2, 0
  %24 = and i1 %23, %22
  br i1 %24, label %25, label %43

; <label>:25:                                     ; preds = %11
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %27 = load i32, i32* %26, align 4, !alias.scope !217
  %28 = zext i32 %27 to i64
  br label %29

; <label>:29:                                     ; preds = %29, %25
  %30 = phi i64 [ %6, %25 ], [ %39, %29 ]
  %31 = phi i64 [ %28, %25 ], [ %36, %29 ]
  %32 = phi i8* [ %1, %25 ], [ %38, %29 ]
  %33 = trunc i64 %30 to i32
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %34, i32 -1, i32 %33
  %36 = tail call i64 @MOZ_Z_crc32(i64 %31, i8* %32, i32 %35) #18, !noalias !217
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds i8, i8* %32, i64 %37
  %39 = sub i64 %30, %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %29

; <label>:41:                                     ; preds = %29
  %42 = trunc i64 %36 to i32
  store i32 %42, i32* %26, align 4, !alias.scope !217
  br label %43

; <label>:43:                                     ; preds = %41, %11, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_ck_chunk_name(%struct.png_struct_def* noalias, i32) local_unnamed_addr #4 {
  %3 = and i32 %1, 255
  %4 = add nsw i32 %3, -65
  %5 = icmp ugt i32 %4, 57
  %6 = add nsw i32 %3, -91
  %7 = icmp ult i32 %6, 6
  %8 = or i1 %5, %7
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %26, %18, %10, %2
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.136, i64 0, i64 0)) #19
  unreachable

; <label>:10:                                     ; preds = %2
  %11 = lshr i32 %1, 8
  %12 = and i32 %11, 255
  %13 = add nsw i32 %12, -65
  %14 = icmp ugt i32 %13, 57
  %15 = add nsw i32 %12, -91
  %16 = icmp ult i32 %15, 6
  %17 = or i1 %14, %16
  br i1 %17, label %9, label %18

; <label>:18:                                     ; preds = %10
  %19 = lshr i32 %1, 16
  %20 = and i32 %19, 255
  %21 = add nsw i32 %20, -65
  %22 = icmp ugt i32 %21, 57
  %23 = add nsw i32 %20, -91
  %24 = icmp ult i32 %23, 6
  %25 = or i1 %22, %24
  br i1 %25, label %9, label %26

; <label>:26:                                     ; preds = %18
  %27 = lshr i32 %1, 24
  %28 = add nsw i32 %27, -65
  %29 = icmp ugt i32 %28, 57
  %30 = add nsw i32 %27, -91
  %31 = icmp ult i32 %30, 6
  %32 = or i1 %29, %31
  br i1 %32, label %9, label %33

; <label>:33:                                     ; preds = %26
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @png_check_chunk_length(%struct.png_struct_def* noalias, i32) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 101
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, -1
  %6 = icmp ult i64 %5, 2147483646
  %7 = select i1 %6, i64 %4, i64 2147483647
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %46 [
    i32 1229209940, label %10
    i32 1717846356, label %10
  ]

; <label>:10:                                     ; preds = %2, %2
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 52
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i64
  %17 = mul nuw nsw i64 %16, %13
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %19 = load i8, i8* %18, align 2
  %20 = icmp ugt i8 %19, 8
  %21 = select i1 %20, i64 2, i64 1
  %22 = mul nuw nsw i64 %17, %21
  %23 = add nuw nsw i64 %22, 1
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %25 = load i8, i8* %24, align 2
  %26 = icmp eq i8 %25, 0
  %27 = select i1 %26, i64 0, i64 6
  %28 = add nuw nsw i64 %23, %27
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = udiv i64 4294967295, %28
  %33 = icmp ult i64 %32, %31
  %34 = mul i64 %28, %31
  %35 = select i1 %33, i64 2147483647, i64 %34
  %36 = icmp ult i64 %28, 32566
  %37 = select i1 %36, i64 %28, i64 32566
  %38 = udiv i64 %35, %37
  %39 = mul i64 %38, 5
  %40 = add i64 %39, 11
  %41 = add i64 %40, %35
  %42 = icmp ult i64 %41, 2147483647
  %43 = select i1 %42, i64 %41, i64 2147483647
  %44 = icmp ult i64 %7, %43
  %45 = select i1 %44, i64 %43, i64 %7
  br label %46

; <label>:46:                                     ; preds = %2, %10
  %47 = phi i64 [ %45, %10 ], [ %7, %2 ]
  %48 = zext i32 %1 to i64
  %49 = icmp ult i64 %47, %48
  br i1 %49, label %50, label %51

; <label>:50:                                     ; preds = %46
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.137, i64 0, i64 0)) #19
  unreachable

; <label>:51:                                     ; preds = %46
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* noalias, i32) local_unnamed_addr #4 {
  %3 = alloca [4 x i8], align 1
  %4 = alloca [1024 x i8], align 16
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %6, label %9

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  br label %55

; <label>:9:                                      ; preds = %2
  %10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  %11 = icmp eq %struct.png_struct_def* %0, null
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  br label %16

; <label>:16:                                     ; preds = %9, %53
  %17 = phi i32 [ %1, %9 ], [ %20, %53 ]
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %10) #18
  %18 = icmp ult i32 %17, 1024
  %19 = select i1 %18, i32 %17, i32 1024
  %20 = sub i32 %17, %19
  br i1 %11, label %53, label %21

; <label>:21:                                     ; preds = %16
  %22 = zext i32 %19 to i64
  %23 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %12, align 8, !alias.scope !220
  %24 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %23, null
  br i1 %24, label %25, label %26

; <label>:25:                                     ; preds = %21
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:26:                                     ; preds = %21
  call void %23(%struct.png_struct_def* nonnull %0, i8* nonnull %10, i64 %22) #18
  %27 = load i32, i32* %13, align 8, !alias.scope !225
  %28 = and i32 %27, 536870912
  %29 = icmp eq i32 %28, 0
  %30 = load i32, i32* %14, align 4, !alias.scope !225
  %31 = and i32 %30, 768
  %32 = icmp ne i32 %31, 768
  %33 = and i32 %30, 2048
  %34 = icmp eq i32 %33, 0
  %35 = select i1 %29, i1 %34, i1 %32
  br i1 %35, label %36, label %53

; <label>:36:                                     ; preds = %26
  %37 = load i32, i32* %15, align 4, !alias.scope !225
  %38 = zext i32 %37 to i64
  br label %39

; <label>:39:                                     ; preds = %39, %36
  %40 = phi i64 [ %22, %36 ], [ %49, %39 ]
  %41 = phi i64 [ %38, %36 ], [ %46, %39 ]
  %42 = phi i8* [ %10, %36 ], [ %48, %39 ]
  %43 = trunc i64 %40 to i32
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %44, i32 -1, i32 %43
  %46 = call i64 @MOZ_Z_crc32(i64 %41, i8* %42, i32 %45) #18, !noalias !228
  %47 = zext i32 %45 to i64
  %48 = getelementptr inbounds i8, i8* %42, i64 %47
  %49 = sub i64 %40, %47
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %39

; <label>:51:                                     ; preds = %39
  %52 = trunc i64 %46 to i32
  store i32 %52, i32* %15, align 4, !alias.scope !225
  br label %53

; <label>:53:                                     ; preds = %16, %26, %51
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %10) #18
  %54 = icmp eq i32 %20, 0
  br i1 %54, label %55, label %16

; <label>:55:                                     ; preds = %53, %6
  %56 = phi void (%struct.png_struct_def*, i8*, i64)** [ %8, %6 ], [ %12, %53 ]
  %57 = phi i32* [ %7, %6 ], [ %14, %53 ]
  %58 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %58) #18, !noalias !229
  %59 = load i32, i32* %57, align 4, !alias.scope !229
  %60 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %56, align 8, !alias.scope !232
  %61 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %60, null
  br i1 %61, label %62, label %63

; <label>:62:                                     ; preds = %55
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:63:                                     ; preds = %55
  %64 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %65 = load i32, i32* %64, align 8, !alias.scope !229
  %66 = and i32 %65, 536870912
  %67 = icmp eq i32 %66, 0
  %68 = and i32 %59, 2048
  %69 = icmp eq i32 %68, 0
  %70 = and i32 %59, 768
  %71 = icmp ne i32 %70, 768
  %72 = select i1 %67, i1 %69, i1 %71
  call void %60(%struct.png_struct_def* nonnull %0, i8* nonnull %58, i64 4) #18
  br i1 %72, label %74, label %73

; <label>:73:                                     ; preds = %63
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #18, !noalias !229
  br label %108

; <label>:74:                                     ; preds = %63
  %75 = load i8, i8* %58, align 1, !noalias !229
  %76 = zext i8 %75 to i32
  %77 = shl nuw i32 %76, 24
  %78 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %79 = load i8, i8* %78, align 1, !noalias !229
  %80 = zext i8 %79 to i32
  %81 = shl nuw nsw i32 %80, 16
  %82 = or i32 %81, %77
  %83 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %84 = load i8, i8* %83, align 1, !noalias !229
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 8
  %87 = or i32 %82, %86
  %88 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %89 = load i8, i8* %88, align 1, !noalias !229
  %90 = zext i8 %89 to i32
  %91 = or i32 %87, %90
  %92 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %93 = load i32, i32* %92, align 4, !alias.scope !229
  %94 = icmp eq i32 %91, %93
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #18, !noalias !229
  br i1 %94, label %108, label %95

; <label>:95:                                     ; preds = %74
  %96 = load i32, i32* %64, align 8
  %97 = and i32 %96, 536870912
  %98 = icmp eq i32 %97, 0
  %99 = load i32, i32* %57, align 4
  br i1 %98, label %103, label %100

; <label>:100:                                    ; preds = %95
  %101 = and i32 %99, 512
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %106, label %107

; <label>:103:                                    ; preds = %95
  %104 = and i32 %99, 1024
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %107, label %106

; <label>:106:                                    ; preds = %103, %100
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i64 0, i64 0))
  br label %108

; <label>:107:                                    ; preds = %103, %100
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i64 0, i64 0)) #19
  unreachable

; <label>:108:                                    ; preds = %73, %74, %106
  %109 = phi i32 [ 1, %106 ], [ 0, %74 ], [ 0, %73 ]
  ret i32 %109
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_ensure_seqno(%struct.png_struct_def*, i32) local_unnamed_addr #4 {
  %3 = alloca [4 x i8], align 1
  %4 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #18
  %5 = icmp ult i32 %1, 4
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.133, i64 0, i64 0)) #19
  unreachable

; <label>:7:                                      ; preds = %2
  %8 = icmp eq %struct.png_struct_def* %0, null
  br i1 %8, label %32, label %9

; <label>:9:                                      ; preds = %7
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %11 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %10, align 8, !alias.scope !235
  %12 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %11, null
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:14:                                     ; preds = %9
  call void %11(%struct.png_struct_def* nonnull %0, i8* nonnull %4, i64 4) #18
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %16 = load i32, i32* %15, align 8, !alias.scope !240
  %17 = and i32 %16, 536870912
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %20 = load i32, i32* %19, align 4, !alias.scope !240
  %21 = and i32 %20, 768
  %22 = icmp ne i32 %21, 768
  %23 = and i32 %20, 2048
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %18, i1 %24, i1 %22
  br i1 %25, label %26, label %32

; <label>:26:                                     ; preds = %14
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %28 = load i32, i32* %27, align 4, !alias.scope !240
  %29 = zext i32 %28 to i64
  %30 = call i64 @MOZ_Z_crc32(i64 %29, i8* nonnull %4, i32 4) #18, !noalias !243
  %31 = trunc i64 %30 to i32
  store i32 %31, i32* %27, align 4, !alias.scope !240
  br label %32

; <label>:32:                                     ; preds = %7, %14, %26
  %33 = load i8, i8* %4, align 1, !noalias !244
  %34 = zext i8 %33 to i32
  %35 = shl nuw i32 %34, 24
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %37 = load i8, i8* %36, align 1, !noalias !244
  %38 = zext i8 %37 to i32
  %39 = shl nuw nsw i32 %38, 16
  %40 = or i32 %39, %35
  %41 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %42 = load i8, i8* %41, align 1, !noalias !244
  %43 = zext i8 %42 to i32
  %44 = shl nuw nsw i32 %43, 8
  %45 = or i32 %40, %44
  %46 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %47 = load i8, i8* %46, align 1, !noalias !244
  %48 = zext i8 %47 to i32
  %49 = or i32 %45, %48
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %52

; <label>:51:                                     ; preds = %32
  call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:52:                                     ; preds = %32
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 88
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %49, %54
  br i1 %55, label %57, label %56

; <label>:56:                                     ; preds = %52
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.134, i64 0, i64 0)) #19
  unreachable

; <label>:57:                                     ; preds = %52
  %58 = add i32 %49, 1
  store i32 %58, i32* %53, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #18
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_APNG_read_reset(%struct.png_struct_def* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, -13
  store i32 %4, i32* %2, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_handle_fcTL(%struct.png_struct_def*, %struct.png_info_def*, i32) local_unnamed_addr #4 {
  %4 = alloca [22 x i8], align 16
  %5 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 22, i8* nonnull %5) #18
  tail call void @MOZ_APNG_ensure_seqno(%struct.png_struct_def* %0, i32 %2)
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %3
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.126, i64 0, i64 0)) #19
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = and i32 %7, 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

; <label>:14:                                     ; preds = %11
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.127, i64 0, i64 0))
  %15 = add i32 %2, -4
  %16 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %15)
  br label %246

; <label>:17:                                     ; preds = %11
  %18 = and i32 %7, 131072
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %17
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.128, i64 0, i64 0))
  %21 = add i32 %2, -4
  %22 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %21)
  br label %246

; <label>:23:                                     ; preds = %17
  %24 = icmp eq i32 %2, 26
  br i1 %24, label %28, label %25

; <label>:25:                                     ; preds = %23
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.129, i64 0, i64 0))
  %26 = add i32 %2, -4
  %27 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %26)
  br label %246

; <label>:28:                                     ; preds = %23
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %30 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %29, align 8, !alias.scope !247
  %31 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %30, null
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %28
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:33:                                     ; preds = %28
  call void %30(%struct.png_struct_def* nonnull %0, i8* nonnull %5, i64 22) #18
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %35 = load i32, i32* %34, align 8, !alias.scope !252
  %36 = and i32 %35, 536870912
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %39 = load i32, i32* %38, align 4, !alias.scope !252
  %40 = and i32 %39, 768
  %41 = icmp ne i32 %40, 768
  %42 = and i32 %39, 2048
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %37, i1 %43, i1 %41
  br i1 %44, label %45, label %51

; <label>:45:                                     ; preds = %33
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %47 = load i32, i32* %46, align 4, !alias.scope !252
  %48 = zext i32 %47 to i64
  %49 = call i64 @MOZ_Z_crc32(i64 %48, i8* nonnull %5, i32 22) #18, !noalias !255
  %50 = trunc i64 %49 to i32
  store i32 %50, i32* %46, align 4, !alias.scope !252
  br label %51

; <label>:51:                                     ; preds = %33, %45
  %52 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 0)
  %53 = load i8, i8* %5, align 16, !noalias !256
  %54 = zext i8 %53 to i32
  %55 = shl nuw i32 %54, 24
  %56 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 1
  %57 = load i8, i8* %56, align 1, !noalias !256
  %58 = zext i8 %57 to i32
  %59 = shl nuw nsw i32 %58, 16
  %60 = or i32 %59, %55
  %61 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 2
  %62 = load i8, i8* %61, align 2, !noalias !256
  %63 = zext i8 %62 to i32
  %64 = shl nuw nsw i32 %63, 8
  %65 = or i32 %60, %64
  %66 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 3
  %67 = load i8, i8* %66, align 1, !noalias !256
  %68 = zext i8 %67 to i32
  %69 = or i32 %65, %68
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %72

; <label>:71:                                     ; preds = %51
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:72:                                     ; preds = %51
  %73 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 4
  %74 = load i8, i8* %73, align 4, !noalias !259
  %75 = zext i8 %74 to i32
  %76 = shl nuw i32 %75, 24
  %77 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 5
  %78 = load i8, i8* %77, align 1, !noalias !259
  %79 = zext i8 %78 to i32
  %80 = shl nuw nsw i32 %79, 16
  %81 = or i32 %80, %76
  %82 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 6
  %83 = load i8, i8* %82, align 2, !noalias !259
  %84 = zext i8 %83 to i32
  %85 = shl nuw nsw i32 %84, 8
  %86 = or i32 %81, %85
  %87 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 7
  %88 = load i8, i8* %87, align 1, !noalias !259
  %89 = zext i8 %88 to i32
  %90 = or i32 %86, %89
  %91 = icmp slt i32 %90, 0
  br i1 %91, label %92, label %93

; <label>:92:                                     ; preds = %72
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:93:                                     ; preds = %72
  %94 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 8
  %95 = load i8, i8* %94, align 8, !noalias !262
  %96 = zext i8 %95 to i32
  %97 = shl nuw i32 %96, 24
  %98 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 9
  %99 = load i8, i8* %98, align 1, !noalias !262
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %100, 16
  %102 = or i32 %101, %97
  %103 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 10
  %104 = load i8, i8* %103, align 2, !noalias !262
  %105 = zext i8 %104 to i32
  %106 = shl nuw nsw i32 %105, 8
  %107 = or i32 %102, %106
  %108 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 11
  %109 = load i8, i8* %108, align 1, !noalias !262
  %110 = zext i8 %109 to i32
  %111 = or i32 %107, %110
  %112 = icmp slt i32 %111, 0
  br i1 %112, label %113, label %114

; <label>:113:                                    ; preds = %93
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:114:                                    ; preds = %93
  %115 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 12
  %116 = load i8, i8* %115, align 4, !noalias !265
  %117 = zext i8 %116 to i32
  %118 = shl nuw i32 %117, 24
  %119 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 13
  %120 = load i8, i8* %119, align 1, !noalias !265
  %121 = zext i8 %120 to i32
  %122 = shl nuw nsw i32 %121, 16
  %123 = or i32 %122, %118
  %124 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 14
  %125 = load i8, i8* %124, align 2, !noalias !265
  %126 = zext i8 %125 to i32
  %127 = shl nuw nsw i32 %126, 8
  %128 = or i32 %123, %127
  %129 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 15
  %130 = load i8, i8* %129, align 1, !noalias !265
  %131 = zext i8 %130 to i32
  %132 = or i32 %128, %131
  %133 = icmp slt i32 %132, 0
  br i1 %133, label %134, label %135

; <label>:134:                                    ; preds = %114
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:135:                                    ; preds = %114
  %136 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 16
  %137 = load i8, i8* %136, align 16
  %138 = zext i8 %137 to i16
  %139 = shl nuw i16 %138, 8
  %140 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 17
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i16
  %143 = or i16 %139, %142
  %144 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 18
  %145 = load i8, i8* %144, align 2
  %146 = zext i8 %145 to i16
  %147 = shl nuw i16 %146, 8
  %148 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 19
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i16
  %151 = or i16 %147, %150
  %152 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 20
  %153 = load i8, i8* %152, align 4
  %154 = getelementptr inbounds [22 x i8], [22 x i8]* %4, i64 0, i64 21
  %155 = load i8, i8* %154, align 1
  %156 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 91
  %157 = load i32, i32* %156, align 8
  %158 = icmp ne i32 %157, 0
  %159 = or i32 %132, %111
  %160 = icmp eq i32 %159, 0
  %161 = or i1 %160, %158
  br i1 %161, label %163, label %162

; <label>:162:                                    ; preds = %135
  call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.130, i64 0, i64 0))
  br label %246

; <label>:163:                                    ; preds = %135
  %164 = icmp eq %struct.png_info_def* %1, null
  br i1 %164, label %246, label %165

; <label>:165:                                    ; preds = %163
  %166 = icmp eq i32 %157, 0
  br i1 %166, label %167, label %176

; <label>:167:                                    ; preds = %165
  %168 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 0
  %169 = load i32, i32* %168, align 8
  %170 = icmp eq i32 %69, %169
  br i1 %170, label %171, label %175

; <label>:171:                                    ; preds = %167
  %172 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 1
  %173 = load i32, i32* %172, align 4
  %174 = icmp eq i32 %90, %173
  br i1 %174, label %176, label %175

; <label>:175:                                    ; preds = %171, %167
  call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.131, i64 0, i64 0))
  br label %246

; <label>:176:                                    ; preds = %165, %171
  call void @MOZ_APNG_ensure_fcTL_is_valid(%struct.png_struct_def* nonnull %0, i32 %69, i32 %90, i32 %111, i32 %132, i16 zeroext undef, i16 zeroext undef, i8 zeroext %153, i8 zeroext %155) #18
  %177 = icmp eq i8 %155, 1
  br i1 %177, label %178, label %193

; <label>:178:                                    ; preds = %176
  %179 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %180 = load i8, i8* %179, align 1
  %181 = and i8 %180, 4
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %183, label %193

; <label>:183:                                    ; preds = %178
  %184 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %185 = load i32, i32* %184, align 8, !alias.scope !268, !noalias !271
  %186 = and i32 %185, 16
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %193

; <label>:188:                                    ; preds = %183
  %189 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %190 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %189, align 8, !alias.scope !273
  %191 = icmp eq void (%struct.png_struct_def*, i8*)* %190, null
  br i1 %191, label %193, label %192

; <label>:192:                                    ; preds = %188
  call void %190(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.167, i64 0, i64 0)) #18
  br label %193

; <label>:193:                                    ; preds = %176, %178, %183, %188, %192
  %194 = phi i8 [ 1, %183 ], [ 1, %178 ], [ %155, %176 ], [ 0, %188 ], [ 0, %192 ]
  %195 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 25
  store i32 %69, i32* %195, align 8
  %196 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 26
  store i32 %90, i32* %196, align 4
  %197 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  store i32 %111, i32* %197, align 8
  %198 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 28
  store i32 %132, i32* %198, align 4
  %199 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 29
  store i16 %143, i16* %199, align 8
  %200 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 30
  store i16 %151, i16* %200, align 2
  %201 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 31
  store i8 %153, i8* %201, align 4
  %202 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 32
  store i8 %194, i8* %202, align 1
  %203 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %204 = load i32, i32* %203, align 8
  %205 = or i32 %204, 262144
  store i32 %205, i32* %203, align 8
  %206 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  store i32 %69, i32* %206, align 4
  %207 = load i32, i32* %196, align 4
  %208 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  store i32 %207, i32* %208, align 8
  %209 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %210 = load i8, i8* %209, align 4
  %211 = icmp ugt i8 %210, 7
  %212 = zext i32 %69 to i64
  %213 = zext i8 %210 to i64
  br i1 %211, label %214, label %217

; <label>:214:                                    ; preds = %193
  %215 = lshr i64 %213, 3
  %216 = mul nuw nsw i64 %215, %212
  br label %221

; <label>:217:                                    ; preds = %193
  %218 = mul nuw nsw i64 %213, %212
  %219 = add nuw nsw i64 %218, 7
  %220 = lshr i64 %219, 3
  br label %221

; <label>:221:                                    ; preds = %217, %214
  %222 = phi i64 [ %216, %214 ], [ %220, %217 ]
  %223 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 13
  %225 = load i8, i8* %224, align 2
  %226 = icmp ugt i8 %225, 7
  %227 = zext i8 %225 to i64
  br i1 %226, label %228, label %231

; <label>:228:                                    ; preds = %221
  %229 = lshr i64 %227, 3
  %230 = mul nuw nsw i64 %229, %212
  br label %235

; <label>:231:                                    ; preds = %221
  %232 = mul nuw nsw i64 %227, %212
  %233 = add nuw nsw i64 %232, 7
  %234 = lshr i64 %233, 3
  br label %235

; <label>:235:                                    ; preds = %231, %228
  %236 = phi i64 [ %230, %228 ], [ %234, %231 ]
  %237 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  store i64 %236, i64* %237, align 8
  %238 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  %239 = load i8*, i8** %238, align 8
  %240 = icmp eq i8* %239, null
  br i1 %240, label %243, label %241

; <label>:241:                                    ; preds = %235
  %242 = add nsw i64 %222, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %239, i8 0, i64 %242, i1 false) #18
  br label %243

; <label>:243:                                    ; preds = %235, %241
  %244 = load i32, i32* %6, align 8
  %245 = or i32 %244, 131072
  store i32 %245, i32* %6, align 8
  br label %246

; <label>:246:                                    ; preds = %243, %163, %175, %162, %25, %20, %14
  call void @llvm.lifetime.end.p0i8(i64 22, i8* nonnull %5) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_read_reinit(%struct.png_struct_def* nocapture, %struct.png_info_def* nocapture readonly) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 25
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 26
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  store i32 %7, i32* %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %10 = load i8, i8* %9, align 4
  %11 = icmp ugt i8 %10, 7
  %12 = zext i32 %4 to i64
  %13 = zext i8 %10 to i64
  br i1 %11, label %14, label %17

; <label>:14:                                     ; preds = %2
  %15 = lshr i64 %13, 3
  %16 = mul nuw nsw i64 %15, %12
  br label %21

; <label>:17:                                     ; preds = %2
  %18 = mul nuw nsw i64 %13, %12
  %19 = add nuw nsw i64 %18, 7
  %20 = lshr i64 %19, 3
  br label %21

; <label>:21:                                     ; preds = %17, %14
  %22 = phi i64 [ %16, %14 ], [ %20, %17 ]
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 13
  %25 = load i8, i8* %24, align 2
  %26 = icmp ugt i8 %25, 7
  %27 = zext i8 %25 to i64
  br i1 %26, label %28, label %31

; <label>:28:                                     ; preds = %21
  %29 = lshr i64 %27, 3
  %30 = mul nuw nsw i64 %29, %12
  br label %35

; <label>:31:                                     ; preds = %21
  %32 = mul nuw nsw i64 %27, %12
  %33 = add nuw nsw i64 %32, 7
  %34 = lshr i64 %33, 3
  br label %35

; <label>:35:                                     ; preds = %31, %28
  %36 = phi i64 [ %30, %28 ], [ %34, %31 ]
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  %39 = load i8*, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %35
  %42 = add nsw i64 %22, 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %39, i8 0, i64 %42, i1 false)
  br label %43

; <label>:43:                                     ; preds = %35, %41
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_prog_read_reset(%struct.png_struct_def*) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %3 = load i8, i8* %2, align 2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %31, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %11 = load i32, i32* %10, align 8
  %12 = add i32 %11, 7
  %13 = lshr i32 %12, 3
  %14 = select i1 %9, i32 %13, i32 %11
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds [7 x i8], [7 x i8]* @MOZ_APNG_prog_read_reset.png_pass_inc, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add i32 %17, %23
  %25 = getelementptr inbounds [7 x i8], [7 x i8]* @MOZ_APNG_prog_read_reset.png_pass_start, i64 0, i64 %20
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = xor i32 %27, -1
  %29 = add i32 %24, %28
  %30 = udiv i32 %29, %23
  br label %37

; <label>:31:                                     ; preds = %1
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %36 = load i32, i32* %35, align 4
  br label %37

; <label>:37:                                     ; preds = %31, %5
  %38 = phi i32 [ %36, %31 ], [ %30, %5 ]
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  store i32 %38, i32* %39, align 8
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, -9
  store i32 %42, i32* %40, align 4
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %44 = tail call i32 @MOZ_Z_inflateReset(%struct.z_stream_s* nonnull %43) #18
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %47, label %46

; <label>:46:                                     ; preds = %37
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.143, i64 0, i64 0)) #19
  unreachable

; <label>:47:                                     ; preds = %37
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 1
  store i32 0, i32* %48, align 8
  %49 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %43, i64 0, i32 0
  store i8* null, i8** %49, align 8
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 3
  %54 = bitcast i8** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %56 = load i8, i8* %55, align 4
  %57 = icmp ugt i8 %56, 7
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  %59 = load i32, i32* %58, align 8
  %60 = zext i32 %59 to i64
  %61 = zext i8 %56 to i64
  br i1 %57, label %62, label %65

; <label>:62:                                     ; preds = %47
  %63 = lshr i64 %61, 3
  %64 = mul nuw nsw i64 %63, %60
  br label %69

; <label>:65:                                     ; preds = %47
  %66 = mul nuw nsw i64 %60, %61
  %67 = add nuw nsw i64 %66, 7
  %68 = lshr i64 %67, 3
  br label %69

; <label>:69:                                     ; preds = %65, %62
  %70 = phi i64 [ %64, %62 ], [ %68, %65 ]
  %71 = trunc i64 %70 to i32
  %72 = add i32 %71, 1
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 4
  store i32 %72, i32* %73, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_have_end(%struct.png_struct_def* noalias, %struct.png_info_def* noalias) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 72
  %4 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %3, align 8
  %5 = icmp eq void (%struct.png_struct_def*, %struct.png_info_def*)* %4, null
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %2
  tail call void %4(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1) #18
  br label %7

; <label>:7:                                      ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_IHDR(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = alloca [13 x i8], align 1
  %5 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 13, i8* nonnull %5) #18
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %3
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #19
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = icmp eq i32 %2, 13
  br i1 %12, label %14, label %13

; <label>:13:                                     ; preds = %11
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #19
  unreachable

; <label>:14:                                     ; preds = %11
  %15 = or i32 %7, 1
  store i32 %15, i32* %6, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %17 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %16, align 8, !alias.scope !276
  %18 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %17, null
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %14
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:20:                                     ; preds = %14
  call void %17(%struct.png_struct_def* nonnull %0, i8* nonnull %5, i64 13) #18
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %22 = load i32, i32* %21, align 8, !alias.scope !281
  %23 = and i32 %22, 536870912
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %26 = load i32, i32* %25, align 4, !alias.scope !281
  %27 = and i32 %26, 768
  %28 = icmp ne i32 %27, 768
  %29 = and i32 %26, 2048
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %24, i1 %30, i1 %28
  br i1 %31, label %32, label %38

; <label>:32:                                     ; preds = %20
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %34 = load i32, i32* %33, align 4, !alias.scope !281
  %35 = zext i32 %34 to i64
  %36 = call i64 @MOZ_Z_crc32(i64 %35, i8* nonnull %5, i32 13) #18, !noalias !284
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %33, align 4, !alias.scope !281
  br label %38

; <label>:38:                                     ; preds = %20, %32
  %39 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 0)
  %40 = load i8, i8* %5, align 1, !noalias !285
  %41 = zext i8 %40 to i32
  %42 = shl nuw i32 %41, 24
  %43 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 1
  %44 = load i8, i8* %43, align 1, !noalias !285
  %45 = zext i8 %44 to i32
  %46 = shl nuw nsw i32 %45, 16
  %47 = or i32 %46, %42
  %48 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 2
  %49 = load i8, i8* %48, align 1, !noalias !285
  %50 = zext i8 %49 to i32
  %51 = shl nuw nsw i32 %50, 8
  %52 = or i32 %47, %51
  %53 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 3
  %54 = load i8, i8* %53, align 1, !noalias !285
  %55 = zext i8 %54 to i32
  %56 = or i32 %52, %55
  %57 = icmp slt i32 %56, 0
  br i1 %57, label %58, label %59

; <label>:58:                                     ; preds = %38
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:59:                                     ; preds = %38
  %60 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 4
  %61 = load i8, i8* %60, align 1, !noalias !288
  %62 = zext i8 %61 to i32
  %63 = shl nuw i32 %62, 24
  %64 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 5
  %65 = load i8, i8* %64, align 1, !noalias !288
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %66, 16
  %68 = or i32 %67, %63
  %69 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 6
  %70 = load i8, i8* %69, align 1, !noalias !288
  %71 = zext i8 %70 to i32
  %72 = shl nuw nsw i32 %71, 8
  %73 = or i32 %68, %72
  %74 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 7
  %75 = load i8, i8* %74, align 1, !noalias !288
  %76 = zext i8 %75 to i32
  %77 = or i32 %73, %76
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %80

; <label>:79:                                     ; preds = %59
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:80:                                     ; preds = %59
  %81 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 8
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 9
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 10
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 11
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = getelementptr inbounds [13 x i8], [13 x i8]* %4, i64 0, i64 12
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89
  store i32 %56, i32* %96, align 8
  %97 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 90
  store i32 %77, i32* %97, align 4
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  store i32 %56, i32* %98, align 4
  %99 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  store i32 %77, i32* %99, align 8
  %100 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  store i8 %82, i8* %100, align 2
  %101 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  store i8 %94, i8* %101, align 2
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  store i8 %85, i8* %102, align 1
  %103 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 97
  store i8 %88, i8* %103, align 8
  %104 = add i8 %85, -2
  %105 = icmp ult i8 %104, 5
  br i1 %105, label %106, label %115

; <label>:106:                                    ; preds = %80
  %107 = zext i8 %104 to i40
  %108 = shl nuw nsw i40 %107, 3
  %109 = lshr i40 17196777731, %108
  %110 = trunc i40 %109 to i8
  %111 = zext i8 %104 to i40
  %112 = shl nuw nsw i40 %111, 3
  %113 = lshr i40 17196777731, %112
  %114 = trunc i40 %113 to i8
  br label %115

; <label>:115:                                    ; preds = %80, %106
  %116 = phi i8 [ %110, %106 ], [ 1, %80 ]
  %117 = phi i8 [ %114, %106 ], [ 1, %80 ]
  %118 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 52
  store i8 %116, i8* %118, align 1
  %119 = mul i8 %117, %82
  %120 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  store i8 %119, i8* %120, align 4
  %121 = icmp ugt i8 %119, 7
  %122 = zext i32 %56 to i64
  %123 = zext i8 %119 to i64
  br i1 %121, label %124, label %127

; <label>:124:                                    ; preds = %115
  %125 = lshr i64 %123, 3
  %126 = mul nuw nsw i64 %125, %122
  br label %131

; <label>:127:                                    ; preds = %115
  %128 = mul nuw nsw i64 %123, %122
  %129 = add nuw nsw i64 %128, 7
  %130 = lshr i64 %129, 3
  br label %131

; <label>:131:                                    ; preds = %127, %124
  %132 = phi i64 [ %126, %124 ], [ %130, %127 ]
  %133 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  store i64 %132, i64* %133, align 8
  %134 = icmp eq %struct.png_info_def* %1, null
  br i1 %134, label %173, label %135

; <label>:135:                                    ; preds = %131
  %136 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 0
  store i32 %56, i32* %136, align 8, !alias.scope !291, !noalias !294
  %137 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 1
  store i32 %77, i32* %137, align 4, !alias.scope !291, !noalias !294
  %138 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  store i8 %82, i8* %138, align 4, !alias.scope !291, !noalias !294
  %139 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  store i8 %85, i8* %139, align 1, !alias.scope !291, !noalias !294
  %140 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 9
  store i8 %88, i8* %140, align 2, !alias.scope !291, !noalias !294
  %141 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 10
  store i8 %91, i8* %141, align 1, !alias.scope !291, !noalias !294
  %142 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 11
  store i8 %94, i8* %142, align 8, !alias.scope !291, !noalias !294
  call void @MOZ_PNG_ck_IHDR(%struct.png_struct_def* nonnull %0, i32 %56, i32 %77, i32 %83, i32 %86, i32 %95, i32 %89, i32 %92) #18
  %143 = load i8, i8* %139, align 1, !alias.scope !291, !noalias !294
  %144 = icmp eq i8 %143, 3
  br i1 %144, label %145, label %147

; <label>:145:                                    ; preds = %135
  %146 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  store i8 1, i8* %146, align 1, !alias.scope !291, !noalias !294
  br label %155

; <label>:147:                                    ; preds = %135
  %148 = and i8 %143, 2
  %149 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  %150 = or i8 %148, 1
  store i8 %150, i8* %149, align 1, !alias.scope !291, !noalias !294
  %151 = and i8 %143, 4
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %155, label %153

; <label>:153:                                    ; preds = %147
  %154 = add nuw nsw i8 %150, 1
  store i8 %154, i8* %149, align 1, !alias.scope !291, !noalias !294
  br label %155

; <label>:155:                                    ; preds = %153, %147, %145
  %156 = phi i8 [ 1, %145 ], [ %150, %147 ], [ %154, %153 ]
  %157 = load i8, i8* %138, align 4, !alias.scope !291, !noalias !294
  %158 = mul i8 %157, %156
  %159 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 13
  store i8 %158, i8* %159, align 2, !alias.scope !291, !noalias !294
  %160 = icmp ugt i8 %158, 7
  %161 = zext i8 %158 to i64
  br i1 %160, label %162, label %165

; <label>:162:                                    ; preds = %155
  %163 = lshr i64 %161, 3
  %164 = mul nuw nsw i64 %163, %122
  br label %169

; <label>:165:                                    ; preds = %155
  %166 = mul nuw nsw i64 %161, %122
  %167 = add nuw nsw i64 %166, 7
  %168 = lshr i64 %167, 3
  br label %169

; <label>:169:                                    ; preds = %165, %162
  %170 = phi i64 [ %164, %162 ], [ %168, %165 ]
  %171 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 3
  store i64 %170, i64* %171, align 8, !alias.scope !291, !noalias !294
  %172 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  store i32 1, i32* %172, align 8, !alias.scope !291, !noalias !294
  br label %173

; <label>:173:                                    ; preds = %131, %169
  call void @llvm.lifetime.end.p0i8(i64 13, i8* nonnull %5) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_IEND(%struct.png_struct_def* noalias, %struct.png_info_def* noalias nocapture readnone, i32) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 5
  %7 = icmp eq i32 %6, 5
  br i1 %7, label %9, label %8

; <label>:8:                                      ; preds = %3
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #19
  unreachable

; <label>:9:                                      ; preds = %3
  %10 = or i32 %5, 24
  store i32 %10, i32* %4, align 8
  %11 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %12 = icmp eq i32 %2, 0
  br i1 %12, label %20, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %15 = load i32, i32* %14, align 4, !alias.scope !296
  %16 = and i32 %15, 1048576
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %13
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:19:                                     ; preds = %13
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  br label %20

; <label>:20:                                     ; preds = %9, %19
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_PLTE(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = alloca [4 x i8], align 1
  %5 = alloca [256 x %struct.png_color_struct], align 16
  %6 = alloca [3 x i8], align 1
  %7 = getelementptr inbounds [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %5, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %7) #18
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %3
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111, i64 0, i64 0)) #19
  unreachable

; <label>:13:                                     ; preds = %3
  %14 = and i32 %9, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %13
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0)) #19
  unreachable

; <label>:17:                                     ; preds = %13
  %18 = and i32 %9, 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %28, label %20

; <label>:20:                                     ; preds = %17
  %21 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %23 = load i32, i32* %22, align 4, !alias.scope !299
  %24 = and i32 %23, 1048576
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %20
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #22
  unreachable

; <label>:27:                                     ; preds = %20
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #18
  br label %194

; <label>:28:                                     ; preds = %17
  %29 = or i32 %9, 2
  store i32 %29, i32* %8, align 8
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %31 = load i8, i8* %30, align 1
  %32 = and i8 %31, 2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %42

; <label>:34:                                     ; preds = %28
  %35 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %37 = load i32, i32* %36, align 4, !alias.scope !302
  %38 = and i32 %37, 1048576
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %34
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.112, i64 0, i64 0)) #22
  unreachable

; <label>:41:                                     ; preds = %34
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.112, i64 0, i64 0)) #18
  br label %194

; <label>:42:                                     ; preds = %28
  %43 = icmp eq i8 %31, 3
  br i1 %43, label %46, label %44

; <label>:44:                                     ; preds = %42
  %45 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  br label %194

; <label>:46:                                     ; preds = %42
  %47 = icmp ult i32 %2, 769
  %48 = urem i32 %2, 3
  %49 = icmp eq i32 %48, 0
  %50 = and i1 %47, %49
  br i1 %50, label %63, label %51

; <label>:51:                                     ; preds = %46
  %52 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %53 = load i8, i8* %30, align 1
  %54 = icmp eq i8 %53, 3
  br i1 %54, label %62, label %55

; <label>:55:                                     ; preds = %51
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %57 = load i32, i32* %56, align 4, !alias.scope !305
  %58 = and i32 %57, 1048576
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

; <label>:60:                                     ; preds = %55
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:61:                                     ; preds = %55
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  br label %194

; <label>:62:                                     ; preds = %51
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #19
  unreachable

; <label>:63:                                     ; preds = %46
  %64 = trunc i32 %2 to i16
  %65 = udiv i16 %64, 3
  %66 = zext i16 %65 to i32
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %68 = load i8, i8* %67, align 2
  %69 = zext i8 %68 to i32
  %70 = shl i32 1, %69
  %71 = icmp slt i32 %70, %66
  %72 = select i1 %71, i32 %70, i32 %66
  %73 = getelementptr inbounds [256 x %struct.png_color_struct], [256 x %struct.png_color_struct]* %5, i64 0, i64 0
  %74 = icmp sgt i32 %72, 0
  br i1 %74, label %75, label %117

; <label>:75:                                     ; preds = %63
  %76 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 0
  %77 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 1
  %78 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 2
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  br label %83

; <label>:83:                                     ; preds = %75, %104
  %84 = phi %struct.png_color_struct* [ %73, %75 ], [ %112, %104 ]
  %85 = phi i32 [ 0, %75 ], [ %111, %104 ]
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %76) #18
  %86 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %79, align 8, !alias.scope !308
  %87 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %86, null
  br i1 %87, label %88, label %89

; <label>:88:                                     ; preds = %83
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:89:                                     ; preds = %83
  call void %86(%struct.png_struct_def* nonnull %0, i8* nonnull %76, i64 3) #18
  %90 = load i32, i32* %80, align 8, !alias.scope !313
  %91 = and i32 %90, 536870912
  %92 = icmp eq i32 %91, 0
  %93 = load i32, i32* %81, align 4, !alias.scope !313
  %94 = and i32 %93, 768
  %95 = icmp ne i32 %94, 768
  %96 = and i32 %93, 2048
  %97 = icmp eq i32 %96, 0
  %98 = select i1 %92, i1 %97, i1 %95
  br i1 %98, label %99, label %104

; <label>:99:                                     ; preds = %89
  %100 = load i32, i32* %82, align 4, !alias.scope !313
  %101 = zext i32 %100 to i64
  %102 = call i64 @MOZ_Z_crc32(i64 %101, i8* nonnull %76, i32 3) #18, !noalias !316
  %103 = trunc i64 %102 to i32
  store i32 %103, i32* %82, align 4, !alias.scope !313
  br label %104

; <label>:104:                                    ; preds = %89, %99
  %105 = load i8, i8* %76, align 1
  %106 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %84, i64 0, i32 0
  store i8 %105, i8* %106, align 1
  %107 = load i8, i8* %77, align 1
  %108 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %84, i64 0, i32 1
  store i8 %107, i8* %108, align 1
  %109 = load i8, i8* %78, align 1
  %110 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %84, i64 0, i32 2
  store i8 %109, i8* %110, align 1
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %76) #18
  %111 = add nuw nsw i32 %85, 1
  %112 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %84, i64 1
  %113 = icmp slt i32 %111, %72
  br i1 %113, label %83, label %114

; <label>:114:                                    ; preds = %104
  %115 = load i8, i8* %30, align 1
  %116 = icmp eq i8 %115, 3
  br i1 %116, label %117, label %121

; <label>:117:                                    ; preds = %63, %114
  %118 = mul i32 %72, -3
  %119 = add i32 %118, %2
  %120 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %119)
  br label %171

; <label>:121:                                    ; preds = %114
  %122 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %122) #18, !noalias !317
  %123 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %124 = load i32, i32* %123, align 4, !alias.scope !317
  %125 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %126 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %125, align 8, !alias.scope !320
  %127 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %126, null
  br i1 %127, label %128, label %129

; <label>:128:                                    ; preds = %121
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:129:                                    ; preds = %121
  %130 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %131 = load i32, i32* %130, align 8, !alias.scope !317
  %132 = and i32 %131, 536870912
  %133 = icmp eq i32 %132, 0
  %134 = and i32 %124, 2048
  %135 = icmp eq i32 %134, 0
  %136 = and i32 %124, 768
  %137 = icmp ne i32 %136, 768
  %138 = select i1 %133, i1 %135, i1 %137
  call void %126(%struct.png_struct_def* nonnull %0, i8* nonnull %122, i64 4) #18
  br i1 %138, label %140, label %139

; <label>:139:                                    ; preds = %129
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %122) #18, !noalias !317
  br label %171

; <label>:140:                                    ; preds = %129
  %141 = load i8, i8* %122, align 1, !noalias !317
  %142 = zext i8 %141 to i32
  %143 = shl nuw i32 %142, 24
  %144 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %145 = load i8, i8* %144, align 1, !noalias !317
  %146 = zext i8 %145 to i32
  %147 = shl nuw nsw i32 %146, 16
  %148 = or i32 %147, %143
  %149 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %150 = load i8, i8* %149, align 1, !noalias !317
  %151 = zext i8 %150 to i32
  %152 = shl nuw nsw i32 %151, 8
  %153 = or i32 %148, %152
  %154 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %155 = load i8, i8* %154, align 1, !noalias !317
  %156 = zext i8 %155 to i32
  %157 = or i32 %153, %156
  %158 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %159 = load i32, i32* %158, align 4, !alias.scope !317
  %160 = icmp eq i32 %157, %159
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %122) #18, !noalias !317
  br i1 %160, label %171, label %161

; <label>:161:                                    ; preds = %140
  %162 = load i32, i32* %123, align 4
  %163 = and i32 %162, 256
  %164 = icmp eq i32 %163, 0
  %165 = and i32 %162, 512
  %166 = icmp eq i32 %165, 0
  br i1 %164, label %167, label %169

; <label>:167:                                    ; preds = %161
  br i1 %166, label %168, label %194

; <label>:168:                                    ; preds = %167
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i64 0, i64 0)) #19
  unreachable

; <label>:169:                                    ; preds = %161
  br i1 %166, label %170, label %171

; <label>:170:                                    ; preds = %169
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i64 0, i64 0))
  br label %171

; <label>:171:                                    ; preds = %139, %140, %169, %170, %117
  call void @MOZ_PNG_set_PLTE(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, %struct.png_color_struct* nonnull %73, i32 %72)
  %172 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %173 = load i16, i16* %172, align 2
  %174 = icmp eq i16 %173, 0
  br i1 %174, label %175, label %183

; <label>:175:                                    ; preds = %171
  %176 = icmp eq %struct.png_info_def* %1, null
  br i1 %176, label %194, label %177

; <label>:177:                                    ; preds = %175
  %178 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %179 = load i32, i32* %178, align 8
  %180 = and i32 %179, 16
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %194, label %182

; <label>:182:                                    ; preds = %177
  store i16 0, i16* %172, align 2
  br label %185

; <label>:183:                                    ; preds = %171
  store i16 0, i16* %172, align 2
  %184 = icmp eq %struct.png_info_def* %1, null
  br i1 %184, label %187, label %185

; <label>:185:                                    ; preds = %182, %183
  %186 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 0, i16* %186, align 2
  br label %187

; <label>:187:                                    ; preds = %183, %185
  %188 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %189 = load i32, i32* %188, align 4, !alias.scope !323
  %190 = and i32 %189, 1048576
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %193

; <label>:192:                                    ; preds = %187
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.113, i64 0, i64 0)) #22
  unreachable

; <label>:193:                                    ; preds = %187
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.113, i64 0, i64 0)) #18
  br label %194

; <label>:194:                                    ; preds = %193, %175, %177, %167, %61, %44, %41, %27
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %7) #18
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_APNG_have_info(%struct.png_struct_def* nocapture, %struct.png_info_def* nocapture) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 393216
  %6 = icmp eq i32 %5, 131072
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %9 = load i32, i32* %8, align 8
  %10 = or i32 %9, 1
  store i32 %10, i32* %8, align 8
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, 1
  store i32 %13, i32* %11, align 8
  br label %14

; <label>:14:                                     ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_have_info(%struct.png_struct_def* noalias, %struct.png_info_def* noalias) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 70
  %4 = load void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, %struct.png_info_def*)** %3, align 8
  %5 = icmp eq void (%struct.png_struct_def*, %struct.png_info_def*)* %4, null
  br i1 %5, label %7, label %6

; <label>:6:                                      ; preds = %2
  tail call void %4(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1) #18
  br label %7

; <label>:7:                                      ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_gAMA(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = alloca [4 x i8], align 1
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #18
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %3
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111, i64 0, i64 0)) #19
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = and i32 %7, 6
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %22, label %14

; <label>:14:                                     ; preds = %11
  %15 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %17 = load i32, i32* %16, align 4, !alias.scope !326
  %18 = and i32 %17, 1048576
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %14
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #22
  unreachable

; <label>:21:                                     ; preds = %14
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #18
  br label %84

; <label>:22:                                     ; preds = %11
  %23 = icmp eq i32 %2, 4
  br i1 %23, label %32, label %24

; <label>:24:                                     ; preds = %22
  %25 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %27 = load i32, i32* %26, align 4, !alias.scope !329
  %28 = and i32 %27, 1048576
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %24
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:31:                                     ; preds = %24
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  br label %84

; <label>:32:                                     ; preds = %22
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %34 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %33, align 8, !alias.scope !332
  %35 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %34, null
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %32
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:37:                                     ; preds = %32
  call void %34(%struct.png_struct_def* nonnull %0, i8* nonnull %5, i64 4) #18
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %39 = load i32, i32* %38, align 8, !alias.scope !337
  %40 = and i32 %39, 536870912
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %43 = load i32, i32* %42, align 4, !alias.scope !337
  %44 = and i32 %43, 768
  %45 = icmp ne i32 %44, 768
  %46 = and i32 %43, 2048
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %41, i1 %47, i1 %45
  br i1 %48, label %49, label %55

; <label>:49:                                     ; preds = %37
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %51 = load i32, i32* %50, align 4, !alias.scope !337
  %52 = zext i32 %51 to i64
  %53 = call i64 @MOZ_Z_crc32(i64 %52, i8* nonnull %5, i32 4) #18, !noalias !340
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %50, align 4, !alias.scope !337
  br label %55

; <label>:55:                                     ; preds = %37, %49
  %56 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 0)
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %84

; <label>:58:                                     ; preds = %55
  %59 = load i8, i8* %5, align 1
  %60 = zext i8 %59 to i32
  %61 = shl nuw i32 %60, 24
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = shl nuw nsw i32 %64, 16
  %66 = or i32 %65, %61
  %67 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = shl nuw nsw i32 %69, 8
  %71 = or i32 %66, %70
  %72 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = or i32 %71, %74
  %76 = icmp sgt i32 %75, -1
  %77 = select i1 %76, i32 %75, i32 -1
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107
  call void @MOZ_PNG_cs_set_gamma(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %78, i32 %77)
  %79 = icmp eq %struct.png_info_def* %1, null
  br i1 %79, label %84, label %80

; <label>:80:                                     ; preds = %58
  %81 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %82 = bitcast %struct.png_colorspace* %81 to i8*
  %83 = bitcast %struct.png_colorspace* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %82, i8* nonnull align 8 %83, i64 76, i1 false) #18, !alias.scope !341
  call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  br label %84

; <label>:84:                                     ; preds = %80, %58, %55, %31, %21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_cHRM(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = alloca [32 x i8], align 16
  %5 = alloca %struct.png_xy, align 4
  %6 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #18
  %7 = bitcast %struct.png_xy* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #18
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %3
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111, i64 0, i64 0)) #19
  unreachable

; <label>:13:                                     ; preds = %3
  %14 = and i32 %9, 6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %24, label %16

; <label>:16:                                     ; preds = %13
  %17 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %19 = load i32, i32* %18, align 4, !alias.scope !345
  %20 = and i32 %19, 1048576
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %16
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #22
  unreachable

; <label>:23:                                     ; preds = %16
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #18
  br label %271

; <label>:24:                                     ; preds = %13
  %25 = icmp eq i32 %2, 32
  br i1 %25, label %34, label %26

; <label>:26:                                     ; preds = %24
  %27 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %29 = load i32, i32* %28, align 4, !alias.scope !348
  %30 = and i32 %29, 1048576
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %26
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:33:                                     ; preds = %26
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  br label %271

; <label>:34:                                     ; preds = %24
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %36 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %35, align 8, !alias.scope !351
  %37 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %36, null
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %34
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:39:                                     ; preds = %34
  call void %36(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 32) #18
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %41 = load i32, i32* %40, align 8, !alias.scope !356
  %42 = and i32 %41, 536870912
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %45 = load i32, i32* %44, align 4, !alias.scope !356
  %46 = and i32 %45, 768
  %47 = icmp ne i32 %46, 768
  %48 = and i32 %45, 2048
  %49 = icmp eq i32 %48, 0
  %50 = select i1 %43, i1 %49, i1 %47
  br i1 %50, label %51, label %57

; <label>:51:                                     ; preds = %39
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %53 = load i32, i32* %52, align 4, !alias.scope !356
  %54 = zext i32 %53 to i64
  %55 = call i64 @MOZ_Z_crc32(i64 %54, i8* nonnull %6, i32 32) #18, !noalias !359
  %56 = trunc i64 %55 to i32
  store i32 %56, i32* %52, align 4, !alias.scope !356
  br label %57

; <label>:57:                                     ; preds = %39, %51
  %58 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 0)
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %271

; <label>:60:                                     ; preds = %57
  %61 = load i8, i8* %6, align 16
  %62 = zext i8 %61 to i32
  %63 = shl nuw i32 %62, 24
  %64 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 1
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %66, 16
  %68 = or i32 %67, %63
  %69 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 2
  %70 = load i8, i8* %69, align 2
  %71 = zext i8 %70 to i32
  %72 = shl nuw nsw i32 %71, 8
  %73 = or i32 %68, %72
  %74 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = or i32 %73, %76
  %78 = icmp sgt i32 %77, -1
  %79 = select i1 %78, i32 %77, i32 -1
  %80 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 6
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 4
  %82 = load i8, i8* %81, align 4
  %83 = zext i8 %82 to i32
  %84 = shl nuw i32 %83, 24
  %85 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 5
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = shl nuw nsw i32 %87, 16
  %89 = or i32 %88, %84
  %90 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 6
  %91 = load i8, i8* %90, align 2
  %92 = zext i8 %91 to i32
  %93 = shl nuw nsw i32 %92, 8
  %94 = or i32 %89, %93
  %95 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 7
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = or i32 %94, %97
  %99 = icmp sgt i32 %98, -1
  %100 = select i1 %99, i32 %98, i32 -1
  %101 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 7
  store i32 %100, i32* %101, align 4
  %102 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 8
  %103 = load i8, i8* %102, align 8
  %104 = zext i8 %103 to i32
  %105 = shl nuw i32 %104, 24
  %106 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 9
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = shl nuw nsw i32 %108, 16
  %110 = or i32 %109, %105
  %111 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 10
  %112 = load i8, i8* %111, align 2
  %113 = zext i8 %112 to i32
  %114 = shl nuw nsw i32 %113, 8
  %115 = or i32 %110, %114
  %116 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 11
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = or i32 %115, %118
  %120 = icmp sgt i32 %119, -1
  %121 = select i1 %120, i32 %119, i32 -1
  %122 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 0
  store i32 %121, i32* %122, align 4
  %123 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 12
  %124 = load i8, i8* %123, align 4
  %125 = zext i8 %124 to i32
  %126 = shl nuw i32 %125, 24
  %127 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 13
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = shl nuw nsw i32 %129, 16
  %131 = or i32 %130, %126
  %132 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 14
  %133 = load i8, i8* %132, align 2
  %134 = zext i8 %133 to i32
  %135 = shl nuw nsw i32 %134, 8
  %136 = or i32 %131, %135
  %137 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 15
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = or i32 %136, %139
  %141 = icmp sgt i32 %140, -1
  %142 = select i1 %141, i32 %140, i32 -1
  %143 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 1
  store i32 %142, i32* %143, align 4
  %144 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 16
  %145 = load i8, i8* %144, align 16
  %146 = zext i8 %145 to i32
  %147 = shl nuw i32 %146, 24
  %148 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 17
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = shl nuw nsw i32 %150, 16
  %152 = or i32 %151, %147
  %153 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 18
  %154 = load i8, i8* %153, align 2
  %155 = zext i8 %154 to i32
  %156 = shl nuw nsw i32 %155, 8
  %157 = or i32 %152, %156
  %158 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 19
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = or i32 %157, %160
  %162 = icmp sgt i32 %161, -1
  %163 = select i1 %162, i32 %161, i32 -1
  %164 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 2
  store i32 %163, i32* %164, align 4
  %165 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 20
  %166 = load i8, i8* %165, align 4
  %167 = zext i8 %166 to i32
  %168 = shl nuw i32 %167, 24
  %169 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 21
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = shl nuw nsw i32 %171, 16
  %173 = or i32 %172, %168
  %174 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 22
  %175 = load i8, i8* %174, align 2
  %176 = zext i8 %175 to i32
  %177 = shl nuw nsw i32 %176, 8
  %178 = or i32 %173, %177
  %179 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 23
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = or i32 %178, %181
  %183 = icmp sgt i32 %182, -1
  %184 = select i1 %183, i32 %182, i32 -1
  %185 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 3
  store i32 %184, i32* %185, align 4
  %186 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 24
  %187 = load i8, i8* %186, align 8
  %188 = zext i8 %187 to i32
  %189 = shl nuw i32 %188, 24
  %190 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 25
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = shl nuw nsw i32 %192, 16
  %194 = or i32 %193, %189
  %195 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 26
  %196 = load i8, i8* %195, align 2
  %197 = zext i8 %196 to i32
  %198 = shl nuw nsw i32 %197, 8
  %199 = or i32 %194, %198
  %200 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 27
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = or i32 %199, %202
  %204 = icmp sgt i32 %203, -1
  %205 = select i1 %204, i32 %203, i32 -1
  %206 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 4
  store i32 %205, i32* %206, align 4
  %207 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 28
  %208 = load i8, i8* %207, align 4
  %209 = zext i8 %208 to i32
  %210 = shl nuw i32 %209, 24
  %211 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 29
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = shl nuw nsw i32 %213, 16
  %215 = or i32 %214, %210
  %216 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 30
  %217 = load i8, i8* %216, align 2
  %218 = zext i8 %217 to i32
  %219 = shl nuw nsw i32 %218, 8
  %220 = or i32 %215, %219
  %221 = getelementptr inbounds [32 x i8], [32 x i8]* %4, i64 0, i64 31
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = or i32 %220, %223
  %225 = icmp sgt i32 %224, -1
  %226 = select i1 %225, i32 %224, i32 -1
  %227 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %5, i64 0, i32 5
  store i32 %226, i32* %227, align 4
  %228 = or i32 %84, %63
  %229 = or i32 %228, %105
  %230 = or i32 %229, %126
  %231 = or i32 %230, %147
  %232 = or i32 %231, %168
  %233 = or i32 %232, %189
  %234 = or i32 %233, %210
  %235 = icmp slt i32 %234, 0
  br i1 %235, label %236, label %242

; <label>:236:                                    ; preds = %60
  %237 = load i32, i32* %44, align 4, !alias.scope !360
  %238 = and i32 %237, 1048576
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %241

; <label>:240:                                    ; preds = %236
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.114, i64 0, i64 0)) #22
  unreachable

; <label>:241:                                    ; preds = %236
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.114, i64 0, i64 0)) #18
  br label %271

; <label>:242:                                    ; preds = %60
  %243 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107
  %244 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 4
  %245 = load i16, i16* %244, align 2
  %246 = icmp slt i16 %245, 0
  br i1 %246, label %271, label %247

; <label>:247:                                    ; preds = %242
  %248 = and i16 %245, 16
  %249 = icmp eq i16 %248, 0
  br i1 %249, label %263, label %250

; <label>:250:                                    ; preds = %247
  %251 = or i16 %245, -32768
  store i16 %251, i16* %244, align 2
  %252 = icmp eq %struct.png_info_def* %1, null
  br i1 %252, label %257, label %253

; <label>:253:                                    ; preds = %250
  %254 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %255 = bitcast %struct.png_colorspace* %254 to i8*
  %256 = bitcast %struct.png_colorspace* %243 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %255, i8* nonnull align 8 %256, i64 76, i1 false) #18, !alias.scope !363
  call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  br label %257

; <label>:257:                                    ; preds = %250, %253
  %258 = load i32, i32* %44, align 4, !alias.scope !367
  %259 = and i32 %258, 1048576
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %262

; <label>:261:                                    ; preds = %257
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0)) #22
  unreachable

; <label>:262:                                    ; preds = %257
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0)) #18
  br label %271

; <label>:263:                                    ; preds = %247
  %264 = or i16 %245, 16
  store i16 %264, i16* %244, align 2
  %265 = call i32 @MOZ_PNG_cs_set_chromats(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %243, %struct.png_xy* nonnull %5, i32 1)
  %266 = icmp eq %struct.png_info_def* %1, null
  br i1 %266, label %271, label %267

; <label>:267:                                    ; preds = %263
  %268 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %269 = bitcast %struct.png_colorspace* %268 to i8*
  %270 = bitcast %struct.png_colorspace* %243 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %269, i8* nonnull align 8 %270, i64 76, i1 false) #18, !alias.scope !370
  call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  br label %271

; <label>:271:                                    ; preds = %267, %263, %242, %57, %262, %241, %33, %23
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_sRGB(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #18
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %3
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111, i64 0, i64 0)) #19
  unreachable

; <label>:10:                                     ; preds = %3
  %11 = and i32 %6, 6
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %21, label %13

; <label>:13:                                     ; preds = %10
  %14 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %16 = load i32, i32* %15, align 4, !alias.scope !374
  %17 = and i32 %16, 1048576
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %13
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #22
  unreachable

; <label>:20:                                     ; preds = %13
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #18
  br label %87

; <label>:21:                                     ; preds = %10
  %22 = icmp eq i32 %2, 1
  br i1 %22, label %31, label %23

; <label>:23:                                     ; preds = %21
  %24 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %26 = load i32, i32* %25, align 4, !alias.scope !377
  %27 = and i32 %26, 1048576
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %23
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:30:                                     ; preds = %23
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  br label %87

; <label>:31:                                     ; preds = %21
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %33 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %32, align 8, !alias.scope !380
  %34 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %33, null
  br i1 %34, label %35, label %36

; <label>:35:                                     ; preds = %31
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:36:                                     ; preds = %31
  call void %33(%struct.png_struct_def* nonnull %0, i8* nonnull %4, i64 1) #18
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %38 = load i32, i32* %37, align 8, !alias.scope !385
  %39 = and i32 %38, 536870912
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %42 = load i32, i32* %41, align 4, !alias.scope !385
  %43 = and i32 %42, 768
  %44 = icmp ne i32 %43, 768
  %45 = and i32 %42, 2048
  %46 = icmp eq i32 %45, 0
  %47 = select i1 %40, i1 %46, i1 %44
  br i1 %47, label %48, label %54

; <label>:48:                                     ; preds = %36
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %50 = load i32, i32* %49, align 4, !alias.scope !385
  %51 = zext i32 %50 to i64
  %52 = call i64 @MOZ_Z_crc32(i64 %51, i8* nonnull %4, i32 1) #18, !noalias !388
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %49, align 4, !alias.scope !385
  br label %54

; <label>:54:                                     ; preds = %36, %48
  %55 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 0)
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %87

; <label>:57:                                     ; preds = %54
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 4
  %60 = load i16, i16* %59, align 2
  %61 = icmp slt i16 %60, 0
  br i1 %61, label %87, label %62

; <label>:62:                                     ; preds = %57
  %63 = and i16 %60, 4
  %64 = icmp eq i16 %63, 0
  br i1 %64, label %78, label %65

; <label>:65:                                     ; preds = %62
  %66 = or i16 %60, -32768
  store i16 %66, i16* %59, align 2
  %67 = icmp eq %struct.png_info_def* %1, null
  br i1 %67, label %72, label %68

; <label>:68:                                     ; preds = %65
  %69 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %70 = bitcast %struct.png_colorspace* %69 to i8*
  %71 = bitcast %struct.png_colorspace* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %70, i8* nonnull align 8 %71, i64 76, i1 false) #18, !alias.scope !389
  call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  br label %72

; <label>:72:                                     ; preds = %65, %68
  %73 = load i32, i32* %41, align 4, !alias.scope !393
  %74 = and i32 %73, 1048576
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

; <label>:76:                                     ; preds = %72
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.115, i64 0, i64 0)) #22
  unreachable

; <label>:77:                                     ; preds = %72
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.115, i64 0, i64 0)) #18
  br label %87

; <label>:78:                                     ; preds = %62
  %79 = load i8, i8* %4, align 1
  %80 = zext i8 %79 to i32
  %81 = call i32 @MOZ_PNG_cs_set_sRGB(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %58, i32 %80)
  %82 = icmp eq %struct.png_info_def* %1, null
  br i1 %82, label %87, label %83

; <label>:83:                                     ; preds = %78
  %84 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %85 = bitcast %struct.png_colorspace* %84 to i8*
  %86 = bitcast %struct.png_colorspace* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %85, i8* nonnull align 8 %86, i64 76, i1 false) #18, !alias.scope !396
  call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  br label %87

; <label>:87:                                     ; preds = %83, %78, %57, %54, %77, %30, %20
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_iCCP(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = alloca i32, align 4
  %5 = alloca [81 x i8], align 16
  %6 = alloca [132 x i8], align 16
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i64, align 8
  store i32 %2, i32* %4, align 4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %3
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111, i64 0, i64 0)) #19
  unreachable

; <label>:14:                                     ; preds = %3
  %15 = and i32 %10, 6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %25, label %17

; <label>:17:                                     ; preds = %14
  %18 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %20 = load i32, i32* %19, align 4, !alias.scope !400
  %21 = and i32 %20, 1048576
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %17
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #22
  unreachable

; <label>:24:                                     ; preds = %17
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #18
  br label %318

; <label>:25:                                     ; preds = %14
  %26 = icmp ult i32 %2, 14
  br i1 %26, label %27, label %35

; <label>:27:                                     ; preds = %25
  %28 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %30 = load i32, i32* %29, align 4, !alias.scope !403
  %31 = and i32 %30, 1048576
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %27
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i64 0, i64 0)) #22
  unreachable

; <label>:34:                                     ; preds = %27
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i64 0, i64 0)) #18
  br label %318

; <label>:35:                                     ; preds = %25
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 4
  %38 = load i16, i16* %37, align 2
  %39 = icmp slt i16 %38, 0
  br i1 %39, label %40, label %42

; <label>:40:                                     ; preds = %35
  %41 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  br label %318

; <label>:42:                                     ; preds = %35
  %43 = and i16 %38, 4
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %45, label %296

; <label>:45:                                     ; preds = %42
  %46 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 81, i8* nonnull %46) #18
  %47 = icmp ult i32 %2, 81
  %48 = select i1 %47, i32 %2, i32 81
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %51 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %50, align 8, !alias.scope !406
  %52 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %51, null
  br i1 %52, label %53, label %54

; <label>:53:                                     ; preds = %45
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:54:                                     ; preds = %45
  call void %51(%struct.png_struct_def* nonnull %0, i8* nonnull %46, i64 %49) #18
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %56 = load i32, i32* %55, align 8, !alias.scope !411
  %57 = and i32 %56, 536870912
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %60 = load i32, i32* %59, align 4, !alias.scope !411
  %61 = and i32 %60, 768
  %62 = icmp ne i32 %61, 768
  %63 = and i32 %60, 2048
  %64 = icmp eq i32 %63, 0
  %65 = select i1 %58, i1 %64, i1 %62
  br i1 %65, label %66, label %84

; <label>:66:                                     ; preds = %54
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %68 = load i32, i32* %67, align 4, !alias.scope !411
  %69 = zext i32 %68 to i64
  br label %70

; <label>:70:                                     ; preds = %70, %66
  %71 = phi i64 [ %49, %66 ], [ %80, %70 ]
  %72 = phi i64 [ %69, %66 ], [ %77, %70 ]
  %73 = phi i8* [ %46, %66 ], [ %79, %70 ]
  %74 = trunc i64 %71 to i32
  %75 = icmp eq i32 %74, 0
  %76 = select i1 %75, i32 -1, i32 %74
  %77 = call i64 @MOZ_Z_crc32(i64 %72, i8* %73, i32 %76) #18, !noalias !414
  %78 = zext i32 %76 to i64
  %79 = getelementptr inbounds i8, i8* %73, i64 %78
  %80 = sub i64 %71, %78
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %70

; <label>:82:                                     ; preds = %70
  %83 = trunc i64 %77 to i32
  store i32 %83, i32* %67, align 4, !alias.scope !411
  br label %84

; <label>:84:                                     ; preds = %54, %82
  %85 = sub i32 %2, %48
  store i32 %85, i32* %4, align 4
  %86 = icmp ult i32 %85, 11
  br i1 %86, label %89, label %87

; <label>:87:                                     ; preds = %84
  %88 = icmp eq i32 %48, 0
  br i1 %88, label %288, label %96

; <label>:89:                                     ; preds = %84
  %90 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %85)
  %91 = load i32, i32* %59, align 4, !alias.scope !415
  %92 = and i32 %91, 1048576
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

; <label>:94:                                     ; preds = %89
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i64 0, i64 0)) #22
  unreachable

; <label>:95:                                     ; preds = %89
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i64 0, i64 0)) #18
  br label %287

; <label>:96:                                     ; preds = %87, %102
  %97 = phi i32 [ %103, %102 ], [ 0, %87 ]
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %107, label %102

; <label>:102:                                    ; preds = %96
  %103 = add nuw nsw i32 %97, 1
  %104 = icmp ult i32 %103, 80
  %105 = icmp ult i32 %103, %48
  %106 = and i1 %104, %105
  br i1 %106, label %96, label %107

; <label>:107:                                    ; preds = %102, %96
  %108 = phi i32 [ %103, %102 ], [ %97, %96 ]
  %109 = add i32 %108, -1
  %110 = icmp ult i32 %109, 79
  br i1 %110, label %111, label %288

; <label>:111:                                    ; preds = %107
  %112 = add i32 %108, 1
  %113 = icmp ult i32 %112, %48
  br i1 %113, label %114, label %288

; <label>:114:                                    ; preds = %111
  %115 = zext i32 %112 to i64
  %116 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %288

; <label>:119:                                    ; preds = %114
  %120 = add i32 %108, 2
  %121 = call fastcc i32 @png_inflate_claim(%struct.png_struct_def* %0, i32 1766015824)
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %284

; <label>:123:                                    ; preds = %119
  %124 = sub i32 %48, %120
  %125 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 132, i8* nonnull %125) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %125, i8 0, i64 132, i1 false)
  %126 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %126) #18
  %127 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %127) #18
  store i64 132, i64* %8, align 8
  %128 = zext i32 %120 to i64
  %129 = getelementptr inbounds [81 x i8], [81 x i8]* %5, i64 0, i64 %128
  %130 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 0
  store i8* %129, i8** %130, align 8
  %131 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 1
  store i32 %124, i32* %131, align 8
  call fastcc void @png_inflate_read(%struct.png_struct_def* %0, i8* nonnull %126, i32* nonnull %4, i8* nonnull %125, i64* nonnull %8, i32 0)
  %132 = load i64, i64* %8, align 8
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %279

; <label>:134:                                    ; preds = %123
  %135 = load i8, i8* %125, align 16
  %136 = zext i8 %135 to i32
  %137 = shl nuw i32 %136, 24
  %138 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 1
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = shl nuw nsw i32 %140, 16
  %142 = or i32 %141, %137
  %143 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 2
  %144 = load i8, i8* %143, align 2
  %145 = zext i8 %144 to i32
  %146 = shl nuw nsw i32 %145, 8
  %147 = or i32 %142, %146
  %148 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 3
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = or i32 %147, %150
  %152 = icmp ult i32 %151, 132
  br i1 %152, label %153, label %155

; <label>:153:                                    ; preds = %134
  %154 = zext i32 %151 to i64
  call fastcc void @png_icc_profile_error(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %36, i8* nonnull %46, i64 %154, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i64 0, i64 0)) #18
  br label %290

; <label>:155:                                    ; preds = %134
  %156 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 101
  %157 = load i64, i64* %156, align 8, !alias.scope !418, !noalias !421
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %163, label %159

; <label>:159:                                    ; preds = %155
  %160 = zext i32 %151 to i64
  %161 = icmp ult i64 %157, %160
  br i1 %161, label %162, label %163

; <label>:162:                                    ; preds = %159
  call fastcc void @png_icc_profile_error(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %36, i8* nonnull %46, i64 %160, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.28, i64 0, i64 0)) #18
  br label %290

; <label>:163:                                    ; preds = %159, %155
  %164 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = call i32 @MOZ_PNG_icc_check_header(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %36, i8* nonnull %46, i32 %151, i8* nonnull %125, i32 %166)
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %290, label %169

; <label>:169:                                    ; preds = %163
  %170 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 128
  %171 = load i8, i8* %170, align 16
  %172 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 129
  %173 = load i8, i8* %172, align 1
  %174 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 130
  %175 = load i8, i8* %174, align 2
  %176 = getelementptr inbounds [132 x i8], [132 x i8]* %6, i64 0, i64 131
  %177 = load i8, i8* %176, align 1
  %178 = zext i32 %151 to i64
  %179 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 103
  %180 = load i8*, i8** %179, align 8, !alias.scope !423
  %181 = icmp eq i8* %180, null
  br i1 %181, label %188, label %182

; <label>:182:                                    ; preds = %169
  %183 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 104
  %184 = load i64, i64* %183, align 8, !alias.scope !423
  %185 = icmp ult i64 %184, %178
  br i1 %185, label %186, label %193

; <label>:186:                                    ; preds = %182
  %187 = bitcast i8** %179 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %187, i8 0, i64 16, i1 false) #18, !alias.scope !423
  call void @free(i8* nonnull %180) #18, !noalias !423
  br label %188

; <label>:188:                                    ; preds = %169, %186
  %189 = call noalias i8* @malloc(i64 %178) #18, !noalias !423
  %190 = icmp eq i8* %189, null
  br i1 %190, label %290, label %191

; <label>:191:                                    ; preds = %188
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %189, i8 0, i64 %178, i1 false) #18, !noalias !423
  store i8* %189, i8** %179, align 8, !alias.scope !423
  %192 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 104
  store i64 %178, i64* %192, align 8, !alias.scope !423
  br label %193

; <label>:193:                                    ; preds = %191, %182
  %194 = phi i8* [ %180, %182 ], [ %189, %191 ]
  %195 = zext i8 %171 to i64
  %196 = shl nuw nsw i64 %195, 24
  %197 = zext i8 %173 to i64
  %198 = shl nuw nsw i64 %197, 16
  %199 = or i64 %198, %196
  %200 = zext i8 %175 to i64
  %201 = shl nuw nsw i64 %200, 8
  %202 = or i64 %199, %201
  %203 = zext i8 %177 to i64
  %204 = or i64 %202, %203
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %194, i8* nonnull align 16 %125, i64 132, i1 false)
  %205 = mul nuw nsw i64 %204, 12
  %206 = and i64 %205, 4294967292
  store i64 %206, i64* %8, align 8
  %207 = getelementptr inbounds i8, i8* %194, i64 132
  call fastcc void @png_inflate_read(%struct.png_struct_def* nonnull %0, i8* nonnull %126, i32* nonnull %4, i8* nonnull %207, i64* nonnull %8, i32 0)
  %208 = load i64, i64* %8, align 8
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %276

; <label>:210:                                    ; preds = %193
  %211 = call i32 @MOZ_PNG_icc_check_tags(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %36, i8* nonnull %46, i32 %151, i8* nonnull %194)
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %290, label %213

; <label>:213:                                    ; preds = %210
  %214 = add nsw i64 %178, -132
  %215 = sub nsw i64 %214, %206
  store i64 %215, i64* %8, align 8
  %216 = getelementptr inbounds i8, i8* %207, i64 %206
  call fastcc void @png_inflate_read(%struct.png_struct_def* nonnull %0, i8* nonnull %126, i32* nonnull %4, i8* nonnull %216, i64* nonnull %8, i32 1)
  %217 = load i32, i32* %4, align 4
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %223, label %219

; <label>:219:                                    ; preds = %213
  %220 = load i32, i32* %59, align 4
  %221 = and i32 %220, 1048576
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %290, label %223

; <label>:223:                                    ; preds = %219, %213
  %224 = load i64, i64* %8, align 8
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %273

; <label>:226:                                    ; preds = %223
  br i1 %218, label %228, label %227

; <label>:227:                                    ; preds = %226
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.117, i64 0, i64 0))
  br label %228

; <label>:228:                                    ; preds = %226, %227
  %229 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %217)
  %230 = icmp eq %struct.png_info_def* %1, null
  br i1 %230, label %282, label %231

; <label>:231:                                    ; preds = %228
  %232 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %233 = load i32, i32* %232, align 4, !alias.scope !426, !noalias !429
  %234 = and i32 %233, 16
  %235 = icmp eq i32 %234, 0
  %236 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  br i1 %235, label %252, label %237

; <label>:237:                                    ; preds = %231
  %238 = load i8*, i8** %236, align 8, !alias.scope !426, !noalias !429
  %239 = icmp eq i8* %238, null
  br i1 %239, label %241, label %240

; <label>:240:                                    ; preds = %237
  call void @free(i8* nonnull %238) #18
  br label %241

; <label>:241:                                    ; preds = %240, %237
  %242 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %243 = load i8*, i8** %242, align 8, !alias.scope !426, !noalias !429
  %244 = icmp eq i8* %243, null
  br i1 %244, label %246, label %245

; <label>:245:                                    ; preds = %241
  call void @free(i8* nonnull %243) #18
  br label %246

; <label>:246:                                    ; preds = %245, %241
  %247 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %248 = bitcast i8** %236 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %248, i8 0, i64 16, i1 false) #18, !alias.scope !426, !noalias !429
  %249 = load i32, i32* %247, align 8, !alias.scope !426, !noalias !429
  %250 = and i32 %249, -4097
  store i32 %250, i32* %247, align 8, !alias.scope !426, !noalias !429
  %251 = load i32, i32* %232, align 4, !alias.scope !426, !noalias !429
  br label %252

; <label>:252:                                    ; preds = %231, %246
  %253 = phi i32 [ %251, %246 ], [ %233, %231 ]
  %254 = and i32 %253, -17
  store i32 %254, i32* %232, align 4, !alias.scope !426, !noalias !429
  %255 = call noalias i8* @malloc(i64 %115) #18
  store i8* %255, i8** %236, align 8
  %256 = icmp eq i8* %255, null
  br i1 %256, label %264, label %257

; <label>:257:                                    ; preds = %252
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %255, i8* nonnull align 16 %46, i64 %115, i1 false)
  %258 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 19
  store i32 %151, i32* %258, align 8
  %259 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  store i8* %194, i8** %259, align 8
  store i8* null, i8** %179, align 8
  %260 = or i32 %253, 16
  store i32 %260, i32* %232, align 4
  %261 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %262 = load i32, i32* %261, align 8
  %263 = or i32 %262, 4096
  store i32 %263, i32* %261, align 8
  br label %267

; <label>:264:                                    ; preds = %252
  %265 = load i16, i16* %37, align 2
  %266 = or i16 %265, -32768
  store i16 %266, i16* %37, align 2
  br label %267

; <label>:267:                                    ; preds = %264, %257
  %268 = phi i8* [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i64 0, i64 0), %264 ], [ null, %257 ]
  %269 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %270 = bitcast %struct.png_colorspace* %269 to i8*
  %271 = bitcast %struct.png_colorspace* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %270, i8* nonnull align 8 %271, i64 76, i1 false) #18, !alias.scope !431
  call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  %272 = icmp eq i8* %268, null
  br i1 %272, label %282, label %290

; <label>:273:                                    ; preds = %223
  %274 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %275 = load i8*, i8** %274, align 8
  br label %290

; <label>:276:                                    ; preds = %193
  %277 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %278 = load i8*, i8** %277, align 8
  br label %290

; <label>:279:                                    ; preds = %123
  %280 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %281 = load i8*, i8** %280, align 8
  br label %290

; <label>:282:                                    ; preds = %267, %228
  %283 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  store i32 0, i32* %283, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #18
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %126) #18
  call void @llvm.lifetime.end.p0i8(i64 132, i8* nonnull %125) #18
  br label %287

; <label>:284:                                    ; preds = %119
  %285 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %286 = load i8*, i8** %285, align 8
  br label %288

; <label>:287:                                    ; preds = %282, %95
  call void @llvm.lifetime.end.p0i8(i64 81, i8* nonnull %46) #18
  br label %318

; <label>:288:                                    ; preds = %87, %284, %114, %111, %107
  %289 = phi i8* [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i64 0, i64 0), %107 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.119, i64 0, i64 0), %111 ], [ getelementptr inbounds ([23 x i8], [23 x i8]* @.str.119, i64 0, i64 0), %114 ], [ %286, %284 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.120, i64 0, i64 0), %87 ]
  call void @llvm.lifetime.end.p0i8(i64 81, i8* nonnull %46) #18
  br label %296

; <label>:290:                                    ; preds = %279, %163, %162, %153, %210, %276, %273, %188, %267, %219
  %291 = phi i1 [ true, %279 ], [ true, %163 ], [ true, %162 ], [ true, %153 ], [ true, %188 ], [ true, %276 ], [ true, %210 ], [ true, %273 ], [ true, %219 ], [ false, %267 ]
  %292 = phi i8* [ %281, %279 ], [ null, %163 ], [ null, %162 ], [ null, %153 ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.118, i64 0, i64 0), %188 ], [ %278, %276 ], [ null, %210 ], [ %275, %273 ], [ getelementptr inbounds ([22 x i8], [22 x i8]* @.str.117, i64 0, i64 0), %219 ], [ %268, %267 ]
  %293 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  store i32 0, i32* %293, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #18
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %126) #18
  call void @llvm.lifetime.end.p0i8(i64 132, i8* nonnull %125) #18
  call void @llvm.lifetime.end.p0i8(i64 81, i8* nonnull %46) #18
  br i1 %291, label %294, label %300

; <label>:294:                                    ; preds = %290
  %295 = load i32, i32* %4, align 4
  br label %296

; <label>:296:                                    ; preds = %294, %42, %288
  %297 = phi i32 [ %295, %294 ], [ %85, %288 ], [ %2, %42 ]
  %298 = phi i8* [ %292, %294 ], [ %289, %288 ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.115, i64 0, i64 0), %42 ]
  %299 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* %0, i32 %297)
  br label %300

; <label>:300:                                    ; preds = %296, %290
  %301 = phi i8* [ %298, %296 ], [ %292, %290 ]
  %302 = load i16, i16* %37, align 2
  %303 = or i16 %302, -32768
  store i16 %303, i16* %37, align 2
  %304 = icmp eq %struct.png_info_def* %1, null
  br i1 %304, label %309, label %305

; <label>:305:                                    ; preds = %300
  %306 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %307 = bitcast %struct.png_colorspace* %306 to i8*
  %308 = bitcast %struct.png_colorspace* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %307, i8* nonnull align 8 %308, i64 76, i1 false) #18, !alias.scope !435
  call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1) #18
  br label %309

; <label>:309:                                    ; preds = %300, %305
  %310 = icmp eq i8* %301, null
  br i1 %310, label %318, label %311

; <label>:311:                                    ; preds = %309
  %312 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %313 = load i32, i32* %312, align 4, !alias.scope !439
  %314 = and i32 %313, 1048576
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %317

; <label>:316:                                    ; preds = %311
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* nonnull %301) #22
  unreachable

; <label>:317:                                    ; preds = %311
  call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* nonnull %301) #18
  br label %318

; <label>:318:                                    ; preds = %287, %317, %309, %40, %34, %24
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_tRNS(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca [2 x i8], align 1
  %6 = alloca [6 x i8], align 1
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #18
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %3
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.111, i64 0, i64 0)) #19
  unreachable

; <label>:13:                                     ; preds = %3
  %14 = and i32 %9, 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %24, label %16

; <label>:16:                                     ; preds = %13
  %17 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %19 = load i32, i32* %18, align 4, !alias.scope !442
  %20 = and i32 %19, 1048576
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %16
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #22
  unreachable

; <label>:23:                                     ; preds = %16
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #18
  br label %231

; <label>:24:                                     ; preds = %13
  %25 = icmp eq %struct.png_info_def* %1, null
  br i1 %25, label %39, label %26

; <label>:26:                                     ; preds = %24
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = and i32 %28, 16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %39, label %31

; <label>:31:                                     ; preds = %26
  %32 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %34 = load i32, i32* %33, align 4, !alias.scope !445
  %35 = and i32 %34, 1048576
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

; <label>:37:                                     ; preds = %31
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0)) #22
  unreachable

; <label>:38:                                     ; preds = %31
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0)) #18
  br label %231

; <label>:39:                                     ; preds = %26, %24
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %41 = load i8, i8* %40, align 1
  switch i8 %41, label %214 [
    i8 0, label %42
    i8 2, label %86
    i8 3, label %148
  ]

; <label>:42:                                     ; preds = %39
  %43 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %43) #18
  %44 = icmp eq i32 %2, 2
  br i1 %44, label %53, label %45

; <label>:45:                                     ; preds = %42
  %46 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %48 = load i32, i32* %47, align 4, !alias.scope !448
  %49 = and i32 %48, 1048576
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

; <label>:51:                                     ; preds = %45
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:52:                                     ; preds = %45
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %43) #18
  br label %231

; <label>:53:                                     ; preds = %42
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %55 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %54, align 8, !alias.scope !451
  %56 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %55, null
  br i1 %56, label %57, label %58

; <label>:57:                                     ; preds = %53
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:58:                                     ; preds = %53
  call void %55(%struct.png_struct_def* nonnull %0, i8* nonnull %43, i64 2) #18
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %60 = load i32, i32* %59, align 8, !alias.scope !456
  %61 = and i32 %60, 536870912
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %64 = load i32, i32* %63, align 4, !alias.scope !456
  %65 = and i32 %64, 768
  %66 = icmp ne i32 %65, 768
  %67 = and i32 %64, 2048
  %68 = icmp eq i32 %67, 0
  %69 = select i1 %62, i1 %68, i1 %66
  br i1 %69, label %70, label %76

; <label>:70:                                     ; preds = %58
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %72 = load i32, i32* %71, align 4, !alias.scope !456
  %73 = zext i32 %72 to i64
  %74 = call i64 @MOZ_Z_crc32(i64 %73, i8* nonnull %43, i32 2) #18, !noalias !459
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %71, align 4, !alias.scope !456
  br label %76

; <label>:76:                                     ; preds = %58, %70
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  store i16 1, i16* %77, align 2
  %78 = load i8, i8* %43, align 1
  %79 = zext i8 %78 to i16
  %80 = shl nuw i16 %79, 8
  %81 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 1
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i16
  %84 = or i16 %80, %83
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 67, i32 4
  store i16 %84, i16* %85, align 8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %43) #18
  br label %222

; <label>:86:                                     ; preds = %39
  %87 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %87) #18
  %88 = icmp eq i32 %2, 6
  br i1 %88, label %97, label %89

; <label>:89:                                     ; preds = %86
  %90 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %92 = load i32, i32* %91, align 4, !alias.scope !460
  %93 = and i32 %92, 1048576
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %96

; <label>:95:                                     ; preds = %89
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:96:                                     ; preds = %89
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %87) #18
  br label %231

; <label>:97:                                     ; preds = %86
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %99 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %98, align 8, !alias.scope !463
  %100 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %99, null
  br i1 %100, label %101, label %102

; <label>:101:                                    ; preds = %97
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:102:                                    ; preds = %97
  call void %99(%struct.png_struct_def* nonnull %0, i8* nonnull %87, i64 6) #18
  %103 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %104 = load i32, i32* %103, align 8, !alias.scope !468
  %105 = and i32 %104, 536870912
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %108 = load i32, i32* %107, align 4, !alias.scope !468
  %109 = and i32 %108, 768
  %110 = icmp ne i32 %109, 768
  %111 = and i32 %108, 2048
  %112 = icmp eq i32 %111, 0
  %113 = select i1 %106, i1 %112, i1 %110
  br i1 %113, label %114, label %120

; <label>:114:                                    ; preds = %102
  %115 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %116 = load i32, i32* %115, align 4, !alias.scope !468
  %117 = zext i32 %116 to i64
  %118 = call i64 @MOZ_Z_crc32(i64 %117, i8* nonnull %87, i32 6) #18, !noalias !471
  %119 = trunc i64 %118 to i32
  store i32 %119, i32* %115, align 4, !alias.scope !468
  br label %120

; <label>:120:                                    ; preds = %102, %114
  %121 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  store i16 1, i16* %121, align 2
  %122 = load i8, i8* %87, align 1
  %123 = zext i8 %122 to i16
  %124 = shl nuw i16 %123, 8
  %125 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 1
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i16
  %128 = or i16 %124, %127
  %129 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 67, i32 1
  store i16 %128, i16* %129, align 2
  %130 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 2
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i16
  %133 = shl nuw i16 %132, 8
  %134 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 3
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i16
  %137 = or i16 %133, %136
  %138 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 67, i32 2
  store i16 %137, i16* %138, align 4
  %139 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 4
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i16
  %142 = shl nuw i16 %141, 8
  %143 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 5
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i16
  %146 = or i16 %142, %145
  %147 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 67, i32 3
  store i16 %146, i16* %147, align 2
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %87) #18
  br label %222

; <label>:148:                                    ; preds = %39
  %149 = and i32 %9, 2
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %159

; <label>:151:                                    ; preds = %148
  %152 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %153 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %154 = load i32, i32* %153, align 4, !alias.scope !472
  %155 = and i32 %154, 1048576
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %158

; <label>:157:                                    ; preds = %151
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #22
  unreachable

; <label>:158:                                    ; preds = %151
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.109, i64 0, i64 0)) #18
  br label %231

; <label>:159:                                    ; preds = %148
  %160 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  %161 = load i16, i16* %160, align 8
  %162 = zext i16 %161 to i32
  %163 = icmp ugt i32 %2, 256
  %164 = add i32 %2, -1
  %165 = icmp uge i32 %164, %162
  %166 = or i1 %163, %165
  br i1 %166, label %167, label %175

; <label>:167:                                    ; preds = %159
  %168 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %169 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %170 = load i32, i32* %169, align 4, !alias.scope !475
  %171 = and i32 %170, 1048576
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %174

; <label>:173:                                    ; preds = %167
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #22
  unreachable

; <label>:174:                                    ; preds = %167
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0)) #18
  br label %231

; <label>:175:                                    ; preds = %159
  %176 = zext i32 %2 to i64
  %177 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %178 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %177, align 8, !alias.scope !478
  %179 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %178, null
  br i1 %179, label %180, label %181

; <label>:180:                                    ; preds = %175
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:181:                                    ; preds = %175
  call void %178(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 %176) #18
  %182 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %183 = load i32, i32* %182, align 8, !alias.scope !483
  %184 = and i32 %183, 536870912
  %185 = icmp eq i32 %184, 0
  %186 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %187 = load i32, i32* %186, align 4, !alias.scope !483
  %188 = and i32 %187, 768
  %189 = icmp ne i32 %188, 768
  %190 = and i32 %187, 2048
  %191 = icmp eq i32 %190, 0
  %192 = select i1 %185, i1 %191, i1 %189
  br i1 %192, label %193, label %211

; <label>:193:                                    ; preds = %181
  %194 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %195 = load i32, i32* %194, align 4, !alias.scope !483
  %196 = zext i32 %195 to i64
  br label %197

; <label>:197:                                    ; preds = %197, %193
  %198 = phi i64 [ %176, %193 ], [ %207, %197 ]
  %199 = phi i64 [ %196, %193 ], [ %204, %197 ]
  %200 = phi i8* [ %7, %193 ], [ %206, %197 ]
  %201 = trunc i64 %198 to i32
  %202 = icmp eq i32 %201, 0
  %203 = select i1 %202, i32 -1, i32 %201
  %204 = call i64 @MOZ_Z_crc32(i64 %199, i8* %200, i32 %203) #18, !noalias !486
  %205 = zext i32 %203 to i64
  %206 = getelementptr inbounds i8, i8* %200, i64 %205
  %207 = sub i64 %198, %205
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %197

; <label>:209:                                    ; preds = %197
  %210 = trunc i64 %204 to i32
  store i32 %210, i32* %194, align 4, !alias.scope !483
  br label %211

; <label>:211:                                    ; preds = %181, %209
  %212 = trunc i32 %2 to i16
  %213 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  store i16 %212, i16* %213, align 2
  br label %222

; <label>:214:                                    ; preds = %39
  %215 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  %216 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %217 = load i32, i32* %216, align 4, !alias.scope !487
  %218 = and i32 %217, 1048576
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %221

; <label>:220:                                    ; preds = %214
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.121, i64 0, i64 0)) #22
  unreachable

; <label>:221:                                    ; preds = %214
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.121, i64 0, i64 0)) #18
  br label %231

; <label>:222:                                    ; preds = %120, %76, %211
  %223 = phi i16* [ %121, %120 ], [ %77, %76 ], [ %213, %211 ]
  %224 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 0)
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %227, label %226

; <label>:226:                                    ; preds = %222
  store i16 0, i16* %223, align 2
  br label %231

; <label>:227:                                    ; preds = %222
  %228 = load i16, i16* %223, align 2
  %229 = zext i16 %228 to i32
  %230 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 67
  call void @MOZ_PNG_set_tRNS(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i8* nonnull %7, i32 %229, %struct.png_color_16_struct* nonnull %230)
  br label %231

; <label>:231:                                    ; preds = %96, %52, %227, %226, %221, %174, %158, %38, %23
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_handle_acTL(%struct.png_struct_def*, %struct.png_info_def*, i32) local_unnamed_addr #4 {
  %4 = alloca [8 x i8], align 1
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 1
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %3
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.122, i64 0, i64 0)) #19
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = and i32 %7, 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %16, label %14

; <label>:14:                                     ; preds = %11
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.123, i64 0, i64 0))
  %15 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  br label %108

; <label>:16:                                     ; preds = %11
  %17 = and i32 %7, 65536
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

; <label>:19:                                     ; preds = %16
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.124, i64 0, i64 0))
  %20 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  br label %108

; <label>:21:                                     ; preds = %16
  %22 = icmp eq i32 %2, 8
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %21
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.125, i64 0, i64 0))
  %24 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %2)
  br label %108

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %27 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %26, align 8, !alias.scope !490
  %28 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %27, null
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %25
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:30:                                     ; preds = %25
  call void %27(%struct.png_struct_def* nonnull %0, i8* nonnull %5, i64 8) #18
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %32 = load i32, i32* %31, align 8, !alias.scope !495
  %33 = and i32 %32, 536870912
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %36 = load i32, i32* %35, align 4, !alias.scope !495
  %37 = and i32 %36, 768
  %38 = icmp ne i32 %37, 768
  %39 = and i32 %36, 2048
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %34, i1 %40, i1 %38
  br i1 %41, label %42, label %48

; <label>:42:                                     ; preds = %30
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %44 = load i32, i32* %43, align 4, !alias.scope !495
  %45 = zext i32 %44 to i64
  %46 = call i64 @MOZ_Z_crc32(i64 %45, i8* nonnull %5, i32 8) #18, !noalias !498
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %43, align 4, !alias.scope !495
  br label %48

; <label>:48:                                     ; preds = %30, %42
  %49 = call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 0)
  %50 = load i8, i8* %5, align 1, !noalias !499
  %51 = zext i8 %50 to i32
  %52 = shl nuw i32 %51, 24
  %53 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 1
  %54 = load i8, i8* %53, align 1, !noalias !499
  %55 = zext i8 %54 to i32
  %56 = shl nuw nsw i32 %55, 16
  %57 = or i32 %56, %52
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 2
  %59 = load i8, i8* %58, align 1, !noalias !499
  %60 = zext i8 %59 to i32
  %61 = shl nuw nsw i32 %60, 8
  %62 = or i32 %57, %61
  %63 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 3
  %64 = load i8, i8* %63, align 1, !noalias !499
  %65 = zext i8 %64 to i32
  %66 = or i32 %62, %65
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %48
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:69:                                     ; preds = %48
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 4
  %71 = load i8, i8* %70, align 1, !noalias !502
  %72 = zext i8 %71 to i32
  %73 = shl nuw i32 %72, 24
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 5
  %75 = load i8, i8* %74, align 1, !noalias !502
  %76 = zext i8 %75 to i32
  %77 = shl nuw nsw i32 %76, 16
  %78 = or i32 %77, %73
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 6
  %80 = load i8, i8* %79, align 1, !noalias !502
  %81 = zext i8 %80 to i32
  %82 = shl nuw nsw i32 %81, 8
  %83 = or i32 %78, %82
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 7
  %85 = load i8, i8* %84, align 1, !noalias !502
  %86 = zext i8 %85 to i32
  %87 = or i32 %83, %86
  %88 = icmp slt i32 %87, 0
  br i1 %88, label %89, label %90

; <label>:89:                                     ; preds = %69
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:90:                                     ; preds = %69
  %91 = icmp eq %struct.png_info_def* %1, null
  br i1 %91, label %92, label %93

; <label>:92:                                     ; preds = %90
  call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.162, i64 0, i64 0)) #18
  br label %108

; <label>:93:                                     ; preds = %90
  %94 = icmp eq i32 %66, 0
  br i1 %94, label %95, label %100

; <label>:95:                                     ; preds = %93
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %97 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %96, align 8, !alias.scope !505
  %98 = icmp eq void (%struct.png_struct_def*, i8*)* %97, null
  br i1 %98, label %108, label %99

; <label>:99:                                     ; preds = %95
  call void %97(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.163, i64 0, i64 0)) #18
  br label %108

; <label>:100:                                    ; preds = %93
  %101 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  store i32 %66, i32* %101, align 8
  %102 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 24
  store i32 %87, i32* %102, align 4
  %103 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %104 = load i32, i32* %103, align 8
  %105 = or i32 %104, 131072
  store i32 %105, i32* %103, align 8
  %106 = load i32, i32* %6, align 8
  %107 = or i32 %106, 65536
  store i32 %107, i32* %6, align 8
  br label %108

; <label>:108:                                    ; preds = %99, %95, %92, %100, %23, %19, %14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_handle_unknown(%struct.png_struct_def* noalias, %struct.png_info_def* noalias nocapture readnone, i32, i32) local_unnamed_addr #4 {
  %5 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* %0, i32 %2)
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 536870912
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %4
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.135, i64 0, i64 0)) #19
  unreachable

; <label>:11:                                     ; preds = %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_proc_IDAT_data(%struct.png_struct_def* noalias, i8*, i64) local_unnamed_addr #4 {
  %4 = icmp eq i64 %2, 0
  %5 = icmp eq i8* %1, null
  %6 = or i1 %5, %4
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %3
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.84, i64 0, i64 0)) #19
  unreachable

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %21

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 91
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %19 = load i32, i32* %18, align 4
  %20 = or i32 %19, 8
  store i32 %20, i32* %18, align 4
  br label %148

; <label>:21:                                     ; preds = %13, %8
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 0
  store i8* %1, i8** %22, align 8
  %23 = trunc i64 %2 to i32
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 1
  store i32 %23, i32* %24, align 8
  %25 = icmp eq i32 %23, 0
  br i1 %25, label %148, label %26

; <label>:26:                                     ; preds = %21
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 4
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %33 = bitcast i8** %32 to i64*
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 3
  %35 = bitcast i8** %34 to i64*
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  br label %43

; <label>:40:                                     ; preds = %142, %144
  %41 = load i32, i32* %24, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %148, label %43

; <label>:43:                                     ; preds = %26, %40
  %44 = load i32, i32* %27, align 4
  %45 = and i32 %44, 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %147

; <label>:47:                                     ; preds = %43
  %48 = load i32, i32* %28, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %68

; <label>:50:                                     ; preds = %47
  %51 = load i8, i8* %29, align 4
  %52 = icmp ugt i8 %51, 7
  %53 = load i32, i32* %30, align 8
  %54 = zext i32 %53 to i64
  %55 = zext i8 %51 to i64
  br i1 %52, label %56, label %59

; <label>:56:                                     ; preds = %50
  %57 = lshr i64 %55, 3
  %58 = mul nuw nsw i64 %57, %54
  br label %63

; <label>:59:                                     ; preds = %50
  %60 = mul nuw nsw i64 %54, %55
  %61 = add nuw nsw i64 %60, 7
  %62 = lshr i64 %61, 3
  br label %63

; <label>:63:                                     ; preds = %59, %56
  %64 = phi i64 [ %58, %56 ], [ %62, %59 ]
  %65 = trunc i64 %64 to i32
  %66 = add i32 %65, 1
  store i32 %66, i32* %28, align 8
  %67 = load i64, i64* %33, align 8
  store i64 %67, i64* %35, align 8
  br label %68

; <label>:68:                                     ; preds = %47, %63
  %69 = load i8, i8* %31, align 2, !alias.scope !508
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %78, label %71

; <label>:71:                                     ; preds = %68
  %72 = load i8*, i8** %22, align 8, !alias.scope !508
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %75, label %77

; <label>:75:                                     ; preds = %71
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.108, i64 0, i64 0), i8** %76, align 8, !alias.scope !508
  br label %83

; <label>:77:                                     ; preds = %71
  store i8 0, i8* %31, align 2, !alias.scope !508
  br label %78

; <label>:78:                                     ; preds = %68, %77
  %79 = tail call i32 @MOZ_Z_inflate(%struct.z_stream_s* nonnull %36, i32 2) #18
  %80 = icmp ugt i32 %79, 1
  br i1 %80, label %81, label %123

; <label>:81:                                     ; preds = %78
  %82 = load i32, i32* %27, align 4
  br label %83

; <label>:83:                                     ; preds = %81, %75
  %84 = phi i32 [ %44, %75 ], [ %82, %81 ]
  %85 = phi i32 [ -3, %75 ], [ %79, %81 ]
  %86 = or i32 %84, 8
  store i32 %86, i32* %27, align 4
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  store i32 0, i32* %87, align 4
  %88 = load i32, i32* %37, align 4
  %89 = load i32, i32* %38, align 4
  %90 = icmp ult i32 %88, %89
  br i1 %90, label %91, label %94

; <label>:91:                                     ; preds = %83
  %92 = load i8, i8* %39, align 1
  %93 = icmp ugt i8 %92, 6
  br i1 %93, label %94, label %95

; <label>:94:                                     ; preds = %83, %91
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.85, i64 0, i64 0))
  br label %148

; <label>:95:                                     ; preds = %91
  %96 = icmp eq i32 %85, -3
  br i1 %96, label %97, label %122

; <label>:97:                                     ; preds = %95
  %98 = and i32 %84, 1048576
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %101 = load i32, i32* %100, align 8, !alias.scope !511
  %102 = trunc i32 %101 to i16
  %103 = icmp slt i16 %102, 0
  br i1 %99, label %115, label %104

; <label>:104:                                    ; preds = %97
  br i1 %103, label %105, label %110

; <label>:105:                                    ; preds = %104
  %106 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %107 = load i32, i32* %106, align 8, !alias.scope !511
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %110, label %109

; <label>:109:                                    ; preds = %105
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.86, i64 0, i64 0)) #18
  br label %148

; <label>:110:                                    ; preds = %104, %105
  %111 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %112 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %111, align 8, !alias.scope !514
  %113 = icmp eq void (%struct.png_struct_def*, i8*)* %112, null
  br i1 %113, label %148, label %114

; <label>:114:                                    ; preds = %110
  tail call void %112(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.86, i64 0, i64 0)) #18
  br label %148

; <label>:115:                                    ; preds = %97
  br i1 %103, label %116, label %121

; <label>:116:                                    ; preds = %115
  %117 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %118 = load i32, i32* %117, align 8, !alias.scope !511
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %121, label %120

; <label>:120:                                    ; preds = %116
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.86, i64 0, i64 0)) #22
  unreachable

; <label>:121:                                    ; preds = %116, %115
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.86, i64 0, i64 0)) #22
  unreachable

; <label>:122:                                    ; preds = %95
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.87, i64 0, i64 0)) #19
  unreachable

; <label>:123:                                    ; preds = %78
  %124 = load i8*, i8** %34, align 8
  %125 = load i8*, i8** %32, align 8
  %126 = icmp eq i8* %124, %125
  br i1 %126, label %142, label %127

; <label>:127:                                    ; preds = %123
  %128 = load i32, i32* %37, align 4
  %129 = load i32, i32* %38, align 4
  %130 = icmp ult i32 %128, %129
  br i1 %130, label %131, label %134

; <label>:131:                                    ; preds = %127
  %132 = load i8, i8* %39, align 1
  %133 = icmp ugt i8 %132, 6
  br i1 %133, label %134, label %138

; <label>:134:                                    ; preds = %127, %131
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.88, i64 0, i64 0))
  %135 = load i32, i32* %27, align 4
  %136 = or i32 %135, 8
  store i32 %136, i32* %27, align 4
  %137 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  store i32 0, i32* %137, align 4
  br label %148

; <label>:138:                                    ; preds = %131
  %139 = load i32, i32* %28, align 8
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %142

; <label>:141:                                    ; preds = %138
  tail call void @MOZ_PNG_push_proc_row(%struct.png_struct_def* nonnull %0)
  br label %142

; <label>:142:                                    ; preds = %123, %138, %141
  %143 = icmp eq i32 %79, 1
  br i1 %143, label %144, label %40

; <label>:144:                                    ; preds = %142
  %145 = load i32, i32* %27, align 4
  %146 = or i32 %145, 8
  store i32 %146, i32* %27, align 4
  br label %40

; <label>:147:                                    ; preds = %43
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.89, i64 0, i64 0))
  br label %148

; <label>:148:                                    ; preds = %40, %21, %109, %110, %114, %94, %134, %17, %147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @png_zlib_inflate(%struct.png_struct_def* noalias, i32) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %4 = load i8, i8* %3, align 2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %18, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %18, label %10

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %10
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.108, i64 0, i64 0), i8** %16, align 8
  br label %21

; <label>:17:                                     ; preds = %10
  store i8 0, i8* %3, align 2
  br label %18

; <label>:18:                                     ; preds = %6, %2, %17
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %20 = tail call i32 @MOZ_Z_inflate(%struct.z_stream_s* nonnull %19, i32 %1) #18
  br label %21

; <label>:21:                                     ; preds = %18, %15
  %22 = phi i32 [ -3, %15 ], [ %20, %18 ]
  ret i32 %22
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_proc_row(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = alloca %struct.png_row_info_struct, align 8
  %3 = bitcast %struct.png_row_info_struct* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #18
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i64 0, i32 0
  store i32 %5, i32* %6, align 8
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %8 = load i8, i8* %7, align 1
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i64 0, i32 2
  store i8 %8, i8* %9, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %11 = load i8, i8* %10, align 2
  %12 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i64 0, i32 3
  store i8 %11, i8* %12, align 1
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 52
  %14 = load i8, i8* %13, align 1
  %15 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i64 0, i32 4
  store i8 %14, i8* %15, align 2
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %17 = load i8, i8* %16, align 4
  %18 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i64 0, i32 5
  store i8 %17, i8* %18, align 1
  %19 = icmp ugt i8 %17, 7
  %20 = zext i32 %5 to i64
  %21 = zext i8 %17 to i64
  br i1 %19, label %22, label %25

; <label>:22:                                     ; preds = %1
  %23 = lshr i64 %21, 3
  %24 = mul nuw nsw i64 %23, %20
  br label %29

; <label>:25:                                     ; preds = %1
  %26 = mul nuw nsw i64 %21, %20
  %27 = add nuw nsw i64 %26, 7
  %28 = lshr i64 %27, 3
  br label %29

; <label>:29:                                     ; preds = %25, %22
  %30 = phi i64 [ %24, %22 ], [ %28, %25 ]
  %31 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %2, i64 0, i32 1
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %33 = load i8*, i8** %32, align 8
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = icmp eq i8 %34, 0
  br i1 %36, label %37, label %39

; <label>:37:                                     ; preds = %29
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  br label %73

; <label>:39:                                     ; preds = %29
  %40 = icmp ult i8 %34, 5
  br i1 %40, label %41, label %72

; <label>:41:                                     ; preds = %39
  %42 = getelementptr inbounds i8, i8* %33, i64 1
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = add nsw i32 %35, -1
  %47 = icmp ult i32 %46, 4
  br i1 %47, label %48, label %73

; <label>:48:                                     ; preds = %41
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 0
  %50 = load void (%struct.png_row_info_struct*, i8*, i8*)*, void (%struct.png_row_info_struct*, i8*, i8*)** %49, align 8, !alias.scope !517
  %51 = icmp eq void (%struct.png_row_info_struct*, i8*, i8*)* %50, null
  br i1 %51, label %52, label %66

; <label>:52:                                     ; preds = %48
  %53 = zext i8 %17 to i32
  %54 = add nuw nsw i32 %53, 7
  %55 = lshr i32 %54, 3
  %56 = bitcast void (%struct.png_row_info_struct*, i8*, i8*)** %49 to <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>*
  store <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> <void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_s, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_up>, <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>* %56, align 8, !alias.scope !520
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 2
  store void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_a, void (%struct.png_row_info_struct*, i8*, i8*)** %57, align 8, !alias.scope !520
  %58 = icmp eq i32 %55, 1
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 3
  %60 = select i1 %58, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p_1b_px, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p_mb_px
  store void (%struct.png_row_info_struct*, i8*, i8*)* %60, void (%struct.png_row_info_struct*, i8*, i8*)** %59, align 8, !alias.scope !520
  %61 = trunc i32 %55 to i6
  switch i6 %61, label %66 [
    i6 3, label %62
    i6 4, label %64
  ]

; <label>:62:                                     ; preds = %52
  store void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_s3_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %49, align 8, !alias.scope !520
  %63 = bitcast void (%struct.png_row_info_struct*, i8*, i8*)** %57 to <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>*
  store <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> <void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_a3_sse2, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p3_sse2>, <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>* %63, align 8, !alias.scope !520
  br label %66

; <label>:64:                                     ; preds = %52
  store void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_s4_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %49, align 8, !alias.scope !520
  %65 = bitcast void (%struct.png_row_info_struct*, i8*, i8*)** %57 to <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>*
  store <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> <void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_a4_sse2, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p4_sse2>, <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>* %65, align 8, !alias.scope !520
  br label %66

; <label>:66:                                     ; preds = %64, %62, %52, %48
  %67 = sext i32 %46 to i64
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 %67
  %69 = load void (%struct.png_row_info_struct*, i8*, i8*)*, void (%struct.png_row_info_struct*, i8*, i8*)** %68, align 8, !alias.scope !517
  call void %69(%struct.png_row_info_struct* nonnull %2, i8* nonnull %42, i8* nonnull %45) #18, !noalias !517
  %70 = load i8*, i8** %32, align 8
  %71 = load i64, i64* %31, align 8
  br label %73

; <label>:72:                                     ; preds = %39
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.90, i64 0, i64 0)) #19
  unreachable

; <label>:73:                                     ; preds = %37, %66, %41
  %74 = phi i8** [ %38, %37 ], [ %43, %66 ], [ %43, %41 ]
  %75 = phi i64 [ %30, %37 ], [ %71, %66 ], [ %30, %41 ]
  %76 = phi i8* [ %33, %37 ], [ %70, %66 ], [ %33, %41 ]
  %77 = load i8*, i8** %74, align 8
  %78 = add i64 %75, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %76, i64 %78, i1 false)
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %83, label %82

; <label>:82:                                     ; preds = %73
  call void @MOZ_PNG_do_read_trans(%struct.png_struct_def* nonnull %0, %struct.png_row_info_struct* nonnull %2)
  br label %83

; <label>:83:                                     ; preds = %73, %82
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 56
  %85 = load i8, i8* %84, align 1
  %86 = icmp eq i8 %85, 0
  %87 = load i8, i8* %18, align 1
  br i1 %86, label %88, label %93

; <label>:88:                                     ; preds = %83
  store i8 %87, i8* %84, align 1
  %89 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 55
  %90 = load i8, i8* %89, align 8
  %91 = icmp ugt i8 %87, %90
  br i1 %91, label %92, label %96

; <label>:92:                                     ; preds = %88
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.91, i64 0, i64 0)) #19
  unreachable

; <label>:93:                                     ; preds = %83
  %94 = icmp eq i8 %85, %87
  br i1 %94, label %96, label %95

; <label>:95:                                     ; preds = %93
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.92, i64 0, i64 0)) #19
  unreachable

; <label>:96:                                     ; preds = %93, %88
  %97 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %98 = load i8, i8* %97, align 2
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %357, label %100

; <label>:100:                                    ; preds = %96
  %101 = load i32, i32* %79, align 8
  %102 = and i32 %101, 2
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %357, label %104

; <label>:104:                                    ; preds = %100
  %105 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %106 = load i8, i8* %105, align 1
  %107 = icmp ult i8 %106, 6
  br i1 %107, label %108, label %113

; <label>:108:                                    ; preds = %104
  %109 = zext i8 %106 to i32
  %110 = load i8*, i8** %32, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  call void @MOZ_PNG_do_read_int(%struct.png_row_info_struct* nonnull %2, i8* nonnull %111, i32 %109, i32 undef)
  %112 = load i8, i8* %105, align 1
  br label %113

; <label>:113:                                    ; preds = %108, %104
  %114 = phi i8 [ %112, %108 ], [ %106, %104 ]
  switch i8 %114, label %337 [
    i8 0, label %124
    i8 1, label %121
    i8 2, label %213
    i8 3, label %118
    i8 4, label %277
    i8 5, label %115
  ]

; <label>:115:                                    ; preds = %113
  %116 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %117 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  br label %313

; <label>:118:                                    ; preds = %113
  %119 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %120 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  br label %251

; <label>:121:                                    ; preds = %113
  %122 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %123 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  br label %187

; <label>:124:                                    ; preds = %113
  %125 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %126 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  br label %127

; <label>:127:                                    ; preds = %124, %135
  %128 = phi i32 [ 0, %124 ], [ %136, %135 ]
  %129 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %125, align 8, !alias.scope !523
  %130 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %129, null
  br i1 %130, label %135, label %131

; <label>:131:                                    ; preds = %127
  %132 = load i8*, i8** %32, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  %134 = load i32, i32* %126, align 4, !alias.scope !523
  call void %129(%struct.png_struct_def* nonnull %0, i8* nonnull %133, i32 %134, i32 0) #18
  br label %135

; <label>:135:                                    ; preds = %127, %131
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %136 = add nuw nsw i32 %128, 1
  %137 = icmp ult i32 %136, 8
  %138 = load i8, i8* %105, align 1
  %139 = icmp eq i8 %138, 0
  %140 = and i1 %137, %139
  br i1 %140, label %127, label %141

; <label>:141:                                    ; preds = %135
  %142 = icmp eq i8 %138, 2
  br i1 %142, label %143, label %153

; <label>:143:                                    ; preds = %141
  %144 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %145 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %146 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %144, align 8, !alias.scope !526
  %147 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %146, null
  br i1 %147, label %150, label %148

; <label>:148:                                    ; preds = %143
  %149 = load i32, i32* %145, align 4, !alias.scope !526
  call void %146(%struct.png_struct_def* nonnull %0, i8* null, i32 %149, i32 2) #18
  br label %150

; <label>:150:                                    ; preds = %143, %148
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %151 = load i8, i8* %105, align 1
  %152 = icmp eq i8 %151, 2
  br i1 %152, label %378, label %153

; <label>:153:                                    ; preds = %150, %383, %391, %141, %399
  %154 = phi i8 [ %400, %399 ], [ %138, %141 ], [ %151, %150 ], [ %384, %383 ], [ %392, %391 ]
  %155 = icmp eq i8 %154, 4
  br i1 %155, label %156, label %172

; <label>:156:                                    ; preds = %153
  %157 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %158 = load i32, i32* %157, align 8
  %159 = icmp ult i32 %158, 5
  br i1 %159, label %160, label %172

; <label>:160:                                    ; preds = %156
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %162 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %163 = icmp eq i8 %154, 4
  br i1 %163, label %164, label %172

; <label>:164:                                    ; preds = %160
  %165 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %161, align 8, !alias.scope !529
  %166 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %165, null
  br i1 %166, label %169, label %167

; <label>:167:                                    ; preds = %164
  %168 = load i32, i32* %162, align 4, !alias.scope !529
  call void %165(%struct.png_struct_def* nonnull %0, i8* null, i32 %168, i32 4) #18
  br label %169

; <label>:169:                                    ; preds = %164, %167
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %170 = load i8, i8* %105, align 1
  %171 = icmp eq i8 %170, 4
  br i1 %171, label %371, label %172

; <label>:172:                                    ; preds = %160, %169, %156, %153, %376
  %173 = phi i8 [ %377, %376 ], [ %154, %153 ], [ %154, %156 ], [ %154, %160 ], [ %170, %169 ]
  %174 = icmp eq i8 %173, 6
  br i1 %174, label %175, label %370

; <label>:175:                                    ; preds = %172
  %176 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %177 = load i32, i32* %176, align 8
  %178 = icmp ult i32 %177, 5
  br i1 %178, label %179, label %370

; <label>:179:                                    ; preds = %175
  %180 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %181 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %180, align 8, !alias.scope !532
  %182 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %181, null
  br i1 %182, label %186, label %183

; <label>:183:                                    ; preds = %179
  %184 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %185 = load i32, i32* %184, align 4, !alias.scope !532
  call void %181(%struct.png_struct_def* nonnull %0, i8* null, i32 %185, i32 6) #18
  br label %186

; <label>:186:                                    ; preds = %179, %183
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  br label %370

; <label>:187:                                    ; preds = %121, %195
  %188 = phi i32 [ 0, %121 ], [ %196, %195 ]
  %189 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %122, align 8, !alias.scope !535
  %190 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %189, null
  br i1 %190, label %195, label %191

; <label>:191:                                    ; preds = %187
  %192 = load i8*, i8** %32, align 8
  %193 = getelementptr inbounds i8, i8* %192, i64 1
  %194 = load i32, i32* %123, align 4, !alias.scope !535
  call void %189(%struct.png_struct_def* nonnull %0, i8* nonnull %193, i32 %194, i32 1) #18
  br label %195

; <label>:195:                                    ; preds = %187, %191
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %196 = add nuw nsw i32 %188, 1
  %197 = icmp ult i32 %196, 8
  %198 = load i8, i8* %105, align 1
  %199 = icmp eq i8 %198, 1
  %200 = and i1 %197, %199
  br i1 %200, label %187, label %201

; <label>:201:                                    ; preds = %195
  %202 = icmp eq i8 %198, 2
  br i1 %202, label %203, label %370

; <label>:203:                                    ; preds = %201
  %204 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %205 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %206 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %204, align 8, !alias.scope !538
  %207 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %206, null
  br i1 %207, label %210, label %208

; <label>:208:                                    ; preds = %203
  %209 = load i32, i32* %205, align 4, !alias.scope !538
  call void %206(%struct.png_struct_def* nonnull %0, i8* null, i32 %209, i32 2) #18
  br label %210

; <label>:210:                                    ; preds = %203, %208
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %211 = load i8, i8* %105, align 1
  %212 = icmp eq i8 %211, 2
  br i1 %212, label %401, label %370

; <label>:213:                                    ; preds = %113
  %214 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %215 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %216 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %214, align 8, !alias.scope !541
  %217 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %216, null
  br i1 %217, label %222, label %218

; <label>:218:                                    ; preds = %213
  %219 = load i8*, i8** %32, align 8
  %220 = getelementptr inbounds i8, i8* %219, i64 1
  %221 = load i32, i32* %215, align 4, !alias.scope !541
  call void %216(%struct.png_struct_def* nonnull %0, i8* nonnull %220, i32 %221, i32 2) #18
  br label %222

; <label>:222:                                    ; preds = %213, %218
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %223 = load i8, i8* %105, align 1
  %224 = icmp eq i8 %223, 2
  br i1 %224, label %429, label %240

; <label>:225:                                    ; preds = %449, %452
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %226 = load i8, i8* %105, align 1
  %227 = icmp eq i8 %226, 2
  br i1 %227, label %228, label %240

; <label>:228:                                    ; preds = %225, %234
  %229 = phi i32 [ %235, %234 ], [ 0, %225 ]
  %230 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %214, align 8, !alias.scope !544
  %231 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %230, null
  br i1 %231, label %234, label %232

; <label>:232:                                    ; preds = %228
  %233 = load i32, i32* %215, align 4, !alias.scope !544
  call void %230(%struct.png_struct_def* nonnull %0, i8* null, i32 %233, i32 2) #18
  br label %234

; <label>:234:                                    ; preds = %228, %232
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %235 = add nuw nsw i32 %229, 1
  %236 = icmp ult i32 %235, 4
  %237 = load i8, i8* %105, align 1
  %238 = icmp eq i8 %237, 2
  %239 = and i1 %236, %238
  br i1 %239, label %228, label %240

; <label>:240:                                    ; preds = %234, %222, %436, %446, %225
  %241 = phi i8 [ %226, %225 ], [ %223, %222 ], [ %437, %436 ], [ %447, %446 ], [ %237, %234 ]
  %242 = icmp eq i8 %241, 4
  br i1 %242, label %243, label %370

; <label>:243:                                    ; preds = %240
  %244 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %214, align 8, !alias.scope !547
  %245 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %244, null
  br i1 %245, label %248, label %246

; <label>:246:                                    ; preds = %243
  %247 = load i32, i32* %215, align 4, !alias.scope !547
  call void %244(%struct.png_struct_def* nonnull %0, i8* null, i32 %247, i32 4) #18
  br label %248

; <label>:248:                                    ; preds = %243, %246
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %249 = load i8, i8* %105, align 1
  %250 = icmp eq i8 %249, 4
  br i1 %250, label %423, label %370

; <label>:251:                                    ; preds = %118, %259
  %252 = phi i32 [ 0, %118 ], [ %260, %259 ]
  %253 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %119, align 8, !alias.scope !550
  %254 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %253, null
  br i1 %254, label %259, label %255

; <label>:255:                                    ; preds = %251
  %256 = load i8*, i8** %32, align 8
  %257 = getelementptr inbounds i8, i8* %256, i64 1
  %258 = load i32, i32* %120, align 4, !alias.scope !550
  call void %253(%struct.png_struct_def* nonnull %0, i8* nonnull %257, i32 %258, i32 3) #18
  br label %259

; <label>:259:                                    ; preds = %251, %255
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %260 = add nuw nsw i32 %252, 1
  %261 = icmp ult i32 %260, 4
  %262 = load i8, i8* %105, align 1
  %263 = icmp eq i8 %262, 3
  %264 = and i1 %261, %263
  br i1 %264, label %251, label %265

; <label>:265:                                    ; preds = %259
  %266 = icmp eq i8 %262, 4
  br i1 %266, label %267, label %370

; <label>:267:                                    ; preds = %265
  %268 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %269 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %270 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %268, align 8, !alias.scope !553
  %271 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %270, null
  br i1 %271, label %274, label %272

; <label>:272:                                    ; preds = %267
  %273 = load i32, i32* %269, align 4, !alias.scope !553
  call void %270(%struct.png_struct_def* nonnull %0, i8* null, i32 %273, i32 4) #18
  br label %274

; <label>:274:                                    ; preds = %267, %272
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %275 = load i8, i8* %105, align 1
  %276 = icmp eq i8 %275, 4
  br i1 %276, label %456, label %370

; <label>:277:                                    ; preds = %113
  %278 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %279 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %280 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %278, align 8, !alias.scope !556
  %281 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %280, null
  br i1 %281, label %286, label %282

; <label>:282:                                    ; preds = %277
  %283 = load i8*, i8** %32, align 8
  %284 = getelementptr inbounds i8, i8* %283, i64 1
  %285 = load i32, i32* %279, align 4, !alias.scope !556
  call void %280(%struct.png_struct_def* nonnull %0, i8* nonnull %284, i32 %285, i32 4) #18
  br label %286

; <label>:286:                                    ; preds = %277, %282
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %287 = load i8, i8* %105, align 1
  %288 = icmp eq i8 %287, 4
  br i1 %288, label %462, label %304

; <label>:289:                                    ; preds = %462, %465
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %290 = load i8, i8* %105, align 1
  %291 = icmp eq i8 %290, 4
  br i1 %291, label %292, label %304

; <label>:292:                                    ; preds = %289, %298
  %293 = phi i32 [ %299, %298 ], [ 0, %289 ]
  %294 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %278, align 8, !alias.scope !559
  %295 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %294, null
  br i1 %295, label %298, label %296

; <label>:296:                                    ; preds = %292
  %297 = load i32, i32* %279, align 4, !alias.scope !559
  call void %294(%struct.png_struct_def* nonnull %0, i8* null, i32 %297, i32 4) #18
  br label %298

; <label>:298:                                    ; preds = %292, %296
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %299 = add nuw nsw i32 %293, 1
  %300 = icmp ult i32 %299, 2
  %301 = load i8, i8* %105, align 1
  %302 = icmp eq i8 %301, 4
  %303 = and i1 %300, %302
  br i1 %303, label %292, label %304

; <label>:304:                                    ; preds = %298, %286, %289
  %305 = phi i8 [ %290, %289 ], [ %287, %286 ], [ %301, %298 ]
  %306 = icmp eq i8 %305, 6
  br i1 %306, label %307, label %370

; <label>:307:                                    ; preds = %304
  %308 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %278, align 8, !alias.scope !562
  %309 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %308, null
  br i1 %309, label %312, label %310

; <label>:310:                                    ; preds = %307
  %311 = load i32, i32* %279, align 4, !alias.scope !562
  call void %308(%struct.png_struct_def* nonnull %0, i8* null, i32 %311, i32 6) #18
  br label %312

; <label>:312:                                    ; preds = %307, %310
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  br label %370

; <label>:313:                                    ; preds = %115, %321
  %314 = phi i32 [ 0, %115 ], [ %322, %321 ]
  %315 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %116, align 8, !alias.scope !565
  %316 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %315, null
  br i1 %316, label %321, label %317

; <label>:317:                                    ; preds = %313
  %318 = load i8*, i8** %32, align 8
  %319 = getelementptr inbounds i8, i8* %318, i64 1
  %320 = load i32, i32* %117, align 4, !alias.scope !565
  call void %315(%struct.png_struct_def* nonnull %0, i8* nonnull %319, i32 %320, i32 5) #18
  br label %321

; <label>:321:                                    ; preds = %313, %317
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %322 = add nuw nsw i32 %314, 1
  %323 = icmp ult i32 %322, 2
  %324 = load i8, i8* %105, align 1
  %325 = icmp eq i8 %324, 5
  %326 = and i1 %323, %325
  br i1 %326, label %313, label %327

; <label>:327:                                    ; preds = %321
  %328 = icmp eq i8 %324, 6
  br i1 %328, label %329, label %370

; <label>:329:                                    ; preds = %327
  %330 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %331 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %330, align 8, !alias.scope !568
  %332 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %331, null
  br i1 %332, label %336, label %333

; <label>:333:                                    ; preds = %329
  %334 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %335 = load i32, i32* %334, align 4, !alias.scope !568
  call void %331(%struct.png_struct_def* nonnull %0, i8* null, i32 %335, i32 6) #18
  br label %336

; <label>:336:                                    ; preds = %329, %333
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  br label %370

; <label>:337:                                    ; preds = %113
  %338 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %339 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %338, align 8, !alias.scope !571
  %340 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %339, null
  br i1 %340, label %347, label %341

; <label>:341:                                    ; preds = %337
  %342 = load i8*, i8** %32, align 8
  %343 = getelementptr inbounds i8, i8* %342, i64 1
  %344 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %345 = load i32, i32* %344, align 4, !alias.scope !571
  %346 = zext i8 %114 to i32
  call void %339(%struct.png_struct_def* nonnull %0, i8* nonnull %343, i32 %345, i32 %346) #18
  br label %347

; <label>:347:                                    ; preds = %337, %341
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %348 = load i8, i8* %105, align 1
  %349 = icmp eq i8 %348, 6
  br i1 %349, label %350, label %370

; <label>:350:                                    ; preds = %347
  %351 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %338, align 8, !alias.scope !574
  %352 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %351, null
  br i1 %352, label %356, label %353

; <label>:353:                                    ; preds = %350
  %354 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %355 = load i32, i32* %354, align 4, !alias.scope !574
  call void %351(%struct.png_struct_def* nonnull %0, i8* null, i32 %355, i32 6) #18
  br label %356

; <label>:356:                                    ; preds = %350, %353
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  br label %370

; <label>:357:                                    ; preds = %100, %96
  %358 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %359 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %358, align 8, !alias.scope !577
  %360 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %359, null
  br i1 %360, label %369, label %361

; <label>:361:                                    ; preds = %357
  %362 = load i8*, i8** %32, align 8
  %363 = getelementptr inbounds i8, i8* %362, i64 1
  %364 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %365 = load i32, i32* %364, align 4, !alias.scope !577
  %366 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %367 = load i8, i8* %366, align 1, !alias.scope !577
  %368 = zext i8 %367 to i32
  call void %359(%struct.png_struct_def* nonnull %0, i8* nonnull %363, i32 %365, i32 %368) #18
  br label %369

; <label>:369:                                    ; preds = %357, %361
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  br label %370

; <label>:370:                                    ; preds = %274, %461, %248, %428, %210, %406, %414, %422, %327, %336, %304, %312, %265, %240, %201, %172, %175, %186, %347, %356, %369
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #18
  ret void

; <label>:371:                                    ; preds = %169
  %372 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %161, align 8, !alias.scope !529
  %373 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %372, null
  br i1 %373, label %376, label %374

; <label>:374:                                    ; preds = %371
  %375 = load i32, i32* %162, align 4, !alias.scope !529
  call void %372(%struct.png_struct_def* nonnull %0, i8* null, i32 %375, i32 4) #18
  br label %376

; <label>:376:                                    ; preds = %374, %371
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %377 = load i8, i8* %105, align 1
  br label %172

; <label>:378:                                    ; preds = %150
  %379 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %144, align 8, !alias.scope !526
  %380 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %379, null
  br i1 %380, label %383, label %381

; <label>:381:                                    ; preds = %378
  %382 = load i32, i32* %145, align 4, !alias.scope !526
  call void %379(%struct.png_struct_def* nonnull %0, i8* null, i32 %382, i32 2) #18
  br label %383

; <label>:383:                                    ; preds = %381, %378
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %384 = load i8, i8* %105, align 1
  %385 = icmp eq i8 %384, 2
  br i1 %385, label %386, label %153

; <label>:386:                                    ; preds = %383
  %387 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %144, align 8, !alias.scope !526
  %388 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %387, null
  br i1 %388, label %391, label %389

; <label>:389:                                    ; preds = %386
  %390 = load i32, i32* %145, align 4, !alias.scope !526
  call void %387(%struct.png_struct_def* nonnull %0, i8* null, i32 %390, i32 2) #18
  br label %391

; <label>:391:                                    ; preds = %389, %386
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %392 = load i8, i8* %105, align 1
  %393 = icmp eq i8 %392, 2
  br i1 %393, label %394, label %153

; <label>:394:                                    ; preds = %391
  %395 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %144, align 8, !alias.scope !526
  %396 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %395, null
  br i1 %396, label %399, label %397

; <label>:397:                                    ; preds = %394
  %398 = load i32, i32* %145, align 4, !alias.scope !526
  call void %395(%struct.png_struct_def* nonnull %0, i8* null, i32 %398, i32 2) #18
  br label %399

; <label>:399:                                    ; preds = %397, %394
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %400 = load i8, i8* %105, align 1
  br label %153

; <label>:401:                                    ; preds = %210
  %402 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %204, align 8, !alias.scope !538
  %403 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %402, null
  br i1 %403, label %406, label %404

; <label>:404:                                    ; preds = %401
  %405 = load i32, i32* %205, align 4, !alias.scope !538
  call void %402(%struct.png_struct_def* nonnull %0, i8* null, i32 %405, i32 2) #18
  br label %406

; <label>:406:                                    ; preds = %404, %401
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %407 = load i8, i8* %105, align 1
  %408 = icmp eq i8 %407, 2
  br i1 %408, label %409, label %370

; <label>:409:                                    ; preds = %406
  %410 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %204, align 8, !alias.scope !538
  %411 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %410, null
  br i1 %411, label %414, label %412

; <label>:412:                                    ; preds = %409
  %413 = load i32, i32* %205, align 4, !alias.scope !538
  call void %410(%struct.png_struct_def* nonnull %0, i8* null, i32 %413, i32 2) #18
  br label %414

; <label>:414:                                    ; preds = %412, %409
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %415 = load i8, i8* %105, align 1
  %416 = icmp eq i8 %415, 2
  br i1 %416, label %417, label %370

; <label>:417:                                    ; preds = %414
  %418 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %204, align 8, !alias.scope !538
  %419 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %418, null
  br i1 %419, label %422, label %420

; <label>:420:                                    ; preds = %417
  %421 = load i32, i32* %205, align 4, !alias.scope !538
  call void %418(%struct.png_struct_def* nonnull %0, i8* null, i32 %421, i32 2) #18
  br label %422

; <label>:422:                                    ; preds = %420, %417
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  br label %370

; <label>:423:                                    ; preds = %248
  %424 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %214, align 8, !alias.scope !547
  %425 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %424, null
  br i1 %425, label %428, label %426

; <label>:426:                                    ; preds = %423
  %427 = load i32, i32* %215, align 4, !alias.scope !547
  call void %424(%struct.png_struct_def* nonnull %0, i8* null, i32 %427, i32 4) #18
  br label %428

; <label>:428:                                    ; preds = %426, %423
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  br label %370

; <label>:429:                                    ; preds = %222
  %430 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %214, align 8, !alias.scope !541
  %431 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %430, null
  br i1 %431, label %436, label %432

; <label>:432:                                    ; preds = %429
  %433 = load i8*, i8** %32, align 8
  %434 = getelementptr inbounds i8, i8* %433, i64 1
  %435 = load i32, i32* %215, align 4, !alias.scope !541
  call void %430(%struct.png_struct_def* nonnull %0, i8* nonnull %434, i32 %435, i32 2) #18
  br label %436

; <label>:436:                                    ; preds = %432, %429
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %437 = load i8, i8* %105, align 1
  %438 = icmp eq i8 %437, 2
  br i1 %438, label %439, label %240

; <label>:439:                                    ; preds = %436
  %440 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %214, align 8, !alias.scope !541
  %441 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %440, null
  br i1 %441, label %446, label %442

; <label>:442:                                    ; preds = %439
  %443 = load i8*, i8** %32, align 8
  %444 = getelementptr inbounds i8, i8* %443, i64 1
  %445 = load i32, i32* %215, align 4, !alias.scope !541
  call void %440(%struct.png_struct_def* nonnull %0, i8* nonnull %444, i32 %445, i32 2) #18
  br label %446

; <label>:446:                                    ; preds = %442, %439
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  %447 = load i8, i8* %105, align 1
  %448 = icmp eq i8 %447, 2
  br i1 %448, label %449, label %240

; <label>:449:                                    ; preds = %446
  %450 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %214, align 8, !alias.scope !541
  %451 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %450, null
  br i1 %451, label %225, label %452

; <label>:452:                                    ; preds = %449
  %453 = load i8*, i8** %32, align 8
  %454 = getelementptr inbounds i8, i8* %453, i64 1
  %455 = load i32, i32* %215, align 4, !alias.scope !541
  call void %450(%struct.png_struct_def* nonnull %0, i8* nonnull %454, i32 %455, i32 2) #18
  br label %225

; <label>:456:                                    ; preds = %274
  %457 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %268, align 8, !alias.scope !553
  %458 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %457, null
  br i1 %458, label %461, label %459

; <label>:459:                                    ; preds = %456
  %460 = load i32, i32* %269, align 4, !alias.scope !553
  call void %457(%struct.png_struct_def* nonnull %0, i8* null, i32 %460, i32 4) #18
  br label %461

; <label>:461:                                    ; preds = %459, %456
  call void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* nonnull %0)
  br label %370

; <label>:462:                                    ; preds = %286
  %463 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %278, align 8, !alias.scope !556
  %464 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %463, null
  br i1 %464, label %289, label %465

; <label>:465:                                    ; preds = %462
  %466 = load i8*, i8** %32, align 8
  %467 = getelementptr inbounds i8, i8* %466, i64 1
  %468 = load i32, i32* %279, align 4, !alias.scope !556
  call void %463(%struct.png_struct_def* nonnull %0, i8* nonnull %467, i32 %468, i32 4) #18
  br label %289
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_filt_row(%struct.png_struct_def* noalias nocapture, %struct.png_row_info_struct*, i8*, i8*, i32) local_unnamed_addr #4 {
  %6 = add i32 %4, -1
  %7 = icmp ult i32 %6, 4
  br i1 %7, label %8, label %32

; <label>:8:                                      ; preds = %5
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 0
  %10 = load void (%struct.png_row_info_struct*, i8*, i8*)*, void (%struct.png_row_info_struct*, i8*, i8*)** %9, align 8
  %11 = icmp eq void (%struct.png_row_info_struct*, i8*, i8*)* %10, null
  br i1 %11, label %12, label %28

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %14 = load i8, i8* %13, align 4, !alias.scope !580
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %15, 7
  %17 = lshr i32 %16, 3
  %18 = bitcast void (%struct.png_row_info_struct*, i8*, i8*)** %9 to <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>*
  store <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> <void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_s, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_up>, <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>* %18, align 8, !alias.scope !580
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 2
  store void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_a, void (%struct.png_row_info_struct*, i8*, i8*)** %19, align 8, !alias.scope !580
  %20 = icmp eq i32 %17, 1
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 3
  %22 = select i1 %20, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p_1b_px, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p_mb_px
  store void (%struct.png_row_info_struct*, i8*, i8*)* %22, void (%struct.png_row_info_struct*, i8*, i8*)** %21, align 8, !alias.scope !580
  %23 = trunc i32 %17 to i6
  switch i6 %23, label %28 [
    i6 3, label %24
    i6 4, label %26
  ]

; <label>:24:                                     ; preds = %12
  store void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_s3_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %9, align 8, !alias.scope !580
  %25 = bitcast void (%struct.png_row_info_struct*, i8*, i8*)** %19 to <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>*
  store <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> <void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_a3_sse2, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p3_sse2>, <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>* %25, align 8, !alias.scope !580
  br label %28

; <label>:26:                                     ; preds = %12
  store void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_s4_sse2, void (%struct.png_row_info_struct*, i8*, i8*)** %9, align 8, !alias.scope !580
  %27 = bitcast void (%struct.png_row_info_struct*, i8*, i8*)** %19 to <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>*
  store <2 x void (%struct.png_row_info_struct*, i8*, i8*)*> <void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_a4_sse2, void (%struct.png_row_info_struct*, i8*, i8*)* @MOZ_PNG_read_filt_row_p4_sse2>, <2 x void (%struct.png_row_info_struct*, i8*, i8*)*>* %27, align 8, !alias.scope !580
  br label %28

; <label>:28:                                     ; preds = %26, %24, %12, %8
  %29 = sext i32 %6 to i64
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 106, i64 %29
  %31 = load void (%struct.png_row_info_struct*, i8*, i8*)*, void (%struct.png_row_info_struct*, i8*, i8*)** %30, align 8
  tail call void %31(%struct.png_row_info_struct* %1, i8* %2, i8* %3) #18
  br label %32

; <label>:32:                                     ; preds = %28, %5
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_do_read_trans(%struct.png_struct_def* noalias, %struct.png_row_info_struct*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

; <label>:6:                                      ; preds = %2
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.104, i64 0, i64 0)) #19
  unreachable

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %9 = load i32, i32* %8, align 4
  %10 = and i32 %9, 16448
  %11 = icmp eq i32 %10, 16384
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %7
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.105, i64 0, i64 0)) #19
  unreachable

; <label>:13:                                     ; preds = %7
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %15 = load i32, i32* %14, align 8
  %16 = and i32 %15, 4096
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %351, label %18

; <label>:18:                                     ; preds = %13
  %19 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 2
  %20 = load i8, i8* %19, align 8
  %21 = icmp eq i8 %20, 3
  br i1 %21, label %22, label %340

; <label>:22:                                     ; preds = %18
  %23 = getelementptr inbounds i8, i8* %4, i64 1
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 40
  %25 = load %struct.png_color_struct*, %struct.png_color_struct** %24, align 8
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 66
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 3
  %34 = load i8, i8* %33, align 1
  %35 = icmp ult i8 %34, 8
  br i1 %35, label %36, label %217

; <label>:36:                                     ; preds = %22
  switch i8 %34, label %37 [
    i8 1, label %39
    i8 2, label %86
    i8 4, label %132
  ]

; <label>:37:                                     ; preds = %36
  %38 = zext i32 %32 to i64
  br label %213

; <label>:39:                                     ; preds = %36
  %40 = zext i32 %32 to i64
  %41 = icmp eq i32 %32, 0
  br i1 %41, label %213, label %42

; <label>:42:                                     ; preds = %39
  %43 = add i32 %32, 7
  %44 = and i32 %43, 7
  %45 = xor i32 %44, 7
  %46 = getelementptr inbounds i8, i8* %23, i64 %40
  %47 = add i32 %32, -1
  %48 = lshr i32 %47, 3
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %23, i64 %49
  %51 = and i32 %32, 1
  %52 = icmp eq i32 %47, 0
  br i1 %52, label %176, label %53

; <label>:53:                                     ; preds = %42
  %54 = sub i32 %32, %51
  br label %55

; <label>:55:                                     ; preds = %55, %53
  %56 = phi i8* [ %46, %53 ], [ %72, %55 ]
  %57 = phi i32 [ %45, %53 ], [ %83, %55 ]
  %58 = phi i8* [ %50, %53 ], [ %82, %55 ]
  %59 = phi i32 [ %54, %53 ], [ %84, %55 ]
  %60 = getelementptr inbounds i8, i8* %56, i64 -1
  %61 = load i8, i8* %58, align 1
  %62 = zext i8 %61 to i32
  %63 = shl i32 1, %57
  %64 = and i32 %63, %62
  %65 = icmp ne i32 %64, 0
  %66 = zext i1 %65 to i8
  store i8 %66, i8* %60, align 1
  %67 = icmp eq i32 %57, 7
  %68 = getelementptr inbounds i8, i8* %58, i64 -1
  %69 = add nsw i32 %57, 1
  %70 = select i1 %67, i8* %68, i8* %58
  %71 = select i1 %67, i32 0, i32 %69
  %72 = getelementptr inbounds i8, i8* %56, i64 -2
  %73 = load i8, i8* %70, align 1
  %74 = zext i8 %73 to i32
  %75 = shl i32 1, %71
  %76 = and i32 %75, %74
  %77 = icmp ne i32 %76, 0
  %78 = zext i1 %77 to i8
  store i8 %78, i8* %72, align 1
  %79 = icmp eq i32 %71, 7
  %80 = getelementptr inbounds i8, i8* %70, i64 -1
  %81 = add nsw i32 %71, 1
  %82 = select i1 %79, i8* %80, i8* %70
  %83 = select i1 %79, i32 0, i32 %81
  %84 = add i32 %59, -2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %176, label %55

; <label>:86:                                     ; preds = %36
  %87 = zext i32 %32 to i64
  %88 = icmp eq i32 %32, 0
  br i1 %88, label %213, label %89

; <label>:89:                                     ; preds = %86
  %90 = shl i32 %32, 1
  %91 = add i32 %90, 6
  %92 = and i32 %91, 6
  %93 = xor i32 %92, 6
  %94 = getelementptr inbounds i8, i8* %23, i64 %87
  %95 = add i32 %32, -1
  %96 = lshr i32 %95, 2
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %23, i64 %97
  %99 = and i32 %32, 1
  %100 = icmp eq i32 %95, 0
  br i1 %100, label %189, label %101

; <label>:101:                                    ; preds = %89
  %102 = sub i32 %32, %99
  br label %103

; <label>:103:                                    ; preds = %103, %101
  %104 = phi i8* [ %94, %101 ], [ %119, %103 ]
  %105 = phi i32 [ %93, %101 ], [ %129, %103 ]
  %106 = phi i8* [ %98, %101 ], [ %128, %103 ]
  %107 = phi i32 [ %102, %101 ], [ %130, %103 ]
  %108 = getelementptr inbounds i8, i8* %104, i64 -1
  %109 = load i8, i8* %106, align 1
  %110 = zext i8 %109 to i32
  %111 = lshr i32 %110, %105
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 3
  store i8 %113, i8* %108, align 1
  %114 = icmp eq i32 %105, 6
  %115 = getelementptr inbounds i8, i8* %106, i64 -1
  %116 = add nsw i32 %105, 2
  %117 = select i1 %114, i8* %115, i8* %106
  %118 = select i1 %114, i32 0, i32 %116
  %119 = getelementptr inbounds i8, i8* %104, i64 -2
  %120 = load i8, i8* %117, align 1
  %121 = zext i8 %120 to i32
  %122 = lshr i32 %121, %118
  %123 = trunc i32 %122 to i8
  %124 = and i8 %123, 3
  store i8 %124, i8* %119, align 1
  %125 = icmp eq i32 %118, 6
  %126 = getelementptr inbounds i8, i8* %117, i64 -1
  %127 = add nsw i32 %118, 2
  %128 = select i1 %125, i8* %126, i8* %117
  %129 = select i1 %125, i32 0, i32 %127
  %130 = add i32 %107, -2
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %189, label %103

; <label>:132:                                    ; preds = %36
  %133 = zext i32 %32 to i64
  %134 = icmp eq i32 %32, 0
  br i1 %134, label %213, label %135

; <label>:135:                                    ; preds = %132
  %136 = shl i32 %32, 2
  %137 = and i32 %136, 4
  %138 = getelementptr inbounds i8, i8* %23, i64 %133
  %139 = add i32 %32, -1
  %140 = lshr i32 %139, 1
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %23, i64 %141
  %143 = and i32 %32, 1
  %144 = icmp eq i32 %139, 0
  br i1 %144, label %201, label %145

; <label>:145:                                    ; preds = %135
  %146 = sub i32 %32, %143
  br label %147

; <label>:147:                                    ; preds = %147, %145
  %148 = phi i8* [ %138, %145 ], [ %163, %147 ]
  %149 = phi i32 [ %137, %145 ], [ %173, %147 ]
  %150 = phi i8* [ %142, %145 ], [ %172, %147 ]
  %151 = phi i32 [ %146, %145 ], [ %174, %147 ]
  %152 = getelementptr inbounds i8, i8* %148, i64 -1
  %153 = load i8, i8* %150, align 1
  %154 = zext i8 %153 to i32
  %155 = lshr i32 %154, %149
  %156 = trunc i32 %155 to i8
  %157 = and i8 %156, 15
  store i8 %157, i8* %152, align 1
  %158 = icmp eq i32 %149, 4
  %159 = getelementptr inbounds i8, i8* %150, i64 -1
  %160 = add nsw i32 %149, 4
  %161 = select i1 %158, i8* %159, i8* %150
  %162 = select i1 %158, i32 0, i32 %160
  %163 = getelementptr inbounds i8, i8* %148, i64 -2
  %164 = load i8, i8* %161, align 1
  %165 = zext i8 %164 to i32
  %166 = lshr i32 %165, %162
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 15
  store i8 %168, i8* %163, align 1
  %169 = icmp eq i32 %162, 4
  %170 = getelementptr inbounds i8, i8* %161, i64 -1
  %171 = add nsw i32 %162, 4
  %172 = select i1 %169, i8* %170, i8* %161
  %173 = select i1 %169, i32 0, i32 %171
  %174 = add i32 %151, -2
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %201, label %147

; <label>:176:                                    ; preds = %55, %42
  %177 = phi i8* [ %46, %42 ], [ %72, %55 ]
  %178 = phi i32 [ %45, %42 ], [ %83, %55 ]
  %179 = phi i8* [ %50, %42 ], [ %82, %55 ]
  %180 = icmp eq i32 %51, 0
  br i1 %180, label %213, label %181

; <label>:181:                                    ; preds = %176
  %182 = getelementptr inbounds i8, i8* %177, i64 -1
  %183 = load i8, i8* %179, align 1
  %184 = zext i8 %183 to i32
  %185 = shl i32 1, %178
  %186 = and i32 %185, %184
  %187 = icmp ne i32 %186, 0
  %188 = zext i1 %187 to i8
  store i8 %188, i8* %182, align 1
  br label %213

; <label>:189:                                    ; preds = %103, %89
  %190 = phi i8* [ %94, %89 ], [ %119, %103 ]
  %191 = phi i32 [ %93, %89 ], [ %129, %103 ]
  %192 = phi i8* [ %98, %89 ], [ %128, %103 ]
  %193 = icmp eq i32 %99, 0
  br i1 %193, label %213, label %194

; <label>:194:                                    ; preds = %189
  %195 = getelementptr inbounds i8, i8* %190, i64 -1
  %196 = load i8, i8* %192, align 1
  %197 = zext i8 %196 to i32
  %198 = lshr i32 %197, %191
  %199 = trunc i32 %198 to i8
  %200 = and i8 %199, 3
  store i8 %200, i8* %195, align 1
  br label %213

; <label>:201:                                    ; preds = %147, %135
  %202 = phi i8* [ %138, %135 ], [ %163, %147 ]
  %203 = phi i32 [ %137, %135 ], [ %173, %147 ]
  %204 = phi i8* [ %142, %135 ], [ %172, %147 ]
  %205 = icmp eq i32 %143, 0
  br i1 %205, label %213, label %206

; <label>:206:                                    ; preds = %201
  %207 = getelementptr inbounds i8, i8* %202, i64 -1
  %208 = load i8, i8* %204, align 1
  %209 = zext i8 %208 to i32
  %210 = lshr i32 %209, %203
  %211 = trunc i32 %210 to i8
  %212 = and i8 %211, 15
  store i8 %212, i8* %207, align 1
  br label %213

; <label>:213:                                    ; preds = %206, %201, %194, %189, %181, %176, %132, %86, %39, %37
  %214 = phi i64 [ %38, %37 ], [ 0, %39 ], [ 0, %86 ], [ 0, %132 ], [ %40, %176 ], [ %40, %181 ], [ %87, %189 ], [ %87, %194 ], [ %133, %201 ], [ %133, %206 ]
  store i8 8, i8* %33, align 1
  %215 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 5
  store i8 8, i8* %215, align 1
  %216 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 1
  store i64 %214, i64* %216, align 8
  br label %219

; <label>:217:                                    ; preds = %22
  %218 = icmp eq i8 %34, 8
  br i1 %218, label %219, label %351

; <label>:219:                                    ; preds = %217, %213
  %220 = icmp eq i16 %29, 0
  %221 = zext i32 %32 to i64
  %222 = getelementptr inbounds i8, i8* %23, i64 %221
  %223 = getelementptr inbounds i8, i8* %222, i64 -1
  br i1 %220, label %268, label %224

; <label>:224:                                    ; preds = %219
  %225 = icmp eq i32 %32, 0
  br i1 %225, label %262, label %226

; <label>:226:                                    ; preds = %224
  %227 = shl nuw nsw i64 %221, 2
  %228 = getelementptr inbounds i8, i8* %23, i64 %227
  %229 = getelementptr inbounds i8, i8* %228, i64 -1
  br label %230

; <label>:230:                                    ; preds = %241, %226
  %231 = phi i32 [ %260, %241 ], [ 0, %226 ]
  %232 = phi i8* [ %258, %241 ], [ %229, %226 ]
  %233 = phi i8* [ %259, %241 ], [ %223, %226 ]
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i32
  %236 = icmp ult i32 %235, %30
  br i1 %236, label %237, label %241

; <label>:237:                                    ; preds = %230
  %238 = zext i8 %234 to i64
  %239 = getelementptr inbounds i8, i8* %27, i64 %238
  %240 = load i8, i8* %239, align 1
  br label %241

; <label>:241:                                    ; preds = %237, %230
  %242 = phi i8 [ %240, %237 ], [ -1, %230 ]
  %243 = getelementptr inbounds i8, i8* %232, i64 -1
  store i8 %242, i8* %232, align 1
  %244 = load i8, i8* %233, align 1
  %245 = zext i8 %244 to i64
  %246 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %245, i32 2
  %247 = load i8, i8* %246, align 1
  %248 = getelementptr inbounds i8, i8* %232, i64 -2
  store i8 %247, i8* %243, align 1
  %249 = load i8, i8* %233, align 1
  %250 = zext i8 %249 to i64
  %251 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %250, i32 1
  %252 = load i8, i8* %251, align 1
  %253 = getelementptr inbounds i8, i8* %232, i64 -3
  store i8 %252, i8* %248, align 1
  %254 = load i8, i8* %233, align 1
  %255 = zext i8 %254 to i64
  %256 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %255, i32 0
  %257 = load i8, i8* %256, align 1
  %258 = getelementptr inbounds i8, i8* %232, i64 -4
  store i8 %257, i8* %253, align 1
  %259 = getelementptr inbounds i8, i8* %233, i64 -1
  %260 = add nuw i32 %231, 1
  %261 = icmp eq i32 %260, %32
  br i1 %261, label %262, label %230

; <label>:262:                                    ; preds = %241, %224
  store i8 8, i8* %33, align 1
  %263 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 5
  store i8 32, i8* %263, align 1
  %264 = shl i32 %32, 2
  %265 = zext i32 %264 to i64
  %266 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 1
  store i64 %265, i64* %266, align 8
  store i8 6, i8* %19, align 8
  %267 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 4
  store i8 4, i8* %267, align 2
  br label %351

; <label>:268:                                    ; preds = %219
  %269 = mul i32 %32, 3
  %270 = zext i32 %269 to i64
  %271 = icmp eq i32 %32, 0
  br i1 %271, label %336, label %272

; <label>:272:                                    ; preds = %268
  %273 = getelementptr inbounds i8, i8* %23, i64 %270
  %274 = getelementptr inbounds i8, i8* %273, i64 -1
  %275 = and i32 %32, 1
  %276 = icmp eq i32 %32, 1
  br i1 %276, label %317, label %277

; <label>:277:                                    ; preds = %272
  %278 = sub i32 %32, %275
  br label %279

; <label>:279:                                    ; preds = %279, %277
  %280 = phi i8* [ %274, %277 ], [ %313, %279 ]
  %281 = phi i8* [ %223, %277 ], [ %314, %279 ]
  %282 = phi i32 [ %278, %277 ], [ %315, %279 ]
  %283 = load i8, i8* %281, align 1
  %284 = zext i8 %283 to i64
  %285 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %284, i32 2
  %286 = load i8, i8* %285, align 1
  %287 = getelementptr inbounds i8, i8* %280, i64 -1
  store i8 %286, i8* %280, align 1
  %288 = load i8, i8* %281, align 1
  %289 = zext i8 %288 to i64
  %290 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %289, i32 1
  %291 = load i8, i8* %290, align 1
  %292 = getelementptr inbounds i8, i8* %280, i64 -2
  store i8 %291, i8* %287, align 1
  %293 = load i8, i8* %281, align 1
  %294 = zext i8 %293 to i64
  %295 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %294, i32 0
  %296 = load i8, i8* %295, align 1
  %297 = getelementptr inbounds i8, i8* %280, i64 -3
  store i8 %296, i8* %292, align 1
  %298 = getelementptr inbounds i8, i8* %281, i64 -1
  %299 = load i8, i8* %298, align 1
  %300 = zext i8 %299 to i64
  %301 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %300, i32 2
  %302 = load i8, i8* %301, align 1
  %303 = getelementptr inbounds i8, i8* %280, i64 -4
  store i8 %302, i8* %297, align 1
  %304 = load i8, i8* %298, align 1
  %305 = zext i8 %304 to i64
  %306 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %305, i32 1
  %307 = load i8, i8* %306, align 1
  %308 = getelementptr inbounds i8, i8* %280, i64 -5
  store i8 %307, i8* %303, align 1
  %309 = load i8, i8* %298, align 1
  %310 = zext i8 %309 to i64
  %311 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %310, i32 0
  %312 = load i8, i8* %311, align 1
  %313 = getelementptr inbounds i8, i8* %280, i64 -6
  store i8 %312, i8* %308, align 1
  %314 = getelementptr inbounds i8, i8* %281, i64 -2
  %315 = add i32 %282, -2
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %317, label %279

; <label>:317:                                    ; preds = %279, %272
  %318 = phi i8* [ %274, %272 ], [ %313, %279 ]
  %319 = phi i8* [ %223, %272 ], [ %314, %279 ]
  %320 = icmp eq i32 %275, 0
  br i1 %320, label %336, label %321

; <label>:321:                                    ; preds = %317
  %322 = load i8, i8* %319, align 1
  %323 = zext i8 %322 to i64
  %324 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %323, i32 2
  %325 = load i8, i8* %324, align 1
  %326 = getelementptr inbounds i8, i8* %318, i64 -1
  store i8 %325, i8* %318, align 1
  %327 = load i8, i8* %319, align 1
  %328 = zext i8 %327 to i64
  %329 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %328, i32 1
  %330 = load i8, i8* %329, align 1
  %331 = getelementptr inbounds i8, i8* %318, i64 -2
  store i8 %330, i8* %326, align 1
  %332 = load i8, i8* %319, align 1
  %333 = zext i8 %332 to i64
  %334 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %25, i64 %333, i32 0
  %335 = load i8, i8* %334, align 1
  store i8 %335, i8* %331, align 1
  br label %336

; <label>:336:                                    ; preds = %321, %317, %268
  store i8 8, i8* %33, align 1
  %337 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 5
  store i8 24, i8* %337, align 1
  %338 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 1
  store i64 %270, i64* %338, align 8
  store i8 2, i8* %19, align 8
  %339 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 4
  store i8 3, i8* %339, align 2
  br label %351

; <label>:340:                                    ; preds = %18
  %341 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %342 = load i16, i16* %341, align 2
  %343 = icmp eq i16 %342, 0
  %344 = and i32 %15, 33554432
  %345 = icmp eq i32 %344, 0
  %346 = or i1 %345, %343
  %347 = getelementptr inbounds i8, i8* %4, i64 1
  br i1 %346, label %350, label %348

; <label>:348:                                    ; preds = %340
  %349 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 67
  tail call fastcc void @MOZ_PNG_do_expand(%struct.png_row_info_struct* nonnull %1, i8* nonnull %347, %struct.png_color_16_struct* nonnull %349)
  br label %351

; <label>:350:                                    ; preds = %340
  tail call fastcc void @MOZ_PNG_do_expand(%struct.png_row_info_struct* nonnull %1, i8* nonnull %347, %struct.png_color_16_struct* null)
  br label %351

; <label>:351:                                    ; preds = %336, %262, %217, %13, %350, %348
  %352 = load i32, i32* %14, align 8
  %353 = and i32 %352, 16384
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %364, label %355

; <label>:355:                                    ; preds = %351
  %356 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %357 = load i32, i32* %356, align 8
  %358 = and i32 %357, 2048
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %360, label %364

; <label>:360:                                    ; preds = %355
  %361 = load i8*, i8** %3, align 8
  %362 = getelementptr inbounds i8, i8* %361, i64 1
  tail call fastcc void @MOZ_PNG_do_g_to_rgb(%struct.png_row_info_struct* %1, i8* nonnull %362)
  %363 = load i32, i32* %14, align 8
  br label %364

; <label>:364:                                    ; preds = %351, %360, %355
  %365 = phi i32 [ %352, %351 ], [ %363, %360 ], [ %352, %355 ]
  %366 = and i32 %365, 8192
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %924, label %368

; <label>:368:                                    ; preds = %364
  %369 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %370 = load i8, i8* %369, align 1
  %371 = icmp eq i8 %370, 3
  br i1 %371, label %924, label %372

; <label>:372:                                    ; preds = %368
  %373 = load i8*, i8** %3, align 8
  %374 = getelementptr inbounds i8, i8* %373, i64 1
  %375 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  %376 = load i8*, i8** %375, align 8, !alias.scope !583
  %377 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  %378 = load i16**, i16*** %377, align 8, !alias.scope !583
  %379 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %380 = load i32, i32* %379, align 8, !alias.scope !583
  %381 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 0
  %382 = load i32, i32* %381, align 8, !noalias !583
  %383 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 3
  %384 = load i8, i8* %383, align 1, !noalias !583
  %385 = icmp ult i8 %384, 9
  %386 = icmp ne i8* %376, null
  %387 = and i1 %386, %385
  br i1 %387, label %392, label %388

; <label>:388:                                    ; preds = %372
  %389 = icmp eq i8 %384, 16
  %390 = icmp ne i16** %378, null
  %391 = and i1 %390, %389
  br i1 %391, label %392, label %924

; <label>:392:                                    ; preds = %388, %372
  %393 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 2
  %394 = load i8, i8* %393, align 8, !noalias !583
  switch i8 %394, label %924 [
    i8 2, label %395
    i8 6, label %490
    i8 4, label %585
    i8 0, label %661
  ]

; <label>:395:                                    ; preds = %392
  %396 = icmp eq i8 %384, 8
  %397 = icmp ne i32 %382, 0
  br i1 %396, label %399, label %398

; <label>:398:                                    ; preds = %395
  br i1 %397, label %440, label %924

; <label>:399:                                    ; preds = %395
  br i1 %397, label %400, label %924

; <label>:400:                                    ; preds = %399
  %401 = and i32 %382, 1
  %402 = icmp eq i32 %382, 1
  br i1 %402, label %826, label %403

; <label>:403:                                    ; preds = %400
  %404 = sub i32 %382, %401
  br label %405

; <label>:405:                                    ; preds = %405, %403
  %406 = phi i8* [ %374, %403 ], [ %437, %405 ]
  %407 = phi i32 [ %404, %403 ], [ %438, %405 ]
  %408 = load i8, i8* %406, align 1, !noalias !583
  %409 = zext i8 %408 to i64
  %410 = getelementptr inbounds i8, i8* %376, i64 %409
  %411 = load i8, i8* %410, align 1, !noalias !583
  store i8 %411, i8* %406, align 1, !noalias !583
  %412 = getelementptr inbounds i8, i8* %406, i64 1
  %413 = load i8, i8* %412, align 1, !noalias !583
  %414 = zext i8 %413 to i64
  %415 = getelementptr inbounds i8, i8* %376, i64 %414
  %416 = load i8, i8* %415, align 1, !noalias !583
  store i8 %416, i8* %412, align 1, !noalias !583
  %417 = getelementptr inbounds i8, i8* %406, i64 2
  %418 = load i8, i8* %417, align 1, !noalias !583
  %419 = zext i8 %418 to i64
  %420 = getelementptr inbounds i8, i8* %376, i64 %419
  %421 = load i8, i8* %420, align 1, !noalias !583
  store i8 %421, i8* %417, align 1, !noalias !583
  %422 = getelementptr inbounds i8, i8* %406, i64 3
  %423 = load i8, i8* %422, align 1, !noalias !583
  %424 = zext i8 %423 to i64
  %425 = getelementptr inbounds i8, i8* %376, i64 %424
  %426 = load i8, i8* %425, align 1, !noalias !583
  store i8 %426, i8* %422, align 1, !noalias !583
  %427 = getelementptr inbounds i8, i8* %406, i64 4
  %428 = load i8, i8* %427, align 1, !noalias !583
  %429 = zext i8 %428 to i64
  %430 = getelementptr inbounds i8, i8* %376, i64 %429
  %431 = load i8, i8* %430, align 1, !noalias !583
  store i8 %431, i8* %427, align 1, !noalias !583
  %432 = getelementptr inbounds i8, i8* %406, i64 5
  %433 = load i8, i8* %432, align 1, !noalias !583
  %434 = zext i8 %433 to i64
  %435 = getelementptr inbounds i8, i8* %376, i64 %434
  %436 = load i8, i8* %435, align 1, !noalias !583
  store i8 %436, i8* %432, align 1, !noalias !583
  %437 = getelementptr inbounds i8, i8* %406, i64 6
  %438 = add i32 %407, -2
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %826, label %405

; <label>:440:                                    ; preds = %398, %440
  %441 = phi i8* [ %487, %440 ], [ %374, %398 ]
  %442 = phi i32 [ %488, %440 ], [ 0, %398 ]
  %443 = getelementptr inbounds i8, i8* %441, i64 1
  %444 = load i8, i8* %443, align 1, !noalias !583
  %445 = zext i8 %444 to i32
  %446 = lshr i32 %445, %380
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds i16*, i16** %378, i64 %447
  %449 = load i16*, i16** %448, align 8, !noalias !583
  %450 = load i8, i8* %441, align 1, !noalias !583
  %451 = zext i8 %450 to i64
  %452 = getelementptr inbounds i16, i16* %449, i64 %451
  %453 = load i16, i16* %452, align 2, !noalias !583
  %454 = lshr i16 %453, 8
  %455 = trunc i16 %454 to i8
  store i8 %455, i8* %441, align 1, !noalias !583
  %456 = trunc i16 %453 to i8
  store i8 %456, i8* %443, align 1, !noalias !583
  %457 = getelementptr inbounds i8, i8* %441, i64 2
  %458 = getelementptr inbounds i8, i8* %441, i64 3
  %459 = load i8, i8* %458, align 1, !noalias !583
  %460 = zext i8 %459 to i32
  %461 = lshr i32 %460, %380
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds i16*, i16** %378, i64 %462
  %464 = load i16*, i16** %463, align 8, !noalias !583
  %465 = load i8, i8* %457, align 1, !noalias !583
  %466 = zext i8 %465 to i64
  %467 = getelementptr inbounds i16, i16* %464, i64 %466
  %468 = load i16, i16* %467, align 2, !noalias !583
  %469 = lshr i16 %468, 8
  %470 = trunc i16 %469 to i8
  store i8 %470, i8* %457, align 1, !noalias !583
  %471 = trunc i16 %468 to i8
  store i8 %471, i8* %458, align 1, !noalias !583
  %472 = getelementptr inbounds i8, i8* %441, i64 4
  %473 = getelementptr inbounds i8, i8* %441, i64 5
  %474 = load i8, i8* %473, align 1, !noalias !583
  %475 = zext i8 %474 to i32
  %476 = lshr i32 %475, %380
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds i16*, i16** %378, i64 %477
  %479 = load i16*, i16** %478, align 8, !noalias !583
  %480 = load i8, i8* %472, align 1, !noalias !583
  %481 = zext i8 %480 to i64
  %482 = getelementptr inbounds i16, i16* %479, i64 %481
  %483 = load i16, i16* %482, align 2, !noalias !583
  %484 = lshr i16 %483, 8
  %485 = trunc i16 %484 to i8
  store i8 %485, i8* %472, align 1, !noalias !583
  %486 = trunc i16 %483 to i8
  store i8 %486, i8* %473, align 1, !noalias !583
  %487 = getelementptr inbounds i8, i8* %441, i64 6
  %488 = add nuw i32 %442, 1
  %489 = icmp eq i32 %488, %382
  br i1 %489, label %924, label %440

; <label>:490:                                    ; preds = %392
  %491 = icmp eq i8 %384, 8
  %492 = icmp ne i32 %382, 0
  br i1 %491, label %494, label %493

; <label>:493:                                    ; preds = %490
  br i1 %492, label %535, label %924

; <label>:494:                                    ; preds = %490
  br i1 %492, label %495, label %924

; <label>:495:                                    ; preds = %494
  %496 = and i32 %382, 1
  %497 = icmp eq i32 %382, 1
  br i1 %497, label %844, label %498

; <label>:498:                                    ; preds = %495
  %499 = sub i32 %382, %496
  br label %500

; <label>:500:                                    ; preds = %500, %498
  %501 = phi i8* [ %374, %498 ], [ %532, %500 ]
  %502 = phi i32 [ %499, %498 ], [ %533, %500 ]
  %503 = load i8, i8* %501, align 1, !noalias !583
  %504 = zext i8 %503 to i64
  %505 = getelementptr inbounds i8, i8* %376, i64 %504
  %506 = load i8, i8* %505, align 1, !noalias !583
  store i8 %506, i8* %501, align 1, !noalias !583
  %507 = getelementptr inbounds i8, i8* %501, i64 1
  %508 = load i8, i8* %507, align 1, !noalias !583
  %509 = zext i8 %508 to i64
  %510 = getelementptr inbounds i8, i8* %376, i64 %509
  %511 = load i8, i8* %510, align 1, !noalias !583
  store i8 %511, i8* %507, align 1, !noalias !583
  %512 = getelementptr inbounds i8, i8* %501, i64 2
  %513 = load i8, i8* %512, align 1, !noalias !583
  %514 = zext i8 %513 to i64
  %515 = getelementptr inbounds i8, i8* %376, i64 %514
  %516 = load i8, i8* %515, align 1, !noalias !583
  store i8 %516, i8* %512, align 1, !noalias !583
  %517 = getelementptr inbounds i8, i8* %501, i64 4
  %518 = load i8, i8* %517, align 1, !noalias !583
  %519 = zext i8 %518 to i64
  %520 = getelementptr inbounds i8, i8* %376, i64 %519
  %521 = load i8, i8* %520, align 1, !noalias !583
  store i8 %521, i8* %517, align 1, !noalias !583
  %522 = getelementptr inbounds i8, i8* %501, i64 5
  %523 = load i8, i8* %522, align 1, !noalias !583
  %524 = zext i8 %523 to i64
  %525 = getelementptr inbounds i8, i8* %376, i64 %524
  %526 = load i8, i8* %525, align 1, !noalias !583
  store i8 %526, i8* %522, align 1, !noalias !583
  %527 = getelementptr inbounds i8, i8* %501, i64 6
  %528 = load i8, i8* %527, align 1, !noalias !583
  %529 = zext i8 %528 to i64
  %530 = getelementptr inbounds i8, i8* %376, i64 %529
  %531 = load i8, i8* %530, align 1, !noalias !583
  store i8 %531, i8* %527, align 1, !noalias !583
  %532 = getelementptr inbounds i8, i8* %501, i64 8
  %533 = add i32 %502, -2
  %534 = icmp eq i32 %533, 0
  br i1 %534, label %844, label %500

; <label>:535:                                    ; preds = %493, %535
  %536 = phi i8* [ %582, %535 ], [ %374, %493 ]
  %537 = phi i32 [ %583, %535 ], [ 0, %493 ]
  %538 = getelementptr inbounds i8, i8* %536, i64 1
  %539 = load i8, i8* %538, align 1, !noalias !583
  %540 = zext i8 %539 to i32
  %541 = lshr i32 %540, %380
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds i16*, i16** %378, i64 %542
  %544 = load i16*, i16** %543, align 8, !noalias !583
  %545 = load i8, i8* %536, align 1, !noalias !583
  %546 = zext i8 %545 to i64
  %547 = getelementptr inbounds i16, i16* %544, i64 %546
  %548 = load i16, i16* %547, align 2, !noalias !583
  %549 = lshr i16 %548, 8
  %550 = trunc i16 %549 to i8
  store i8 %550, i8* %536, align 1, !noalias !583
  %551 = trunc i16 %548 to i8
  store i8 %551, i8* %538, align 1, !noalias !583
  %552 = getelementptr inbounds i8, i8* %536, i64 2
  %553 = getelementptr inbounds i8, i8* %536, i64 3
  %554 = load i8, i8* %553, align 1, !noalias !583
  %555 = zext i8 %554 to i32
  %556 = lshr i32 %555, %380
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds i16*, i16** %378, i64 %557
  %559 = load i16*, i16** %558, align 8, !noalias !583
  %560 = load i8, i8* %552, align 1, !noalias !583
  %561 = zext i8 %560 to i64
  %562 = getelementptr inbounds i16, i16* %559, i64 %561
  %563 = load i16, i16* %562, align 2, !noalias !583
  %564 = lshr i16 %563, 8
  %565 = trunc i16 %564 to i8
  store i8 %565, i8* %552, align 1, !noalias !583
  %566 = trunc i16 %563 to i8
  store i8 %566, i8* %553, align 1, !noalias !583
  %567 = getelementptr inbounds i8, i8* %536, i64 4
  %568 = getelementptr inbounds i8, i8* %536, i64 5
  %569 = load i8, i8* %568, align 1, !noalias !583
  %570 = zext i8 %569 to i32
  %571 = lshr i32 %570, %380
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds i16*, i16** %378, i64 %572
  %574 = load i16*, i16** %573, align 8, !noalias !583
  %575 = load i8, i8* %567, align 1, !noalias !583
  %576 = zext i8 %575 to i64
  %577 = getelementptr inbounds i16, i16* %574, i64 %576
  %578 = load i16, i16* %577, align 2, !noalias !583
  %579 = lshr i16 %578, 8
  %580 = trunc i16 %579 to i8
  store i8 %580, i8* %567, align 1, !noalias !583
  %581 = trunc i16 %578 to i8
  store i8 %581, i8* %568, align 1, !noalias !583
  %582 = getelementptr inbounds i8, i8* %536, i64 8
  %583 = add nuw i32 %537, 1
  %584 = icmp eq i32 %583, %382
  br i1 %584, label %924, label %535

; <label>:585:                                    ; preds = %392
  %586 = icmp eq i8 %384, 8
  %587 = icmp ne i32 %382, 0
  br i1 %586, label %594, label %588

; <label>:588:                                    ; preds = %585
  br i1 %587, label %589, label %924

; <label>:589:                                    ; preds = %588
  %590 = and i32 %382, 1
  %591 = icmp eq i32 %382, 1
  br i1 %591, label %875, label %592

; <label>:592:                                    ; preds = %589
  %593 = sub i32 %382, %590
  br label %626

; <label>:594:                                    ; preds = %585
  br i1 %587, label %595, label %924

; <label>:595:                                    ; preds = %594
  %596 = add i32 %382, -1
  %597 = and i32 %382, 3
  %598 = icmp ult i32 %596, 3
  br i1 %598, label %862, label %599

; <label>:599:                                    ; preds = %595
  %600 = sub i32 %382, %597
  br label %601

; <label>:601:                                    ; preds = %601, %599
  %602 = phi i8* [ %374, %599 ], [ %623, %601 ]
  %603 = phi i32 [ %600, %599 ], [ %624, %601 ]
  %604 = load i8, i8* %602, align 1, !noalias !583
  %605 = zext i8 %604 to i64
  %606 = getelementptr inbounds i8, i8* %376, i64 %605
  %607 = load i8, i8* %606, align 1, !noalias !583
  store i8 %607, i8* %602, align 1, !noalias !583
  %608 = getelementptr inbounds i8, i8* %602, i64 2
  %609 = load i8, i8* %608, align 1, !noalias !583
  %610 = zext i8 %609 to i64
  %611 = getelementptr inbounds i8, i8* %376, i64 %610
  %612 = load i8, i8* %611, align 1, !noalias !583
  store i8 %612, i8* %608, align 1, !noalias !583
  %613 = getelementptr inbounds i8, i8* %602, i64 4
  %614 = load i8, i8* %613, align 1, !noalias !583
  %615 = zext i8 %614 to i64
  %616 = getelementptr inbounds i8, i8* %376, i64 %615
  %617 = load i8, i8* %616, align 1, !noalias !583
  store i8 %617, i8* %613, align 1, !noalias !583
  %618 = getelementptr inbounds i8, i8* %602, i64 6
  %619 = load i8, i8* %618, align 1, !noalias !583
  %620 = zext i8 %619 to i64
  %621 = getelementptr inbounds i8, i8* %376, i64 %620
  %622 = load i8, i8* %621, align 1, !noalias !583
  store i8 %622, i8* %618, align 1, !noalias !583
  %623 = getelementptr inbounds i8, i8* %602, i64 8
  %624 = add i32 %603, -4
  %625 = icmp eq i32 %624, 0
  br i1 %625, label %862, label %601

; <label>:626:                                    ; preds = %626, %592
  %627 = phi i8* [ %374, %592 ], [ %658, %626 ]
  %628 = phi i32 [ %593, %592 ], [ %659, %626 ]
  %629 = getelementptr inbounds i8, i8* %627, i64 1
  %630 = load i8, i8* %629, align 1, !noalias !583
  %631 = zext i8 %630 to i32
  %632 = lshr i32 %631, %380
  %633 = sext i32 %632 to i64
  %634 = getelementptr inbounds i16*, i16** %378, i64 %633
  %635 = load i16*, i16** %634, align 8, !noalias !583
  %636 = load i8, i8* %627, align 1, !noalias !583
  %637 = zext i8 %636 to i64
  %638 = getelementptr inbounds i16, i16* %635, i64 %637
  %639 = load i16, i16* %638, align 2, !noalias !583
  %640 = lshr i16 %639, 8
  %641 = trunc i16 %640 to i8
  store i8 %641, i8* %627, align 1, !noalias !583
  %642 = trunc i16 %639 to i8
  store i8 %642, i8* %629, align 1, !noalias !583
  %643 = getelementptr inbounds i8, i8* %627, i64 4
  %644 = getelementptr inbounds i8, i8* %627, i64 5
  %645 = load i8, i8* %644, align 1, !noalias !583
  %646 = zext i8 %645 to i32
  %647 = lshr i32 %646, %380
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i16*, i16** %378, i64 %648
  %650 = load i16*, i16** %649, align 8, !noalias !583
  %651 = load i8, i8* %643, align 1, !noalias !583
  %652 = zext i8 %651 to i64
  %653 = getelementptr inbounds i16, i16* %650, i64 %652
  %654 = load i16, i16* %653, align 2, !noalias !583
  %655 = lshr i16 %654, 8
  %656 = trunc i16 %655 to i8
  store i8 %656, i8* %643, align 1, !noalias !583
  %657 = trunc i16 %654 to i8
  store i8 %657, i8* %644, align 1, !noalias !583
  %658 = getelementptr inbounds i8, i8* %627, i64 8
  %659 = add i32 %628, -2
  %660 = icmp eq i32 %659, 0
  br i1 %660, label %875, label %626

; <label>:661:                                    ; preds = %392
  %662 = icmp eq i8 %384, 2
  %663 = icmp ne i32 %382, 0
  %664 = and i1 %663, %662
  br i1 %664, label %665, label %724

; <label>:665:                                    ; preds = %661, %665
  %666 = phi i8* [ %719, %665 ], [ %374, %661 ]
  %667 = phi i32 [ %720, %665 ], [ 0, %661 ]
  %668 = load i8, i8* %666, align 1, !noalias !583
  %669 = zext i8 %668 to i32
  %670 = and i32 %669, 192
  %671 = and i32 %669, 48
  %672 = and i32 %669, 12
  %673 = and i32 %669, 3
  %674 = lshr exact i32 %670, 2
  %675 = lshr exact i32 %670, 4
  %676 = lshr i32 %669, 6
  %677 = or i32 %676, %670
  %678 = or i32 %677, %674
  %679 = or i32 %678, %675
  %680 = zext i32 %679 to i64
  %681 = getelementptr inbounds i8, i8* %376, i64 %680
  %682 = load i8, i8* %681, align 1, !noalias !583
  %683 = and i8 %682, -64
  %684 = shl nuw nsw i32 %671, 2
  %685 = or i32 %684, %671
  %686 = lshr exact i32 %671, 2
  %687 = or i32 %685, %686
  %688 = lshr exact i32 %671, 4
  %689 = or i32 %687, %688
  %690 = zext i32 %689 to i64
  %691 = getelementptr inbounds i8, i8* %376, i64 %690
  %692 = load i8, i8* %691, align 1, !noalias !583
  %693 = lshr i8 %692, 2
  %694 = and i8 %693, 48
  %695 = or i8 %694, %683
  %696 = shl nuw nsw i32 %672, 4
  %697 = shl nuw nsw i32 %672, 2
  %698 = lshr exact i32 %672, 2
  %699 = or i32 %697, %672
  %700 = or i32 %699, %696
  %701 = or i32 %700, %698
  %702 = zext i32 %701 to i64
  %703 = getelementptr inbounds i8, i8* %376, i64 %702
  %704 = load i8, i8* %703, align 1, !noalias !583
  %705 = lshr i8 %704, 4
  %706 = and i8 %705, 12
  %707 = or i8 %695, %706
  %708 = shl nuw nsw i32 %673, 6
  %709 = shl nuw nsw i32 %673, 4
  %710 = shl nuw nsw i32 %673, 2
  %711 = or i32 %709, %673
  %712 = or i32 %711, %708
  %713 = or i32 %712, %710
  %714 = zext i32 %713 to i64
  %715 = getelementptr inbounds i8, i8* %376, i64 %714
  %716 = load i8, i8* %715, align 1, !noalias !583
  %717 = lshr i8 %716, 6
  %718 = or i8 %707, %717
  store i8 %718, i8* %666, align 1, !noalias !583
  %719 = getelementptr inbounds i8, i8* %666, i64 1
  %720 = add i32 %667, 4
  %721 = icmp ult i32 %720, %382
  br i1 %721, label %665, label %722

; <label>:722:                                    ; preds = %665
  %723 = load i8, i8* %383, align 1, !noalias !583
  br label %724

; <label>:724:                                    ; preds = %722, %661
  %725 = phi i8 [ %723, %722 ], [ %384, %661 ]
  switch i8 %725, label %924 [
    i8 4, label %741
    i8 8, label %733
    i8 16, label %726
  ]

; <label>:726:                                    ; preds = %724
  %727 = icmp eq i32 %382, 0
  br i1 %727, label %924, label %728

; <label>:728:                                    ; preds = %726
  %729 = and i32 %382, 1
  %730 = icmp eq i32 %382, 1
  br i1 %730, label %906, label %731

; <label>:731:                                    ; preds = %728
  %732 = sub i32 %382, %729
  br label %791

; <label>:733:                                    ; preds = %724
  %734 = icmp eq i32 %382, 0
  br i1 %734, label %924, label %735

; <label>:735:                                    ; preds = %733
  %736 = add i32 %382, -1
  %737 = and i32 %382, 3
  %738 = icmp ult i32 %736, 3
  br i1 %738, label %893, label %739

; <label>:739:                                    ; preds = %735
  %740 = sub i32 %382, %737
  br label %766

; <label>:741:                                    ; preds = %724
  %742 = icmp eq i32 %382, 0
  br i1 %742, label %924, label %743

; <label>:743:                                    ; preds = %741, %743
  %744 = phi i8* [ %763, %743 ], [ %374, %741 ]
  %745 = phi i32 [ %764, %743 ], [ 0, %741 ]
  %746 = load i8, i8* %744, align 1, !noalias !583
  %747 = zext i8 %746 to i32
  %748 = and i32 %747, 240
  %749 = and i32 %747, 15
  %750 = lshr i32 %747, 4
  %751 = or i32 %748, %750
  %752 = zext i32 %751 to i64
  %753 = getelementptr inbounds i8, i8* %376, i64 %752
  %754 = load i8, i8* %753, align 1, !noalias !583
  %755 = and i8 %754, -16
  %756 = shl nuw nsw i32 %749, 4
  %757 = or i32 %756, %749
  %758 = zext i32 %757 to i64
  %759 = getelementptr inbounds i8, i8* %376, i64 %758
  %760 = load i8, i8* %759, align 1, !noalias !583
  %761 = lshr i8 %760, 4
  %762 = or i8 %761, %755
  store i8 %762, i8* %744, align 1, !noalias !583
  %763 = getelementptr inbounds i8, i8* %744, i64 1
  %764 = add i32 %745, 2
  %765 = icmp ult i32 %764, %382
  br i1 %765, label %743, label %924

; <label>:766:                                    ; preds = %766, %739
  %767 = phi i8* [ %374, %739 ], [ %788, %766 ]
  %768 = phi i32 [ %740, %739 ], [ %789, %766 ]
  %769 = load i8, i8* %767, align 1, !noalias !583
  %770 = zext i8 %769 to i64
  %771 = getelementptr inbounds i8, i8* %376, i64 %770
  %772 = load i8, i8* %771, align 1, !noalias !583
  store i8 %772, i8* %767, align 1, !noalias !583
  %773 = getelementptr inbounds i8, i8* %767, i64 1
  %774 = load i8, i8* %773, align 1, !noalias !583
  %775 = zext i8 %774 to i64
  %776 = getelementptr inbounds i8, i8* %376, i64 %775
  %777 = load i8, i8* %776, align 1, !noalias !583
  store i8 %777, i8* %773, align 1, !noalias !583
  %778 = getelementptr inbounds i8, i8* %767, i64 2
  %779 = load i8, i8* %778, align 1, !noalias !583
  %780 = zext i8 %779 to i64
  %781 = getelementptr inbounds i8, i8* %376, i64 %780
  %782 = load i8, i8* %781, align 1, !noalias !583
  store i8 %782, i8* %778, align 1, !noalias !583
  %783 = getelementptr inbounds i8, i8* %767, i64 3
  %784 = load i8, i8* %783, align 1, !noalias !583
  %785 = zext i8 %784 to i64
  %786 = getelementptr inbounds i8, i8* %376, i64 %785
  %787 = load i8, i8* %786, align 1, !noalias !583
  store i8 %787, i8* %783, align 1, !noalias !583
  %788 = getelementptr inbounds i8, i8* %767, i64 4
  %789 = add i32 %768, -4
  %790 = icmp eq i32 %789, 0
  br i1 %790, label %893, label %766

; <label>:791:                                    ; preds = %791, %731
  %792 = phi i8* [ %374, %731 ], [ %823, %791 ]
  %793 = phi i32 [ %732, %731 ], [ %824, %791 ]
  %794 = getelementptr inbounds i8, i8* %792, i64 1
  %795 = load i8, i8* %794, align 1, !noalias !583
  %796 = zext i8 %795 to i32
  %797 = lshr i32 %796, %380
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i16*, i16** %378, i64 %798
  %800 = load i16*, i16** %799, align 8, !noalias !583
  %801 = load i8, i8* %792, align 1, !noalias !583
  %802 = zext i8 %801 to i64
  %803 = getelementptr inbounds i16, i16* %800, i64 %802
  %804 = load i16, i16* %803, align 2, !noalias !583
  %805 = lshr i16 %804, 8
  %806 = trunc i16 %805 to i8
  store i8 %806, i8* %792, align 1, !noalias !583
  %807 = trunc i16 %804 to i8
  store i8 %807, i8* %794, align 1, !noalias !583
  %808 = getelementptr inbounds i8, i8* %792, i64 2
  %809 = getelementptr inbounds i8, i8* %792, i64 3
  %810 = load i8, i8* %809, align 1, !noalias !583
  %811 = zext i8 %810 to i32
  %812 = lshr i32 %811, %380
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds i16*, i16** %378, i64 %813
  %815 = load i16*, i16** %814, align 8, !noalias !583
  %816 = load i8, i8* %808, align 1, !noalias !583
  %817 = zext i8 %816 to i64
  %818 = getelementptr inbounds i16, i16* %815, i64 %817
  %819 = load i16, i16* %818, align 2, !noalias !583
  %820 = lshr i16 %819, 8
  %821 = trunc i16 %820 to i8
  store i8 %821, i8* %808, align 1, !noalias !583
  %822 = trunc i16 %819 to i8
  store i8 %822, i8* %809, align 1, !noalias !583
  %823 = getelementptr inbounds i8, i8* %792, i64 4
  %824 = add i32 %793, -2
  %825 = icmp eq i32 %824, 0
  br i1 %825, label %906, label %791

; <label>:826:                                    ; preds = %405, %400
  %827 = phi i8* [ %374, %400 ], [ %437, %405 ]
  %828 = icmp eq i32 %401, 0
  br i1 %828, label %924, label %829

; <label>:829:                                    ; preds = %826
  %830 = load i8, i8* %827, align 1, !noalias !583
  %831 = zext i8 %830 to i64
  %832 = getelementptr inbounds i8, i8* %376, i64 %831
  %833 = load i8, i8* %832, align 1, !noalias !583
  store i8 %833, i8* %827, align 1, !noalias !583
  %834 = getelementptr inbounds i8, i8* %827, i64 1
  %835 = load i8, i8* %834, align 1, !noalias !583
  %836 = zext i8 %835 to i64
  %837 = getelementptr inbounds i8, i8* %376, i64 %836
  %838 = load i8, i8* %837, align 1, !noalias !583
  store i8 %838, i8* %834, align 1, !noalias !583
  %839 = getelementptr inbounds i8, i8* %827, i64 2
  %840 = load i8, i8* %839, align 1, !noalias !583
  %841 = zext i8 %840 to i64
  %842 = getelementptr inbounds i8, i8* %376, i64 %841
  %843 = load i8, i8* %842, align 1, !noalias !583
  store i8 %843, i8* %839, align 1, !noalias !583
  br label %924

; <label>:844:                                    ; preds = %500, %495
  %845 = phi i8* [ %374, %495 ], [ %532, %500 ]
  %846 = icmp eq i32 %496, 0
  br i1 %846, label %924, label %847

; <label>:847:                                    ; preds = %844
  %848 = load i8, i8* %845, align 1, !noalias !583
  %849 = zext i8 %848 to i64
  %850 = getelementptr inbounds i8, i8* %376, i64 %849
  %851 = load i8, i8* %850, align 1, !noalias !583
  store i8 %851, i8* %845, align 1, !noalias !583
  %852 = getelementptr inbounds i8, i8* %845, i64 1
  %853 = load i8, i8* %852, align 1, !noalias !583
  %854 = zext i8 %853 to i64
  %855 = getelementptr inbounds i8, i8* %376, i64 %854
  %856 = load i8, i8* %855, align 1, !noalias !583
  store i8 %856, i8* %852, align 1, !noalias !583
  %857 = getelementptr inbounds i8, i8* %845, i64 2
  %858 = load i8, i8* %857, align 1, !noalias !583
  %859 = zext i8 %858 to i64
  %860 = getelementptr inbounds i8, i8* %376, i64 %859
  %861 = load i8, i8* %860, align 1, !noalias !583
  store i8 %861, i8* %857, align 1, !noalias !583
  br label %924

; <label>:862:                                    ; preds = %601, %595
  %863 = phi i8* [ %374, %595 ], [ %623, %601 ]
  %864 = icmp eq i32 %597, 0
  br i1 %864, label %924, label %865

; <label>:865:                                    ; preds = %862, %865
  %866 = phi i8* [ %872, %865 ], [ %863, %862 ]
  %867 = phi i32 [ %873, %865 ], [ %597, %862 ]
  %868 = load i8, i8* %866, align 1, !noalias !583
  %869 = zext i8 %868 to i64
  %870 = getelementptr inbounds i8, i8* %376, i64 %869
  %871 = load i8, i8* %870, align 1, !noalias !583
  store i8 %871, i8* %866, align 1, !noalias !583
  %872 = getelementptr inbounds i8, i8* %866, i64 2
  %873 = add i32 %867, -1
  %874 = icmp eq i32 %873, 0
  br i1 %874, label %924, label %865, !llvm.loop !586

; <label>:875:                                    ; preds = %626, %589
  %876 = phi i8* [ %374, %589 ], [ %658, %626 ]
  %877 = icmp eq i32 %590, 0
  br i1 %877, label %924, label %878

; <label>:878:                                    ; preds = %875
  %879 = getelementptr inbounds i8, i8* %876, i64 1
  %880 = load i8, i8* %879, align 1, !noalias !583
  %881 = zext i8 %880 to i32
  %882 = lshr i32 %881, %380
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds i16*, i16** %378, i64 %883
  %885 = load i16*, i16** %884, align 8, !noalias !583
  %886 = load i8, i8* %876, align 1, !noalias !583
  %887 = zext i8 %886 to i64
  %888 = getelementptr inbounds i16, i16* %885, i64 %887
  %889 = load i16, i16* %888, align 2, !noalias !583
  %890 = lshr i16 %889, 8
  %891 = trunc i16 %890 to i8
  store i8 %891, i8* %876, align 1, !noalias !583
  %892 = trunc i16 %889 to i8
  store i8 %892, i8* %879, align 1, !noalias !583
  br label %924

; <label>:893:                                    ; preds = %766, %735
  %894 = phi i8* [ %374, %735 ], [ %788, %766 ]
  %895 = icmp eq i32 %737, 0
  br i1 %895, label %924, label %896

; <label>:896:                                    ; preds = %893, %896
  %897 = phi i8* [ %903, %896 ], [ %894, %893 ]
  %898 = phi i32 [ %904, %896 ], [ %737, %893 ]
  %899 = load i8, i8* %897, align 1, !noalias !583
  %900 = zext i8 %899 to i64
  %901 = getelementptr inbounds i8, i8* %376, i64 %900
  %902 = load i8, i8* %901, align 1, !noalias !583
  store i8 %902, i8* %897, align 1, !noalias !583
  %903 = getelementptr inbounds i8, i8* %897, i64 1
  %904 = add i32 %898, -1
  %905 = icmp eq i32 %904, 0
  br i1 %905, label %924, label %896, !llvm.loop !587

; <label>:906:                                    ; preds = %791, %728
  %907 = phi i8* [ %374, %728 ], [ %823, %791 ]
  %908 = icmp eq i32 %729, 0
  br i1 %908, label %924, label %909

; <label>:909:                                    ; preds = %906
  %910 = getelementptr inbounds i8, i8* %907, i64 1
  %911 = load i8, i8* %910, align 1, !noalias !583
  %912 = zext i8 %911 to i32
  %913 = lshr i32 %912, %380
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds i16*, i16** %378, i64 %914
  %916 = load i16*, i16** %915, align 8, !noalias !583
  %917 = load i8, i8* %907, align 1, !noalias !583
  %918 = zext i8 %917 to i64
  %919 = getelementptr inbounds i16, i16* %916, i64 %918
  %920 = load i16, i16* %919, align 2, !noalias !583
  %921 = lshr i16 %920, 8
  %922 = trunc i16 %921 to i8
  store i8 %922, i8* %907, align 1, !noalias !583
  %923 = trunc i16 %920 to i8
  store i8 %923, i8* %910, align 1, !noalias !583
  br label %924

; <label>:924:                                    ; preds = %909, %906, %893, %896, %743, %878, %875, %862, %865, %535, %847, %844, %440, %829, %826, %741, %733, %726, %724, %594, %588, %494, %493, %399, %398, %392, %388, %368, %364
  %925 = load i32, i32* %14, align 8
  %926 = and i32 %925, 67108864
  %927 = icmp eq i32 %926, 0
  br i1 %927, label %1010, label %928

; <label>:928:                                    ; preds = %924
  %929 = load i8*, i8** %3, align 8
  %930 = ptrtoint i8* %929 to i64
  %931 = getelementptr inbounds i8, i8* %929, i64 1
  %932 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 3
  %933 = load i8, i8* %932, align 1
  %934 = icmp eq i8 %933, 16
  br i1 %934, label %935, label %1010

; <label>:935:                                    ; preds = %928
  %936 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 1
  %937 = load i64, i64* %936, align 8
  %938 = getelementptr inbounds i8, i8* %931, i64 %937
  %939 = icmp sgt i64 %937, 0
  br i1 %939, label %940, label %999

; <label>:940:                                    ; preds = %935
  %941 = getelementptr i8, i8* %929, i64 3
  %942 = icmp ugt i8* %938, %941
  %943 = select i1 %942, i8* %938, i8* %941
  %944 = sub i64 -2, %930
  %945 = getelementptr i8, i8* %943, i64 %944
  %946 = ptrtoint i8* %945 to i64
  %947 = and i64 %946, 2
  %948 = icmp eq i64 %947, 0
  br i1 %948, label %949, label %963

; <label>:949:                                    ; preds = %940
  %950 = getelementptr inbounds i8, i8* %929, i64 2
  %951 = load i8, i8* %931, align 1
  %952 = zext i8 %951 to i32
  %953 = getelementptr inbounds i8, i8* %929, i64 3
  %954 = load i8, i8* %950, align 1
  %955 = zext i8 %954 to i32
  %956 = sub nsw i32 %955, %952
  %957 = mul nsw i32 %956, 65535
  %958 = add nsw i32 %957, 8388480
  %959 = lshr i32 %958, 24
  %960 = trunc i32 %959 to i8
  %961 = add i8 %951, %960
  %962 = getelementptr inbounds i8, i8* %929, i64 2
  store i8 %961, i8* %931, align 1
  br label %963

; <label>:963:                                    ; preds = %949, %940
  %964 = phi i8* [ %931, %940 ], [ %953, %949 ]
  %965 = phi i8* [ %931, %940 ], [ %962, %949 ]
  %966 = icmp ult i8* %945, inttoptr (i64 2 to i8*)
  br i1 %966, label %997, label %967

; <label>:967:                                    ; preds = %963, %967
  %968 = phi i8* [ %986, %967 ], [ %964, %963 ]
  %969 = phi i8* [ %995, %967 ], [ %965, %963 ]
  %970 = getelementptr inbounds i8, i8* %968, i64 1
  %971 = load i8, i8* %968, align 1
  %972 = zext i8 %971 to i32
  %973 = getelementptr inbounds i8, i8* %968, i64 2
  %974 = load i8, i8* %970, align 1
  %975 = zext i8 %974 to i32
  %976 = sub nsw i32 %975, %972
  %977 = mul nsw i32 %976, 65535
  %978 = add nsw i32 %977, 8388480
  %979 = lshr i32 %978, 24
  %980 = trunc i32 %979 to i8
  %981 = add i8 %971, %980
  %982 = getelementptr inbounds i8, i8* %969, i64 1
  store i8 %981, i8* %969, align 1
  %983 = getelementptr inbounds i8, i8* %968, i64 3
  %984 = load i8, i8* %973, align 1
  %985 = zext i8 %984 to i32
  %986 = getelementptr inbounds i8, i8* %968, i64 4
  %987 = load i8, i8* %983, align 1
  %988 = zext i8 %987 to i32
  %989 = sub nsw i32 %988, %985
  %990 = mul nsw i32 %989, 65535
  %991 = add nsw i32 %990, 8388480
  %992 = lshr i32 %991, 24
  %993 = trunc i32 %992 to i8
  %994 = add i8 %984, %993
  %995 = getelementptr inbounds i8, i8* %969, i64 2
  store i8 %994, i8* %982, align 1
  %996 = icmp ult i8* %986, %938
  br i1 %996, label %967, label %997

; <label>:997:                                    ; preds = %967, %963
  %998 = load i32, i32* %14, align 8
  br label %999

; <label>:999:                                    ; preds = %997, %935
  %1000 = phi i32 [ %998, %997 ], [ %925, %935 ]
  store i8 8, i8* %932, align 1
  %1001 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 4
  %1002 = load i8, i8* %1001, align 2
  %1003 = shl i8 %1002, 3
  %1004 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 5
  store i8 %1003, i8* %1004, align 1
  %1005 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 0
  %1006 = load i32, i32* %1005, align 8
  %1007 = zext i8 %1002 to i32
  %1008 = mul i32 %1006, %1007
  %1009 = zext i32 %1008 to i64
  store i64 %1009, i64* %936, align 8
  br label %1010

; <label>:1010:                                   ; preds = %999, %928, %924
  %1011 = phi i32 [ %1000, %999 ], [ %925, %928 ], [ %925, %924 ]
  %1012 = and i32 %1011, 16384
  %1013 = icmp eq i32 %1012, 0
  br i1 %1013, label %1022, label %1014

; <label>:1014:                                   ; preds = %1010
  %1015 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %1016 = load i32, i32* %1015, align 8
  %1017 = and i32 %1016, 2048
  %1018 = icmp eq i32 %1017, 0
  br i1 %1018, label %1022, label %1019

; <label>:1019:                                   ; preds = %1014
  %1020 = load i8*, i8** %3, align 8
  %1021 = getelementptr inbounds i8, i8* %1020, i64 1
  tail call fastcc void @MOZ_PNG_do_g_to_rgb(%struct.png_row_info_struct* %1, i8* nonnull %1021)
  br label %1022

; <label>:1022:                                   ; preds = %1014, %1010, %1019
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_do_read_int(%struct.png_row_info_struct*, i8*, i32, i32) local_unnamed_addr #4 {
  %5 = alloca i64, align 8
  %6 = icmp ne i8* %1, null
  %7 = icmp ne %struct.png_row_info_struct* %0, null
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %234

; <label>:9:                                      ; preds = %4
  %10 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds [7 x i32], [7 x i32]* @MOZ_PNG_do_read_int.png_pass_inc, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = mul i32 %14, %11
  %16 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %17 = load i8, i8* %16, align 1
  switch i8 %17, label %183 [
    i8 1, label %18
    i8 2, label %73
    i8 4, label %130
  ]

; <label>:18:                                     ; preds = %9
  %19 = icmp eq i32 %11, 0
  br i1 %19, label %215, label %20

; <label>:20:                                     ; preds = %18
  %21 = add i32 %15, 7
  %22 = and i32 %21, 7
  %23 = xor i32 %22, 7
  %24 = add i32 %11, 7
  %25 = and i32 %24, 7
  %26 = xor i32 %25, 7
  %27 = add i32 %15, -1
  %28 = lshr i32 %27, 3
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %1, i64 %29
  %31 = add i32 %11, -1
  %32 = lshr i32 %31, 3
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %1, i64 %33
  br label %35

; <label>:35:                                     ; preds = %64, %20
  %36 = phi i8* [ %34, %20 ], [ %70, %64 ]
  %37 = phi i8* [ %30, %20 ], [ %61, %64 ]
  %38 = phi i32 [ %26, %20 ], [ %69, %64 ]
  %39 = phi i32 [ %23, %20 ], [ %60, %64 ]
  %40 = phi i32 [ 0, %20 ], [ %71, %64 ]
  %41 = load i8, i8* %36, align 1
  %42 = zext i8 %41 to i32
  %43 = lshr i32 %42, %38
  %44 = and i32 %43, 1
  br label %45

; <label>:45:                                     ; preds = %35, %45
  %46 = phi i8* [ %61, %45 ], [ %37, %35 ]
  %47 = phi i32 [ %60, %45 ], [ %39, %35 ]
  %48 = phi i32 [ %62, %45 ], [ 0, %35 ]
  %49 = load i8, i8* %46, align 1
  %50 = zext i8 %49 to i32
  %51 = sub i32 7, %47
  %52 = lshr i32 32639, %51
  %53 = and i32 %52, %50
  %54 = shl i32 %44, %47
  %55 = or i32 %53, %54
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %46, align 1
  %57 = icmp eq i32 %47, 7
  %58 = getelementptr inbounds i8, i8* %46, i64 -1
  %59 = add nsw i32 %47, 1
  %60 = select i1 %57, i32 0, i32 %59
  %61 = select i1 %57, i8* %58, i8* %46
  %62 = add nuw nsw i32 %48, 1
  %63 = icmp slt i32 %62, %14
  br i1 %63, label %45, label %64

; <label>:64:                                     ; preds = %45
  %65 = load i32, i32* %10, align 8
  %66 = icmp eq i32 %38, 7
  %67 = getelementptr inbounds i8, i8* %36, i64 -1
  %68 = add nsw i32 %38, 1
  %69 = select i1 %66, i32 0, i32 %68
  %70 = select i1 %66, i8* %67, i8* %36
  %71 = add nuw i32 %40, 1
  %72 = icmp ult i32 %71, %65
  br i1 %72, label %35, label %213

; <label>:73:                                     ; preds = %9
  %74 = icmp eq i32 %11, 0
  br i1 %74, label %215, label %75

; <label>:75:                                     ; preds = %73
  %76 = shl i32 %15, 1
  %77 = add i32 %76, 6
  %78 = and i32 %77, 6
  %79 = xor i32 %78, 6
  %80 = shl i32 %11, 1
  %81 = add i32 %80, 6
  %82 = and i32 %81, 6
  %83 = xor i32 %82, 6
  %84 = add i32 %15, -1
  %85 = lshr i32 %84, 2
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %1, i64 %86
  %88 = add i32 %11, -1
  %89 = lshr i32 %88, 2
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %1, i64 %90
  br label %92

; <label>:92:                                     ; preds = %121, %75
  %93 = phi i8* [ %91, %75 ], [ %127, %121 ]
  %94 = phi i8* [ %87, %75 ], [ %118, %121 ]
  %95 = phi i32 [ %83, %75 ], [ %126, %121 ]
  %96 = phi i32 [ %79, %75 ], [ %117, %121 ]
  %97 = phi i32 [ 0, %75 ], [ %128, %121 ]
  %98 = load i8, i8* %93, align 1
  %99 = zext i8 %98 to i32
  %100 = lshr i32 %99, %95
  %101 = and i32 %100, 3
  br label %102

; <label>:102:                                    ; preds = %92, %102
  %103 = phi i8* [ %118, %102 ], [ %94, %92 ]
  %104 = phi i32 [ %119, %102 ], [ 0, %92 ]
  %105 = phi i32 [ %117, %102 ], [ %96, %92 ]
  %106 = load i8, i8* %103, align 1
  %107 = zext i8 %106 to i32
  %108 = sub i32 6, %105
  %109 = lshr i32 16191, %108
  %110 = and i32 %109, %107
  %111 = shl i32 %101, %105
  %112 = or i32 %110, %111
  %113 = trunc i32 %112 to i8
  store i8 %113, i8* %103, align 1
  %114 = icmp eq i32 %105, 6
  %115 = getelementptr inbounds i8, i8* %103, i64 -1
  %116 = add nsw i32 %105, 2
  %117 = select i1 %114, i32 0, i32 %116
  %118 = select i1 %114, i8* %115, i8* %103
  %119 = add nuw nsw i32 %104, 1
  %120 = icmp slt i32 %119, %14
  br i1 %120, label %102, label %121

; <label>:121:                                    ; preds = %102
  %122 = load i32, i32* %10, align 8
  %123 = icmp eq i32 %95, 6
  %124 = getelementptr inbounds i8, i8* %93, i64 -1
  %125 = add nsw i32 %95, 2
  %126 = select i1 %123, i32 0, i32 %125
  %127 = select i1 %123, i8* %124, i8* %93
  %128 = add nuw i32 %97, 1
  %129 = icmp ult i32 %128, %122
  br i1 %129, label %92, label %213

; <label>:130:                                    ; preds = %9
  %131 = icmp eq i32 %11, 0
  br i1 %131, label %215, label %132

; <label>:132:                                    ; preds = %130
  %133 = shl i32 %15, 2
  %134 = and i32 %133, 4
  %135 = shl i32 %11, 2
  %136 = and i32 %135, 4
  %137 = add i32 %15, -1
  %138 = lshr i32 %137, 1
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %1, i64 %139
  %141 = add i32 %11, -1
  %142 = lshr i32 %141, 1
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %1, i64 %143
  br label %145

; <label>:145:                                    ; preds = %174, %132
  %146 = phi i32 [ 0, %132 ], [ %181, %174 ]
  %147 = phi i32 [ %134, %132 ], [ %171, %174 ]
  %148 = phi i32 [ %136, %132 ], [ %180, %174 ]
  %149 = phi i8* [ %140, %132 ], [ %170, %174 ]
  %150 = phi i8* [ %144, %132 ], [ %179, %174 ]
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = lshr i32 %152, %148
  %154 = and i32 %153, 15
  br label %155

; <label>:155:                                    ; preds = %145, %155
  %156 = phi i32 [ %172, %155 ], [ 0, %145 ]
  %157 = phi i32 [ %171, %155 ], [ %147, %145 ]
  %158 = phi i8* [ %170, %155 ], [ %149, %145 ]
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = sub i32 4, %157
  %162 = lshr i32 3855, %161
  %163 = and i32 %162, %160
  %164 = shl i32 %154, %157
  %165 = or i32 %163, %164
  %166 = trunc i32 %165 to i8
  store i8 %166, i8* %158, align 1
  %167 = icmp eq i32 %157, 4
  %168 = getelementptr inbounds i8, i8* %158, i64 -1
  %169 = add nsw i32 %157, 4
  %170 = select i1 %167, i8* %168, i8* %158
  %171 = select i1 %167, i32 0, i32 %169
  %172 = add nuw nsw i32 %156, 1
  %173 = icmp slt i32 %172, %14
  br i1 %173, label %155, label %174

; <label>:174:                                    ; preds = %155
  %175 = load i32, i32* %10, align 8
  %176 = icmp eq i32 %148, 4
  %177 = getelementptr inbounds i8, i8* %150, i64 -1
  %178 = add nsw i32 %148, 4
  %179 = select i1 %176, i8* %177, i8* %150
  %180 = select i1 %176, i32 0, i32 %178
  %181 = add nuw i32 %146, 1
  %182 = icmp ult i32 %181, %175
  br i1 %182, label %145, label %213

; <label>:183:                                    ; preds = %9
  %184 = lshr i8 %17, 3
  %185 = zext i8 %184 to i64
  %186 = icmp eq i32 %11, 0
  br i1 %186, label %217, label %187

; <label>:187:                                    ; preds = %183
  %188 = add i32 %15, -1
  %189 = zext i32 %188 to i64
  %190 = mul nuw nsw i64 %189, %185
  %191 = getelementptr inbounds i8, i8* %1, i64 %190
  %192 = add i32 %11, -1
  %193 = zext i32 %192 to i64
  %194 = mul nuw nsw i64 %185, %193
  %195 = getelementptr inbounds i8, i8* %1, i64 %194
  %196 = bitcast i64* %5 to i8*
  %197 = sub nsw i64 0, %185
  br label %198

; <label>:198:                                    ; preds = %208, %187
  %199 = phi i32 [ 0, %187 ], [ %211, %208 ]
  %200 = phi i8* [ %191, %187 ], [ %205, %208 ]
  %201 = phi i8* [ %195, %187 ], [ %210, %208 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %196, i8* align 1 %201, i64 %185, i1 false)
  br label %202

; <label>:202:                                    ; preds = %198, %202
  %203 = phi i32 [ %206, %202 ], [ 0, %198 ]
  %204 = phi i8* [ %205, %202 ], [ %200, %198 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %204, i8* nonnull align 8 %196, i64 %185, i1 false)
  %205 = getelementptr inbounds i8, i8* %204, i64 %197
  %206 = add nuw nsw i32 %203, 1
  %207 = icmp slt i32 %206, %14
  br i1 %207, label %202, label %208

; <label>:208:                                    ; preds = %202
  %209 = load i32, i32* %10, align 8
  %210 = getelementptr inbounds i8, i8* %201, i64 %197
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196)
  %211 = add nuw i32 %199, 1
  %212 = icmp ult i32 %211, %209
  br i1 %212, label %198, label %213

; <label>:213:                                    ; preds = %174, %121, %64, %208
  %214 = load i8, i8* %16, align 1
  br label %217

; <label>:215:                                    ; preds = %18, %73, %130
  store i32 %15, i32* %10, align 8
  %216 = zext i8 %17 to i64
  br label %225

; <label>:217:                                    ; preds = %213, %183
  %218 = phi i8 [ %214, %213 ], [ %17, %183 ]
  store i32 %15, i32* %10, align 8
  %219 = icmp ugt i8 %218, 7
  %220 = zext i32 %15 to i64
  %221 = zext i8 %218 to i64
  br i1 %219, label %222, label %225

; <label>:222:                                    ; preds = %217
  %223 = lshr i64 %221, 3
  %224 = mul nuw nsw i64 %223, %220
  br label %231

; <label>:225:                                    ; preds = %215, %217
  %226 = phi i64 [ %216, %215 ], [ %221, %217 ]
  %227 = phi i64 [ 0, %215 ], [ %220, %217 ]
  %228 = mul nuw nsw i64 %226, %227
  %229 = add nuw nsw i64 %228, 7
  %230 = lshr i64 %229, 3
  br label %231

; <label>:231:                                    ; preds = %225, %222
  %232 = phi i64 [ %224, %222 ], [ %230, %225 ]
  %233 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  store i64 %232, i64* %233, align 8
  br label %234

; <label>:234:                                    ; preds = %231, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_push_have_row(%struct.png_struct_def* noalias, i8*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  %4 = load void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, i8*, i32, i32)** %3, align 8
  %5 = icmp eq void (%struct.png_struct_def*, i8*, i32, i32)* %4, null
  br i1 %5, label %12, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  tail call void %4(%struct.png_struct_def* nonnull %0, i8* %1, i32 %8, i32 %11) #18
  br label %12

; <label>:12:                                     ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_push_finish_row(%struct.png_struct_def* noalias nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %4, %6
  br i1 %7, label %80, label %8

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %10 = load i8, i8* %9, align 2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %80, label %12

; <label>:12:                                     ; preds = %8
  store i32 0, i32* %2, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 0, i64 %17, i1 false)
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %23 = load i8, i8* %18, align 1
  br label %24

; <label>:24:                                     ; preds = %63, %12
  %25 = phi i8 [ %48, %63 ], [ %23, %12 ]
  %26 = add i8 %25, 1
  switch i8 %25, label %39 [
    i8 0, label %27
    i8 2, label %30
    i8 4, label %33
  ]

; <label>:27:                                     ; preds = %24
  %28 = load i32, i32* %19, align 4
  %29 = icmp ult i32 %28, 5
  br i1 %29, label %36, label %44

; <label>:30:                                     ; preds = %24
  %31 = load i32, i32* %19, align 4
  %32 = icmp ult i32 %31, 3
  br i1 %32, label %36, label %44

; <label>:33:                                     ; preds = %24
  %34 = load i32, i32* %19, align 4
  %35 = icmp ult i32 %34, 2
  br i1 %35, label %36, label %44

; <label>:36:                                     ; preds = %33, %30, %27
  %37 = phi i32 [ %34, %33 ], [ %31, %30 ], [ %28, %27 ]
  %38 = add i8 %25, 2
  br label %46

; <label>:39:                                     ; preds = %24
  %40 = icmp ugt i8 %26, 7
  br i1 %40, label %41, label %42

; <label>:41:                                     ; preds = %39
  store i8 %25, i8* %18, align 1
  br label %80

; <label>:42:                                     ; preds = %39
  %43 = icmp eq i8 %26, 7
  br i1 %43, label %78, label %44

; <label>:44:                                     ; preds = %27, %30, %33, %42
  %45 = load i32, i32* %19, align 4
  br label %46

; <label>:46:                                     ; preds = %44, %36
  %47 = phi i32 [ %37, %36 ], [ %45, %44 ]
  %48 = phi i8 [ %38, %36 ], [ %26, %44 ]
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [7 x i8], [7 x i8]* @MOZ_APNG_prog_read_reset.png_pass_inc, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = add i32 %47, %52
  %54 = getelementptr inbounds [7 x i8], [7 x i8]* @MOZ_APNG_prog_read_reset.png_pass_start, i64 0, i64 %49
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = xor i32 %56, -1
  %58 = add i32 %53, %57
  %59 = udiv i32 %58, %52
  store i32 %59, i32* %20, align 8
  %60 = load i32, i32* %21, align 8
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %78

; <label>:63:                                     ; preds = %46
  %64 = load i32, i32* %22, align 8
  %65 = getelementptr inbounds [7 x i8], [7 x i8]* @MOZ_PNG_read_push_finish_row.png_pass_yinc, i64 0, i64 %49
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = add i32 %64, %67
  %69 = getelementptr inbounds [7 x i8], [7 x i8]* @MOZ_PNG_read_push_finish_row.png_pass_ystart, i64 0, i64 %49
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = xor i32 %71, -1
  %73 = add i32 %68, %72
  %74 = udiv i32 %73, %67
  store i32 %74, i32* %5, align 4
  %75 = icmp ult i32 %58, %52
  %76 = icmp ult i32 %73, %67
  %77 = or i1 %75, %76
  br i1 %77, label %24, label %78

; <label>:78:                                     ; preds = %42, %46, %63
  %79 = phi i8 [ 7, %42 ], [ %48, %46 ], [ %48, %63 ]
  store i8 %79, i8* %18, align 1
  br label %80

; <label>:80:                                     ; preds = %78, %41, %8, %1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_progressive_combine_row(%struct.png_struct_def* noalias, i8*, i8* readnone) local_unnamed_addr #4 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne i8* %2, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %3
  tail call void @MOZ_PNG_combine_row(%struct.png_struct_def* nonnull %0, i8* %1, i32 1)
  br label %8

; <label>:8:                                      ; preds = %3, %7
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_combine_row(%struct.png_struct_def* noalias, i8*, i32) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 56
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = icmp eq i8 %5, 0
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %3
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.138, i64 0, i64 0)) #19
  unreachable

; <label>:18:                                     ; preds = %3
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %36, label %22

; <label>:22:                                     ; preds = %18
  %23 = icmp ugt i8 %5, 7
  %24 = zext i8 %5 to i64
  br i1 %23, label %25, label %28

; <label>:25:                                     ; preds = %22
  %26 = lshr i64 %24, 3
  %27 = mul nuw nsw i64 %26, %12
  br label %32

; <label>:28:                                     ; preds = %22
  %29 = mul nuw nsw i64 %12, %24
  %30 = add nuw nsw i64 %29, 7
  %31 = lshr i64 %30, 3
  br label %32

; <label>:32:                                     ; preds = %28, %25
  %33 = phi i64 [ %27, %25 ], [ %31, %28 ]
  %34 = icmp eq i64 %20, %33
  br i1 %34, label %36, label %35

; <label>:35:                                     ; preds = %32
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.139, i64 0, i64 0)) #19
  unreachable

; <label>:36:                                     ; preds = %32, %18
  %37 = icmp eq i32 %11, 0
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %36
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.140, i64 0, i64 0)) #19
  unreachable

; <label>:39:                                     ; preds = %36
  %40 = zext i8 %5 to i64
  %41 = mul nuw nsw i64 %12, %40
  %42 = trunc i64 %41 to i32
  %43 = and i32 %42, 7
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %57, label %45

; <label>:45:                                     ; preds = %39
  %46 = icmp ugt i8 %5, 7
  %47 = lshr i64 %40, 3
  %48 = mul nuw nsw i64 %47, %12
  %49 = add nuw nsw i64 %41, 7
  %50 = lshr i64 %49, 3
  %51 = select i1 %46, i64 %48, i64 %50
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = getelementptr inbounds i8, i8* %52, i64 -1
  %54 = load i8, i8* %53, align 1
  %55 = lshr i32 255, %43
  %56 = zext i8 %54 to i32
  br label %57

; <label>:57:                                     ; preds = %39, %45
  %58 = phi i32 [ %56, %45 ], [ 0, %39 ]
  %59 = phi i32 [ %55, %45 ], [ 0, %39 ]
  %60 = phi i8* [ %53, %45 ], [ null, %39 ]
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %62 = load i8, i8* %61, align 2
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %598, label %64

; <label>:64:                                     ; preds = %57
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %66 = load i32, i32* %65, align 8
  %67 = and i32 %66, 2
  %68 = icmp ne i32 %67, 0
  %69 = icmp ult i8 %14, 6
  %70 = and i1 %69, %68
  br i1 %70, label %71, label %598

; <label>:71:                                     ; preds = %64
  switch i32 %2, label %598 [
    i32 0, label %72
    i32 1, label %74
  ]

; <label>:72:                                     ; preds = %71
  %73 = and i32 %15, 1
  br label %77

; <label>:74:                                     ; preds = %71
  %75 = and i32 %15, 1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %598, label %77

; <label>:77:                                     ; preds = %72, %74
  %78 = phi i32 [ %73, %72 ], [ 1, %74 ]
  %79 = add nuw nsw i32 %15, 1
  %80 = lshr i32 %79, 1
  %81 = sub nsw i32 3, %80
  %82 = shl i32 %78, %81
  %83 = and i32 %82, 7
  %84 = icmp ugt i32 %11, %83
  br i1 %84, label %85, label %615

; <label>:85:                                     ; preds = %77
  %86 = icmp ult i8 %5, 8
  br i1 %86, label %87, label %131

; <label>:87:                                     ; preds = %85
  %88 = udiv i8 8, %5
  %89 = icmp eq i32 %2, 0
  %90 = icmp eq i8 %5, 1
  %91 = icmp eq i8 %5, 2
  %92 = select i1 %91, i64 1, i64 2
  %93 = select i1 %90, i64 0, i64 %92
  %94 = lshr i32 %15, 1
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds [2 x [3 x [3 x i32]]], [2 x [3 x [3 x i32]]]* @MOZ_PNG_combine_row.display_mask, i64 0, i64 1, i64 %93, i64 %95
  %97 = zext i8 %14 to i64
  %98 = getelementptr inbounds [2 x [3 x [6 x i32]]], [2 x [3 x [6 x i32]]]* @MOZ_PNG_combine_row.row_mask, i64 0, i64 1, i64 %93, i64 %97
  %99 = select i1 %89, i32* %98, i32* %96
  %100 = load i32, i32* %99, align 4
  %101 = zext i8 %88 to i64
  br label %102

; <label>:102:                                    ; preds = %127, %87
  %103 = phi i32 [ %100, %87 ], [ %109, %127 ]
  %104 = phi i64 [ %12, %87 ], [ %128, %127 ]
  %105 = phi i8* [ %9, %87 ], [ %130, %127 ]
  %106 = phi i8* [ %1, %87 ], [ %129, %127 ]
  %107 = lshr i32 %103, 8
  %108 = shl i32 %103, 24
  %109 = or i32 %107, %108
  %110 = trunc i32 %103 to i8
  switch i8 %110, label %111 [
    i8 0, label %125
    i8 -1, label %121
  ]

; <label>:111:                                    ; preds = %102
  %112 = load i8, i8* %106, align 1
  %113 = zext i8 %112 to i32
  %114 = xor i32 %103, 255
  %115 = and i32 %114, %113
  %116 = load i8, i8* %105, align 1
  %117 = zext i8 %116 to i32
  %118 = and i32 %103, %117
  %119 = or i32 %118, %115
  %120 = trunc i32 %119 to i8
  br label %123

; <label>:121:                                    ; preds = %102
  %122 = load i8, i8* %105, align 1
  br label %123

; <label>:123:                                    ; preds = %121, %111
  %124 = phi i8 [ %120, %111 ], [ %122, %121 ]
  store i8 %124, i8* %106, align 1
  br label %125

; <label>:125:                                    ; preds = %123, %102
  %126 = icmp ugt i64 %104, %101
  br i1 %126, label %127, label %605

; <label>:127:                                    ; preds = %125
  %128 = sub i64 %104, %101
  %129 = getelementptr inbounds i8, i8* %106, i64 1
  %130 = getelementptr inbounds i8, i8* %105, i64 1
  br label %102

; <label>:131:                                    ; preds = %85
  %132 = and i32 %6, 7
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %135, label %134

; <label>:134:                                    ; preds = %131
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.141, i64 0, i64 0)) #19
  unreachable

; <label>:135:                                    ; preds = %131
  %136 = lshr i32 %6, 3
  %137 = zext i32 %136 to i64
  %138 = mul nuw nsw i64 %12, %137
  %139 = mul nuw nsw i32 %83, %136
  %140 = zext i32 %139 to i64
  %141 = sub nsw i64 %138, %140
  %142 = getelementptr inbounds i8, i8* %1, i64 %140
  %143 = getelementptr inbounds i8, i8* %9, i64 %140
  %144 = icmp eq i32 %2, 0
  br i1 %144, label %153, label %145

; <label>:145:                                    ; preds = %135
  %146 = sub nsw i32 6, %15
  %147 = lshr i32 %146, 1
  %148 = shl i32 %136, %147
  %149 = zext i32 %148 to i64
  %150 = icmp ult i64 %141, %149
  %151 = trunc i64 %141 to i32
  %152 = select i1 %150, i32 %151, i32 %148
  br label %153

; <label>:153:                                    ; preds = %145, %135
  %154 = phi i32 [ %152, %145 ], [ %136, %135 ]
  %155 = sub nsw i32 7, %15
  %156 = lshr i32 %155, 1
  %157 = shl i32 %136, %156
  switch i32 %154, label %214 [
    i32 1, label %170
    i32 2, label %168
    i32 3, label %158
  ]

; <label>:158:                                    ; preds = %153
  %159 = load i8, i8* %143, align 1
  store i8 %159, i8* %142, align 1
  %160 = getelementptr inbounds i8, i8* %143, i64 1
  %161 = load i8, i8* %160, align 1
  %162 = getelementptr inbounds i8, i8* %142, i64 1
  store i8 %161, i8* %162, align 1
  %163 = getelementptr inbounds i8, i8* %143, i64 2
  %164 = load i8, i8* %163, align 1
  %165 = getelementptr inbounds i8, i8* %142, i64 2
  store i8 %164, i8* %165, align 1
  %166 = zext i32 %157 to i64
  %167 = icmp ugt i64 %141, %166
  br i1 %167, label %199, label %615

; <label>:168:                                    ; preds = %153
  %169 = zext i32 %157 to i64
  br label %183

; <label>:170:                                    ; preds = %153
  %171 = load i8, i8* %143, align 1
  store i8 %171, i8* %142, align 1
  %172 = zext i32 %157 to i64
  %173 = icmp ugt i64 %141, %172
  br i1 %173, label %174, label %615

; <label>:174:                                    ; preds = %170, %174
  %175 = phi i8* [ %178, %174 ], [ %142, %170 ]
  %176 = phi i8* [ %179, %174 ], [ %143, %170 ]
  %177 = phi i64 [ %180, %174 ], [ %141, %170 ]
  %178 = getelementptr inbounds i8, i8* %175, i64 %172
  %179 = getelementptr inbounds i8, i8* %176, i64 %172
  %180 = sub i64 %177, %172
  %181 = load i8, i8* %179, align 1
  store i8 %181, i8* %178, align 1
  %182 = icmp ugt i64 %180, %172
  br i1 %182, label %174, label %615

; <label>:183:                                    ; preds = %168, %192
  %184 = phi i64 [ %195, %192 ], [ %141, %168 ]
  %185 = phi i8* [ %193, %192 ], [ %143, %168 ]
  %186 = phi i8* [ %194, %192 ], [ %142, %168 ]
  %187 = load i8, i8* %185, align 1
  store i8 %187, i8* %186, align 1
  %188 = getelementptr inbounds i8, i8* %185, i64 1
  %189 = load i8, i8* %188, align 1
  %190 = getelementptr inbounds i8, i8* %186, i64 1
  store i8 %189, i8* %190, align 1
  %191 = icmp ugt i64 %184, %169
  br i1 %191, label %192, label %615

; <label>:192:                                    ; preds = %183
  %193 = getelementptr inbounds i8, i8* %185, i64 %169
  %194 = getelementptr inbounds i8, i8* %186, i64 %169
  %195 = sub i64 %184, %169
  %196 = icmp ugt i64 %195, 1
  br i1 %196, label %183, label %197

; <label>:197:                                    ; preds = %192
  %198 = load i8, i8* %193, align 1
  store i8 %198, i8* %194, align 1
  br label %615

; <label>:199:                                    ; preds = %158, %199
  %200 = phi i8* [ %204, %199 ], [ %142, %158 ]
  %201 = phi i8* [ %203, %199 ], [ %143, %158 ]
  %202 = phi i64 [ %205, %199 ], [ %141, %158 ]
  %203 = getelementptr inbounds i8, i8* %201, i64 %166
  %204 = getelementptr inbounds i8, i8* %200, i64 %166
  %205 = sub i64 %202, %166
  %206 = load i8, i8* %203, align 1
  store i8 %206, i8* %204, align 1
  %207 = getelementptr inbounds i8, i8* %203, i64 1
  %208 = load i8, i8* %207, align 1
  %209 = getelementptr inbounds i8, i8* %204, i64 1
  store i8 %208, i8* %209, align 1
  %210 = getelementptr inbounds i8, i8* %203, i64 2
  %211 = load i8, i8* %210, align 1
  %212 = getelementptr inbounds i8, i8* %204, i64 2
  store i8 %211, i8* %212, align 1
  %213 = icmp ugt i64 %205, %166
  br i1 %213, label %199, label %615

; <label>:214:                                    ; preds = %153
  %215 = icmp ult i32 %154, 16
  br i1 %215, label %216, label %580

; <label>:216:                                    ; preds = %214
  %217 = ptrtoint i8* %142 to i64
  %218 = and i64 %217, 1
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %580

; <label>:220:                                    ; preds = %216
  %221 = ptrtoint i8* %143 to i64
  %222 = and i64 %221, 1
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %580

; <label>:224:                                    ; preds = %220
  %225 = zext i32 %154 to i64
  %226 = and i64 %225, 1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %580

; <label>:228:                                    ; preds = %224
  %229 = zext i32 %157 to i64
  %230 = and i64 %229, 1
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %580

; <label>:232:                                    ; preds = %228
  %233 = or i64 %221, %229
  %234 = or i64 %233, %217
  %235 = or i64 %234, %225
  %236 = and i64 %235, 3
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %238, label %409

; <label>:238:                                    ; preds = %232
  %239 = bitcast i8* %142 to i32*
  %240 = bitcast i8* %143 to i32*
  %241 = sub i32 %157, %154
  %242 = lshr i32 %241, 2
  %243 = zext i32 %242 to i64
  br label %244

; <label>:244:                                    ; preds = %259, %238
  %245 = phi i64 [ %141, %238 ], [ %262, %259 ]
  %246 = phi i32* [ %239, %238 ], [ %260, %259 ]
  %247 = phi i32* [ %240, %238 ], [ %261, %259 ]
  br label %248

; <label>:248:                                    ; preds = %248, %244
  %249 = phi i32* [ %246, %244 ], [ %254, %248 ]
  %250 = phi i32* [ %247, %244 ], [ %252, %248 ]
  %251 = phi i64 [ %225, %244 ], [ %255, %248 ]
  %252 = getelementptr inbounds i32, i32* %250, i64 1
  %253 = load i32, i32* %250, align 4
  %254 = getelementptr inbounds i32, i32* %249, i64 1
  store i32 %253, i32* %249, align 4
  %255 = add i64 %251, -4
  %256 = icmp eq i64 %255, 0
  br i1 %256, label %257, label %248

; <label>:257:                                    ; preds = %248
  %258 = icmp ugt i64 %245, %229
  br i1 %258, label %259, label %615

; <label>:259:                                    ; preds = %257
  %260 = getelementptr inbounds i32, i32* %254, i64 %243
  %261 = getelementptr inbounds i32, i32* %252, i64 %243
  %262 = sub i64 %245, %229
  %263 = icmp ult i64 %262, %225
  br i1 %263, label %264, label %244

; <label>:264:                                    ; preds = %259
  %265 = bitcast i32* %261 to i8*
  %266 = bitcast i32* %260 to i8*
  %267 = icmp ult i64 %262, 32
  br i1 %267, label %356, label %268

; <label>:268:                                    ; preds = %264
  %269 = getelementptr i8, i8* %266, i64 %262
  %270 = getelementptr i8, i8* %265, i64 %262
  %271 = icmp ugt i8* %270, %266
  %272 = icmp ugt i8* %269, %265
  %273 = and i1 %271, %272
  br i1 %273, label %356, label %274

; <label>:274:                                    ; preds = %268
  %275 = and i64 %262, -32
  %276 = sub i64 %262, %275
  %277 = getelementptr i8, i8* %265, i64 %275
  %278 = getelementptr i8, i8* %266, i64 %275
  %279 = add i64 %275, -32
  %280 = lshr exact i64 %279, 5
  %281 = add nuw nsw i64 %280, 1
  %282 = and i64 %281, 3
  %283 = icmp ult i64 %279, 96
  br i1 %283, label %335, label %284

; <label>:284:                                    ; preds = %274
  %285 = sub nsw i64 %281, %282
  br label %286

; <label>:286:                                    ; preds = %286, %284
  %287 = phi i64 [ 0, %284 ], [ %332, %286 ]
  %288 = phi i64 [ %285, %284 ], [ %333, %286 ]
  %289 = getelementptr i8, i8* %265, i64 %287
  %290 = getelementptr i8, i8* %266, i64 %287
  %291 = bitcast i8* %289 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1, !alias.scope !588
  %293 = getelementptr i8, i8* %289, i64 16
  %294 = bitcast i8* %293 to <16 x i8>*
  %295 = load <16 x i8>, <16 x i8>* %294, align 1, !alias.scope !588
  %296 = bitcast i8* %290 to <16 x i8>*
  store <16 x i8> %292, <16 x i8>* %296, align 1, !alias.scope !591, !noalias !588
  %297 = getelementptr i8, i8* %290, i64 16
  %298 = bitcast i8* %297 to <16 x i8>*
  store <16 x i8> %295, <16 x i8>* %298, align 1, !alias.scope !591, !noalias !588
  %299 = or i64 %287, 32
  %300 = getelementptr i8, i8* %265, i64 %299
  %301 = getelementptr i8, i8* %266, i64 %299
  %302 = bitcast i8* %300 to <16 x i8>*
  %303 = load <16 x i8>, <16 x i8>* %302, align 1, !alias.scope !588
  %304 = getelementptr i8, i8* %300, i64 16
  %305 = bitcast i8* %304 to <16 x i8>*
  %306 = load <16 x i8>, <16 x i8>* %305, align 1, !alias.scope !588
  %307 = bitcast i8* %301 to <16 x i8>*
  store <16 x i8> %303, <16 x i8>* %307, align 1, !alias.scope !591, !noalias !588
  %308 = getelementptr i8, i8* %301, i64 16
  %309 = bitcast i8* %308 to <16 x i8>*
  store <16 x i8> %306, <16 x i8>* %309, align 1, !alias.scope !591, !noalias !588
  %310 = or i64 %287, 64
  %311 = getelementptr i8, i8* %265, i64 %310
  %312 = getelementptr i8, i8* %266, i64 %310
  %313 = bitcast i8* %311 to <16 x i8>*
  %314 = load <16 x i8>, <16 x i8>* %313, align 1, !alias.scope !588
  %315 = getelementptr i8, i8* %311, i64 16
  %316 = bitcast i8* %315 to <16 x i8>*
  %317 = load <16 x i8>, <16 x i8>* %316, align 1, !alias.scope !588
  %318 = bitcast i8* %312 to <16 x i8>*
  store <16 x i8> %314, <16 x i8>* %318, align 1, !alias.scope !591, !noalias !588
  %319 = getelementptr i8, i8* %312, i64 16
  %320 = bitcast i8* %319 to <16 x i8>*
  store <16 x i8> %317, <16 x i8>* %320, align 1, !alias.scope !591, !noalias !588
  %321 = or i64 %287, 96
  %322 = getelementptr i8, i8* %265, i64 %321
  %323 = getelementptr i8, i8* %266, i64 %321
  %324 = bitcast i8* %322 to <16 x i8>*
  %325 = load <16 x i8>, <16 x i8>* %324, align 1, !alias.scope !588
  %326 = getelementptr i8, i8* %322, i64 16
  %327 = bitcast i8* %326 to <16 x i8>*
  %328 = load <16 x i8>, <16 x i8>* %327, align 1, !alias.scope !588
  %329 = bitcast i8* %323 to <16 x i8>*
  store <16 x i8> %325, <16 x i8>* %329, align 1, !alias.scope !591, !noalias !588
  %330 = getelementptr i8, i8* %323, i64 16
  %331 = bitcast i8* %330 to <16 x i8>*
  store <16 x i8> %328, <16 x i8>* %331, align 1, !alias.scope !591, !noalias !588
  %332 = add i64 %287, 128
  %333 = add i64 %288, -4
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %286, !llvm.loop !593

; <label>:335:                                    ; preds = %286, %274
  %336 = phi i64 [ 0, %274 ], [ %332, %286 ]
  %337 = icmp eq i64 %282, 0
  br i1 %337, label %354, label %338

; <label>:338:                                    ; preds = %335, %338
  %339 = phi i64 [ %351, %338 ], [ %336, %335 ]
  %340 = phi i64 [ %352, %338 ], [ %282, %335 ]
  %341 = getelementptr i8, i8* %265, i64 %339
  %342 = getelementptr i8, i8* %266, i64 %339
  %343 = bitcast i8* %341 to <16 x i8>*
  %344 = load <16 x i8>, <16 x i8>* %343, align 1, !alias.scope !588
  %345 = getelementptr i8, i8* %341, i64 16
  %346 = bitcast i8* %345 to <16 x i8>*
  %347 = load <16 x i8>, <16 x i8>* %346, align 1, !alias.scope !588
  %348 = bitcast i8* %342 to <16 x i8>*
  store <16 x i8> %344, <16 x i8>* %348, align 1, !alias.scope !591, !noalias !588
  %349 = getelementptr i8, i8* %342, i64 16
  %350 = bitcast i8* %349 to <16 x i8>*
  store <16 x i8> %347, <16 x i8>* %350, align 1, !alias.scope !591, !noalias !588
  %351 = add i64 %339, 32
  %352 = add i64 %340, -1
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %354, label %338, !llvm.loop !594

; <label>:354:                                    ; preds = %338, %335
  %355 = icmp eq i64 %262, %275
  br i1 %355, label %615, label %356

; <label>:356:                                    ; preds = %354, %268, %264
  %357 = phi i64 [ %262, %268 ], [ %262, %264 ], [ %276, %354 ]
  %358 = phi i8* [ %265, %268 ], [ %265, %264 ], [ %277, %354 ]
  %359 = phi i8* [ %266, %268 ], [ %266, %264 ], [ %278, %354 ]
  %360 = add i64 %357, -1
  %361 = and i64 %357, 7
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %374, label %363

; <label>:363:                                    ; preds = %356, %363
  %364 = phi i64 [ %371, %363 ], [ %357, %356 ]
  %365 = phi i8* [ %368, %363 ], [ %358, %356 ]
  %366 = phi i8* [ %370, %363 ], [ %359, %356 ]
  %367 = phi i64 [ %372, %363 ], [ %361, %356 ]
  %368 = getelementptr inbounds i8, i8* %365, i64 1
  %369 = load i8, i8* %365, align 1
  %370 = getelementptr inbounds i8, i8* %366, i64 1
  store i8 %369, i8* %366, align 1
  %371 = add i64 %364, -1
  %372 = add i64 %367, -1
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %363, !llvm.loop !595

; <label>:374:                                    ; preds = %363, %356
  %375 = phi i64 [ %357, %356 ], [ %371, %363 ]
  %376 = phi i8* [ %358, %356 ], [ %368, %363 ]
  %377 = phi i8* [ %359, %356 ], [ %370, %363 ]
  %378 = icmp ult i64 %360, 7
  br i1 %378, label %615, label %379

; <label>:379:                                    ; preds = %374, %379
  %380 = phi i64 [ %407, %379 ], [ %375, %374 ]
  %381 = phi i8* [ %404, %379 ], [ %376, %374 ]
  %382 = phi i8* [ %406, %379 ], [ %377, %374 ]
  %383 = getelementptr inbounds i8, i8* %381, i64 1
  %384 = load i8, i8* %381, align 1
  %385 = getelementptr inbounds i8, i8* %382, i64 1
  store i8 %384, i8* %382, align 1
  %386 = getelementptr inbounds i8, i8* %381, i64 2
  %387 = load i8, i8* %383, align 1
  %388 = getelementptr inbounds i8, i8* %382, i64 2
  store i8 %387, i8* %385, align 1
  %389 = getelementptr inbounds i8, i8* %381, i64 3
  %390 = load i8, i8* %386, align 1
  %391 = getelementptr inbounds i8, i8* %382, i64 3
  store i8 %390, i8* %388, align 1
  %392 = getelementptr inbounds i8, i8* %381, i64 4
  %393 = load i8, i8* %389, align 1
  %394 = getelementptr inbounds i8, i8* %382, i64 4
  store i8 %393, i8* %391, align 1
  %395 = getelementptr inbounds i8, i8* %381, i64 5
  %396 = load i8, i8* %392, align 1
  %397 = getelementptr inbounds i8, i8* %382, i64 5
  store i8 %396, i8* %394, align 1
  %398 = getelementptr inbounds i8, i8* %381, i64 6
  %399 = load i8, i8* %395, align 1
  %400 = getelementptr inbounds i8, i8* %382, i64 6
  store i8 %399, i8* %397, align 1
  %401 = getelementptr inbounds i8, i8* %381, i64 7
  %402 = load i8, i8* %398, align 1
  %403 = getelementptr inbounds i8, i8* %382, i64 7
  store i8 %402, i8* %400, align 1
  %404 = getelementptr inbounds i8, i8* %381, i64 8
  %405 = load i8, i8* %401, align 1
  %406 = getelementptr inbounds i8, i8* %382, i64 8
  store i8 %405, i8* %403, align 1
  %407 = add i64 %380, -8
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %615, label %379, !llvm.loop !596

; <label>:409:                                    ; preds = %232
  %410 = bitcast i8* %142 to i16*
  %411 = bitcast i8* %143 to i16*
  %412 = sub i32 %157, %154
  %413 = lshr i32 %412, 1
  %414 = zext i32 %413 to i64
  br label %415

; <label>:415:                                    ; preds = %430, %409
  %416 = phi i64 [ %141, %409 ], [ %433, %430 ]
  %417 = phi i16* [ %410, %409 ], [ %431, %430 ]
  %418 = phi i16* [ %411, %409 ], [ %432, %430 ]
  br label %419

; <label>:419:                                    ; preds = %419, %415
  %420 = phi i16* [ %417, %415 ], [ %425, %419 ]
  %421 = phi i16* [ %418, %415 ], [ %423, %419 ]
  %422 = phi i64 [ %225, %415 ], [ %426, %419 ]
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = load i16, i16* %421, align 2
  %425 = getelementptr inbounds i16, i16* %420, i64 1
  store i16 %424, i16* %420, align 2
  %426 = add i64 %422, -2
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %419

; <label>:428:                                    ; preds = %419
  %429 = icmp ugt i64 %416, %229
  br i1 %429, label %430, label %615

; <label>:430:                                    ; preds = %428
  %431 = getelementptr inbounds i16, i16* %425, i64 %414
  %432 = getelementptr inbounds i16, i16* %423, i64 %414
  %433 = sub i64 %416, %229
  %434 = icmp ult i64 %433, %225
  br i1 %434, label %435, label %415

; <label>:435:                                    ; preds = %430
  %436 = bitcast i16* %432 to i8*
  %437 = bitcast i16* %431 to i8*
  %438 = icmp ult i64 %433, 32
  br i1 %438, label %527, label %439

; <label>:439:                                    ; preds = %435
  %440 = getelementptr i8, i8* %437, i64 %433
  %441 = getelementptr i8, i8* %436, i64 %433
  %442 = icmp ugt i8* %441, %437
  %443 = icmp ugt i8* %440, %436
  %444 = and i1 %442, %443
  br i1 %444, label %527, label %445

; <label>:445:                                    ; preds = %439
  %446 = and i64 %433, -32
  %447 = sub i64 %433, %446
  %448 = getelementptr i8, i8* %436, i64 %446
  %449 = getelementptr i8, i8* %437, i64 %446
  %450 = add i64 %446, -32
  %451 = lshr exact i64 %450, 5
  %452 = add nuw nsw i64 %451, 1
  %453 = and i64 %452, 3
  %454 = icmp ult i64 %450, 96
  br i1 %454, label %506, label %455

; <label>:455:                                    ; preds = %445
  %456 = sub nsw i64 %452, %453
  br label %457

; <label>:457:                                    ; preds = %457, %455
  %458 = phi i64 [ 0, %455 ], [ %503, %457 ]
  %459 = phi i64 [ %456, %455 ], [ %504, %457 ]
  %460 = getelementptr i8, i8* %436, i64 %458
  %461 = getelementptr i8, i8* %437, i64 %458
  %462 = bitcast i8* %460 to <16 x i8>*
  %463 = load <16 x i8>, <16 x i8>* %462, align 1, !alias.scope !597
  %464 = getelementptr i8, i8* %460, i64 16
  %465 = bitcast i8* %464 to <16 x i8>*
  %466 = load <16 x i8>, <16 x i8>* %465, align 1, !alias.scope !597
  %467 = bitcast i8* %461 to <16 x i8>*
  store <16 x i8> %463, <16 x i8>* %467, align 1, !alias.scope !600, !noalias !597
  %468 = getelementptr i8, i8* %461, i64 16
  %469 = bitcast i8* %468 to <16 x i8>*
  store <16 x i8> %466, <16 x i8>* %469, align 1, !alias.scope !600, !noalias !597
  %470 = or i64 %458, 32
  %471 = getelementptr i8, i8* %436, i64 %470
  %472 = getelementptr i8, i8* %437, i64 %470
  %473 = bitcast i8* %471 to <16 x i8>*
  %474 = load <16 x i8>, <16 x i8>* %473, align 1, !alias.scope !597
  %475 = getelementptr i8, i8* %471, i64 16
  %476 = bitcast i8* %475 to <16 x i8>*
  %477 = load <16 x i8>, <16 x i8>* %476, align 1, !alias.scope !597
  %478 = bitcast i8* %472 to <16 x i8>*
  store <16 x i8> %474, <16 x i8>* %478, align 1, !alias.scope !600, !noalias !597
  %479 = getelementptr i8, i8* %472, i64 16
  %480 = bitcast i8* %479 to <16 x i8>*
  store <16 x i8> %477, <16 x i8>* %480, align 1, !alias.scope !600, !noalias !597
  %481 = or i64 %458, 64
  %482 = getelementptr i8, i8* %436, i64 %481
  %483 = getelementptr i8, i8* %437, i64 %481
  %484 = bitcast i8* %482 to <16 x i8>*
  %485 = load <16 x i8>, <16 x i8>* %484, align 1, !alias.scope !597
  %486 = getelementptr i8, i8* %482, i64 16
  %487 = bitcast i8* %486 to <16 x i8>*
  %488 = load <16 x i8>, <16 x i8>* %487, align 1, !alias.scope !597
  %489 = bitcast i8* %483 to <16 x i8>*
  store <16 x i8> %485, <16 x i8>* %489, align 1, !alias.scope !600, !noalias !597
  %490 = getelementptr i8, i8* %483, i64 16
  %491 = bitcast i8* %490 to <16 x i8>*
  store <16 x i8> %488, <16 x i8>* %491, align 1, !alias.scope !600, !noalias !597
  %492 = or i64 %458, 96
  %493 = getelementptr i8, i8* %436, i64 %492
  %494 = getelementptr i8, i8* %437, i64 %492
  %495 = bitcast i8* %493 to <16 x i8>*
  %496 = load <16 x i8>, <16 x i8>* %495, align 1, !alias.scope !597
  %497 = getelementptr i8, i8* %493, i64 16
  %498 = bitcast i8* %497 to <16 x i8>*
  %499 = load <16 x i8>, <16 x i8>* %498, align 1, !alias.scope !597
  %500 = bitcast i8* %494 to <16 x i8>*
  store <16 x i8> %496, <16 x i8>* %500, align 1, !alias.scope !600, !noalias !597
  %501 = getelementptr i8, i8* %494, i64 16
  %502 = bitcast i8* %501 to <16 x i8>*
  store <16 x i8> %499, <16 x i8>* %502, align 1, !alias.scope !600, !noalias !597
  %503 = add i64 %458, 128
  %504 = add i64 %459, -4
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %457, !llvm.loop !602

; <label>:506:                                    ; preds = %457, %445
  %507 = phi i64 [ 0, %445 ], [ %503, %457 ]
  %508 = icmp eq i64 %453, 0
  br i1 %508, label %525, label %509

; <label>:509:                                    ; preds = %506, %509
  %510 = phi i64 [ %522, %509 ], [ %507, %506 ]
  %511 = phi i64 [ %523, %509 ], [ %453, %506 ]
  %512 = getelementptr i8, i8* %436, i64 %510
  %513 = getelementptr i8, i8* %437, i64 %510
  %514 = bitcast i8* %512 to <16 x i8>*
  %515 = load <16 x i8>, <16 x i8>* %514, align 1, !alias.scope !597
  %516 = getelementptr i8, i8* %512, i64 16
  %517 = bitcast i8* %516 to <16 x i8>*
  %518 = load <16 x i8>, <16 x i8>* %517, align 1, !alias.scope !597
  %519 = bitcast i8* %513 to <16 x i8>*
  store <16 x i8> %515, <16 x i8>* %519, align 1, !alias.scope !600, !noalias !597
  %520 = getelementptr i8, i8* %513, i64 16
  %521 = bitcast i8* %520 to <16 x i8>*
  store <16 x i8> %518, <16 x i8>* %521, align 1, !alias.scope !600, !noalias !597
  %522 = add i64 %510, 32
  %523 = add i64 %511, -1
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %525, label %509, !llvm.loop !603

; <label>:525:                                    ; preds = %509, %506
  %526 = icmp eq i64 %433, %446
  br i1 %526, label %615, label %527

; <label>:527:                                    ; preds = %525, %439, %435
  %528 = phi i64 [ %433, %439 ], [ %433, %435 ], [ %447, %525 ]
  %529 = phi i8* [ %436, %439 ], [ %436, %435 ], [ %448, %525 ]
  %530 = phi i8* [ %437, %439 ], [ %437, %435 ], [ %449, %525 ]
  %531 = add i64 %528, -1
  %532 = and i64 %528, 7
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %545, label %534

; <label>:534:                                    ; preds = %527, %534
  %535 = phi i64 [ %542, %534 ], [ %528, %527 ]
  %536 = phi i8* [ %539, %534 ], [ %529, %527 ]
  %537 = phi i8* [ %541, %534 ], [ %530, %527 ]
  %538 = phi i64 [ %543, %534 ], [ %532, %527 ]
  %539 = getelementptr inbounds i8, i8* %536, i64 1
  %540 = load i8, i8* %536, align 1
  %541 = getelementptr inbounds i8, i8* %537, i64 1
  store i8 %540, i8* %537, align 1
  %542 = add i64 %535, -1
  %543 = add i64 %538, -1
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %545, label %534, !llvm.loop !604

; <label>:545:                                    ; preds = %534, %527
  %546 = phi i64 [ %528, %527 ], [ %542, %534 ]
  %547 = phi i8* [ %529, %527 ], [ %539, %534 ]
  %548 = phi i8* [ %530, %527 ], [ %541, %534 ]
  %549 = icmp ult i64 %531, 7
  br i1 %549, label %615, label %550

; <label>:550:                                    ; preds = %545, %550
  %551 = phi i64 [ %578, %550 ], [ %546, %545 ]
  %552 = phi i8* [ %575, %550 ], [ %547, %545 ]
  %553 = phi i8* [ %577, %550 ], [ %548, %545 ]
  %554 = getelementptr inbounds i8, i8* %552, i64 1
  %555 = load i8, i8* %552, align 1
  %556 = getelementptr inbounds i8, i8* %553, i64 1
  store i8 %555, i8* %553, align 1
  %557 = getelementptr inbounds i8, i8* %552, i64 2
  %558 = load i8, i8* %554, align 1
  %559 = getelementptr inbounds i8, i8* %553, i64 2
  store i8 %558, i8* %556, align 1
  %560 = getelementptr inbounds i8, i8* %552, i64 3
  %561 = load i8, i8* %557, align 1
  %562 = getelementptr inbounds i8, i8* %553, i64 3
  store i8 %561, i8* %559, align 1
  %563 = getelementptr inbounds i8, i8* %552, i64 4
  %564 = load i8, i8* %560, align 1
  %565 = getelementptr inbounds i8, i8* %553, i64 4
  store i8 %564, i8* %562, align 1
  %566 = getelementptr inbounds i8, i8* %552, i64 5
  %567 = load i8, i8* %563, align 1
  %568 = getelementptr inbounds i8, i8* %553, i64 5
  store i8 %567, i8* %565, align 1
  %569 = getelementptr inbounds i8, i8* %552, i64 6
  %570 = load i8, i8* %566, align 1
  %571 = getelementptr inbounds i8, i8* %553, i64 6
  store i8 %570, i8* %568, align 1
  %572 = getelementptr inbounds i8, i8* %552, i64 7
  %573 = load i8, i8* %569, align 1
  %574 = getelementptr inbounds i8, i8* %553, i64 7
  store i8 %573, i8* %571, align 1
  %575 = getelementptr inbounds i8, i8* %552, i64 8
  %576 = load i8, i8* %572, align 1
  %577 = getelementptr inbounds i8, i8* %553, i64 8
  store i8 %576, i8* %574, align 1
  %578 = add i64 %551, -8
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %615, label %550, !llvm.loop !605

; <label>:580:                                    ; preds = %228, %224, %220, %216, %214
  %581 = zext i32 %154 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* nonnull align 1 %143, i64 %581, i1 false)
  %582 = zext i32 %157 to i64
  %583 = icmp ugt i64 %141, %582
  br i1 %583, label %584, label %615

; <label>:584:                                    ; preds = %580, %584
  %585 = phi i64 [ %596, %584 ], [ %581, %580 ]
  %586 = phi i8* [ %591, %584 ], [ %142, %580 ]
  %587 = phi i8* [ %590, %584 ], [ %143, %580 ]
  %588 = phi i64 [ %592, %584 ], [ %141, %580 ]
  %589 = phi i32 [ %595, %584 ], [ %154, %580 ]
  %590 = getelementptr inbounds i8, i8* %587, i64 %582
  %591 = getelementptr inbounds i8, i8* %586, i64 %582
  %592 = sub i64 %588, %582
  %593 = icmp ult i64 %592, %585
  %594 = trunc i64 %592 to i32
  %595 = select i1 %593, i32 %594, i32 %589
  %596 = zext i32 %595 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %591, i8* align 1 %590, i64 %596, i1 false)
  %597 = icmp ugt i64 %592, %582
  br i1 %597, label %584, label %615

; <label>:598:                                    ; preds = %71, %74, %57, %64
  %599 = icmp ugt i8 %5, 7
  %600 = lshr i64 %40, 3
  %601 = mul nuw nsw i64 %600, %12
  %602 = add nuw nsw i64 %41, 7
  %603 = lshr i64 %602, 3
  %604 = select i1 %599, i64 %601, i64 %603
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* nonnull align 1 %9, i64 %604, i1 false)
  br label %605

; <label>:605:                                    ; preds = %125, %598
  %606 = icmp eq i8* %60, null
  br i1 %606, label %615, label %607

; <label>:607:                                    ; preds = %605
  %608 = and i32 %59, %58
  %609 = load i8, i8* %60, align 1
  %610 = zext i8 %609 to i32
  %611 = xor i32 %59, 255
  %612 = and i32 %611, %610
  %613 = or i32 %612, %608
  %614 = trunc i32 %613 to i8
  store i8 %614, i8* %60, align 1
  br label %615

; <label>:615:                                    ; preds = %199, %183, %174, %584, %428, %545, %550, %257, %374, %379, %525, %354, %158, %170, %580, %607, %605, %197, %77
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_progressive_read_fn(%struct.png_struct_def* noalias, i8*, void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*) local_unnamed_addr #4 {
  %6 = icmp eq %struct.png_struct_def* %0, null
  br i1 %6, label %23, label %7

; <label>:7:                                      ; preds = %5
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 70
  store void (%struct.png_struct_def*, %struct.png_info_def*)* %2, void (%struct.png_struct_def*, %struct.png_info_def*)** %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 71
  store void (%struct.png_struct_def*, i8*, i32, i32)* %3, void (%struct.png_struct_def*, i8*, i32, i32)** %9, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 72
  store void (%struct.png_struct_def*, %struct.png_info_def*)* %4, void (%struct.png_struct_def*, %struct.png_info_def*)** %10, align 8
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  store i8* %1, i8** %11, align 8, !alias.scope !606
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  store void (%struct.png_struct_def*, i8*, i64)* @MOZ_PNG_push_fill_buffer, void (%struct.png_struct_def*, i8*, i64)** %12, align 8, !alias.scope !606
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %14 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %13, align 8, !alias.scope !606
  %15 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %14, null
  br i1 %15, label %21, label %16

; <label>:16:                                     ; preds = %7
  store void (%struct.png_struct_def*, i8*, i64)* null, void (%struct.png_struct_def*, i8*, i64)** %13, align 8, !alias.scope !606
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %18 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %17, align 8, !alias.scope !609
  %19 = icmp eq void (%struct.png_struct_def*, i8*)* %18, null
  br i1 %19, label %21, label %20

; <label>:20:                                     ; preds = %16
  tail call void %18(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.99, i64 0, i64 0)) #18
  br label %21

; <label>:21:                                     ; preds = %7, %16, %20
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  store void (%struct.png_struct_def*)* null, void (%struct.png_struct_def*)** %22, align 8, !alias.scope !606
  br label %23

; <label>:23:                                     ; preds = %5, %21
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_read_fn(%struct.png_struct_def* noalias, i8*, void (%struct.png_struct_def*, i8*, i64)*) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %20, label %5

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  store i8* %1, i8** %6, align 8
  %7 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %2, null
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %9 = select i1 %7, void (%struct.png_struct_def*, i8*, i64)* @MOZ_PNG_def_read_data, void (%struct.png_struct_def*, i8*, i64)* %2
  store void (%struct.png_struct_def*, i8*, i64)* %9, void (%struct.png_struct_def*, i8*, i64)** %8, align 8
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %11 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %10, align 8
  %12 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %11, null
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %5
  store void (%struct.png_struct_def*, i8*, i64)* null, void (%struct.png_struct_def*, i8*, i64)** %10, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %15 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %14, align 8, !alias.scope !612
  %16 = icmp eq void (%struct.png_struct_def*, i8*)* %15, null
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %13
  tail call void %15(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.99, i64 0, i64 0)) #18
  br label %18

; <label>:18:                                     ; preds = %17, %13, %5
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  store void (%struct.png_struct_def*)* null, void (%struct.png_struct_def*)** %19, align 8
  br label %20

; <label>:20:                                     ; preds = %3, %18
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_APNG_set_prog_frame_fn(%struct.png_struct_def* nocapture, void (%struct.png_struct_def*, i32)*, void (%struct.png_struct_def*, i32)*) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 92
  %5 = bitcast {}** %4 to void (%struct.png_struct_def*, i32)**
  store void (%struct.png_struct_def*, i32)* %1, void (%struct.png_struct_def*, i32)** %5, align 8
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 93
  %7 = bitcast {}** %6 to void (%struct.png_struct_def*, i32)**
  store void (%struct.png_struct_def*, i32)* %2, void (%struct.png_struct_def*, i32)** %7, align 8
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %9 = load i32, i32* %8, align 8
  %10 = or i32 %9, 2
  store i32 %10, i32* %8, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define hidden i8* @MOZ_PNG_get_progressive_ptr(%struct.png_struct_def* noalias readonly) local_unnamed_addr #12 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %6, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  %5 = load i8*, i8** %4, align 8
  br label %6

; <label>:6:                                      ; preds = %1, %3
  %7 = phi i8* [ %5, %3 ], [ null, %1 ]
  ret i8* %7
}

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias %struct.png_struct_def* @MOZ_PNG_cr_read_str(i8*, i8*, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*) local_unnamed_addr #4 {
  %5 = tail call noalias %struct.png_struct_def* @MOZ_PNG_create_png_struct(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* undef, i8* (%struct.png_struct_def*, i64)* undef, void (%struct.png_struct_def*, i8*)* undef)
  %6 = icmp eq %struct.png_struct_def* %5, null
  br i1 %6, label %24, label %7

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 10
  store i32 32768, i32* %8, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 11
  %10 = load i32, i32* %9, align 4
  %11 = or i32 %10, 1048576
  store i32 %11, i32* %9, align 4
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 9
  store i8* null, i8** %12, align 8, !alias.scope !615
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 8
  store void (%struct.png_struct_def*, i8*, i64)* @MOZ_PNG_def_read_data, void (%struct.png_struct_def*, i8*, i64)** %13, align 8, !alias.scope !615
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 7
  %15 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %14, align 8, !alias.scope !615
  %16 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %15, null
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %7
  store void (%struct.png_struct_def*, i8*, i64)* null, void (%struct.png_struct_def*, i8*, i64)** %14, align 8, !alias.scope !615
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 5
  %19 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %18, align 8, !alias.scope !618
  %20 = icmp eq void (%struct.png_struct_def*, i8*)* %19, null
  br i1 %20, label %22, label %21

; <label>:21:                                     ; preds = %17
  tail call void %19(%struct.png_struct_def* nonnull %5, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.99, i64 0, i64 0)) #18
  br label %22

; <label>:22:                                     ; preds = %7, %17, %21
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 58
  store void (%struct.png_struct_def*)* null, void (%struct.png_struct_def*)** %23, align 8, !alias.scope !615
  br label %24

; <label>:24:                                     ; preds = %4, %22
  ret %struct.png_struct_def* %5
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_read_frame_head(%struct.png_struct_def*, %struct.png_info_def*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 65536
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %2
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.93, i64 0, i64 0)) #19
  unreachable

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 91
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %55, label %12

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, -65
  store i32 %17, i32* %15, align 4
  %18 = and i32 %4, -131085
  store i32 %18, i32* %3, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  br label %20

; <label>:20:                                     ; preds = %33, %12
  %21 = phi i8 [ 0, %12 ], [ %34, %33 ]
  br label %22

; <label>:22:                                     ; preds = %20, %53
  %23 = tail call i32 @MOZ_PNG_read_chunk_header(%struct.png_struct_def* nonnull %0)
  %24 = load i32, i32* %19, align 8
  switch i32 %24, label %53 [
    i32 1229209940, label %25
    i32 1717785676, label %35
    i32 1717846356, label %36
  ]

; <label>:25:                                     ; preds = %22
  %26 = icmp eq i8 %21, 0
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %25
  %28 = load i32, i32* %9, align 8
  %29 = icmp ugt i32 %28, 1
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %25, %27
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.94, i64 0, i64 0)) #19
  unreachable

; <label>:31:                                     ; preds = %27
  %32 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %23)
  br label %33

; <label>:33:                                     ; preds = %31, %35, %41
  %34 = phi i8 [ 0, %41 ], [ 1, %35 ], [ 0, %31 ]
  br label %20

; <label>:35:                                     ; preds = %22
  tail call void @MOZ_APNG_handle_fcTL(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1, i32 %23)
  br label %33

; <label>:36:                                     ; preds = %22
  tail call void @MOZ_APNG_ensure_seqno(%struct.png_struct_def* nonnull %0, i32 %23)
  %37 = icmp eq i8 %21, 0
  br i1 %37, label %38, label %44

; <label>:38:                                     ; preds = %36
  %39 = load i32, i32* %9, align 8
  %40 = icmp ugt i32 %39, 1
  br i1 %40, label %41, label %44

; <label>:41:                                     ; preds = %38
  %42 = add i32 %23, -4
  %43 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %42)
  br label %33

; <label>:44:                                     ; preds = %38, %36
  %45 = load i32, i32* %3, align 8
  %46 = and i32 %45, 131072
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %52, label %48

; <label>:48:                                     ; preds = %44
  %49 = add i32 %23, -4
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  store i32 %49, i32* %50, align 8
  %51 = or i32 %45, 4
  store i32 %51, i32* %3, align 8
  br label %55

; <label>:52:                                     ; preds = %44
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.95, i64 0, i64 0)) #19
  unreachable

; <label>:53:                                     ; preds = %22
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.73, i64 0, i64 0))
  %54 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* nonnull %0, i32 %23)
  br label %22

; <label>:55:                                     ; preds = %48, %8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_read_chunk_header(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = alloca [8 x i8], align 1
  %3 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #18
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %5 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %4, align 8, !alias.scope !621
  %6 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %5, null
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:8:                                      ; preds = %1
  call void %5(%struct.png_struct_def* nonnull %0, i8* nonnull %3, i64 8) #18
  %9 = load i8, i8* %3, align 1, !noalias !624
  %10 = zext i8 %9 to i32
  %11 = shl nuw i32 %10, 24
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 1
  %13 = load i8, i8* %12, align 1, !noalias !624
  %14 = zext i8 %13 to i32
  %15 = shl nuw nsw i32 %14, 16
  %16 = or i32 %15, %11
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 2
  %18 = load i8, i8* %17, align 1, !noalias !624
  %19 = zext i8 %18 to i32
  %20 = shl nuw nsw i32 %19, 8
  %21 = or i32 %16, %20
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 3
  %23 = load i8, i8* %22, align 1, !noalias !624
  %24 = zext i8 %23 to i32
  %25 = or i32 %21, %24
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %8
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.106, i64 0, i64 0)) #22
  unreachable

; <label>:28:                                     ; preds = %8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 4
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl nuw i32 %31, 24
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 5
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = shl nuw nsw i32 %35, 16
  %37 = or i32 %36, %32
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 6
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = shl nuw nsw i32 %40, 8
  %42 = or i32 %37, %41
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 7
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %42, %45
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  store i32 %46, i32* %47, align 8
  %48 = call i64 @MOZ_Z_crc32(i64 0, i8* null, i32 0) #18, !noalias !627
  %49 = trunc i64 %48 to i32
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %49, i32* %50, align 4, !alias.scope !627
  %51 = load i32, i32* %47, align 8, !alias.scope !630
  %52 = and i32 %51, 536870912
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %55 = load i32, i32* %54, align 4, !alias.scope !630
  %56 = and i32 %55, 768
  %57 = icmp ne i32 %56, 768
  %58 = and i32 %55, 2048
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %53, i1 %59, i1 %57
  br i1 %60, label %61, label %66

; <label>:61:                                     ; preds = %28
  %62 = and i64 %48, 4294967295
  %63 = call i64 @MOZ_Z_crc32(i64 %62, i8* nonnull %29, i32 4) #18, !noalias !630
  %64 = trunc i64 %63 to i32
  store i32 %64, i32* %50, align 4, !alias.scope !630
  %65 = load i32, i32* %47, align 8
  br label %66

; <label>:66:                                     ; preds = %28, %61
  %67 = phi i32 [ %51, %28 ], [ %65, %61 ]
  %68 = and i32 %67, 255
  %69 = add nsw i32 %68, -65
  %70 = icmp ugt i32 %69, 57
  %71 = add nsw i32 %68, -91
  %72 = icmp ult i32 %71, 6
  %73 = or i1 %70, %72
  br i1 %73, label %74, label %75

; <label>:74:                                     ; preds = %91, %83, %75, %66
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.136, i64 0, i64 0)) #22
  unreachable

; <label>:75:                                     ; preds = %66
  %76 = lshr i32 %67, 8
  %77 = and i32 %76, 255
  %78 = add nsw i32 %77, -65
  %79 = icmp ugt i32 %78, 57
  %80 = add nsw i32 %77, -91
  %81 = icmp ult i32 %80, 6
  %82 = or i1 %79, %81
  br i1 %82, label %74, label %83

; <label>:83:                                     ; preds = %75
  %84 = lshr i32 %67, 16
  %85 = and i32 %84, 255
  %86 = add nsw i32 %85, -65
  %87 = icmp ugt i32 %86, 57
  %88 = add nsw i32 %85, -91
  %89 = icmp ult i32 %88, 6
  %90 = or i1 %87, %89
  br i1 %90, label %74, label %91

; <label>:91:                                     ; preds = %83
  %92 = lshr i32 %67, 24
  %93 = add nsw i32 %92, -65
  %94 = icmp ugt i32 %93, 57
  %95 = add nsw i32 %92, -91
  %96 = icmp ult i32 %95, 6
  %97 = or i1 %94, %96
  br i1 %97, label %74, label %98

; <label>:98:                                     ; preds = %91
  %99 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 101
  %100 = load i64, i64* %99, align 8, !alias.scope !633
  %101 = add i64 %100, -1
  %102 = icmp ult i64 %101, 2147483646
  %103 = select i1 %102, i64 %100, i64 2147483647
  switch i32 %67, label %140 [
    i32 1229209940, label %104
    i32 1717846356, label %104
  ]

; <label>:104:                                    ; preds = %98, %98
  %105 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %106 = load i32, i32* %105, align 4, !alias.scope !633
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 52
  %109 = load i8, i8* %108, align 1, !alias.scope !633
  %110 = zext i8 %109 to i64
  %111 = mul nuw nsw i64 %110, %107
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %113 = load i8, i8* %112, align 2, !alias.scope !633
  %114 = icmp ugt i8 %113, 8
  %115 = select i1 %114, i64 2, i64 1
  %116 = mul nuw nsw i64 %111, %115
  %117 = add nuw nsw i64 %116, 1
  %118 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %119 = load i8, i8* %118, align 2, !alias.scope !633
  %120 = icmp eq i8 %119, 0
  %121 = select i1 %120, i64 0, i64 6
  %122 = add nuw nsw i64 %117, %121
  %123 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %124 = load i32, i32* %123, align 8, !alias.scope !633
  %125 = zext i32 %124 to i64
  %126 = udiv i64 4294967295, %122
  %127 = icmp ult i64 %126, %125
  %128 = mul i64 %122, %125
  %129 = select i1 %127, i64 2147483647, i64 %128
  %130 = icmp ult i64 %122, 32566
  %131 = select i1 %130, i64 %122, i64 32566
  %132 = udiv i64 %129, %131
  %133 = mul i64 %132, 5
  %134 = add i64 %133, 11
  %135 = add i64 %134, %129
  %136 = icmp ult i64 %135, 2147483647
  %137 = select i1 %136, i64 %135, i64 2147483647
  %138 = icmp ult i64 %103, %137
  %139 = select i1 %138, i64 %137, i64 %103
  br label %140

; <label>:140:                                    ; preds = %104, %98
  %141 = phi i64 [ %139, %104 ], [ %103, %98 ]
  %142 = zext i32 %25 to i64
  %143 = icmp ult i64 %141, %142
  br i1 %143, label %144, label %145

; <label>:144:                                    ; preds = %140
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.137, i64 0, i64 0)) #22
  unreachable

; <label>:145:                                    ; preds = %140
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #18
  ret i32 %25
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_update_info(%struct.png_struct_def* noalias, %struct.png_info_def* noalias nocapture) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %19, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 64
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %4
  tail call void @MOZ_PNG_read_start_row(%struct.png_struct_def* nonnull %0)
  tail call void @MOZ_PNG_read_transform_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* %1)
  br label %19

; <label>:10:                                     ; preds = %4
  %11 = and i32 %6, 4194304
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %10
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.96, i64 0, i64 0)) #22
  unreachable

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %16 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %15, align 8, !alias.scope !636
  %17 = icmp eq void (%struct.png_struct_def*, i8*)* %16, null
  br i1 %17, label %19, label %18

; <label>:18:                                     ; preds = %14
  tail call void %16(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.96, i64 0, i64 0)) #18
  br label %19

; <label>:19:                                     ; preds = %18, %14, %2, %9
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_start_row(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  tail call void @MOZ_PNG_init_read_transf(%struct.png_struct_def* %0)
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %3 = load i8, i8* %2, align 2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %32, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %7 = load i32, i32* %6, align 8
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %11 = load i32, i32* %10, align 8
  %12 = add i32 %11, 7
  %13 = lshr i32 %12, 3
  %14 = select i1 %9, i32 %13, i32 %11
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  store i32 %14, i32* %15, align 4
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  %21 = getelementptr inbounds [7 x i8], [7 x i8]* @MOZ_APNG_prog_read_reset.png_pass_inc, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = add i32 %17, %23
  %25 = getelementptr inbounds [7 x i8], [7 x i8]* @MOZ_APNG_prog_read_reset.png_pass_start, i64 0, i64 %20
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = xor i32 %27, -1
  %29 = add i32 %24, %28
  %30 = udiv i32 %29, %23
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  store i32 %30, i32* %31, align 8
  br label %41

; <label>:32:                                     ; preds = %1
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  store i32 %37, i32* %38, align 8
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %40 = load i32, i32* %39, align 8
  br label %41

; <label>:41:                                     ; preds = %32, %5
  %42 = phi i32 [ %37, %32 ], [ %17, %5 ]
  %43 = phi i32 [ %40, %32 ], [ %7, %5 ]
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %45 = load i8, i8* %44, align 4
  %46 = zext i8 %45 to i32
  %47 = and i32 %43, 4096
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %75, label %49

; <label>:49:                                     ; preds = %41
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %51 = load i8, i8* %50, align 1
  switch i8 %51, label %75 [
    i8 3, label %52
    i8 0, label %57
    i8 2, label %66
  ]

; <label>:52:                                     ; preds = %49
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %54 = load i16, i16* %53, align 2
  %55 = icmp eq i16 %54, 0
  %56 = select i1 %55, i32 24, i32 32
  br label %75

; <label>:57:                                     ; preds = %49
  %58 = icmp ugt i8 %45, 8
  %59 = select i1 %58, i8 %45, i8 8
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %62 = load i16, i16* %61, align 2
  %63 = icmp ne i16 %62, 0
  %64 = zext i1 %63 to i32
  %65 = shl nuw nsw i32 %60, %64
  br label %75

; <label>:66:                                     ; preds = %49
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %68 = load i16, i16* %67, align 2
  %69 = icmp eq i16 %68, 0
  br i1 %69, label %75, label %70

; <label>:70:                                     ; preds = %66
  %71 = zext i8 %45 to i16
  %72 = shl nuw nsw i16 %71, 2
  %73 = udiv i16 %72, 3
  %74 = zext i16 %73 to i32
  br label %75

; <label>:75:                                     ; preds = %57, %49, %52, %66, %41, %70
  %76 = phi i32 [ %74, %70 ], [ %46, %66 ], [ %46, %41 ], [ %56, %52 ], [ %46, %49 ], [ %65, %57 ]
  %77 = and i32 %43, 16384
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %98, label %79

; <label>:79:                                     ; preds = %75
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %81 = load i16, i16* %80, align 2
  %82 = icmp eq i16 %81, 0
  %83 = or i1 %48, %82
  br i1 %83, label %84, label %88

; <label>:84:                                     ; preds = %79
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %86 = load i8, i8* %85, align 1
  %87 = icmp eq i8 %86, 4
  br i1 %87, label %88, label %91

; <label>:88:                                     ; preds = %79, %84
  %89 = icmp ult i32 %76, 17
  %90 = select i1 %89, i32 32, i32 64
  br label %98

; <label>:91:                                     ; preds = %84
  %92 = icmp ult i32 %76, 9
  %93 = icmp eq i8 %86, 6
  br i1 %92, label %94, label %96

; <label>:94:                                     ; preds = %91
  %95 = select i1 %93, i32 32, i32 24
  br label %98

; <label>:96:                                     ; preds = %91
  %97 = select i1 %93, i32 64, i32 48
  br label %98

; <label>:98:                                     ; preds = %96, %94, %88, %75
  %99 = phi i32 [ %76, %75 ], [ %90, %88 ], [ %95, %94 ], [ %97, %96 ]
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 55
  store i8 %100, i8* %101, align 8
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 56
  store i8 0, i8* %102, align 1
  %103 = add i32 %42, 7
  %104 = and i32 %103, -8
  %105 = zext i32 %104 to i64
  %106 = icmp ugt i32 %99, 7
  %107 = zext i32 %99 to i64
  %108 = lshr i64 %107, 3
  %109 = mul nuw nsw i64 %108, %105
  %110 = mul nuw i64 %105, %107
  %111 = lshr exact i64 %110, 3
  %112 = select i1 %106, i64 %109, i64 %111
  %113 = add i32 %99, 7
  %114 = lshr i32 %113, 3
  %115 = add nuw nsw i32 %114, 49
  %116 = zext i32 %115 to i64
  %117 = add nuw nsw i64 %112, %116
  %118 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 102
  %119 = load i64, i64* %118, align 8
  %120 = icmp ugt i64 %117, %119
  br i1 %120, label %121, label %160

; <label>:121:                                    ; preds = %98
  %122 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 96
  %123 = load i8*, i8** %122, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %126, label %125

; <label>:125:                                    ; preds = %121
  tail call void @free(i8* nonnull %123) #18
  br label %126

; <label>:126:                                    ; preds = %121, %125
  %127 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 105
  %128 = load i8*, i8** %127, align 8
  %129 = icmp eq i8* %128, null
  br i1 %129, label %131, label %130

; <label>:130:                                    ; preds = %126
  tail call void @free(i8* nonnull %128) #18
  br label %131

; <label>:131:                                    ; preds = %126, %130
  %132 = load i8, i8* %2, align 2
  %133 = icmp eq i8 %132, 0
  %134 = tail call noalias i8* @malloc(i64 %117) #18
  %135 = icmp eq i8* %134, null
  br i1 %133, label %139, label %136

; <label>:136:                                    ; preds = %131
  br i1 %135, label %137, label %138

; <label>:137:                                    ; preds = %136
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:138:                                    ; preds = %136
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %134, i8 0, i64 %117, i1 false) #18, !noalias !639
  br label %141

; <label>:139:                                    ; preds = %131
  br i1 %135, label %140, label %141

; <label>:140:                                    ; preds = %139
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:141:                                    ; preds = %139, %138
  store i8* %134, i8** %122, align 8
  %142 = tail call noalias i8* @malloc(i64 %117) #18
  %143 = icmp eq i8* %142, null
  br i1 %143, label %144, label %145

; <label>:144:                                    ; preds = %141
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:145:                                    ; preds = %141
  store i8* %142, i8** %127, align 8
  %146 = getelementptr inbounds i8, i8* %134, i64 32
  %147 = ptrtoint i8* %146 to i64
  %148 = and i64 %147, 15
  %149 = sub nsw i64 0, %148
  %150 = getelementptr inbounds i8, i8* %146, i64 %149
  %151 = getelementptr inbounds i8, i8* %150, i64 -1
  %152 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  store i8* %151, i8** %152, align 8
  %153 = getelementptr inbounds i8, i8* %142, i64 32
  %154 = ptrtoint i8* %153 to i64
  %155 = and i64 %154, 15
  %156 = sub nsw i64 0, %155
  %157 = getelementptr inbounds i8, i8* %153, i64 %156
  %158 = getelementptr inbounds i8, i8* %157, i64 -1
  %159 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  store i8* %158, i8** %159, align 8
  store i64 %117, i64* %118, align 8
  br label %160

; <label>:160:                                    ; preds = %145, %98
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  %162 = load i64, i64* %161, align 8
  %163 = icmp eq i64 %162, -1
  br i1 %163, label %164, label %165

; <label>:164:                                    ; preds = %160
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.142, i64 0, i64 0)) #19
  unreachable

; <label>:165:                                    ; preds = %160
  %166 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  %167 = load i8*, i8** %166, align 8
  %168 = add i64 %162, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %167, i8 0, i64 %168, i1 false)
  %169 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 103
  %170 = load i8*, i8** %169, align 8
  %171 = icmp eq i8* %170, null
  br i1 %171, label %174, label %172

; <label>:172:                                    ; preds = %165
  %173 = bitcast i8** %169 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 0, i64 16, i1 false)
  tail call void @free(i8* nonnull %170) #18
  br label %174

; <label>:174:                                    ; preds = %165, %172
  %175 = tail call fastcc i32 @png_inflate_claim(%struct.png_struct_def* nonnull %0, i32 1229209940)
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %180, label %177

; <label>:177:                                    ; preds = %174
  %178 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %179 = load i8*, i8** %178, align 8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* %179) #19
  unreachable

; <label>:180:                                    ; preds = %174
  %181 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %182 = load i32, i32* %181, align 4
  %183 = or i32 %182, 64
  store i32 %183, i32* %181, align 4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_transform_info(%struct.png_struct_def* noalias, %struct.png_info_def* noalias nocapture) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 4096
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %10

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  %9 = load i8, i8* %8, align 4
  br label %39

; <label>:10:                                     ; preds = %2
  %11 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 3
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %15 = load i16, i16* %14, align 2
  %16 = icmp eq i16 %15, 0
  br i1 %13, label %17, label %25

; <label>:17:                                     ; preds = %10
  %18 = select i1 %16, i8 2, i8 6
  store i8 %18, i8* %11, align 1
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  store i8 8, i8* %19, align 4
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 0, i16* %20, align 2
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 40
  %22 = load %struct.png_color_struct*, %struct.png_color_struct** %21, align 8
  %23 = icmp eq %struct.png_color_struct* %22, null
  br i1 %23, label %24, label %39

; <label>:24:                                     ; preds = %17
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.103, i64 0, i64 0)) #19
  unreachable

; <label>:25:                                     ; preds = %10
  %26 = and i32 %4, 33554432
  %27 = icmp eq i32 %26, 0
  %28 = or i1 %27, %16
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %25
  %30 = or i8 %12, 4
  store i8 %30, i8* %11, align 1
  br label %31

; <label>:31:                                     ; preds = %25, %29
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  %33 = load i8, i8* %32, align 4
  %34 = icmp ult i8 %33, 8
  br i1 %34, label %35, label %36

; <label>:35:                                     ; preds = %31
  store i8 8, i8* %32, align 4
  br label %36

; <label>:36:                                     ; preds = %35, %31
  %37 = phi i8 [ 8, %35 ], [ %33, %31 ]
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 0, i16* %38, align 2
  br label %39

; <label>:39:                                     ; preds = %7, %36, %17
  %40 = phi i8* [ %8, %7 ], [ %32, %36 ], [ %19, %17 ]
  %41 = phi i8 [ %9, %7 ], [ %37, %36 ], [ 8, %17 ]
  %42 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 0
  store i32 %43, i32* %44, align 4
  %45 = icmp ne i8 %41, 16
  %46 = and i32 %4, 67108864
  %47 = icmp eq i32 %46, 0
  %48 = or i1 %47, %45
  br i1 %48, label %50, label %49

; <label>:49:                                     ; preds = %39
  store i8 8, i8* %40, align 4
  br label %50

; <label>:50:                                     ; preds = %39, %49
  %51 = phi i8 [ %41, %39 ], [ 8, %49 ]
  %52 = and i32 %4, 16384
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %55 = load i8, i8* %54, align 1
  br i1 %53, label %58, label %56

; <label>:56:                                     ; preds = %50
  %57 = or i8 %55, 2
  store i8 %57, i8* %54, align 1
  br label %58

; <label>:58:                                     ; preds = %50, %56
  %59 = phi i8 [ %57, %56 ], [ %55, %50 ]
  %60 = icmp eq i8 %59, 3
  br i1 %60, label %61, label %63

; <label>:61:                                     ; preds = %58
  %62 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  store i8 1, i8* %62, align 1
  br label %71

; <label>:63:                                     ; preds = %58
  %64 = and i8 %59, 2
  %65 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  %66 = or i8 %64, 1
  store i8 %66, i8* %65, align 1
  %67 = and i8 %59, 4
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %71, label %69

; <label>:69:                                     ; preds = %63
  %70 = add nuw nsw i8 %66, 1
  store i8 %70, i8* %65, align 1
  br label %71

; <label>:71:                                     ; preds = %61, %63, %69
  %72 = phi i8 [ 1, %61 ], [ %66, %63 ], [ %70, %69 ]
  %73 = mul i8 %51, %72
  %74 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 13
  store i8 %73, i8* %74, align 2
  %75 = icmp ugt i8 %73, 7
  %76 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = zext i32 %77 to i64
  %79 = zext i8 %73 to i64
  br i1 %75, label %80, label %83

; <label>:80:                                     ; preds = %71
  %81 = lshr i64 %79, 3
  %82 = mul nuw nsw i64 %81, %78
  br label %87

; <label>:83:                                     ; preds = %71
  %84 = mul nuw nsw i64 %78, %79
  %85 = add nuw nsw i64 %84, 7
  %86 = lshr i64 %85, 3
  br label %87

; <label>:87:                                     ; preds = %83, %80
  %88 = phi i64 [ %82, %80 ], [ %86, %83 ]
  %89 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 3
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  store i64 %88, i64* %90, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_dest_read_str(%struct.png_struct_def**, %struct.png_info_def**, %struct.png_info_def**) local_unnamed_addr #4 {
  %4 = alloca %struct.png_struct_def, align 8
  %5 = icmp eq %struct.png_struct_def** %0, null
  br i1 %5, label %113, label %6

; <label>:6:                                      ; preds = %3
  %7 = load %struct.png_struct_def*, %struct.png_struct_def** %0, align 8
  %8 = icmp eq %struct.png_struct_def* %7, null
  br i1 %8, label %113, label %9

; <label>:9:                                      ; preds = %6
  %10 = icmp eq %struct.png_info_def** %2, null
  br i1 %10, label %16, label %11

; <label>:11:                                     ; preds = %9
  %12 = load %struct.png_info_def*, %struct.png_info_def** %2, align 8, !noalias !642
  %13 = icmp eq %struct.png_info_def* %12, null
  br i1 %13, label %16, label %14

; <label>:14:                                     ; preds = %11
  %15 = bitcast %struct.png_info_def* %12 to i8*
  store %struct.png_info_def* null, %struct.png_info_def** %2, align 8, !noalias !642
  tail call void @MOZ_PNG_free_data(%struct.png_struct_def* nonnull %7, %struct.png_info_def* nonnull %12, i32 65535, i32 -1) #18
  tail call void @free(i8* nonnull %15) #18
  br label %16

; <label>:16:                                     ; preds = %9, %11, %14
  %17 = icmp eq %struct.png_info_def** %1, null
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %16
  %19 = load %struct.png_info_def*, %struct.png_info_def** %1, align 8, !noalias !645
  %20 = icmp eq %struct.png_info_def* %19, null
  br i1 %20, label %23, label %21

; <label>:21:                                     ; preds = %18
  %22 = bitcast %struct.png_info_def* %19 to i8*
  store %struct.png_info_def* null, %struct.png_info_def** %1, align 8, !noalias !645
  tail call void @MOZ_PNG_free_data(%struct.png_struct_def* nonnull %7, %struct.png_info_def* nonnull %19, i32 65535, i32 -1) #18
  tail call void @free(i8* nonnull %22) #18
  br label %23

; <label>:23:                                     ; preds = %16, %18, %21
  store %struct.png_struct_def* null, %struct.png_struct_def** %0, align 8
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 63
  %25 = load i8*, i8** %24, align 8, !alias.scope !648
  %26 = icmp eq i8* %25, null
  br i1 %26, label %28, label %27

; <label>:27:                                     ; preds = %23
  tail call void @free(i8* nonnull %25) #18
  br label %28

; <label>:28:                                     ; preds = %27, %23
  store i8* null, i8** %24, align 8, !alias.scope !648
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 64
  %30 = load i16**, i16*** %29, align 8, !alias.scope !648
  %31 = icmp eq i16** %30, null
  br i1 %31, label %59, label %32

; <label>:32:                                     ; preds = %28
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 61
  %34 = load i32, i32* %33, align 8, !alias.scope !648
  %35 = sub nsw i32 8, %34
  %36 = icmp eq i32 %35, 31
  br i1 %36, label %55, label %37

; <label>:37:                                     ; preds = %32
  %38 = shl i32 1, %35
  %39 = sext i32 %38 to i64
  br label %40

; <label>:40:                                     ; preds = %49, %37
  %41 = phi i16** [ %30, %37 ], [ %50, %49 ]
  %42 = phi i64 [ 0, %37 ], [ %51, %49 ]
  %43 = getelementptr inbounds i16*, i16** %41, i64 %42
  %44 = bitcast i16** %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %49, label %47

; <label>:47:                                     ; preds = %40
  tail call void @free(i8* nonnull %45) #18
  %48 = load i16**, i16*** %29, align 8, !alias.scope !648
  br label %49

; <label>:49:                                     ; preds = %47, %40
  %50 = phi i16** [ %41, %40 ], [ %48, %47 ]
  %51 = add nuw nsw i64 %42, 1
  %52 = icmp slt i64 %51, %39
  br i1 %52, label %40, label %53

; <label>:53:                                     ; preds = %49
  %54 = icmp eq i16** %50, null
  br i1 %54, label %58, label %55

; <label>:55:                                     ; preds = %32, %53
  %56 = phi i16** [ %50, %53 ], [ %30, %32 ]
  %57 = bitcast i16** %56 to i8*
  tail call void @free(i8* nonnull %57) #18
  br label %58

; <label>:58:                                     ; preds = %55, %53
  store i16** null, i16*** %29, align 8, !alias.scope !648
  br label %59

; <label>:59:                                     ; preds = %58, %28
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 96
  %61 = load i8*, i8** %60, align 8, !alias.scope !653
  %62 = icmp eq i8* %61, null
  br i1 %62, label %64, label %63

; <label>:63:                                     ; preds = %59
  tail call void @free(i8* nonnull %61) #18
  br label %64

; <label>:64:                                     ; preds = %63, %59
  store i8* null, i8** %60, align 8, !alias.scope !653
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 105
  %66 = load i8*, i8** %65, align 8, !alias.scope !653
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

; <label>:68:                                     ; preds = %64
  tail call void @free(i8* nonnull %66) #18
  br label %69

; <label>:69:                                     ; preds = %68, %64
  store i8* null, i8** %65, align 8, !alias.scope !653
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 103
  %71 = load i8*, i8** %70, align 8, !alias.scope !653
  %72 = icmp eq i8* %71, null
  br i1 %72, label %74, label %73

; <label>:73:                                     ; preds = %69
  tail call void @free(i8* nonnull %71) #18
  br label %74

; <label>:74:                                     ; preds = %73, %69
  store i8* null, i8** %70, align 8, !alias.scope !653
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 86
  %76 = load i32, i32* %75, align 4, !alias.scope !653
  %77 = and i32 %76, 4096
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %88, label %79

; <label>:79:                                     ; preds = %74
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 40
  %81 = bitcast %struct.png_color_struct** %80 to i8**
  %82 = load i8*, i8** %81, align 8, !alias.scope !653
  %83 = icmp eq i8* %82, null
  br i1 %83, label %86, label %84

; <label>:84:                                     ; preds = %79
  tail call void @free(i8* nonnull %82) #18
  %85 = load i32, i32* %75, align 4, !alias.scope !653
  br label %86

; <label>:86:                                     ; preds = %84, %79
  %87 = phi i32 [ %76, %79 ], [ %85, %84 ]
  store %struct.png_color_struct* null, %struct.png_color_struct** %80, align 8, !alias.scope !653
  br label %88

; <label>:88:                                     ; preds = %86, %74
  %89 = phi i32 [ %76, %74 ], [ %87, %86 ]
  %90 = and i32 %89, -4097
  store i32 %90, i32* %75, align 4, !alias.scope !653
  %91 = and i32 %89, 8192
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %101, label %93

; <label>:93:                                     ; preds = %88
  %94 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 66
  %95 = load i8*, i8** %94, align 8, !alias.scope !653
  %96 = icmp eq i8* %95, null
  br i1 %96, label %99, label %97

; <label>:97:                                     ; preds = %93
  tail call void @free(i8* nonnull %95) #18
  %98 = load i32, i32* %75, align 4, !alias.scope !653
  br label %99

; <label>:99:                                     ; preds = %97, %93
  %100 = phi i32 [ %90, %93 ], [ %98, %97 ]
  store i8* null, i8** %94, align 8, !alias.scope !653
  br label %101

; <label>:101:                                    ; preds = %99, %88
  %102 = phi i32 [ %90, %88 ], [ %100, %99 ]
  %103 = and i32 %102, -8193
  store i32 %103, i32* %75, align 4, !alias.scope !653
  %104 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 14
  %105 = tail call i32 @MOZ_Z_inflateEnd(%struct.z_stream_s* nonnull %104) #18
  %106 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %7, i64 0, i32 74
  %107 = load i8*, i8** %106, align 8, !alias.scope !653
  %108 = icmp eq i8* %107, null
  br i1 %108, label %110, label %109

; <label>:109:                                    ; preds = %101
  tail call void @free(i8* nonnull %107) #18
  br label %110

; <label>:110:                                    ; preds = %101, %109
  store i8* null, i8** %106, align 8, !alias.scope !653
  %111 = bitcast %struct.png_struct_def* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 984, i8* nonnull %111) #18, !noalias !654
  %112 = bitcast %struct.png_struct_def* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %111, i8* align 8 %112, i64 984, i1 false) #18
  tail call void @free(i8* nonnull %112) #18
  call void @MOZ_PNG_free_jmpbuf(%struct.png_struct_def* nonnull %4) #18
  call void @llvm.lifetime.end.p0i8(i64 984, i8* nonnull %111) #18, !noalias !654
  br label %113

; <label>:113:                                    ; preds = %3, %6, %110
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_read_status_fn(%struct.png_struct_def* noalias, void (%struct.png_struct_def*, i32, i32)*) local_unnamed_addr #3 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 68
  store void (%struct.png_struct_def*, i32, i32)* %1, void (%struct.png_struct_def*, i32, i32)** %5, align 8
  br label %6

; <label>:6:                                      ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_data(%struct.png_struct_def* noalias, i8*, i64) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %5 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %4, align 8
  %6 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %5, null
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %3
  tail call void %5(%struct.png_struct_def* nonnull %0, i8* %1, i64 %2) #18
  ret void

; <label>:8:                                      ; preds = %3
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #19
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_def_read_data(%struct.png_struct_def*, i8* nocapture, i64) #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %12, label %5

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  %7 = bitcast i8** %6 to %struct._IO_FILE**
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %9 = tail call i64 @fread(i8* %1, i64 1, i64 %2, %struct._IO_FILE* %8)
  %10 = icmp eq i64 %9, %2
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %5
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.98, i64 0, i64 0)) #19
  unreachable

; <label>:12:                                     ; preds = %5, %3
  ret void
}

; Function Attrs: nounwind
declare i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_crc_action(%struct.png_struct_def* noalias, i32, i32) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %43, label %5

; <label>:5:                                      ; preds = %3
  switch i32 %1, label %20 [
    i32 5, label %24
    i32 3, label %6
    i32 4, label %11
    i32 2, label %15
  ]

; <label>:6:                                      ; preds = %5
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, -3073
  %10 = or i32 %9, 1024
  store i32 %10, i32* %7, align 4
  br label %24

; <label>:11:                                     ; preds = %5
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %13 = load i32, i32* %12, align 4
  %14 = or i32 %13, 3072
  store i32 %14, i32* %12, align 4
  br label %24

; <label>:15:                                     ; preds = %5
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %17 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %16, align 8, !alias.scope !657
  %18 = icmp eq void (%struct.png_struct_def*, i8*)* %17, null
  br i1 %18, label %20, label %19

; <label>:19:                                     ; preds = %15
  tail call void %17(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.100, i64 0, i64 0)) #18
  br label %20

; <label>:20:                                     ; preds = %19, %15, %5
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, -3073
  store i32 %23, i32* %21, align 4
  br label %24

; <label>:24:                                     ; preds = %20, %11, %6, %5
  switch i32 %2, label %39 [
    i32 5, label %43
    i32 3, label %25
    i32 4, label %30
    i32 1, label %34
  ]

; <label>:25:                                     ; preds = %24
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, -769
  %29 = or i32 %28, 256
  store i32 %29, i32* %26, align 4
  br label %43

; <label>:30:                                     ; preds = %24
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = or i32 %32, 768
  store i32 %33, i32* %31, align 4
  br label %43

; <label>:34:                                     ; preds = %24
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, -769
  %38 = or i32 %37, 512
  store i32 %38, i32* %35, align 4
  br label %43

; <label>:39:                                     ; preds = %24
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %41 = load i32, i32* %40, align 4
  %42 = and i32 %41, -769
  store i32 %42, i32* %40, align 4
  br label %43

; <label>:43:                                     ; preds = %3, %39, %34, %30, %25, %24
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_scale_16(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %22, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4, !alias.scope !660
  %6 = and i32 %5, 64
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %17, label %8

; <label>:8:                                      ; preds = %3
  %9 = and i32 %5, 4194304
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #22
  unreachable

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %14 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %13, align 8, !alias.scope !663
  %15 = icmp eq void (%struct.png_struct_def*, i8*)* %14, null
  br i1 %15, label %22, label %16

; <label>:16:                                     ; preds = %12
  tail call void %14(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #18
  br label %22

; <label>:17:                                     ; preds = %3
  %18 = or i32 %5, 16384
  store i32 %18, i32* %4, align 4, !alias.scope !660
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 67108864
  store i32 %21, i32* %19, align 8
  br label %22

; <label>:22:                                     ; preds = %16, %12, %1, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_gamma_fixed(%struct.png_struct_def* noalias, i32, i32) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %42, label %5

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %7 = load i32, i32* %6, align 4, !alias.scope !666
  %8 = and i32 %7, 64
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %19, label %10

; <label>:10:                                     ; preds = %5
  %11 = and i32 %7, 4194304
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %10
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #22
  unreachable

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %16 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %15, align 8, !alias.scope !669
  %17 = icmp eq void (%struct.png_struct_def*, i8*)* %16, null
  br i1 %17, label %42, label %18

; <label>:18:                                     ; preds = %14
  tail call void %16(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #18
  br label %42

; <label>:19:                                     ; preds = %5
  %20 = or i32 %7, 16384
  store i32 %20, i32* %6, align 4, !alias.scope !666
  switch i32 %1, label %24 [
    i32 -1, label %21
    i32 -100000, label %21
    i32 -2, label %23
    i32 -50000, label %23
  ]

; <label>:21:                                     ; preds = %19, %19
  %22 = or i32 %7, 20480
  store i32 %22, i32* %6, align 4, !alias.scope !672
  br label %24

; <label>:23:                                     ; preds = %19, %19
  br label %24

; <label>:24:                                     ; preds = %19, %21, %23
  %25 = phi i32 [ %22, %21 ], [ %20, %23 ], [ %20, %19 ]
  %26 = phi i32 [ 220000, %21 ], [ 151724, %23 ], [ %1, %19 ]
  switch i32 %2, label %29 [
    i32 -1, label %27
    i32 -100000, label %27
    i32 -2, label %32
    i32 -50000, label %32
  ]

; <label>:27:                                     ; preds = %24, %24
  %28 = or i32 %25, 4096
  store i32 %28, i32* %6, align 4, !alias.scope !675
  br label %32

; <label>:29:                                     ; preds = %24
  %30 = icmp slt i32 %2, 1
  br i1 %30, label %31, label %32

; <label>:31:                                     ; preds = %29
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.101, i64 0, i64 0)) #19
  unreachable

; <label>:32:                                     ; preds = %24, %24, %27, %29
  %33 = phi i32 [ %2, %29 ], [ 45455, %27 ], [ 65909, %24 ], [ 65909, %24 ]
  %34 = icmp slt i32 %26, 1
  br i1 %34, label %35, label %36

; <label>:35:                                     ; preds = %32
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.102, i64 0, i64 0)) #19
  unreachable

; <label>:36:                                     ; preds = %32
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 0
  store i32 %33, i32* %37, align 8
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 4
  %39 = load i16, i16* %38, align 2
  %40 = or i16 %39, 1
  store i16 %40, i16* %38, align 2
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 62
  store i32 %26, i32* %41, align 4
  br label %42

; <label>:42:                                     ; preds = %18, %14, %3, %36
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_gamma(%struct.png_struct_def* noalias, double, double) local_unnamed_addr #4 {
  %4 = fcmp ogt double %1, 0.000000e+00
  %5 = fcmp olt double %1, 1.280000e+02
  %6 = and i1 %4, %5
  %7 = fmul double %1, 1.000000e+05
  %8 = select i1 %6, double %7, double %1
  %9 = fadd double %8, 5.000000e-01
  %10 = tail call double @llvm.floor.f64(double %9) #18
  %11 = fcmp ogt double %10, 0x41DFFFFFFFC00000
  %12 = fcmp olt double %10, 0xC1DFFFFFFFC00000
  %13 = or i1 %11, %12
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %3
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.217, i64 0, i64 0)) #22
  unreachable

; <label>:15:                                     ; preds = %3
  %16 = fcmp ogt double %2, 0.000000e+00
  %17 = fcmp olt double %2, 1.280000e+02
  %18 = and i1 %16, %17
  %19 = fmul double %2, 1.000000e+05
  %20 = select i1 %18, double %19, double %2
  %21 = fadd double %20, 5.000000e-01
  %22 = tail call double @llvm.floor.f64(double %21) #18
  %23 = fcmp ogt double %22, 0x41DFFFFFFFC00000
  %24 = fcmp olt double %22, 0xC1DFFFFFFFC00000
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %15
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.217, i64 0, i64 0)) #22
  unreachable

; <label>:27:                                     ; preds = %15
  %28 = fptosi double %10 to i32
  %29 = fptosi double %22 to i32
  tail call void @MOZ_PNG_set_gamma_fixed(%struct.png_struct_def* %0, i32 %28, i32 %29)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_expand(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %22, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4, !alias.scope !678
  %6 = and i32 %5, 64
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %17, label %8

; <label>:8:                                      ; preds = %3
  %9 = and i32 %5, 4194304
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #22
  unreachable

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %14 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %13, align 8, !alias.scope !681
  %15 = icmp eq void (%struct.png_struct_def*, i8*)* %14, null
  br i1 %15, label %22, label %16

; <label>:16:                                     ; preds = %12
  tail call void %14(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #18
  br label %22

; <label>:17:                                     ; preds = %3
  %18 = or i32 %5, 16384
  store i32 %18, i32* %4, align 4, !alias.scope !678
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 33558528
  store i32 %21, i32* %19, align 8
  br label %22

; <label>:22:                                     ; preds = %16, %12, %1, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_palette_to_rgb(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %22, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4, !alias.scope !684
  %6 = and i32 %5, 64
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %17, label %8

; <label>:8:                                      ; preds = %3
  %9 = and i32 %5, 4194304
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #22
  unreachable

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %14 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %13, align 8, !alias.scope !687
  %15 = icmp eq void (%struct.png_struct_def*, i8*)* %14, null
  br i1 %15, label %22, label %16

; <label>:16:                                     ; preds = %12
  tail call void %14(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #18
  br label %22

; <label>:17:                                     ; preds = %3
  %18 = or i32 %5, 16384
  store i32 %18, i32* %4, align 4, !alias.scope !684
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 33558528
  store i32 %21, i32* %19, align 8
  br label %22

; <label>:22:                                     ; preds = %16, %12, %1, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_x_g_124_to_8(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %22, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4, !alias.scope !690
  %6 = and i32 %5, 64
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %17, label %8

; <label>:8:                                      ; preds = %3
  %9 = and i32 %5, 4194304
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #22
  unreachable

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %14 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %13, align 8, !alias.scope !693
  %15 = icmp eq void (%struct.png_struct_def*, i8*)* %14, null
  br i1 %15, label %22, label %16

; <label>:16:                                     ; preds = %12
  tail call void %14(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #18
  br label %22

; <label>:17:                                     ; preds = %3
  %18 = or i32 %5, 16384
  store i32 %18, i32* %4, align 4, !alias.scope !690
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 4096
  store i32 %21, i32* %19, align 8
  br label %22

; <label>:22:                                     ; preds = %16, %12, %1, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_tRNS_to_alpha(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %22, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4, !alias.scope !696
  %6 = and i32 %5, 64
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %17, label %8

; <label>:8:                                      ; preds = %3
  %9 = and i32 %5, 4194304
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #22
  unreachable

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %14 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %13, align 8, !alias.scope !699
  %15 = icmp eq void (%struct.png_struct_def*, i8*)* %14, null
  br i1 %15, label %22, label %16

; <label>:16:                                     ; preds = %12
  tail call void %14(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #18
  br label %22

; <label>:17:                                     ; preds = %3
  %18 = or i32 %5, 16384
  store i32 %18, i32* %4, align 4, !alias.scope !696
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 33558528
  store i32 %21, i32* %19, align 8
  br label %22

; <label>:22:                                     ; preds = %16, %12, %1, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_gray_to_rgb(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %22, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4, !alias.scope !702
  %6 = and i32 %5, 64
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %17, label %8

; <label>:8:                                      ; preds = %3
  %9 = and i32 %5, 4194304
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #22
  unreachable

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %14 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %13, align 8, !alias.scope !705
  %15 = icmp eq void (%struct.png_struct_def*, i8*)* %14, null
  br i1 %15, label %22, label %16

; <label>:16:                                     ; preds = %12
  tail call void %14(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.215, i64 0, i64 0)) #18
  br label %22

; <label>:17:                                     ; preds = %3
  %18 = or i32 %5, 16384
  store i32 %18, i32* %4, align 4, !alias.scope !708
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %20 = load i32, i32* %19, align 8, !alias.scope !713
  %21 = or i32 %20, 20480
  store i32 %21, i32* %19, align 8
  br label %22

; <label>:22:                                     ; preds = %16, %12, %1, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_init_read_transf(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 62
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %4, label %32, label %8

; <label>:8:                                      ; preds = %1
  %9 = sitofp i32 %3 to double
  br i1 %7, label %10, label %23

; <label>:10:                                     ; preds = %8
  %11 = sitofp i32 %6 to double
  %12 = fmul double %9, %11
  %13 = fdiv double %12, 1.000000e+05
  %14 = fadd double %13, 5.000000e-01
  %15 = tail call double @llvm.floor.f64(double %14) #18
  %16 = fcmp ole double %15, 0x41DFFFFFFFC00000
  %17 = fcmp oge double %15, 0xC1E0000000000000
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %44

; <label>:19:                                     ; preds = %10
  %20 = fptosi double %15 to i32
  %21 = add i32 %20, -95000
  %22 = icmp ugt i32 %21, 10000
  br label %44

; <label>:23:                                     ; preds = %8
  %24 = fdiv double 1.000000e+10, %9
  %25 = fadd double %24, 5.000000e-01
  %26 = tail call double @llvm.floor.f64(double %25) #18
  %27 = fcmp ole double %26, 0x41DFFFFFFFC00000
  %28 = fcmp oge double %26, 0xC1E0000000000000
  %29 = and i1 %27, %28
  %30 = fptosi double %26 to i32
  %31 = select i1 %29, i32 %30, i32 0
  store i32 %31, i32* %5, align 4
  br label %44

; <label>:32:                                     ; preds = %1
  br i1 %7, label %33, label %43

; <label>:33:                                     ; preds = %32
  %34 = sitofp i32 %6 to double
  %35 = fdiv double 1.000000e+10, %34
  %36 = fadd double %35, 5.000000e-01
  %37 = tail call double @llvm.floor.f64(double %36) #18
  %38 = fcmp ole double %37, 0x41DFFFFFFFC00000
  %39 = fcmp oge double %37, 0xC1E0000000000000
  %40 = and i1 %38, %39
  %41 = fptosi double %37 to i32
  %42 = select i1 %40, i32 %41, i32 0
  store i32 %42, i32* %2, align 8
  br label %44

; <label>:43:                                     ; preds = %32
  store i32 100000, i32* %2, align 8
  store i32 100000, i32* %5, align 4
  br label %44

; <label>:44:                                     ; preds = %19, %10, %33, %43, %23
  %45 = phi i32 [ %31, %23 ], [ %6, %33 ], [ 100000, %43 ], [ %6, %10 ], [ %6, %19 ]
  %46 = phi i32 [ %3, %23 ], [ %42, %33 ], [ 100000, %43 ], [ %3, %10 ], [ %3, %19 ]
  %47 = phi i1 [ false, %23 ], [ false, %33 ], [ false, %43 ], [ true, %10 ], [ %22, %19 ]
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 107, i32 4
  %49 = load i16, i16* %48, align 2
  %50 = or i16 %49, 1
  store i16 %50, i16* %48, align 2
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %52 = load i32, i32* %51, align 8
  %53 = and i32 %52, -8193
  %54 = or i32 %52, 8192
  %55 = select i1 %47, i32 %54, i32 %53
  store i32 %55, i32* %51, align 8
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 3
  br i1 %58, label %59, label %86

; <label>:59:                                     ; preds = %44
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %61 = load i16, i16* %60, align 2, !alias.scope !714
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %77, label %63

; <label>:63:                                     ; preds = %59
  %64 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 66
  %65 = load i8*, i8** %64, align 8, !alias.scope !714
  %66 = zext i16 %61 to i64
  br label %67

; <label>:67:                                     ; preds = %73, %63
  %68 = phi i64 [ 0, %63 ], [ %75, %73 ]
  %69 = phi i32 [ 0, %63 ], [ %74, %73 ]
  %70 = getelementptr inbounds i8, i8* %65, i64 %68
  %71 = load i8, i8* %70, align 1, !noalias !714
  switch i8 %71, label %95 [
    i8 -1, label %73
    i8 0, label %72
  ]

; <label>:72:                                     ; preds = %67
  br label %73

; <label>:73:                                     ; preds = %72, %67
  %74 = phi i32 [ %69, %67 ], [ 1, %72 ]
  %75 = add nuw nsw i64 %68, 1
  %76 = icmp ult i64 %75, %66
  br i1 %76, label %67, label %77

; <label>:77:                                     ; preds = %73, %59
  %78 = phi i32 [ 0, %59 ], [ %74, %73 ]
  %79 = and i32 %55, -8388609
  store i32 %79, i32* %51, align 8, !alias.scope !714
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %81 = load i32, i32* %80, align 4, !alias.scope !714
  %82 = and i32 %81, -8193
  store i32 %82, i32* %80, align 4, !alias.scope !714
  %83 = icmp eq i32 %78, 0
  br i1 %83, label %84, label %95

; <label>:84:                                     ; preds = %77
  %85 = and i32 %55, -8388993
  store i32 %85, i32* %51, align 8, !alias.scope !714
  br label %95

; <label>:86:                                     ; preds = %44
  %87 = and i8 %57, 4
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 42
  %89 = load i16, i16* %88, align 2, !alias.scope !717
  %90 = icmp eq i16 %89, 0
  %91 = icmp eq i8 %87, 0
  %92 = and i1 %91, %90
  br i1 %92, label %93, label %95

; <label>:93:                                     ; preds = %86
  %94 = and i32 %55, -385
  store i32 %94, i32* %51, align 8, !alias.scope !717
  br label %95

; <label>:95:                                     ; preds = %67, %93, %86, %84, %77
  %96 = phi i32 [ %94, %93 ], [ %55, %86 ], [ %85, %84 ], [ %79, %77 ], [ %55, %67 ]
  %97 = and i32 %96, 8192
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %123

; <label>:99:                                     ; preds = %95
  %100 = and i32 %96, 6291456
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %108, label %102

; <label>:102:                                    ; preds = %99
  %103 = add i32 %46, -95000
  %104 = icmp ult i32 %103, 10001
  %105 = add i32 %45, -95000
  %106 = icmp ult i32 %105, 10001
  %107 = and i1 %104, %106
  br i1 %107, label %108, label %123

; <label>:108:                                    ; preds = %102, %99
  %109 = trunc i32 %96 to i8
  %110 = icmp slt i8 %109, 0
  br i1 %110, label %111, label %117

; <label>:111:                                    ; preds = %108
  %112 = add i32 %46, -95000
  %113 = icmp ult i32 %112, 10001
  %114 = add i32 %45, -95000
  %115 = icmp ult i32 %114, 10001
  %116 = and i1 %113, %115
  br i1 %116, label %117, label %123

; <label>:117:                                    ; preds = %111, %108
  %118 = and i32 %96, 8388608
  %119 = icmp eq i32 %118, 0
  %120 = add i32 %45, -95000
  %121 = icmp ult i32 %120, 10001
  %122 = or i1 %119, %121
  br i1 %122, label %163, label %123

; <label>:123:                                    ; preds = %117, %102, %111, %95
  %124 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %125 = load i8, i8* %124, align 2
  %126 = zext i8 %125 to i32
  tail call void @MOZ_PNG_build_gamma_tab(%struct.png_struct_def* nonnull %0, i32 %126)
  %127 = load i8, i8* %56, align 1
  %128 = icmp eq i8 %127, 3
  br i1 %128, label %129, label %163

; <label>:129:                                    ; preds = %123
  %130 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 40
  %131 = load %struct.png_color_struct*, %struct.png_color_struct** %130, align 8
  %132 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  %133 = load i16, i16* %132, align 8
  %134 = icmp eq i16 %133, 0
  br i1 %134, label %160, label %135

; <label>:135:                                    ; preds = %129
  %136 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  %137 = zext i16 %133 to i64
  br label %138

; <label>:138:                                    ; preds = %138, %135
  %139 = phi i64 [ 0, %135 ], [ %158, %138 ]
  %140 = load i8*, i8** %136, align 8
  %141 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %131, i64 %139, i32 0
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i64
  %144 = getelementptr inbounds i8, i8* %140, i64 %143
  %145 = load i8, i8* %144, align 1
  store i8 %145, i8* %141, align 1
  %146 = load i8*, i8** %136, align 8
  %147 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %131, i64 %139, i32 1
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i64
  %150 = getelementptr inbounds i8, i8* %146, i64 %149
  %151 = load i8, i8* %150, align 1
  store i8 %151, i8* %147, align 1
  %152 = load i8*, i8** %136, align 8
  %153 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %131, i64 %139, i32 2
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds i8, i8* %152, i64 %155
  %157 = load i8, i8* %156, align 1
  store i8 %157, i8* %153, align 1
  %158 = add nuw nsw i64 %139, 1
  %159 = icmp eq i64 %158, %137
  br i1 %159, label %160, label %138

; <label>:160:                                    ; preds = %138, %129
  %161 = load i32, i32* %51, align 8
  %162 = and i32 %161, -8193
  store i32 %162, i32* %51, align 8
  br label %163

; <label>:163:                                    ; preds = %117, %123, %160
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define internal fastcc void @MOZ_PNG_do_expand(%struct.png_row_info_struct* nocapture, i8* nocapture, %struct.png_color_16_struct* readonly) unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 2
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %312

; <label>:9:                                      ; preds = %3
  %10 = icmp ne %struct.png_color_16_struct* %2, null
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %9
  %12 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 4
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  br label %15

; <label>:15:                                     ; preds = %9, %11
  %16 = phi i32 [ %14, %11 ], [ 0, %9 ]
  %17 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 3
  %18 = load i8, i8* %17, align 1
  %19 = icmp ult i8 %18, 8
  br i1 %19, label %20, label %190

; <label>:20:                                     ; preds = %15
  switch i8 %18, label %21 [
    i8 1, label %23
    i8 2, label %72
    i8 4, label %111
  ]

; <label>:21:                                     ; preds = %20
  %22 = zext i32 %5 to i64
  br label %185

; <label>:23:                                     ; preds = %20
  %24 = and i32 %16, 1
  %25 = mul nuw nsw i32 %24, 255
  %26 = zext i32 %5 to i64
  %27 = icmp eq i32 %5, 0
  br i1 %27, label %185, label %28

; <label>:28:                                     ; preds = %23
  %29 = add i32 %5, 7
  %30 = and i32 %29, 7
  %31 = xor i32 %30, 7
  %32 = getelementptr inbounds i8, i8* %1, i64 %26
  %33 = add i32 %5, -1
  %34 = lshr i32 %33, 3
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  %37 = and i32 %5, 1
  %38 = icmp eq i32 %33, 0
  br i1 %38, label %158, label %39

; <label>:39:                                     ; preds = %28
  %40 = sub i32 %5, %37
  br label %41

; <label>:41:                                     ; preds = %41, %39
  %42 = phi i8* [ %32, %39 ], [ %58, %41 ]
  %43 = phi i32 [ %31, %39 ], [ %69, %41 ]
  %44 = phi i8* [ %36, %39 ], [ %68, %41 ]
  %45 = phi i32 [ %40, %39 ], [ %70, %41 ]
  %46 = getelementptr inbounds i8, i8* %42, i64 -1
  %47 = load i8, i8* %44, align 1
  %48 = zext i8 %47 to i32
  %49 = shl i32 1, %43
  %50 = and i32 %49, %48
  %51 = icmp ne i32 %50, 0
  %52 = sext i1 %51 to i8
  store i8 %52, i8* %46, align 1
  %53 = icmp eq i32 %43, 7
  %54 = getelementptr inbounds i8, i8* %44, i64 -1
  %55 = add nsw i32 %43, 1
  %56 = select i1 %53, i8* %54, i8* %44
  %57 = select i1 %53, i32 0, i32 %55
  %58 = getelementptr inbounds i8, i8* %42, i64 -2
  %59 = load i8, i8* %56, align 1
  %60 = zext i8 %59 to i32
  %61 = shl i32 1, %57
  %62 = and i32 %61, %60
  %63 = icmp ne i32 %62, 0
  %64 = sext i1 %63 to i8
  store i8 %64, i8* %58, align 1
  %65 = icmp eq i32 %57, 7
  %66 = getelementptr inbounds i8, i8* %56, i64 -1
  %67 = add nsw i32 %57, 1
  %68 = select i1 %65, i8* %66, i8* %56
  %69 = select i1 %65, i32 0, i32 %67
  %70 = add i32 %45, -2
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %158, label %41

; <label>:72:                                     ; preds = %20
  %73 = and i32 %16, 3
  %74 = mul nuw nsw i32 %73, 85
  %75 = zext i32 %5 to i64
  %76 = icmp eq i32 %5, 0
  br i1 %76, label %185, label %77

; <label>:77:                                     ; preds = %72
  %78 = shl i32 %5, 1
  %79 = add i32 %78, 6
  %80 = and i32 %79, 6
  %81 = xor i32 %80, 6
  %82 = getelementptr inbounds i8, i8* %1, i64 %75
  %83 = add i32 %5, -1
  %84 = lshr i32 %83, 2
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %1, i64 %85
  br label %87

; <label>:87:                                     ; preds = %87, %77
  %88 = phi i8* [ %92, %87 ], [ %82, %77 ]
  %89 = phi i32 [ %108, %87 ], [ %81, %77 ]
  %90 = phi i8* [ %107, %87 ], [ %86, %77 ]
  %91 = phi i32 [ %109, %87 ], [ 0, %77 ]
  %92 = getelementptr inbounds i8, i8* %88, i64 -1
  %93 = load i8, i8* %90, align 1
  %94 = zext i8 %93 to i32
  %95 = lshr i32 %94, %89
  %96 = and i32 %95, 3
  %97 = shl nuw nsw i32 %96, 2
  %98 = or i32 %97, %96
  %99 = shl nuw nsw i32 %96, 4
  %100 = or i32 %98, %99
  %101 = shl nuw nsw i32 %96, 6
  %102 = or i32 %100, %101
  %103 = trunc i32 %102 to i8
  store i8 %103, i8* %92, align 1
  %104 = icmp eq i32 %89, 6
  %105 = getelementptr inbounds i8, i8* %90, i64 -1
  %106 = add nsw i32 %89, 2
  %107 = select i1 %104, i8* %105, i8* %90
  %108 = select i1 %104, i32 0, i32 %106
  %109 = add nuw i32 %91, 1
  %110 = icmp eq i32 %109, %5
  br i1 %110, label %185, label %87

; <label>:111:                                    ; preds = %20
  %112 = and i32 %16, 15
  %113 = mul nuw nsw i32 %112, 17
  %114 = zext i32 %5 to i64
  %115 = icmp eq i32 %5, 0
  br i1 %115, label %185, label %116

; <label>:116:                                    ; preds = %111
  %117 = shl i32 %5, 2
  %118 = and i32 %117, 4
  %119 = getelementptr inbounds i8, i8* %1, i64 %114
  %120 = add i32 %5, -1
  %121 = lshr i32 %120, 1
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %1, i64 %122
  %124 = and i32 %5, 1
  %125 = icmp eq i32 %120, 0
  br i1 %125, label %171, label %126

; <label>:126:                                    ; preds = %116
  %127 = sub i32 %5, %124
  br label %128

; <label>:128:                                    ; preds = %128, %126
  %129 = phi i8* [ %119, %126 ], [ %145, %128 ]
  %130 = phi i32 [ %118, %126 ], [ %155, %128 ]
  %131 = phi i8* [ %123, %126 ], [ %154, %128 ]
  %132 = phi i32 [ %127, %126 ], [ %156, %128 ]
  %133 = getelementptr inbounds i8, i8* %129, i64 -1
  %134 = load i8, i8* %131, align 1
  %135 = zext i8 %134 to i32
  %136 = lshr i32 %135, %130
  %137 = and i32 %136, 15
  %138 = shl nuw nsw i32 %137, 4
  %139 = or i32 %138, %137
  %140 = trunc i32 %139 to i8
  store i8 %140, i8* %133, align 1
  %141 = icmp eq i32 %130, 4
  %142 = getelementptr inbounds i8, i8* %131, i64 -1
  %143 = select i1 %141, i8* %142, i8* %131
  %144 = select i1 %141, i32 0, i32 4
  %145 = getelementptr inbounds i8, i8* %129, i64 -2
  %146 = load i8, i8* %143, align 1
  %147 = zext i8 %146 to i32
  %148 = lshr i32 %147, %144
  %149 = and i32 %148, 15
  %150 = shl nuw nsw i32 %148, 4
  %151 = or i32 %150, %149
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %145, align 1
  %153 = getelementptr inbounds i8, i8* %143, i64 -1
  %154 = select i1 %141, i8* %142, i8* %153
  %155 = select i1 %141, i32 4, i32 0
  %156 = add i32 %132, -2
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %171, label %128

; <label>:158:                                    ; preds = %41, %28
  %159 = phi i8* [ %32, %28 ], [ %58, %41 ]
  %160 = phi i32 [ %31, %28 ], [ %69, %41 ]
  %161 = phi i8* [ %36, %28 ], [ %68, %41 ]
  %162 = icmp eq i32 %37, 0
  br i1 %162, label %185, label %163

; <label>:163:                                    ; preds = %158
  %164 = getelementptr inbounds i8, i8* %159, i64 -1
  %165 = load i8, i8* %161, align 1
  %166 = zext i8 %165 to i32
  %167 = shl i32 1, %160
  %168 = and i32 %167, %166
  %169 = icmp ne i32 %168, 0
  %170 = sext i1 %169 to i8
  store i8 %170, i8* %164, align 1
  br label %185

; <label>:171:                                    ; preds = %128, %116
  %172 = phi i8* [ %119, %116 ], [ %145, %128 ]
  %173 = phi i32 [ %118, %116 ], [ %155, %128 ]
  %174 = phi i8* [ %123, %116 ], [ %154, %128 ]
  %175 = icmp eq i32 %124, 0
  br i1 %175, label %185, label %176

; <label>:176:                                    ; preds = %171
  %177 = getelementptr inbounds i8, i8* %172, i64 -1
  %178 = load i8, i8* %174, align 1
  %179 = zext i8 %178 to i32
  %180 = lshr i32 %179, %173
  %181 = and i32 %180, 15
  %182 = shl nuw nsw i32 %181, 4
  %183 = or i32 %182, %181
  %184 = trunc i32 %183 to i8
  store i8 %184, i8* %177, align 1
  br label %185

; <label>:185:                                    ; preds = %176, %171, %87, %163, %158, %21, %23, %72, %111
  %186 = phi i64 [ %22, %21 ], [ 0, %23 ], [ 0, %72 ], [ 0, %111 ], [ %26, %158 ], [ %26, %163 ], [ %75, %87 ], [ %114, %171 ], [ %114, %176 ]
  %187 = phi i32 [ %16, %21 ], [ %25, %23 ], [ %74, %72 ], [ %113, %111 ], [ %25, %158 ], [ %25, %163 ], [ %74, %87 ], [ %113, %171 ], [ %113, %176 ]
  store i8 8, i8* %17, align 1
  %188 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  store i8 8, i8* %188, align 1
  %189 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  store i64 %186, i64* %189, align 8
  br label %190

; <label>:190:                                    ; preds = %185, %15
  %191 = phi i8 [ 8, %185 ], [ %18, %15 ]
  %192 = phi i32 [ %187, %185 ], [ %16, %15 ]
  br i1 %10, label %193, label %478

; <label>:193:                                    ; preds = %190
  switch i8 %191, label %294 [
    i8 8, label %194
    i8 16, label %242
  ]

; <label>:194:                                    ; preds = %193
  %195 = zext i32 %5 to i64
  %196 = icmp eq i32 %5, 0
  br i1 %196, label %294, label %197

; <label>:197:                                    ; preds = %194
  %198 = getelementptr inbounds i8, i8* %1, i64 %195
  %199 = shl nuw nsw i64 %195, 1
  %200 = getelementptr inbounds i8, i8* %1, i64 %199
  %201 = getelementptr inbounds i8, i8* %200, i64 -1
  %202 = trunc i32 %192 to i8
  %203 = add i32 %5, -1
  %204 = and i32 %5, 3
  %205 = icmp ult i32 %203, 3
  br i1 %205, label %277, label %206

; <label>:206:                                    ; preds = %197
  %207 = sub i32 %5, %204
  br label %208

; <label>:208:                                    ; preds = %208, %206
  %209 = phi i8* [ %198, %206 ], [ %233, %208 ]
  %210 = phi i8* [ %201, %206 ], [ %239, %208 ]
  %211 = phi i32 [ %207, %206 ], [ %240, %208 ]
  %212 = getelementptr inbounds i8, i8* %209, i64 -1
  %213 = load i8, i8* %212, align 1
  %214 = icmp ne i8 %213, %202
  %215 = getelementptr inbounds i8, i8* %210, i64 -1
  %216 = sext i1 %214 to i8
  store i8 %216, i8* %210, align 1
  %217 = load i8, i8* %212, align 1
  %218 = getelementptr inbounds i8, i8* %210, i64 -2
  store i8 %217, i8* %215, align 1
  %219 = getelementptr inbounds i8, i8* %209, i64 -2
  %220 = load i8, i8* %219, align 1
  %221 = icmp ne i8 %220, %202
  %222 = getelementptr inbounds i8, i8* %210, i64 -3
  %223 = sext i1 %221 to i8
  store i8 %223, i8* %218, align 1
  %224 = load i8, i8* %219, align 1
  %225 = getelementptr inbounds i8, i8* %210, i64 -4
  store i8 %224, i8* %222, align 1
  %226 = getelementptr inbounds i8, i8* %209, i64 -3
  %227 = load i8, i8* %226, align 1
  %228 = icmp ne i8 %227, %202
  %229 = getelementptr inbounds i8, i8* %210, i64 -5
  %230 = sext i1 %228 to i8
  store i8 %230, i8* %225, align 1
  %231 = load i8, i8* %226, align 1
  %232 = getelementptr inbounds i8, i8* %210, i64 -6
  store i8 %231, i8* %229, align 1
  %233 = getelementptr inbounds i8, i8* %209, i64 -4
  %234 = load i8, i8* %233, align 1
  %235 = icmp ne i8 %234, %202
  %236 = getelementptr inbounds i8, i8* %210, i64 -7
  %237 = sext i1 %235 to i8
  store i8 %237, i8* %232, align 1
  %238 = load i8, i8* %233, align 1
  %239 = getelementptr inbounds i8, i8* %210, i64 -8
  store i8 %238, i8* %236, align 1
  %240 = add i32 %211, -4
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %277, label %208

; <label>:242:                                    ; preds = %193
  %243 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %244 = load i64, i64* %243, align 8
  %245 = icmp eq i32 %5, 0
  br i1 %245, label %294, label %246

; <label>:246:                                    ; preds = %242
  %247 = shl i64 %244, 1
  %248 = getelementptr inbounds i8, i8* %1, i64 %247
  %249 = getelementptr inbounds i8, i8* %248, i64 -1
  %250 = getelementptr inbounds i8, i8* %1, i64 %244
  %251 = getelementptr inbounds i8, i8* %250, i64 -1
  %252 = lshr i32 %192, 8
  %253 = trunc i32 %252 to i8
  %254 = trunc i32 %192 to i8
  br label %255

; <label>:255:                                    ; preds = %266, %246
  %256 = phi i8* [ %251, %246 ], [ %272, %266 ]
  %257 = phi i8* [ %249, %246 ], [ %274, %266 ]
  %258 = phi i32 [ 0, %246 ], [ %275, %266 ]
  %259 = getelementptr inbounds i8, i8* %256, i64 -1
  %260 = load i8, i8* %259, align 1
  %261 = icmp eq i8 %260, %253
  br i1 %261, label %262, label %265

; <label>:262:                                    ; preds = %255
  %263 = load i8, i8* %256, align 1
  %264 = icmp eq i8 %263, %254
  br i1 %264, label %266, label %265

; <label>:265:                                    ; preds = %262, %255
  br label %266

; <label>:266:                                    ; preds = %262, %265
  %267 = phi i8 [ -1, %265 ], [ 0, %262 ]
  %268 = getelementptr inbounds i8, i8* %257, i64 -1
  store i8 %267, i8* %257, align 1
  store i8 %267, i8* %268, align 1
  %269 = getelementptr inbounds i8, i8* %257, i64 -2
  %270 = load i8, i8* %256, align 1
  %271 = getelementptr inbounds i8, i8* %257, i64 -3
  store i8 %270, i8* %269, align 1
  %272 = getelementptr inbounds i8, i8* %256, i64 -2
  %273 = load i8, i8* %259, align 1
  %274 = getelementptr inbounds i8, i8* %257, i64 -4
  store i8 %273, i8* %271, align 1
  %275 = add nuw i32 %258, 1
  %276 = icmp eq i32 %275, %5
  br i1 %276, label %294, label %255

; <label>:277:                                    ; preds = %208, %197
  %278 = phi i8* [ %198, %197 ], [ %233, %208 ]
  %279 = phi i8* [ %201, %197 ], [ %239, %208 ]
  %280 = icmp eq i32 %204, 0
  br i1 %280, label %294, label %281

; <label>:281:                                    ; preds = %277, %281
  %282 = phi i8* [ %285, %281 ], [ %278, %277 ]
  %283 = phi i8* [ %291, %281 ], [ %279, %277 ]
  %284 = phi i32 [ %292, %281 ], [ %204, %277 ]
  %285 = getelementptr inbounds i8, i8* %282, i64 -1
  %286 = load i8, i8* %285, align 1
  %287 = icmp ne i8 %286, %202
  %288 = getelementptr inbounds i8, i8* %283, i64 -1
  %289 = sext i1 %287 to i8
  store i8 %289, i8* %283, align 1
  %290 = load i8, i8* %285, align 1
  %291 = getelementptr inbounds i8, i8* %283, i64 -2
  store i8 %290, i8* %288, align 1
  %292 = add i32 %284, -1
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %281, !llvm.loop !720

; <label>:294:                                    ; preds = %266, %277, %281, %194, %242, %193
  store i8 4, i8* %6, align 8
  %295 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 4
  store i8 2, i8* %295, align 2
  %296 = load i8, i8* %17, align 1
  %297 = shl i8 %296, 1
  %298 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  store i8 %297, i8* %298, align 1
  %299 = icmp ugt i8 %297, 7
  %300 = zext i32 %5 to i64
  %301 = zext i8 %297 to i64
  br i1 %299, label %302, label %305

; <label>:302:                                    ; preds = %294
  %303 = lshr i64 %301, 3
  %304 = mul nuw nsw i64 %303, %300
  br label %309

; <label>:305:                                    ; preds = %294
  %306 = mul nuw nsw i64 %301, %300
  %307 = add nuw nsw i64 %306, 7
  %308 = lshr i64 %307, 3
  br label %309

; <label>:309:                                    ; preds = %305, %302
  %310 = phi i64 [ %304, %302 ], [ %308, %305 ]
  %311 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  store i64 %310, i64* %311, align 8
  br label %478

; <label>:312:                                    ; preds = %3
  %313 = icmp eq i8 %7, 2
  %314 = icmp ne %struct.png_color_16_struct* %2, null
  %315 = and i1 %314, %313
  br i1 %315, label %316, label %478

; <label>:316:                                    ; preds = %312
  %317 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 3
  %318 = load i8, i8* %317, align 1
  switch i8 %318, label %460 [
    i8 8, label %319
    i8 16, label %372
  ]

; <label>:319:                                    ; preds = %316
  %320 = icmp eq i32 %5, 0
  br i1 %320, label %460, label %321

; <label>:321:                                    ; preds = %319
  %322 = zext i32 %5 to i64
  %323 = shl nuw nsw i64 %322, 2
  %324 = getelementptr inbounds i8, i8* %1, i64 %323
  %325 = getelementptr inbounds i8, i8* %324, i64 -1
  %326 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %327 = load i64, i64* %326, align 8
  %328 = getelementptr inbounds i8, i8* %1, i64 %327
  %329 = getelementptr inbounds i8, i8* %328, i64 -1
  %330 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 3
  %331 = load i16, i16* %330, align 2
  %332 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 2
  %333 = load i16, i16* %332, align 2
  %334 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 1
  %335 = load i16, i16* %334, align 2
  %336 = and i16 %335, 255
  %337 = zext i16 %336 to i32
  %338 = and i16 %333, 255
  %339 = zext i16 %338 to i32
  %340 = and i16 %331, 255
  %341 = zext i16 %340 to i32
  br label %342

; <label>:342:                                    ; preds = %360, %321
  %343 = phi i8* [ %329, %321 ], [ %367, %360 ]
  %344 = phi i8* [ %325, %321 ], [ %369, %360 ]
  %345 = phi i32 [ 0, %321 ], [ %370, %360 ]
  %346 = getelementptr inbounds i8, i8* %343, i64 -2
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = icmp eq i32 %348, %337
  %350 = getelementptr inbounds i8, i8* %343, i64 -1
  br i1 %349, label %351, label %359

; <label>:351:                                    ; preds = %342
  %352 = load i8, i8* %350, align 1
  %353 = zext i8 %352 to i32
  %354 = icmp eq i32 %353, %339
  br i1 %354, label %355, label %359

; <label>:355:                                    ; preds = %351
  %356 = load i8, i8* %343, align 1
  %357 = zext i8 %356 to i32
  %358 = icmp eq i32 %357, %341
  br i1 %358, label %360, label %359

; <label>:359:                                    ; preds = %342, %355, %351
  br label %360

; <label>:360:                                    ; preds = %355, %359
  %361 = phi i8 [ 0, %355 ], [ -1, %359 ]
  %362 = getelementptr inbounds i8, i8* %344, i64 -1
  store i8 %361, i8* %344, align 1
  %363 = load i8, i8* %343, align 1
  %364 = getelementptr inbounds i8, i8* %344, i64 -2
  store i8 %363, i8* %362, align 1
  %365 = load i8, i8* %350, align 1
  %366 = getelementptr inbounds i8, i8* %344, i64 -3
  store i8 %365, i8* %364, align 1
  %367 = getelementptr inbounds i8, i8* %343, i64 -3
  %368 = load i8, i8* %346, align 1
  %369 = getelementptr inbounds i8, i8* %344, i64 -4
  store i8 %368, i8* %366, align 1
  %370 = add nuw i32 %345, 1
  %371 = icmp eq i32 %370, %5
  br i1 %371, label %460, label %342

; <label>:372:                                    ; preds = %316
  %373 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 1
  %374 = load i16, i16* %373, align 2
  %375 = lshr i16 %374, 8
  %376 = zext i16 %375 to i32
  %377 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 2
  %378 = load i16, i16* %377, align 2
  %379 = lshr i16 %378, 8
  %380 = zext i16 %379 to i32
  %381 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 3
  %382 = load i16, i16* %381, align 2
  %383 = lshr i16 %382, 8
  %384 = zext i16 %383 to i32
  %385 = icmp eq i32 %5, 0
  br i1 %385, label %460, label %386

; <label>:386:                                    ; preds = %372
  %387 = zext i32 %5 to i64
  %388 = shl nuw nsw i64 %387, 3
  %389 = getelementptr inbounds i8, i8* %1, i64 %388
  %390 = getelementptr inbounds i8, i8* %389, i64 -1
  %391 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %392 = load i64, i64* %391, align 8
  %393 = getelementptr inbounds i8, i8* %1, i64 %392
  %394 = getelementptr inbounds i8, i8* %393, i64 -1
  %395 = and i16 %374, 255
  %396 = zext i16 %395 to i32
  %397 = and i16 %378, 255
  %398 = zext i16 %397 to i32
  %399 = and i16 %382, 255
  %400 = zext i16 %399 to i32
  br label %401

; <label>:401:                                    ; preds = %440, %386
  %402 = phi i8* [ %394, %386 ], [ %455, %440 ]
  %403 = phi i8* [ %390, %386 ], [ %457, %440 ]
  %404 = phi i32 [ 0, %386 ], [ %458, %440 ]
  %405 = getelementptr inbounds i8, i8* %402, i64 -5
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i32
  %408 = icmp eq i32 %407, %376
  %409 = getelementptr inbounds i8, i8* %402, i64 -4
  br i1 %408, label %410, label %435

; <label>:410:                                    ; preds = %401
  %411 = load i8, i8* %409, align 1
  %412 = zext i8 %411 to i32
  %413 = icmp eq i32 %412, %396
  br i1 %413, label %414, label %435

; <label>:414:                                    ; preds = %410
  %415 = getelementptr inbounds i8, i8* %402, i64 -3
  %416 = load i8, i8* %415, align 1
  %417 = zext i8 %416 to i32
  %418 = icmp eq i32 %417, %380
  br i1 %418, label %419, label %435

; <label>:419:                                    ; preds = %414
  %420 = getelementptr inbounds i8, i8* %402, i64 -2
  %421 = load i8, i8* %420, align 1
  %422 = zext i8 %421 to i32
  %423 = icmp eq i32 %422, %398
  br i1 %423, label %424, label %435

; <label>:424:                                    ; preds = %419
  %425 = getelementptr inbounds i8, i8* %402, i64 -1
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = icmp eq i32 %427, %384
  br i1 %428, label %429, label %435

; <label>:429:                                    ; preds = %424
  %430 = load i8, i8* %402, align 1
  %431 = zext i8 %430 to i32
  %432 = icmp eq i32 %431, %400
  br i1 %432, label %433, label %435

; <label>:433:                                    ; preds = %429
  %434 = getelementptr inbounds i8, i8* %403, i64 -1
  store i8 0, i8* %403, align 1
  store i8 0, i8* %434, align 1
  br label %440

; <label>:435:                                    ; preds = %401, %429, %424, %419, %414, %410
  %436 = getelementptr inbounds i8, i8* %403, i64 -1
  store i8 -1, i8* %403, align 1
  store i8 -1, i8* %436, align 1
  %437 = getelementptr inbounds i8, i8* %402, i64 -1
  %438 = getelementptr inbounds i8, i8* %402, i64 -2
  %439 = getelementptr inbounds i8, i8* %402, i64 -3
  br label %440

; <label>:440:                                    ; preds = %435, %433
  %441 = phi i8* [ %439, %435 ], [ %415, %433 ]
  %442 = phi i8* [ %438, %435 ], [ %420, %433 ]
  %443 = phi i8* [ %437, %435 ], [ %425, %433 ]
  %444 = getelementptr inbounds i8, i8* %403, i64 -2
  %445 = load i8, i8* %402, align 1
  %446 = getelementptr inbounds i8, i8* %403, i64 -3
  store i8 %445, i8* %444, align 1
  %447 = load i8, i8* %443, align 1
  %448 = getelementptr inbounds i8, i8* %403, i64 -4
  store i8 %447, i8* %446, align 1
  %449 = load i8, i8* %442, align 1
  %450 = getelementptr inbounds i8, i8* %403, i64 -5
  store i8 %449, i8* %448, align 1
  %451 = load i8, i8* %441, align 1
  %452 = getelementptr inbounds i8, i8* %403, i64 -6
  store i8 %451, i8* %450, align 1
  %453 = load i8, i8* %409, align 1
  %454 = getelementptr inbounds i8, i8* %403, i64 -7
  store i8 %453, i8* %452, align 1
  %455 = getelementptr inbounds i8, i8* %402, i64 -6
  %456 = load i8, i8* %405, align 1
  %457 = getelementptr inbounds i8, i8* %403, i64 -8
  store i8 %456, i8* %454, align 1
  %458 = add nuw i32 %404, 1
  %459 = icmp eq i32 %458, %5
  br i1 %459, label %460, label %401

; <label>:460:                                    ; preds = %440, %360, %319, %372, %316
  store i8 6, i8* %6, align 8
  %461 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 4
  store i8 4, i8* %461, align 2
  %462 = load i8, i8* %317, align 1
  %463 = shl i8 %462, 2
  %464 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  store i8 %463, i8* %464, align 1
  %465 = icmp ugt i8 %463, 7
  %466 = zext i32 %5 to i64
  %467 = zext i8 %463 to i64
  br i1 %465, label %468, label %471

; <label>:468:                                    ; preds = %460
  %469 = lshr i64 %467, 3
  %470 = mul nuw nsw i64 %469, %466
  br label %475

; <label>:471:                                    ; preds = %460
  %472 = mul nuw nsw i64 %467, %466
  %473 = add nuw nsw i64 %472, 7
  %474 = lshr i64 %473, 3
  br label %475

; <label>:475:                                    ; preds = %471, %468
  %476 = phi i64 [ %470, %468 ], [ %474, %471 ]
  %477 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  store i64 %476, i64* %477, align 8
  br label %478

; <label>:478:                                    ; preds = %190, %309, %312, %475
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define internal fastcc void @MOZ_PNG_do_g_to_rgb(%struct.png_row_info_struct* nocapture, i8* nocapture) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 1
  %7 = icmp ugt i8 %6, 7
  br i1 %7, label %8, label %231

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 2
  %10 = load i8, i8* %9, align 8
  %11 = and i8 %10, 2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %231

; <label>:13:                                     ; preds = %8
  switch i8 %10, label %14 [
    i8 0, label %16
    i8 4, label %96
  ]

; <label>:14:                                     ; preds = %13
  %15 = zext i32 %4 to i64
  br label %209

; <label>:16:                                     ; preds = %13
  %17 = icmp eq i8 %6, 8
  %18 = zext i32 %4 to i64
  br i1 %17, label %19, label %50

; <label>:19:                                     ; preds = %16
  %20 = getelementptr inbounds i8, i8* %1, i64 %18
  %21 = getelementptr inbounds i8, i8* %20, i64 -1
  %22 = icmp eq i32 %4, 0
  br i1 %22, label %209, label %23

; <label>:23:                                     ; preds = %19
  %24 = shl nuw nsw i64 %18, 1
  %25 = getelementptr inbounds i8, i8* %21, i64 %24
  %26 = and i32 %4, 1
  %27 = icmp eq i32 %4, 1
  br i1 %27, label %169, label %28

; <label>:28:                                     ; preds = %23
  %29 = sub i32 %4, %26
  br label %30

; <label>:30:                                     ; preds = %30, %28
  %31 = phi i8* [ %25, %28 ], [ %47, %30 ]
  %32 = phi i8* [ %21, %28 ], [ %45, %30 ]
  %33 = phi i32 [ %29, %28 ], [ %48, %30 ]
  %34 = load i8, i8* %32, align 1
  %35 = getelementptr inbounds i8, i8* %31, i64 -1
  store i8 %34, i8* %31, align 1
  %36 = load i8, i8* %32, align 1
  %37 = getelementptr inbounds i8, i8* %31, i64 -2
  store i8 %36, i8* %35, align 1
  %38 = getelementptr inbounds i8, i8* %32, i64 -1
  %39 = load i8, i8* %32, align 1
  %40 = getelementptr inbounds i8, i8* %31, i64 -3
  store i8 %39, i8* %37, align 1
  %41 = load i8, i8* %38, align 1
  %42 = getelementptr inbounds i8, i8* %31, i64 -4
  store i8 %41, i8* %40, align 1
  %43 = load i8, i8* %38, align 1
  %44 = getelementptr inbounds i8, i8* %31, i64 -5
  store i8 %43, i8* %42, align 1
  %45 = getelementptr inbounds i8, i8* %32, i64 -2
  %46 = load i8, i8* %38, align 1
  %47 = getelementptr inbounds i8, i8* %31, i64 -6
  store i8 %46, i8* %44, align 1
  %48 = add i32 %33, -2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %169, label %30

; <label>:50:                                     ; preds = %16
  %51 = shl nuw nsw i64 %18, 1
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = getelementptr inbounds i8, i8* %52, i64 -1
  %54 = icmp eq i32 %4, 0
  br i1 %54, label %209, label %55

; <label>:55:                                     ; preds = %50
  %56 = shl nuw nsw i64 %18, 2
  %57 = getelementptr inbounds i8, i8* %53, i64 %56
  %58 = and i32 %4, 1
  %59 = icmp eq i32 %4, 1
  br i1 %59, label %179, label %60

; <label>:60:                                     ; preds = %55
  %61 = sub i32 %4, %58
  br label %62

; <label>:62:                                     ; preds = %62, %60
  %63 = phi i8* [ %57, %60 ], [ %93, %62 ]
  %64 = phi i8* [ %53, %60 ], [ %91, %62 ]
  %65 = phi i32 [ %61, %60 ], [ %94, %62 ]
  %66 = load i8, i8* %64, align 1
  %67 = getelementptr inbounds i8, i8* %63, i64 -1
  store i8 %66, i8* %63, align 1
  %68 = getelementptr inbounds i8, i8* %64, i64 -1
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds i8, i8* %63, i64 -2
  store i8 %69, i8* %67, align 1
  %71 = load i8, i8* %64, align 1
  %72 = getelementptr inbounds i8, i8* %63, i64 -3
  store i8 %71, i8* %70, align 1
  %73 = load i8, i8* %68, align 1
  %74 = getelementptr inbounds i8, i8* %63, i64 -4
  store i8 %73, i8* %72, align 1
  %75 = load i8, i8* %64, align 1
  %76 = getelementptr inbounds i8, i8* %63, i64 -5
  store i8 %75, i8* %74, align 1
  %77 = getelementptr inbounds i8, i8* %64, i64 -2
  %78 = load i8, i8* %68, align 1
  %79 = getelementptr inbounds i8, i8* %63, i64 -6
  store i8 %78, i8* %76, align 1
  %80 = load i8, i8* %77, align 1
  %81 = getelementptr inbounds i8, i8* %63, i64 -7
  store i8 %80, i8* %79, align 1
  %82 = getelementptr inbounds i8, i8* %64, i64 -3
  %83 = load i8, i8* %82, align 1
  %84 = getelementptr inbounds i8, i8* %63, i64 -8
  store i8 %83, i8* %81, align 1
  %85 = load i8, i8* %77, align 1
  %86 = getelementptr inbounds i8, i8* %63, i64 -9
  store i8 %85, i8* %84, align 1
  %87 = load i8, i8* %82, align 1
  %88 = getelementptr inbounds i8, i8* %63, i64 -10
  store i8 %87, i8* %86, align 1
  %89 = load i8, i8* %77, align 1
  %90 = getelementptr inbounds i8, i8* %63, i64 -11
  store i8 %89, i8* %88, align 1
  %91 = getelementptr inbounds i8, i8* %64, i64 -4
  %92 = load i8, i8* %82, align 1
  %93 = getelementptr inbounds i8, i8* %63, i64 -12
  store i8 %92, i8* %90, align 1
  %94 = add i32 %65, -2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %179, label %62

; <label>:96:                                     ; preds = %13
  %97 = icmp eq i8 %6, 8
  %98 = zext i32 %4 to i64
  br i1 %97, label %99, label %136

; <label>:99:                                     ; preds = %96
  %100 = shl nuw nsw i64 %98, 1
  %101 = getelementptr inbounds i8, i8* %1, i64 %100
  %102 = getelementptr inbounds i8, i8* %101, i64 -1
  %103 = icmp eq i32 %4, 0
  br i1 %103, label %209, label %104

; <label>:104:                                    ; preds = %99
  %105 = getelementptr inbounds i8, i8* %102, i64 %100
  %106 = and i32 %4, 1
  %107 = icmp eq i32 %4, 1
  br i1 %107, label %196, label %108

; <label>:108:                                    ; preds = %104
  %109 = sub i32 %4, %106
  br label %110

; <label>:110:                                    ; preds = %110, %108
  %111 = phi i8* [ %105, %108 ], [ %133, %110 ]
  %112 = phi i8* [ %102, %108 ], [ %131, %110 ]
  %113 = phi i32 [ %109, %108 ], [ %134, %110 ]
  %114 = getelementptr inbounds i8, i8* %112, i64 -1
  %115 = load i8, i8* %112, align 1
  %116 = getelementptr inbounds i8, i8* %111, i64 -1
  store i8 %115, i8* %111, align 1
  %117 = load i8, i8* %114, align 1
  %118 = getelementptr inbounds i8, i8* %111, i64 -2
  store i8 %117, i8* %116, align 1
  %119 = load i8, i8* %114, align 1
  %120 = getelementptr inbounds i8, i8* %111, i64 -3
  store i8 %119, i8* %118, align 1
  %121 = getelementptr inbounds i8, i8* %112, i64 -2
  %122 = load i8, i8* %114, align 1
  %123 = getelementptr inbounds i8, i8* %111, i64 -4
  store i8 %122, i8* %120, align 1
  %124 = getelementptr inbounds i8, i8* %112, i64 -3
  %125 = load i8, i8* %121, align 1
  %126 = getelementptr inbounds i8, i8* %111, i64 -5
  store i8 %125, i8* %123, align 1
  %127 = load i8, i8* %124, align 1
  %128 = getelementptr inbounds i8, i8* %111, i64 -6
  store i8 %127, i8* %126, align 1
  %129 = load i8, i8* %124, align 1
  %130 = getelementptr inbounds i8, i8* %111, i64 -7
  store i8 %129, i8* %128, align 1
  %131 = getelementptr inbounds i8, i8* %112, i64 -4
  %132 = load i8, i8* %124, align 1
  %133 = getelementptr inbounds i8, i8* %111, i64 -8
  store i8 %132, i8* %130, align 1
  %134 = add i32 %113, -2
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %196, label %110

; <label>:136:                                    ; preds = %96
  %137 = shl nuw nsw i64 %98, 2
  %138 = getelementptr inbounds i8, i8* %1, i64 %137
  %139 = getelementptr inbounds i8, i8* %138, i64 -1
  %140 = icmp eq i32 %4, 0
  br i1 %140, label %209, label %141

; <label>:141:                                    ; preds = %136
  %142 = getelementptr inbounds i8, i8* %139, i64 %137
  br label %143

; <label>:143:                                    ; preds = %143, %141
  %144 = phi i8* [ %166, %143 ], [ %142, %141 ]
  %145 = phi i8* [ %164, %143 ], [ %139, %141 ]
  %146 = phi i32 [ %167, %143 ], [ 0, %141 ]
  %147 = getelementptr inbounds i8, i8* %145, i64 -1
  %148 = load i8, i8* %145, align 1
  %149 = getelementptr inbounds i8, i8* %144, i64 -1
  store i8 %148, i8* %144, align 1
  %150 = getelementptr inbounds i8, i8* %145, i64 -2
  %151 = load i8, i8* %147, align 1
  %152 = getelementptr inbounds i8, i8* %144, i64 -2
  store i8 %151, i8* %149, align 1
  %153 = load i8, i8* %150, align 1
  %154 = getelementptr inbounds i8, i8* %144, i64 -3
  store i8 %153, i8* %152, align 1
  %155 = getelementptr inbounds i8, i8* %145, i64 -3
  %156 = load i8, i8* %155, align 1
  %157 = getelementptr inbounds i8, i8* %144, i64 -4
  store i8 %156, i8* %154, align 1
  %158 = load i8, i8* %150, align 1
  %159 = getelementptr inbounds i8, i8* %144, i64 -5
  store i8 %158, i8* %157, align 1
  %160 = load i8, i8* %155, align 1
  %161 = getelementptr inbounds i8, i8* %144, i64 -6
  store i8 %160, i8* %159, align 1
  %162 = load i8, i8* %150, align 1
  %163 = getelementptr inbounds i8, i8* %144, i64 -7
  store i8 %162, i8* %161, align 1
  %164 = getelementptr inbounds i8, i8* %145, i64 -4
  %165 = load i8, i8* %155, align 1
  %166 = getelementptr inbounds i8, i8* %144, i64 -8
  store i8 %165, i8* %163, align 1
  %167 = add nuw i32 %146, 1
  %168 = icmp eq i32 %167, %4
  br i1 %168, label %209, label %143

; <label>:169:                                    ; preds = %30, %23
  %170 = phi i8* [ %25, %23 ], [ %47, %30 ]
  %171 = phi i8* [ %21, %23 ], [ %45, %30 ]
  %172 = icmp eq i32 %26, 0
  br i1 %172, label %209, label %173

; <label>:173:                                    ; preds = %169
  %174 = load i8, i8* %171, align 1
  %175 = getelementptr inbounds i8, i8* %170, i64 -1
  store i8 %174, i8* %170, align 1
  %176 = load i8, i8* %171, align 1
  %177 = getelementptr inbounds i8, i8* %170, i64 -2
  store i8 %176, i8* %175, align 1
  %178 = load i8, i8* %171, align 1
  store i8 %178, i8* %177, align 1
  br label %209

; <label>:179:                                    ; preds = %62, %55
  %180 = phi i8* [ %57, %55 ], [ %93, %62 ]
  %181 = phi i8* [ %53, %55 ], [ %91, %62 ]
  %182 = icmp eq i32 %58, 0
  br i1 %182, label %209, label %183

; <label>:183:                                    ; preds = %179
  %184 = load i8, i8* %181, align 1
  %185 = getelementptr inbounds i8, i8* %180, i64 -1
  store i8 %184, i8* %180, align 1
  %186 = getelementptr inbounds i8, i8* %181, i64 -1
  %187 = load i8, i8* %186, align 1
  %188 = getelementptr inbounds i8, i8* %180, i64 -2
  store i8 %187, i8* %185, align 1
  %189 = load i8, i8* %181, align 1
  %190 = getelementptr inbounds i8, i8* %180, i64 -3
  store i8 %189, i8* %188, align 1
  %191 = load i8, i8* %186, align 1
  %192 = getelementptr inbounds i8, i8* %180, i64 -4
  store i8 %191, i8* %190, align 1
  %193 = load i8, i8* %181, align 1
  %194 = getelementptr inbounds i8, i8* %180, i64 -5
  store i8 %193, i8* %192, align 1
  %195 = load i8, i8* %186, align 1
  store i8 %195, i8* %194, align 1
  br label %209

; <label>:196:                                    ; preds = %110, %104
  %197 = phi i8* [ %105, %104 ], [ %133, %110 ]
  %198 = phi i8* [ %102, %104 ], [ %131, %110 ]
  %199 = icmp eq i32 %106, 0
  br i1 %199, label %209, label %200

; <label>:200:                                    ; preds = %196
  %201 = getelementptr inbounds i8, i8* %198, i64 -1
  %202 = load i8, i8* %198, align 1
  %203 = getelementptr inbounds i8, i8* %197, i64 -1
  store i8 %202, i8* %197, align 1
  %204 = load i8, i8* %201, align 1
  %205 = getelementptr inbounds i8, i8* %197, i64 -2
  store i8 %204, i8* %203, align 1
  %206 = load i8, i8* %201, align 1
  %207 = getelementptr inbounds i8, i8* %197, i64 -3
  store i8 %206, i8* %205, align 1
  %208 = load i8, i8* %201, align 1
  store i8 %208, i8* %207, align 1
  br label %209

; <label>:209:                                    ; preds = %143, %200, %196, %183, %179, %173, %169, %14, %19, %50, %99, %136
  %210 = phi i64 [ %15, %14 ], [ 0, %19 ], [ 0, %50 ], [ 0, %99 ], [ 0, %136 ], [ %18, %169 ], [ %18, %173 ], [ %18, %179 ], [ %18, %183 ], [ %98, %196 ], [ %98, %200 ], [ %98, %143 ]
  %211 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 4
  %212 = load i8, i8* %211, align 2
  %213 = add i8 %212, 2
  store i8 %213, i8* %211, align 2
  %214 = load i8, i8* %9, align 8
  %215 = or i8 %214, 2
  store i8 %215, i8* %9, align 8
  %216 = load i8, i8* %5, align 1
  %217 = mul i8 %216, %213
  %218 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  store i8 %217, i8* %218, align 1
  %219 = icmp ugt i8 %217, 7
  %220 = zext i8 %217 to i64
  br i1 %219, label %221, label %224

; <label>:221:                                    ; preds = %209
  %222 = lshr i64 %220, 3
  %223 = mul nuw nsw i64 %222, %210
  br label %228

; <label>:224:                                    ; preds = %209
  %225 = mul nuw nsw i64 %210, %220
  %226 = add nuw nsw i64 %225, 7
  %227 = lshr i64 %226, 3
  br label %228

; <label>:228:                                    ; preds = %224, %221
  %229 = phi i64 [ %223, %221 ], [ %227, %224 ]
  %230 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  store i64 %229, i64* %230, align 8
  br label %231

; <label>:231:                                    ; preds = %228, %8, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_read_sig(%struct.png_struct_def* noalias, %struct.png_info_def* noalias) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %4 = load i8, i8* %3, align 1
  %5 = icmp ugt i8 %4, 7
  br i1 %5, label %43, label %6

; <label>:6:                                      ; preds = %2
  %7 = zext i8 %4 to i64
  %8 = sub nsw i64 8, %7
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %10 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %9, align 8, !alias.scope !721
  %11 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %10, null
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %6
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:13:                                     ; preds = %6
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 15, i64 %7
  tail call void %10(%struct.png_struct_def* nonnull %0, i8* nonnull %14, i64 %8) #18
  store i8 8, i8* %3, align 1
  %15 = icmp eq i64 %8, 0
  br i1 %15, label %20, label %16

; <label>:16:                                     ; preds = %13
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* @MOZ_PNG_sig_cmp.png_signature, i64 0, i64 %7
  %18 = tail call i32 @memcmp(i8* nonnull %14, i8* nonnull %17, i64 %8) #20
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %37, label %20

; <label>:20:                                     ; preds = %13, %16
  %21 = icmp ult i8 %4, 4
  br i1 %21, label %22, label %36

; <label>:22:                                     ; preds = %20
  %23 = add nsw i64 %8, -4
  %24 = icmp ugt i64 %23, 8
  br i1 %24, label %27, label %25

; <label>:25:                                     ; preds = %22
  %26 = icmp eq i64 %23, 0
  br i1 %26, label %35, label %27

; <label>:27:                                     ; preds = %25, %22
  %28 = phi i64 [ %23, %25 ], [ 8, %22 ]
  %29 = add nsw i64 %28, %7
  %30 = icmp ugt i64 %29, 8
  %31 = select i1 %30, i64 %8, i64 %28
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* @MOZ_PNG_sig_cmp.png_signature, i64 0, i64 %7
  %33 = tail call i32 @memcmp(i8* nonnull %14, i8* nonnull %32, i64 %31) #20
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %36, label %35

; <label>:35:                                     ; preds = %25, %27
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.67, i64 0, i64 0)) #19
  unreachable

; <label>:36:                                     ; preds = %27, %20
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.68, i64 0, i64 0)) #19
  unreachable

; <label>:37:                                     ; preds = %16
  %38 = icmp ult i8 %4, 3
  br i1 %38, label %39, label %43

; <label>:39:                                     ; preds = %37
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %41 = load i32, i32* %40, align 8
  %42 = or i32 %41, 4096
  store i32 %42, i32* %40, align 8
  br label %43

; <label>:43:                                     ; preds = %37, %39, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_crc_error(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = alloca [4 x i8], align 1
  %3 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #18
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %7 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %6, align 8, !alias.scope !724
  %8 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %7, null
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %1
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:10:                                     ; preds = %1
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %12 = load i32, i32* %11, align 8
  %13 = and i32 %12, 536870912
  %14 = icmp eq i32 %13, 0
  %15 = and i32 %5, 2048
  %16 = icmp eq i32 %15, 0
  %17 = and i32 %5, 768
  %18 = icmp ne i32 %17, 768
  %19 = select i1 %14, i1 %16, i1 %18
  call void %7(%struct.png_struct_def* nonnull %0, i8* nonnull %3, i64 4) #18
  br i1 %19, label %20, label %42

; <label>:20:                                     ; preds = %10
  %21 = load i8, i8* %3, align 1
  %22 = zext i8 %21 to i32
  %23 = shl nuw i32 %22, 24
  %24 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 16
  %28 = or i32 %27, %23
  %29 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 2
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl nuw nsw i32 %31, 8
  %33 = or i32 %28, %32
  %34 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = or i32 %33, %36
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %39 = load i32, i32* %38, align 4
  %40 = icmp ne i32 %37, %39
  %41 = zext i1 %40 to i32
  br label %42

; <label>:42:                                     ; preds = %10, %20
  %43 = phi i32 [ %41, %20 ], [ 0, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #18
  ret i32 %43
}

declare hidden i32 @MOZ_Z_inflate(%struct.z_stream_s*, i32) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_IHDR(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %10 = icmp eq %struct.png_struct_def* %0, null
  %11 = icmp eq %struct.png_info_def* %1, null
  %12 = or i1 %10, %11
  br i1 %12, label %62, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 0
  store i32 %2, i32* %14, align 8
  %15 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 1
  store i32 %3, i32* %15, align 4
  %16 = trunc i32 %4 to i8
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  store i8 %16, i8* %17, align 4
  %18 = trunc i32 %5 to i8
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  store i8 %18, i8* %19, align 1
  %20 = trunc i32 %7 to i8
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 9
  store i8 %20, i8* %21, align 2
  %22 = trunc i32 %8 to i8
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 10
  store i8 %22, i8* %23, align 1
  %24 = trunc i32 %6 to i8
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 11
  store i8 %24, i8* %25, align 8
  %26 = and i32 %4, 255
  %27 = and i32 %5, 255
  %28 = and i32 %6, 255
  %29 = and i32 %7, 255
  %30 = and i32 %8, 255
  tail call void @MOZ_PNG_ck_IHDR(%struct.png_struct_def* nonnull %0, i32 %2, i32 %3, i32 %26, i32 %27, i32 %28, i32 %29, i32 %30)
  %31 = load i8, i8* %19, align 1
  %32 = icmp eq i8 %31, 3
  br i1 %32, label %33, label %35

; <label>:33:                                     ; preds = %13
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  store i8 1, i8* %34, align 1
  br label %43

; <label>:35:                                     ; preds = %13
  %36 = and i8 %31, 2
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  %38 = or i8 %36, 1
  store i8 %38, i8* %37, align 1
  %39 = and i8 %31, 4
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %43, label %41

; <label>:41:                                     ; preds = %35
  %42 = add nuw nsw i8 %38, 1
  store i8 %42, i8* %37, align 1
  br label %43

; <label>:43:                                     ; preds = %33, %35, %41
  %44 = phi i8 [ 1, %33 ], [ %38, %35 ], [ %42, %41 ]
  %45 = load i8, i8* %17, align 4
  %46 = mul i8 %45, %44
  %47 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 13
  store i8 %46, i8* %47, align 2
  %48 = icmp ugt i8 %46, 7
  %49 = zext i32 %2 to i64
  %50 = zext i8 %46 to i64
  br i1 %48, label %51, label %54

; <label>:51:                                     ; preds = %43
  %52 = lshr i64 %50, 3
  %53 = mul nuw nsw i64 %52, %49
  br label %58

; <label>:54:                                     ; preds = %43
  %55 = mul nuw nsw i64 %50, %49
  %56 = add nuw nsw i64 %55, 7
  %57 = lshr i64 %56, 3
  br label %58

; <label>:58:                                     ; preds = %54, %51
  %59 = phi i64 [ %53, %51 ], [ %57, %54 ]
  %60 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 3
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  store i32 1, i32* %61, align 8
  br label %62

; <label>:62:                                     ; preds = %9, %58
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_PLTE(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, %struct.png_color_struct* readonly, i32) local_unnamed_addr #4 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %76, label %8

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 3
  br i1 %11, label %12, label %17

; <label>:12:                                     ; preds = %8
  %13 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  %14 = load i8, i8* %13, align 4
  %15 = zext i8 %14 to i32
  %16 = shl i32 1, %15
  br label %17

; <label>:17:                                     ; preds = %8, %12
  %18 = phi i32 [ %16, %12 ], [ 256, %8 ]
  %19 = icmp slt i32 %3, 0
  %20 = icmp slt i32 %18, %3
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %25

; <label>:22:                                     ; preds = %17
  br i1 %11, label %23, label %24

; <label>:23:                                     ; preds = %22
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.156, i64 0, i64 0)) #19
  unreachable

; <label>:24:                                     ; preds = %22
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.156, i64 0, i64 0))
  br label %76

; <label>:25:                                     ; preds = %17
  %26 = icmp sgt i32 %3, 0
  %27 = icmp eq %struct.png_color_struct* %2, null
  %28 = and i1 %27, %26
  %29 = icmp eq i32 %3, 0
  %30 = or i1 %29, %28
  br i1 %30, label %31, label %32

; <label>:31:                                     ; preds = %25
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.157, i64 0, i64 0)) #19
  unreachable

; <label>:32:                                     ; preds = %25
  %33 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %34 = load i32, i32* %33, align 4, !alias.scope !727, !noalias !730
  %35 = and i32 %34, 4096
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %50, label %37

; <label>:37:                                     ; preds = %32
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 4
  %39 = bitcast %struct.png_color_struct** %38 to i8**
  %40 = load i8*, i8** %39, align 8, !alias.scope !727, !noalias !730
  %41 = icmp eq i8* %40, null
  br i1 %41, label %44, label %42

; <label>:42:                                     ; preds = %37
  tail call void @free(i8* nonnull %40) #18
  %43 = load i32, i32* %33, align 4, !alias.scope !727, !noalias !730
  br label %44

; <label>:44:                                     ; preds = %42, %37
  %45 = phi i32 [ %34, %37 ], [ %43, %42 ]
  store %struct.png_color_struct* null, %struct.png_color_struct** %38, align 8, !alias.scope !727, !noalias !730
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 8, !alias.scope !727, !noalias !730
  %48 = and i32 %47, -9
  store i32 %48, i32* %46, align 8, !alias.scope !727, !noalias !730
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 5
  store i16 0, i16* %49, align 8, !alias.scope !727, !noalias !730
  br label %50

; <label>:50:                                     ; preds = %44, %32
  %51 = phi i32 [ %34, %32 ], [ %45, %44 ]
  %52 = and i32 %51, -4097
  store i32 %52, i32* %33, align 4, !alias.scope !727, !noalias !730
  %53 = tail call noalias i8* @malloc(i64 768) #18
  %54 = icmp eq i8* %53, null
  br i1 %54, label %55, label %56

; <label>:55:                                     ; preds = %50
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:56:                                     ; preds = %50
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 40
  %58 = bitcast %struct.png_color_struct** %57 to i8**
  store i8* %53, i8** %58, align 8
  %59 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %2, i64 0, i32 0
  %60 = zext i32 %3 to i64
  %61 = mul nuw nsw i64 %60, 3
  %62 = icmp ugt i64 %61, 767
  %63 = sub nsw i64 768, %61
  %64 = select i1 %62, i64 0, i64 %63
  %65 = getelementptr i8, i8* %53, i64 %61
  call void @llvm.memset.p0i8.i64(i8* align 1 %65, i8 0, i64 %64, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %53, i8* align 1 %59, i64 %61, i1 false)
  %66 = ptrtoint i8* %53 to i64
  %67 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 4
  %68 = bitcast %struct.png_color_struct** %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = trunc i32 %3 to i16
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  store i16 %69, i16* %70, align 8
  %71 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 5
  store i16 %69, i16* %71, align 8
  %72 = or i32 %51, 4096
  store i32 %72, i32* %33, align 4
  %73 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = or i32 %74, 8
  store i32 %75, i32* %73, align 8
  br label %76

; <label>:76:                                     ; preds = %4, %56, %24
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @png_inflate_claim(%struct.png_struct_def* noalias, i32) unnamed_addr #4 {
  %3 = alloca [64 x i8], align 16
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %20, label %7

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #18
  %9 = lshr i32 %5, 24
  %10 = trunc i32 %9 to i8
  store i8 %10, i8* %8, align 16
  %11 = lshr i32 %5, 16
  %12 = trunc i32 %11 to i8
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 1
  store i8 %12, i8* %13, align 1
  %14 = lshr i32 %5, 8
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 2
  store i8 %15, i8* %16, align 2
  %17 = trunc i32 %5 to i8
  %18 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 3
  store i8 %17, i8* %18, align 1
  %19 = call i64 @MOZ_PNG_safecat(i8* nonnull %8, i64 64, i64 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.219, i64 0, i64 0))
  call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* nonnull %8) #19
  unreachable

; <label>:20:                                     ; preds = %2
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 85
  %22 = load i32, i32* %21, align 8
  %23 = and i32 %22, 12
  %24 = icmp eq i32 %23, 12
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %26 = xor i1 %24, true
  %27 = zext i1 %26 to i8
  %28 = select i1 %24, i32 15, i32 0
  store i8 %27, i8* %25, align 2
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %30 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %29, i64 0, i32 0
  store i8* null, i8** %30, align 8
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 1
  store i32 0, i32* %31, align 8
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 3
  store i8* null, i8** %32, align 8
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 4
  store i32 0, i32* %33, align 8
  %34 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %40, label %38

; <label>:38:                                     ; preds = %20
  %39 = tail call i32 @MOZ_Z_inflateReset2(%struct.z_stream_s* nonnull %29, i32 %28) #18
  br label %46

; <label>:40:                                     ; preds = %20
  %41 = tail call i32 @MOZ_Z_inflateInit2_(%struct.z_stream_s* nonnull %29, i32 %28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.220, i64 0, i64 0), i32 112) #18
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %46

; <label>:43:                                     ; preds = %40
  %44 = load i32, i32* %34, align 4
  %45 = or i32 %44, 2
  store i32 %45, i32* %34, align 4
  br label %46

; <label>:46:                                     ; preds = %40, %43, %38
  %47 = phi i32 [ %39, %38 ], [ 0, %43 ], [ %41, %40 ]
  %48 = load i32, i32* %21, align 8
  %49 = and i32 %48, 768
  %50 = icmp eq i32 %49, 768
  br i1 %50, label %51, label %53

; <label>:51:                                     ; preds = %46
  %52 = tail call i32 @inflateValidate(%struct.z_stream_s* nonnull %29, i32 0) #18
  br label %53

; <label>:53:                                     ; preds = %51, %46
  %54 = phi i32 [ %52, %51 ], [ %47, %46 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

; <label>:56:                                     ; preds = %53
  store i32 %1, i32* %4, align 4
  br label %72

; <label>:57:                                     ; preds = %53
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %59 = load i8*, i8** %58, align 8, !alias.scope !732
  %60 = icmp eq i8* %59, null
  br i1 %60, label %61, label %72

; <label>:61:                                     ; preds = %57
  switch i32 %54, label %62 [
    i32 -7, label %71
    i32 1, label %63
    i32 2, label %64
    i32 -1, label %65
    i32 -2, label %66
    i32 -3, label %67
    i32 -4, label %68
    i32 -5, label %69
    i32 -6, label %70
  ]

; <label>:62:                                     ; preds = %61
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:63:                                     ; preds = %61
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:64:                                     ; preds = %61
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:65:                                     ; preds = %61
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:66:                                     ; preds = %61
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:67:                                     ; preds = %61
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:68:                                     ; preds = %61
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:69:                                     ; preds = %61
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:70:                                     ; preds = %61
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.16, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:71:                                     ; preds = %61
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8** %58, align 8, !alias.scope !732
  br label %72

; <label>:72:                                     ; preds = %71, %70, %69, %68, %67, %66, %65, %64, %63, %62, %57, %56
  ret i32 %54
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @png_inflate_read(%struct.png_struct_def* noalias, i8*, i32* nocapture, i8*, i64* nocapture, i32) unnamed_addr #4 {
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %12, label %128

; <label>:12:                                     ; preds = %6
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 3
  store i8* %3, i8** %13, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 4
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 1
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 0
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %18 = icmp eq i32 %5, 0
  %19 = select i1 %18, i32 2, i32 4
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  br label %24

; <label>:24:                                     ; preds = %106, %12
  %25 = phi i32 [ 1024, %12 ], [ %69, %106 ]
  %26 = load i32, i32* %15, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %67

; <label>:28:                                     ; preds = %24
  %29 = load i32, i32* %2, align 4
  %30 = icmp ugt i32 %25, %29
  %31 = select i1 %30, i32 %29, i32 %25
  %32 = sub i32 %29, %31
  store i32 %32, i32* %2, align 4
  %33 = icmp eq i32 %31, 0
  br i1 %33, label %66, label %34

; <label>:34:                                     ; preds = %28
  %35 = zext i32 %31 to i64
  %36 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %17, align 8, !alias.scope !735
  %37 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %36, null
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %34
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i64 0, i64 0)) #22
  unreachable

; <label>:39:                                     ; preds = %34
  tail call void %36(%struct.png_struct_def* nonnull %0, i8* %1, i64 %35) #18
  %40 = load i32, i32* %9, align 8, !alias.scope !740
  %41 = and i32 %40, 536870912
  %42 = icmp eq i32 %41, 0
  %43 = load i32, i32* %21, align 4, !alias.scope !740
  %44 = and i32 %43, 768
  %45 = icmp ne i32 %44, 768
  %46 = and i32 %43, 2048
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %42, i1 %47, i1 %45
  br i1 %48, label %49, label %66

; <label>:49:                                     ; preds = %39
  %50 = load i32, i32* %23, align 4, !alias.scope !740
  %51 = zext i32 %50 to i64
  br label %52

; <label>:52:                                     ; preds = %52, %49
  %53 = phi i64 [ %35, %49 ], [ %62, %52 ]
  %54 = phi i64 [ %51, %49 ], [ %59, %52 ]
  %55 = phi i8* [ %1, %49 ], [ %61, %52 ]
  %56 = trunc i64 %53 to i32
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, i32 -1, i32 %56
  %59 = tail call i64 @MOZ_Z_crc32(i64 %54, i8* %55, i32 %58) #18, !noalias !743
  %60 = zext i32 %58 to i64
  %61 = getelementptr inbounds i8, i8* %55, i64 %60
  %62 = sub i64 %53, %60
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %52

; <label>:64:                                     ; preds = %52
  %65 = trunc i64 %59 to i32
  store i32 %65, i32* %23, align 4, !alias.scope !740
  br label %66

; <label>:66:                                     ; preds = %64, %39, %28
  store i8* %1, i8** %16, align 8
  store i32 %31, i32* %15, align 8
  br label %67

; <label>:67:                                     ; preds = %66, %24
  %68 = phi i32 [ %31, %66 ], [ %26, %24 ]
  %69 = phi i32 [ %31, %66 ], [ %25, %24 ]
  %70 = load i32, i32* %14, align 8
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %78

; <label>:72:                                     ; preds = %67
  %73 = load i64, i64* %4, align 8
  %74 = icmp ult i64 %73, 4294967295
  %75 = select i1 %74, i64 %73, i64 4294967295
  %76 = trunc i64 %75 to i32
  %77 = sub i64 %73, %75
  store i64 %77, i64* %4, align 8
  store i32 %76, i32* %14, align 8
  br label %78

; <label>:78:                                     ; preds = %72, %67
  %79 = phi i32 [ %76, %72 ], [ %70, %67 ]
  %80 = load i32, i32* %2, align 4
  %81 = icmp eq i32 %80, 0
  %82 = select i1 %81, i32 %19, i32 0
  %83 = load i8, i8* %20, align 2, !alias.scope !744
  %84 = icmp eq i8 %83, 0
  %85 = icmp eq i32 %68, 0
  %86 = or i1 %84, %85
  br i1 %86, label %97, label %87

; <label>:87:                                     ; preds = %78
  %88 = load i8*, i8** %16, align 8, !alias.scope !744
  %89 = load i8, i8* %88, align 1
  %90 = icmp slt i8 %89, 0
  br i1 %90, label %91, label %96

; <label>:91:                                     ; preds = %87
  %92 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.108, i64 0, i64 0), i8** %92, align 8, !alias.scope !744
  %93 = zext i32 %79 to i64
  %94 = load i64, i64* %4, align 8
  %95 = add i64 %94, %93
  store i64 %95, i64* %4, align 8
  store i32 0, i32* %14, align 8
  br label %130

; <label>:96:                                     ; preds = %87
  store i8 0, i8* %20, align 2, !alias.scope !744
  br label %97

; <label>:97:                                     ; preds = %78, %96
  %98 = tail call i32 @MOZ_Z_inflate(%struct.z_stream_s* nonnull %22, i32 %82) #18
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %103, label %100

; <label>:100:                                    ; preds = %97
  %101 = load i32, i32* %14, align 8
  %102 = zext i32 %101 to i64
  br label %110

; <label>:103:                                    ; preds = %97
  %104 = load i64, i64* %4, align 8
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %107, label %106

; <label>:106:                                    ; preds = %103, %107
  br label %24

; <label>:107:                                    ; preds = %103
  %108 = load i32, i32* %14, align 8
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %106

; <label>:110:                                    ; preds = %107, %100
  %111 = phi i64 [ %102, %100 ], [ 0, %107 ]
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %113 = load i8*, i8** %112, align 8, !alias.scope !747
  %114 = load i64, i64* %4, align 8
  %115 = add i64 %114, %111
  store i64 %115, i64* %4, align 8
  store i32 0, i32* %14, align 8
  %116 = icmp eq i8* %113, null
  br i1 %116, label %117, label %130

; <label>:117:                                    ; preds = %110
  switch i32 %98, label %118 [
    i32 -7, label %127
    i32 1, label %119
    i32 2, label %120
    i32 -1, label %121
    i32 -2, label %122
    i32 -3, label %123
    i32 -4, label %124
    i32 -5, label %125
    i32 -6, label %126
  ]

; <label>:118:                                    ; preds = %117
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:119:                                    ; preds = %117
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:120:                                    ; preds = %117
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:121:                                    ; preds = %117
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:122:                                    ; preds = %117
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:123:                                    ; preds = %117
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:124:                                    ; preds = %117
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:125:                                    ; preds = %117
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:126:                                    ; preds = %117
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.16, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:127:                                    ; preds = %117
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8** %112, align 8, !alias.scope !747
  br label %130

; <label>:128:                                    ; preds = %6
  %129 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.221, i64 0, i64 0), i8** %129, align 8
  br label %130

; <label>:130:                                    ; preds = %91, %127, %126, %125, %124, %123, %122, %121, %120, %119, %118, %110, %128
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_tRNS(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i8* readonly, i32, %struct.png_color_16_struct* readonly) local_unnamed_addr #4 {
  %6 = icmp eq %struct.png_struct_def* %0, null
  %7 = icmp eq %struct.png_info_def* %1, null
  %8 = or i1 %6, %7
  br i1 %8, label %100, label %9

; <label>:9:                                      ; preds = %5
  %10 = icmp eq i8* %2, null
  br i1 %10, label %49, label %11

; <label>:11:                                     ; preds = %9
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %13 = load i32, i32* %12, align 4, !alias.scope !750, !noalias !753
  %14 = and i32 %13, 8192
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %28, label %16

; <label>:16:                                     ; preds = %11
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %18 = load i32, i32* %17, align 8, !alias.scope !750, !noalias !753
  %19 = and i32 %18, -17
  store i32 %19, i32* %17, align 8, !alias.scope !750, !noalias !753
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 20
  %21 = load i8*, i8** %20, align 8, !alias.scope !750, !noalias !753
  %22 = icmp eq i8* %21, null
  br i1 %22, label %25, label %23

; <label>:23:                                     ; preds = %16
  tail call void @free(i8* nonnull %21) #18
  %24 = load i32, i32* %12, align 4, !alias.scope !750, !noalias !753
  br label %25

; <label>:25:                                     ; preds = %23, %16
  %26 = phi i32 [ %13, %16 ], [ %24, %23 ]
  store i8* null, i8** %20, align 8, !alias.scope !750, !noalias !753
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 0, i16* %27, align 2, !alias.scope !750, !noalias !753
  br label %28

; <label>:28:                                     ; preds = %11, %25
  %29 = phi i32 [ %13, %11 ], [ %26, %25 ]
  %30 = and i32 %29, -8193
  store i32 %30, i32* %12, align 4, !alias.scope !750, !noalias !753
  %31 = add i32 %3, -1
  %32 = icmp ult i32 %31, 256
  br i1 %32, label %37, label %33

; <label>:33:                                     ; preds = %28
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 20
  %35 = bitcast i8** %34 to i64*
  %36 = load i64, i64* %35, align 8
  br label %45

; <label>:37:                                     ; preds = %28
  %38 = tail call noalias i8* @malloc(i64 256) #18
  %39 = icmp eq i8* %38, null
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %37
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:41:                                     ; preds = %37
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 20
  store i8* %38, i8** %42, align 8
  %43 = sext i32 %3 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %38, i8* nonnull align 1 %2, i64 %43, i1 false)
  %44 = ptrtoint i8* %38 to i64
  br label %45

; <label>:45:                                     ; preds = %33, %41
  %46 = phi i64 [ %36, %33 ], [ %44, %41 ]
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 66
  %48 = bitcast i8** %47 to i64*
  store i64 %46, i64* %48, align 8
  br label %49

; <label>:49:                                     ; preds = %9, %45
  %50 = icmp eq %struct.png_color_16_struct* %4, null
  br i1 %50, label %89, label %51

; <label>:51:                                     ; preds = %49
  %52 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  %53 = load i8, i8* %52, align 4
  %54 = icmp ult i8 %53, 16
  br i1 %54, label %55, label %82

; <label>:55:                                     ; preds = %51
  %56 = zext i8 %53 to i32
  %57 = shl nsw i32 -1, %56
  %58 = xor i32 %57, -1
  %59 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %60 = load i8, i8* %59, align 1
  switch i8 %60, label %82 [
    i8 0, label %61
    i8 2, label %66
  ]

; <label>:61:                                     ; preds = %55
  %62 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i64 0, i32 4
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = icmp sgt i32 %64, %58
  br i1 %65, label %81, label %82

; <label>:66:                                     ; preds = %55
  %67 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i64 0, i32 1
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = icmp sgt i32 %69, %58
  br i1 %70, label %81, label %71

; <label>:71:                                     ; preds = %66
  %72 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i64 0, i32 2
  %73 = load i16, i16* %72, align 2
  %74 = zext i16 %73 to i32
  %75 = icmp sgt i32 %74, %58
  br i1 %75, label %81, label %76

; <label>:76:                                     ; preds = %71
  %77 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i64 0, i32 3
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp sgt i32 %79, %58
  br i1 %80, label %81, label %82

; <label>:81:                                     ; preds = %76, %71, %66, %61
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.161, i64 0, i64 0))
  br label %82

; <label>:82:                                     ; preds = %55, %61, %76, %81, %51
  %83 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 21, i32 0
  %84 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %4, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %83, i8* nonnull align 2 %84, i64 10, i1 false)
  %85 = icmp eq i32 %3, 0
  %86 = select i1 %85, i32 1, i32 %3
  %87 = trunc i32 %86 to i16
  %88 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 %87, i16* %88, align 2
  br label %93

; <label>:89:                                     ; preds = %49
  %90 = trunc i32 %3 to i16
  %91 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  store i16 %90, i16* %91, align 2
  %92 = icmp eq i32 %3, 0
  br i1 %92, label %100, label %93

; <label>:93:                                     ; preds = %82, %89
  %94 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %95 = load i32, i32* %94, align 8
  %96 = or i32 %95, 16
  store i32 %96, i32* %94, align 8
  %97 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %98 = load i32, i32* %97, align 4
  %99 = or i32 %98, 8192
  store i32 %99, i32* %97, align 4
  br label %100

; <label>:100:                                    ; preds = %89, %5, %93
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_APNG_set_acTL(%struct.png_struct_def*, %struct.png_info_def*, i32, i32) local_unnamed_addr #4 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %4
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.162, i64 0, i64 0))
  br label %24

; <label>:9:                                      ; preds = %4
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %9
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.163, i64 0, i64 0))
  br label %24

; <label>:12:                                     ; preds = %9
  %13 = icmp slt i32 %2, 0
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %12
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.164, i64 0, i64 0))
  br label %24

; <label>:15:                                     ; preds = %12
  %16 = icmp slt i32 %3, 0
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %15
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.165, i64 0, i64 0))
  br label %24

; <label>:18:                                     ; preds = %15
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  store i32 %2, i32* %19, align 8
  %20 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 24
  store i32 %3, i32* %20, align 4
  %21 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = or i32 %22, 131072
  store i32 %23, i32* %21, align 8
  br label %24

; <label>:24:                                     ; preds = %18, %17, %14, %11, %8
  %25 = phi i32 [ 0, %8 ], [ 0, %11 ], [ 0, %14 ], [ 0, %17 ], [ 1, %18 ]
  ret i32 %25
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_APNG_set_next_frame_fcTL(%struct.png_struct_def*, %struct.png_info_def*, i32, i32, i32, i32, i16 zeroext, i16 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #4 {
  %11 = icmp eq %struct.png_struct_def* %0, null
  %12 = icmp eq %struct.png_info_def* %1, null
  %13 = or i1 %11, %12
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %10
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.166, i64 0, i64 0))
  br label %41

; <label>:15:                                     ; preds = %10
  tail call void @MOZ_APNG_ensure_fcTL_is_valid(%struct.png_struct_def* nonnull %0, i32 %2, i32 %3, i32 %4, i32 %5, i16 zeroext undef, i16 zeroext undef, i8 zeroext %8, i8 zeroext %9)
  %16 = icmp eq i8 %9, 1
  br i1 %16, label %17, label %28

; <label>:17:                                     ; preds = %15
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 4
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %17
  %23 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %24 = load i32, i32* %23, align 8, !alias.scope !755, !noalias !758
  %25 = and i32 %24, 16
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %22
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.167, i64 0, i64 0))
  br label %28

; <label>:28:                                     ; preds = %17, %22, %27, %15
  %29 = phi i8 [ 0, %27 ], [ 1, %22 ], [ 1, %17 ], [ %9, %15 ]
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 25
  store i32 %2, i32* %30, align 8
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 26
  store i32 %3, i32* %31, align 4
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 27
  store i32 %4, i32* %32, align 8
  %33 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 28
  store i32 %5, i32* %33, align 4
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 29
  store i16 %6, i16* %34, align 8
  %35 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 30
  store i16 %7, i16* %35, align 2
  %36 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 31
  store i8 %8, i8* %36, align 4
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 32
  store i8 %29, i8* %37, align 1
  %38 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = or i32 %39, 262144
  store i32 %40, i32* %38, align 8
  br label %41

; <label>:41:                                     ; preds = %28, %14
  %42 = phi i32 [ 0, %14 ], [ 1, %28 ]
  ret i32 %42
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_handle_fdAT(%struct.png_struct_def*, %struct.png_info_def* nocapture readnone, i32) local_unnamed_addr #4 {
  tail call void @MOZ_APNG_ensure_seqno(%struct.png_struct_def* %0, i32 %2)
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.132, i64 0, i64 0))
  %4 = add i32 %2, -4
  %5 = tail call i32 @MOZ_PNG_crc_finish(%struct.png_struct_def* %0, i32 %4)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_cHRM_fixed(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %11 = alloca %struct.png_xy, align 4
  %12 = bitcast %struct.png_xy* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #18
  %13 = icmp eq %struct.png_struct_def* %0, null
  %14 = icmp eq %struct.png_info_def* %1, null
  %15 = or i1 %13, %14
  br i1 %15, label %33, label %16

; <label>:16:                                     ; preds = %10
  %17 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 0
  store i32 %4, i32* %17, align 4
  %18 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 1
  store i32 %5, i32* %18, align 4
  %19 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 2
  store i32 %6, i32* %19, align 4
  %20 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 3
  store i32 %7, i32* %20, align 4
  %21 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 4
  store i32 %8, i32* %21, align 4
  %22 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 5
  store i32 %9, i32* %22, align 4
  %23 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 6
  store i32 %2, i32* %23, align 4
  %24 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 7
  store i32 %3, i32* %24, align 4
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %26 = call i32 @MOZ_PNG_cs_set_chromats(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %25, %struct.png_xy* nonnull %11, i32 2)
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

; <label>:28:                                     ; preds = %16
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %30 = load i16, i16* %29, align 2
  %31 = or i16 %30, 16
  store i16 %31, i16* %29, align 2
  br label %32

; <label>:32:                                     ; preds = %16, %28
  tail call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1)
  br label %33

; <label>:33:                                     ; preds = %10, %32
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_cHRM_XYZ_fixed(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %12 = alloca %struct.png_XYZ, align 4
  %13 = bitcast %struct.png_XYZ* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %13) #18
  %14 = icmp eq %struct.png_struct_def* %0, null
  %15 = icmp eq %struct.png_info_def* %1, null
  %16 = or i1 %14, %15
  br i1 %16, label %35, label %17

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 0
  store i32 %2, i32* %18, align 4
  %19 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 1
  store i32 %3, i32* %19, align 4
  %20 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 2
  store i32 %4, i32* %20, align 4
  %21 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 3
  store i32 %5, i32* %21, align 4
  %22 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 4
  store i32 %6, i32* %22, align 4
  %23 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 5
  store i32 %7, i32* %23, align 4
  %24 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 6
  store i32 %8, i32* %24, align 4
  %25 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 7
  store i32 %9, i32* %25, align 4
  %26 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 8
  store i32 %10, i32* %26, align 4
  %27 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %28 = call i32 @MOZ_PNG_cs_set_endpts(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %27, %struct.png_XYZ* nonnull %12, i32 2)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %34, label %30

; <label>:30:                                     ; preds = %17
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %32 = load i16, i16* %31, align 2
  %33 = or i16 %32, 16
  store i16 %33, i16* %31, align 2
  br label %34

; <label>:34:                                     ; preds = %17, %30
  tail call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1)
  br label %35

; <label>:35:                                     ; preds = %11, %34
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %13) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_cHRM(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, double, double, double, double, double, double, double, double) local_unnamed_addr #4 {
  %11 = alloca %struct.png_xy, align 4
  %12 = fmul double %2, 1.000000e+05
  %13 = fadd double %12, 5.000000e-01
  %14 = tail call double @llvm.floor.f64(double %13) #18
  %15 = fcmp ogt double %14, 0x41DFFFFFFFC00000
  %16 = fcmp olt double %14, 0xC1E0000000000000
  %17 = or i1 %15, %16
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %10
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.144, i64 0, i64 0)) #22
  unreachable

; <label>:19:                                     ; preds = %10
  %20 = fptosi double %14 to i32
  %21 = fmul double %3, 1.000000e+05
  %22 = fadd double %21, 5.000000e-01
  %23 = tail call double @llvm.floor.f64(double %22) #18
  %24 = fcmp ogt double %23, 0x41DFFFFFFFC00000
  %25 = fcmp olt double %23, 0xC1E0000000000000
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %19
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.145, i64 0, i64 0)) #22
  unreachable

; <label>:28:                                     ; preds = %19
  %29 = fptosi double %23 to i32
  %30 = fmul double %4, 1.000000e+05
  %31 = fadd double %30, 5.000000e-01
  %32 = tail call double @llvm.floor.f64(double %31) #18
  %33 = fcmp ogt double %32, 0x41DFFFFFFFC00000
  %34 = fcmp olt double %32, 0xC1E0000000000000
  %35 = or i1 %33, %34
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %28
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.146, i64 0, i64 0)) #22
  unreachable

; <label>:37:                                     ; preds = %28
  %38 = fptosi double %32 to i32
  %39 = fmul double %5, 1.000000e+05
  %40 = fadd double %39, 5.000000e-01
  %41 = tail call double @llvm.floor.f64(double %40) #18
  %42 = fcmp ogt double %41, 0x41DFFFFFFFC00000
  %43 = fcmp olt double %41, 0xC1E0000000000000
  %44 = or i1 %42, %43
  br i1 %44, label %45, label %46

; <label>:45:                                     ; preds = %37
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.147, i64 0, i64 0)) #22
  unreachable

; <label>:46:                                     ; preds = %37
  %47 = fptosi double %41 to i32
  %48 = fmul double %6, 1.000000e+05
  %49 = fadd double %48, 5.000000e-01
  %50 = tail call double @llvm.floor.f64(double %49) #18
  %51 = fcmp ogt double %50, 0x41DFFFFFFFC00000
  %52 = fcmp olt double %50, 0xC1E0000000000000
  %53 = or i1 %51, %52
  br i1 %53, label %54, label %55

; <label>:54:                                     ; preds = %46
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.148, i64 0, i64 0)) #22
  unreachable

; <label>:55:                                     ; preds = %46
  %56 = fptosi double %50 to i32
  %57 = fmul double %7, 1.000000e+05
  %58 = fadd double %57, 5.000000e-01
  %59 = tail call double @llvm.floor.f64(double %58) #18
  %60 = fcmp ogt double %59, 0x41DFFFFFFFC00000
  %61 = fcmp olt double %59, 0xC1E0000000000000
  %62 = or i1 %60, %61
  br i1 %62, label %63, label %64

; <label>:63:                                     ; preds = %55
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.149, i64 0, i64 0)) #22
  unreachable

; <label>:64:                                     ; preds = %55
  %65 = fptosi double %59 to i32
  %66 = fmul double %8, 1.000000e+05
  %67 = fadd double %66, 5.000000e-01
  %68 = tail call double @llvm.floor.f64(double %67) #18
  %69 = fcmp ogt double %68, 0x41DFFFFFFFC00000
  %70 = fcmp olt double %68, 0xC1E0000000000000
  %71 = or i1 %69, %70
  br i1 %71, label %72, label %73

; <label>:72:                                     ; preds = %64
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.150, i64 0, i64 0)) #22
  unreachable

; <label>:73:                                     ; preds = %64
  %74 = fptosi double %68 to i32
  %75 = fmul double %9, 1.000000e+05
  %76 = fadd double %75, 5.000000e-01
  %77 = tail call double @llvm.floor.f64(double %76) #18
  %78 = fcmp ogt double %77, 0x41DFFFFFFFC00000
  %79 = fcmp olt double %77, 0xC1E0000000000000
  %80 = or i1 %78, %79
  br i1 %80, label %81, label %82

; <label>:81:                                     ; preds = %73
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.151, i64 0, i64 0)) #22
  unreachable

; <label>:82:                                     ; preds = %73
  %83 = bitcast %struct.png_xy* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %83) #18, !noalias !760
  %84 = icmp eq %struct.png_struct_def* %0, null
  %85 = icmp eq %struct.png_info_def* %1, null
  %86 = or i1 %84, %85
  br i1 %86, label %148, label %87

; <label>:87:                                     ; preds = %82
  %88 = fptosi double %77 to i32
  %89 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 0
  store i32 %38, i32* %89, align 4, !noalias !760
  %90 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 1
  store i32 %47, i32* %90, align 4, !noalias !760
  %91 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 2
  store i32 %56, i32* %91, align 4, !noalias !760
  %92 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 3
  store i32 %65, i32* %92, align 4, !noalias !760
  %93 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 4
  store i32 %74, i32* %93, align 4, !noalias !760
  %94 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 5
  store i32 %88, i32* %94, align 4, !noalias !760
  %95 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 6
  store i32 %20, i32* %95, align 4, !noalias !760
  %96 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %11, i64 0, i32 7
  store i32 %29, i32* %96, align 4, !noalias !760
  %97 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %98 = call i32 @MOZ_PNG_cs_set_chromats(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %97, %struct.png_xy* nonnull %11, i32 2) #18
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %101 = load i16, i16* %100, align 2
  br i1 %99, label %104, label %102

; <label>:102:                                    ; preds = %87
  %103 = or i16 %101, 16
  store i16 %103, i16* %100, align 2, !alias.scope !764, !noalias !765
  br label %104

; <label>:104:                                    ; preds = %87, %102
  %105 = phi i16 [ %103, %102 ], [ %101, %87 ]
  %106 = icmp slt i16 %105, 0
  br i1 %106, label %107, label %129

; <label>:107:                                    ; preds = %104
  %108 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %109 = load i32, i32* %108, align 8, !alias.scope !766, !noalias !769
  %110 = and i32 %109, -6150
  store i32 %110, i32* %108, align 8, !alias.scope !766, !noalias !769
  %111 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %112 = load i32, i32* %111, align 4, !alias.scope !771, !noalias !774
  %113 = and i32 %112, 16
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %127, label %115

; <label>:115:                                    ; preds = %107
  %116 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %117 = load i8*, i8** %116, align 8, !alias.scope !771, !noalias !774
  %118 = icmp eq i8* %117, null
  br i1 %118, label %120, label %119

; <label>:119:                                    ; preds = %115
  tail call void @free(i8* nonnull %117) #18, !noalias !766
  br label %120

; <label>:120:                                    ; preds = %119, %115
  %121 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %122 = load i8*, i8** %121, align 8, !alias.scope !771, !noalias !774
  %123 = icmp eq i8* %122, null
  br i1 %123, label %125, label %124

; <label>:124:                                    ; preds = %120
  tail call void @free(i8* nonnull %122) #18, !noalias !766
  br label %125

; <label>:125:                                    ; preds = %124, %120
  %126 = bitcast i8** %116 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %126, i8 0, i64 16, i1 false) #18, !alias.scope !771, !noalias !774
  store i32 %110, i32* %108, align 8, !alias.scope !771, !noalias !774
  br label %127

; <label>:127:                                    ; preds = %125, %107
  %128 = and i32 %112, -17
  store i32 %128, i32* %111, align 4, !alias.scope !771, !noalias !774
  br label %148

; <label>:129:                                    ; preds = %104
  %130 = trunc i16 %105 to i8
  %131 = icmp slt i8 %130, 0
  %132 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %133 = load i32, i32* %132, align 8, !alias.scope !766, !noalias !769
  %134 = and i32 %133, -2049
  %135 = or i32 %133, 2048
  %136 = select i1 %131, i32 %135, i32 %134
  %137 = and i16 %105, 2
  %138 = icmp eq i16 %137, 0
  %139 = and i32 %136, -5
  %140 = or i32 %136, 4
  %141 = select i1 %138, i32 %139, i32 %140
  store i32 %141, i32* %132, align 8, !alias.scope !766, !noalias !769
  %142 = and i16 %105, 1
  %143 = icmp eq i16 %142, 0
  br i1 %143, label %146, label %144

; <label>:144:                                    ; preds = %129
  %145 = or i32 %141, 1
  store i32 %145, i32* %132, align 8, !alias.scope !766, !noalias !769
  br label %148

; <label>:146:                                    ; preds = %129
  %147 = and i32 %141, -2
  store i32 %147, i32* %132, align 8, !alias.scope !766, !noalias !769
  br label %148

; <label>:148:                                    ; preds = %146, %144, %127, %82
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %83) #18, !noalias !760
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_cHRM_XYZ(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, double, double, double, double, double, double, double, double, double) local_unnamed_addr #4 {
  %12 = alloca %struct.png_XYZ, align 4
  %13 = fmul double %2, 1.000000e+05
  %14 = fadd double %13, 5.000000e-01
  %15 = tail call double @llvm.floor.f64(double %14) #18
  %16 = fcmp ogt double %15, 0x41DFFFFFFFC00000
  %17 = fcmp olt double %15, 0xC1E0000000000000
  %18 = or i1 %16, %17
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %11
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.146, i64 0, i64 0)) #22
  unreachable

; <label>:20:                                     ; preds = %11
  %21 = fptosi double %15 to i32
  %22 = fmul double %3, 1.000000e+05
  %23 = fadd double %22, 5.000000e-01
  %24 = tail call double @llvm.floor.f64(double %23) #18
  %25 = fcmp ogt double %24, 0x41DFFFFFFFC00000
  %26 = fcmp olt double %24, 0xC1E0000000000000
  %27 = or i1 %25, %26
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %20
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.147, i64 0, i64 0)) #22
  unreachable

; <label>:29:                                     ; preds = %20
  %30 = fptosi double %24 to i32
  %31 = fmul double %4, 1.000000e+05
  %32 = fadd double %31, 5.000000e-01
  %33 = tail call double @llvm.floor.f64(double %32) #18
  %34 = fcmp ogt double %33, 0x41DFFFFFFFC00000
  %35 = fcmp olt double %33, 0xC1E0000000000000
  %36 = or i1 %34, %35
  br i1 %36, label %37, label %38

; <label>:37:                                     ; preds = %29
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.152, i64 0, i64 0)) #22
  unreachable

; <label>:38:                                     ; preds = %29
  %39 = fptosi double %33 to i32
  %40 = fmul double %5, 1.000000e+05
  %41 = fadd double %40, 5.000000e-01
  %42 = tail call double @llvm.floor.f64(double %41) #18
  %43 = fcmp ogt double %42, 0x41DFFFFFFFC00000
  %44 = fcmp olt double %42, 0xC1E0000000000000
  %45 = or i1 %43, %44
  br i1 %45, label %46, label %47

; <label>:46:                                     ; preds = %38
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.148, i64 0, i64 0)) #22
  unreachable

; <label>:47:                                     ; preds = %38
  %48 = fptosi double %42 to i32
  %49 = fmul double %6, 1.000000e+05
  %50 = fadd double %49, 5.000000e-01
  %51 = tail call double @llvm.floor.f64(double %50) #18
  %52 = fcmp ogt double %51, 0x41DFFFFFFFC00000
  %53 = fcmp olt double %51, 0xC1E0000000000000
  %54 = or i1 %52, %53
  br i1 %54, label %55, label %56

; <label>:55:                                     ; preds = %47
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.149, i64 0, i64 0)) #22
  unreachable

; <label>:56:                                     ; preds = %47
  %57 = fptosi double %51 to i32
  %58 = fmul double %7, 1.000000e+05
  %59 = fadd double %58, 5.000000e-01
  %60 = tail call double @llvm.floor.f64(double %59) #18
  %61 = fcmp ogt double %60, 0x41DFFFFFFFC00000
  %62 = fcmp olt double %60, 0xC1E0000000000000
  %63 = or i1 %61, %62
  br i1 %63, label %64, label %65

; <label>:64:                                     ; preds = %56
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.153, i64 0, i64 0)) #22
  unreachable

; <label>:65:                                     ; preds = %56
  %66 = fptosi double %60 to i32
  %67 = fmul double %8, 1.000000e+05
  %68 = fadd double %67, 5.000000e-01
  %69 = tail call double @llvm.floor.f64(double %68) #18
  %70 = fcmp ogt double %69, 0x41DFFFFFFFC00000
  %71 = fcmp olt double %69, 0xC1E0000000000000
  %72 = or i1 %70, %71
  br i1 %72, label %73, label %74

; <label>:73:                                     ; preds = %65
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.150, i64 0, i64 0)) #22
  unreachable

; <label>:74:                                     ; preds = %65
  %75 = fptosi double %69 to i32
  %76 = fmul double %9, 1.000000e+05
  %77 = fadd double %76, 5.000000e-01
  %78 = tail call double @llvm.floor.f64(double %77) #18
  %79 = fcmp ogt double %78, 0x41DFFFFFFFC00000
  %80 = fcmp olt double %78, 0xC1E0000000000000
  %81 = or i1 %79, %80
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %74
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.151, i64 0, i64 0)) #22
  unreachable

; <label>:83:                                     ; preds = %74
  %84 = fptosi double %78 to i32
  %85 = fmul double %10, 1.000000e+05
  %86 = fadd double %85, 5.000000e-01
  %87 = tail call double @llvm.floor.f64(double %86) #18
  %88 = fcmp ogt double %87, 0x41DFFFFFFFC00000
  %89 = fcmp olt double %87, 0xC1E0000000000000
  %90 = or i1 %88, %89
  br i1 %90, label %91, label %92

; <label>:91:                                     ; preds = %83
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.154, i64 0, i64 0)) #22
  unreachable

; <label>:92:                                     ; preds = %83
  %93 = bitcast %struct.png_XYZ* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %93) #18, !noalias !776
  %94 = icmp eq %struct.png_struct_def* %0, null
  %95 = icmp eq %struct.png_info_def* %1, null
  %96 = or i1 %94, %95
  br i1 %96, label %159, label %97

; <label>:97:                                     ; preds = %92
  %98 = fptosi double %87 to i32
  %99 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 0
  store i32 %21, i32* %99, align 4, !noalias !776
  %100 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 1
  store i32 %30, i32* %100, align 4, !noalias !776
  %101 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 2
  store i32 %39, i32* %101, align 4, !noalias !776
  %102 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 3
  store i32 %48, i32* %102, align 4, !noalias !776
  %103 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 4
  store i32 %57, i32* %103, align 4, !noalias !776
  %104 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 5
  store i32 %66, i32* %104, align 4, !noalias !776
  %105 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 6
  store i32 %75, i32* %105, align 4, !noalias !776
  %106 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 7
  store i32 %84, i32* %106, align 4, !noalias !776
  %107 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %12, i64 0, i32 8
  store i32 %98, i32* %107, align 4, !noalias !776
  %108 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %109 = call i32 @MOZ_PNG_cs_set_endpts(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %108, %struct.png_XYZ* nonnull %12, i32 2) #18
  %110 = icmp eq i32 %109, 0
  %111 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %112 = load i16, i16* %111, align 2
  br i1 %110, label %115, label %113

; <label>:113:                                    ; preds = %97
  %114 = or i16 %112, 16
  store i16 %114, i16* %111, align 2, !alias.scope !780, !noalias !781
  br label %115

; <label>:115:                                    ; preds = %97, %113
  %116 = phi i16 [ %114, %113 ], [ %112, %97 ]
  %117 = icmp slt i16 %116, 0
  br i1 %117, label %118, label %140

; <label>:118:                                    ; preds = %115
  %119 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %120 = load i32, i32* %119, align 8, !alias.scope !782, !noalias !785
  %121 = and i32 %120, -6150
  store i32 %121, i32* %119, align 8, !alias.scope !782, !noalias !785
  %122 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %123 = load i32, i32* %122, align 4, !alias.scope !787, !noalias !790
  %124 = and i32 %123, 16
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %138, label %126

; <label>:126:                                    ; preds = %118
  %127 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %128 = load i8*, i8** %127, align 8, !alias.scope !787, !noalias !790
  %129 = icmp eq i8* %128, null
  br i1 %129, label %131, label %130

; <label>:130:                                    ; preds = %126
  tail call void @free(i8* nonnull %128) #18, !noalias !782
  br label %131

; <label>:131:                                    ; preds = %130, %126
  %132 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %133 = load i8*, i8** %132, align 8, !alias.scope !787, !noalias !790
  %134 = icmp eq i8* %133, null
  br i1 %134, label %136, label %135

; <label>:135:                                    ; preds = %131
  tail call void @free(i8* nonnull %133) #18, !noalias !782
  br label %136

; <label>:136:                                    ; preds = %135, %131
  %137 = bitcast i8** %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %137, i8 0, i64 16, i1 false) #18, !alias.scope !787, !noalias !790
  store i32 %121, i32* %119, align 8, !alias.scope !787, !noalias !790
  br label %138

; <label>:138:                                    ; preds = %136, %118
  %139 = and i32 %123, -17
  store i32 %139, i32* %122, align 4, !alias.scope !787, !noalias !790
  br label %159

; <label>:140:                                    ; preds = %115
  %141 = trunc i16 %116 to i8
  %142 = icmp slt i8 %141, 0
  %143 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %144 = load i32, i32* %143, align 8, !alias.scope !782, !noalias !785
  %145 = and i32 %144, -2049
  %146 = or i32 %144, 2048
  %147 = select i1 %142, i32 %146, i32 %145
  %148 = and i16 %116, 2
  %149 = icmp eq i16 %148, 0
  %150 = and i32 %147, -5
  %151 = or i32 %147, 4
  %152 = select i1 %149, i32 %150, i32 %151
  store i32 %152, i32* %143, align 8, !alias.scope !782, !noalias !785
  %153 = and i16 %116, 1
  %154 = icmp eq i16 %153, 0
  br i1 %154, label %157, label %155

; <label>:155:                                    ; preds = %140
  %156 = or i32 %152, 1
  store i32 %156, i32* %143, align 8, !alias.scope !782, !noalias !785
  br label %159

; <label>:157:                                    ; preds = %140
  %158 = and i32 %152, -2
  store i32 %158, i32* %143, align 8, !alias.scope !782, !noalias !785
  br label %159

; <label>:159:                                    ; preds = %157, %155, %138, %92
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %93) #18, !noalias !776
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_gAMA_fixed(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %9, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  tail call void @MOZ_PNG_cs_set_gamma(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %8, i32 %2)
  tail call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1)
  br label %9

; <label>:9:                                      ; preds = %3, %7
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_gAMA(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, double) local_unnamed_addr #4 {
  %4 = fmul double %2, 1.000000e+05
  %5 = fadd double %4, 5.000000e-01
  %6 = tail call double @llvm.floor.f64(double %5) #18
  %7 = fcmp ogt double %6, 0x41DFFFFFFFC00000
  %8 = fcmp olt double %6, 0xC1E0000000000000
  %9 = or i1 %7, %8
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %3
  tail call void @MOZ_PNG_fixed_err(%struct.png_struct_def* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.155, i64 0, i64 0)) #22
  unreachable

; <label>:11:                                     ; preds = %3
  %12 = icmp eq %struct.png_struct_def* %0, null
  %13 = icmp eq %struct.png_info_def* %1, null
  %14 = or i1 %12, %13
  br i1 %14, label %62, label %15

; <label>:15:                                     ; preds = %11
  %16 = fptosi double %6 to i32
  %17 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  tail call void @MOZ_PNG_cs_set_gamma(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %17, i32 %16) #18
  %18 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %19 = load i16, i16* %18, align 2, !alias.scope !792, !noalias !795
  %20 = icmp slt i16 %19, 0
  br i1 %20, label %21, label %43

; <label>:21:                                     ; preds = %15
  %22 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %23 = load i32, i32* %22, align 8, !alias.scope !792, !noalias !795
  %24 = and i32 %23, -6150
  store i32 %24, i32* %22, align 8, !alias.scope !792, !noalias !795
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %26 = load i32, i32* %25, align 4, !alias.scope !797, !noalias !800
  %27 = and i32 %26, 16
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %41, label %29

; <label>:29:                                     ; preds = %21
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %31 = load i8*, i8** %30, align 8, !alias.scope !797, !noalias !800
  %32 = icmp eq i8* %31, null
  br i1 %32, label %34, label %33

; <label>:33:                                     ; preds = %29
  tail call void @free(i8* nonnull %31) #18, !noalias !792
  br label %34

; <label>:34:                                     ; preds = %33, %29
  %35 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %36 = load i8*, i8** %35, align 8, !alias.scope !797, !noalias !800
  %37 = icmp eq i8* %36, null
  br i1 %37, label %39, label %38

; <label>:38:                                     ; preds = %34
  tail call void @free(i8* nonnull %36) #18, !noalias !792
  br label %39

; <label>:39:                                     ; preds = %38, %34
  %40 = bitcast i8** %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 16, i1 false) #18, !alias.scope !797, !noalias !800
  store i32 %24, i32* %22, align 8, !alias.scope !797, !noalias !800
  br label %41

; <label>:41:                                     ; preds = %39, %21
  %42 = and i32 %26, -17
  store i32 %42, i32* %25, align 4, !alias.scope !797, !noalias !800
  br label %62

; <label>:43:                                     ; preds = %15
  %44 = trunc i16 %19 to i8
  %45 = icmp slt i8 %44, 0
  %46 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %47 = load i32, i32* %46, align 8, !alias.scope !792, !noalias !795
  %48 = and i32 %47, -2049
  %49 = or i32 %47, 2048
  %50 = select i1 %45, i32 %49, i32 %48
  %51 = and i16 %19, 2
  %52 = icmp eq i16 %51, 0
  %53 = and i32 %50, -5
  %54 = or i32 %50, 4
  %55 = select i1 %52, i32 %53, i32 %54
  store i32 %55, i32* %46, align 8, !alias.scope !792, !noalias !795
  %56 = and i16 %19, 1
  %57 = icmp eq i16 %56, 0
  br i1 %57, label %60, label %58

; <label>:58:                                     ; preds = %43
  %59 = or i32 %55, 1
  store i32 %59, i32* %46, align 8, !alias.scope !792, !noalias !795
  br label %62

; <label>:60:                                     ; preds = %43
  %61 = and i32 %55, -2
  store i32 %61, i32* %46, align 8, !alias.scope !792, !noalias !795
  br label %62

; <label>:62:                                     ; preds = %60, %58, %41, %11
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_sRGB(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %10, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %9 = tail call i32 @MOZ_PNG_cs_set_sRGB(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %8, i32 %2)
  tail call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1)
  br label %10

; <label>:10:                                     ; preds = %3, %7
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_sRGB_gAMA_and_cHRM(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i32) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  %5 = icmp eq %struct.png_info_def* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %16, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %9 = tail call i32 @MOZ_PNG_cs_set_sRGB(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %8, i32 %2)
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %15, label %11

; <label>:11:                                     ; preds = %7
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %13 = load i16, i16* %12, align 2
  %14 = or i16 %13, 24
  store i16 %14, i16* %12, align 2
  br label %15

; <label>:15:                                     ; preds = %7, %11
  tail call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1)
  br label %16

; <label>:16:                                     ; preds = %3, %15
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_iCCP(%struct.png_struct_def* noalias, %struct.png_info_def* noalias, i8* readonly, i32, i8* readonly, i32) local_unnamed_addr #4 {
  %7 = icmp eq %struct.png_struct_def* %0, null
  %8 = icmp eq %struct.png_info_def* %1, null
  %9 = or i1 %7, %8
  %10 = icmp eq i8* %2, null
  %11 = or i1 %9, %10
  %12 = icmp eq i8* %4, null
  %13 = or i1 %11, %12
  br i1 %13, label %156, label %14

; <label>:14:                                     ; preds = %6
  %15 = icmp eq i32 %3, 0
  br i1 %15, label %27, label %16

; <label>:16:                                     ; preds = %14
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %18 = load i32, i32* %17, align 4, !alias.scope !802
  %19 = and i32 %18, 4194304
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %16
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.158, i64 0, i64 0)) #22
  unreachable

; <label>:22:                                     ; preds = %16
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %24 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %23, align 8, !alias.scope !805
  %25 = icmp eq void (%struct.png_struct_def*, i8*)* %24, null
  br i1 %25, label %27, label %26

; <label>:26:                                     ; preds = %22
  tail call void %24(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.158, i64 0, i64 0)) #18
  br label %27

; <label>:27:                                     ; preds = %26, %22, %14
  %28 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16
  %29 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 16, i32 4
  %33 = load i16, i16* %32, align 2, !alias.scope !808, !noalias !811
  %34 = icmp slt i16 %33, 0
  br i1 %34, label %45, label %35

; <label>:35:                                     ; preds = %27
  %36 = icmp ult i32 %5, 132
  br i1 %36, label %37, label %39

; <label>:37:                                     ; preds = %35
  %38 = zext i32 %5 to i64
  tail call fastcc void @png_icc_profile_error(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %28, i8* nonnull %2, i64 %38, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i64 0, i64 0)) #18
  br label %45

; <label>:39:                                     ; preds = %35
  %40 = tail call i32 @MOZ_PNG_icc_check_header(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %28, i8* nonnull %2, i32 %5, i8* nonnull %4, i32 %31) #18
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %45, label %42

; <label>:42:                                     ; preds = %39
  %43 = tail call i32 @MOZ_PNG_icc_check_tags(%struct.png_struct_def* nonnull %0, %struct.png_colorspace* nonnull %28, i8* nonnull %2, i32 %5, i8* nonnull %4) #18
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

; <label>:45:                                     ; preds = %27, %42, %39, %37
  tail call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1)
  br label %156

; <label>:46:                                     ; preds = %42
  tail call void @MOZ_PNG_cs_sync_info(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1)
  %47 = load i16, i16* %32, align 2
  %48 = or i16 %47, 24
  store i16 %48, i16* %32, align 2
  %49 = tail call i64 @strlen(i8* nonnull %2) #20
  %50 = add i64 %49, 1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %55, label %52

; <label>:52:                                     ; preds = %46
  %53 = tail call noalias i8* @malloc(i64 %50) #18
  %54 = icmp eq i8* %53, null
  br i1 %54, label %55, label %86

; <label>:55:                                     ; preds = %52, %46
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %57 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %56, align 8, !alias.scope !813
  %58 = icmp eq void (%struct.png_struct_def*, i8*)* %57, null
  br i1 %58, label %60, label %59

; <label>:59:                                     ; preds = %55
  tail call void %57(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %60

; <label>:60:                                     ; preds = %55, %59
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %62 = load i32, i32* %61, align 4, !alias.scope !818
  %63 = and i32 %62, 1048576
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %66 = load i32, i32* %65, align 8, !alias.scope !818
  %67 = trunc i32 %66 to i16
  %68 = icmp slt i16 %67, 0
  br i1 %64, label %79, label %69

; <label>:69:                                     ; preds = %60
  br i1 %68, label %70, label %75

; <label>:70:                                     ; preds = %69
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %72 = load i32, i32* %71, align 8, !alias.scope !818
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %75, label %74

; <label>:74:                                     ; preds = %70
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.159, i64 0, i64 0)) #18
  br label %156

; <label>:75:                                     ; preds = %69, %70
  %76 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %56, align 8, !alias.scope !821
  %77 = icmp eq void (%struct.png_struct_def*, i8*)* %76, null
  br i1 %77, label %156, label %78

; <label>:78:                                     ; preds = %75
  tail call void %76(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.159, i64 0, i64 0)) #18
  br label %156

; <label>:79:                                     ; preds = %60
  br i1 %68, label %80, label %85

; <label>:80:                                     ; preds = %79
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %82 = load i32, i32* %81, align 8, !alias.scope !818
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %85, label %84

; <label>:84:                                     ; preds = %80
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.159, i64 0, i64 0)) #22
  unreachable

; <label>:85:                                     ; preds = %80, %79
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.159, i64 0, i64 0)) #22
  unreachable

; <label>:86:                                     ; preds = %52
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %53, i8* nonnull align 1 %2, i64 %50, i1 false)
  %87 = zext i32 %5 to i64
  %88 = tail call noalias i8* @malloc(i64 %87) #18
  %89 = icmp eq i8* %88, null
  br i1 %89, label %90, label %121

; <label>:90:                                     ; preds = %86
  %91 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %92 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %91, align 8, !alias.scope !824
  %93 = icmp eq void (%struct.png_struct_def*, i8*)* %92, null
  br i1 %93, label %95, label %94

; <label>:94:                                     ; preds = %90
  tail call void %92(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #18
  br label %95

; <label>:95:                                     ; preds = %90, %94
  tail call void @free(i8* nonnull %53) #18
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %97 = load i32, i32* %96, align 4, !alias.scope !829
  %98 = and i32 %97, 1048576
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %101 = load i32, i32* %100, align 8, !alias.scope !829
  %102 = trunc i32 %101 to i16
  %103 = icmp slt i16 %102, 0
  br i1 %99, label %114, label %104

; <label>:104:                                    ; preds = %95
  br i1 %103, label %105, label %110

; <label>:105:                                    ; preds = %104
  %106 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %107 = load i32, i32* %106, align 8, !alias.scope !829
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %110, label %109

; <label>:109:                                    ; preds = %105
  tail call void @MOZ_PNG_chunk_warn(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.160, i64 0, i64 0)) #18
  br label %156

; <label>:110:                                    ; preds = %104, %105
  %111 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %91, align 8, !alias.scope !832
  %112 = icmp eq void (%struct.png_struct_def*, i8*)* %111, null
  br i1 %112, label %156, label %113

; <label>:113:                                    ; preds = %110
  tail call void %111(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.160, i64 0, i64 0)) #18
  br label %156

; <label>:114:                                    ; preds = %95
  br i1 %103, label %115, label %120

; <label>:115:                                    ; preds = %114
  %116 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %117 = load i32, i32* %116, align 8, !alias.scope !829
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %120, label %119

; <label>:119:                                    ; preds = %115
  tail call void @MOZ_PNG_chunk_err(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.160, i64 0, i64 0)) #22
  unreachable

; <label>:120:                                    ; preds = %115, %114
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.160, i64 0, i64 0)) #22
  unreachable

; <label>:121:                                    ; preds = %86
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %88, i8* nonnull align 1 %4, i64 %87, i1 false)
  %122 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 22
  %123 = load i32, i32* %122, align 4, !alias.scope !835, !noalias !838
  %124 = and i32 %123, 16
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %131

; <label>:126:                                    ; preds = %121
  %127 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %128 = load i32, i32* %127, align 8
  %129 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %130 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  br label %147

; <label>:131:                                    ; preds = %121
  %132 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 17
  %133 = load i8*, i8** %132, align 8, !alias.scope !835, !noalias !838
  %134 = icmp eq i8* %133, null
  br i1 %134, label %136, label %135

; <label>:135:                                    ; preds = %131
  tail call void @free(i8* nonnull %133) #18
  br label %136

; <label>:136:                                    ; preds = %135, %131
  %137 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 18
  %138 = load i8*, i8** %137, align 8, !alias.scope !835, !noalias !838
  %139 = icmp eq i8* %138, null
  br i1 %139, label %141, label %140

; <label>:140:                                    ; preds = %136
  tail call void @free(i8* nonnull %138) #18
  br label %141

; <label>:141:                                    ; preds = %140, %136
  %142 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %143 = bitcast i8** %132 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 16, i1 false) #18, !alias.scope !835, !noalias !838
  %144 = load i32, i32* %142, align 8, !alias.scope !835, !noalias !838
  %145 = and i32 %144, -4097
  store i32 %145, i32* %142, align 8, !alias.scope !835, !noalias !838
  %146 = load i32, i32* %122, align 4, !alias.scope !835, !noalias !838
  br label %147

; <label>:147:                                    ; preds = %126, %141
  %148 = phi i32* [ %127, %126 ], [ %142, %141 ]
  %149 = phi i8** [ %130, %126 ], [ %137, %141 ]
  %150 = phi i8** [ %129, %126 ], [ %132, %141 ]
  %151 = phi i32 [ %128, %126 ], [ %145, %141 ]
  %152 = phi i32 [ %123, %126 ], [ %146, %141 ]
  %153 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 19
  store i32 %5, i32* %153, align 8
  store i8* %53, i8** %150, align 8
  store i8* %88, i8** %149, align 8
  %154 = or i32 %152, 16
  store i32 %154, i32* %122, align 4
  %155 = or i32 %151, 4096
  store i32 %155, i32* %148, align 8
  br label %156

; <label>:156:                                    ; preds = %109, %110, %113, %74, %75, %78, %45, %6, %147
  ret void
}

; Function Attrs: argmemonly nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #16

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_ensure_fcTL_is_valid(%struct.png_struct_def*, i32, i32, i32, i32, i16 zeroext, i16 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #4 {
  %10 = icmp slt i32 %1, 1
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %9
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.168, i64 0, i64 0)) #19
  unreachable

; <label>:12:                                     ; preds = %9
  %13 = icmp slt i32 %2, 1
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %12
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.169, i64 0, i64 0)) #19
  unreachable

; <label>:15:                                     ; preds = %12
  %16 = icmp slt i32 %3, 0
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %15
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.170, i64 0, i64 0)) #19
  unreachable

; <label>:18:                                     ; preds = %15
  %19 = icmp slt i32 %4, 0
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %18
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.171, i64 0, i64 0)) #19
  unreachable

; <label>:21:                                     ; preds = %18
  %22 = add i32 %3, %1
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89
  %24 = load i32, i32* %23, align 8
  %25 = icmp ugt i32 %22, %24
  br i1 %25, label %31, label %26

; <label>:26:                                     ; preds = %21
  %27 = add i32 %4, %2
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 90
  %29 = load i32, i32* %28, align 4
  %30 = icmp ugt i32 %27, %29
  br i1 %30, label %31, label %32

; <label>:31:                                     ; preds = %26, %21
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.172, i64 0, i64 0)) #19
  unreachable

; <label>:32:                                     ; preds = %26
  %33 = icmp ult i8 %7, 3
  br i1 %33, label %35, label %34

; <label>:34:                                     ; preds = %32
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.173, i64 0, i64 0)) #19
  unreachable

; <label>:35:                                     ; preds = %32
  %36 = icmp ult i8 %8, 2
  br i1 %36, label %38, label %37

; <label>:37:                                     ; preds = %35
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.174, i64 0, i64 0)) #19
  unreachable

; <label>:38:                                     ; preds = %35
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_APNG_set_first_frame_is_hidden(%struct.png_struct_def*, %struct.png_info_def* nocapture readnone, i8 zeroext) local_unnamed_addr #3 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %12, label %5

; <label>:5:                                      ; preds = %3
  %6 = icmp eq i8 %2, 0
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, -2
  %10 = or i32 %8, 1
  %11 = select i1 %6, i32 %9, i32 %10
  store i32 %11, i32* %7, align 8
  br label %12

; <label>:12:                                     ; preds = %3, %5
  %13 = phi i32 [ 1, %5 ], [ 0, %3 ]
  ret i32 %13
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_comp_buf_siz(%struct.png_struct_def* noalias, i64) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %47, label %4

; <label>:4:                                      ; preds = %2
  %5 = add i64 %1, -1
  %6 = icmp ugt i64 %5, 2147483646
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %4
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.175, i64 0, i64 0)) #19
  unreachable

; <label>:8:                                      ; preds = %4
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %10 = load i32, i32* %9, align 8
  %11 = trunc i32 %10 to i16
  %12 = icmp sgt i16 %11, -1
  br i1 %12, label %13, label %47

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %13
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %19 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %18, align 8, !alias.scope !840
  %20 = icmp eq void (%struct.png_struct_def*, i8*)* %19, null
  br i1 %20, label %47, label %21

; <label>:21:                                     ; preds = %17
  tail call void %19(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.176, i64 0, i64 0)) #18
  br label %47

; <label>:22:                                     ; preds = %13
  %23 = icmp ult i64 %1, 6
  br i1 %23, label %24, label %29

; <label>:24:                                     ; preds = %22
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %26 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %25, align 8, !alias.scope !843
  %27 = icmp eq void (%struct.png_struct_def*, i8*)* %26, null
  br i1 %27, label %47, label %28

; <label>:28:                                     ; preds = %24
  tail call void %26(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.178, i64 0, i64 0)) #18
  br label %47

; <label>:29:                                     ; preds = %22
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %31 = load i32, i32* %30, align 8
  %32 = zext i32 %31 to i64
  %33 = icmp eq i64 %32, %1
  br i1 %33, label %47, label %34

; <label>:34:                                     ; preds = %29
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %36 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %35, align 8, !noalias !846
  %37 = icmp eq %struct.png_compression_buffer* %36, null
  br i1 %37, label %45, label %38

; <label>:38:                                     ; preds = %34
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %35, align 8, !noalias !846
  br label %39

; <label>:39:                                     ; preds = %39, %38
  %40 = phi %struct.png_compression_buffer* [ %36, %38 ], [ %42, %39 ]
  %41 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %40, i64 0, i32 0
  %42 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %41, align 8
  %43 = bitcast %struct.png_compression_buffer* %40 to i8*
  tail call void @free(i8* nonnull %43) #18
  %44 = icmp eq %struct.png_compression_buffer* %42, null
  br i1 %44, label %45, label %39

; <label>:45:                                     ; preds = %39, %34
  %46 = trunc i64 %1 to i32
  store i32 %46, i32* %30, align 8
  br label %47

; <label>:47:                                     ; preds = %28, %24, %21, %17, %29, %45, %2, %8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_free_buffer_list(%struct.png_struct_def* noalias readnone, %struct.png_compression_buffer** nocapture) local_unnamed_addr #4 {
  %3 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %1, align 8
  %4 = icmp eq %struct.png_compression_buffer* %3, null
  br i1 %4, label %17, label %5

; <label>:5:                                      ; preds = %2
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %1, align 8
  %6 = icmp eq %struct.png_struct_def* %0, null
  br label %7

; <label>:7:                                      ; preds = %15, %5
  %8 = phi %struct.png_compression_buffer* [ %3, %5 ], [ %10, %15 ]
  %9 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %8, i64 0, i32 0
  %10 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %9, align 8
  %11 = icmp eq %struct.png_compression_buffer* %8, null
  %12 = or i1 %6, %11
  br i1 %12, label %15, label %13

; <label>:13:                                     ; preds = %7
  %14 = bitcast %struct.png_compression_buffer* %8 to i8*
  tail call void @free(i8* nonnull %14) #18
  br label %15

; <label>:15:                                     ; preds = %7, %13
  %16 = icmp eq %struct.png_compression_buffer* %10, null
  br i1 %16, label %17, label %7

; <label>:17:                                     ; preds = %15, %2
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_invalid(%struct.png_struct_def* noalias readnone, %struct.png_info_def* noalias, i32) local_unnamed_addr #3 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne %struct.png_info_def* %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %12

; <label>:7:                                      ; preds = %3
  %8 = xor i32 %2, -1
  %9 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, %8
  store i32 %11, i32* %9, align 8
  br label %12

; <label>:12:                                     ; preds = %7, %3
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_user_limits(%struct.png_struct_def* noalias, i32, i32) local_unnamed_addr #3 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 98
  store i32 %1, i32* %6, align 4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 99
  store i32 %2, i32* %7, align 8
  br label %8

; <label>:8:                                      ; preds = %3, %5
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_chunk_cache_max(%struct.png_struct_def* noalias, i32) local_unnamed_addr #3 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 100
  store i32 %1, i32* %5, align 4
  br label %6

; <label>:6:                                      ; preds = %2, %4
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_chunk_malloc_max(%struct.png_struct_def* noalias, i64) local_unnamed_addr #3 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 101
  store i64 %1, i64* %5, align 8
  br label %6

; <label>:6:                                      ; preds = %2, %4
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_benign_errors(%struct.png_struct_def* noalias nocapture, i32) local_unnamed_addr #3 {
  %3 = icmp eq i32 %1, 0
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, -7340033
  %7 = or i32 %5, 7340032
  %8 = select i1 %3, i32 %6, i32 %7
  store i32 %8, i32* %4, align 4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_ck_keyword(%struct.png_struct_def* noalias, i8* readonly, i8* nocapture) local_unnamed_addr #4 {
  %4 = alloca [24 x i8], align 16
  %5 = alloca [192 x i8], align 16
  %6 = alloca [8 x [32 x i8]], align 16
  %7 = icmp eq i8* %1, null
  br i1 %7, label %12, label %8

; <label>:8:                                      ; preds = %3
  %9 = load i8, i8* %1, align 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %13

; <label>:11:                                     ; preds = %8
  store i8 0, i8* %2, align 1
  br label %182

; <label>:12:                                     ; preds = %3
  store i8 0, i8* %2, align 1
  br label %182

; <label>:13:                                     ; preds = %8, %39
  %14 = phi i8 [ %44, %39 ], [ %9, %8 ]
  %15 = phi i32 [ %43, %39 ], [ 1, %8 ]
  %16 = phi i32 [ %42, %39 ], [ 0, %8 ]
  %17 = phi i32 [ %41, %39 ], [ 0, %8 ]
  %18 = phi i8* [ %20, %39 ], [ %1, %8 ]
  %19 = phi i8* [ %40, %39 ], [ %2, %8 ]
  %20 = getelementptr inbounds i8, i8* %18, i64 1
  %21 = zext i8 %14 to i32
  %22 = add i8 %14, -33
  %23 = icmp ult i8 %22, 94
  %24 = icmp ugt i8 %14, -96
  %25 = or i1 %24, %23
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %13
  %27 = getelementptr inbounds i8, i8* %19, i64 1
  store i8 %14, i8* %19, align 1
  %28 = add i32 %17, 1
  br label %39

; <label>:29:                                     ; preds = %13
  %30 = icmp eq i32 %15, 0
  br i1 %30, label %31, label %36

; <label>:31:                                     ; preds = %29
  %32 = getelementptr inbounds i8, i8* %19, i64 1
  store i8 32, i8* %19, align 1
  %33 = add i32 %17, 1
  %34 = icmp eq i8 %14, 32
  %35 = select i1 %34, i32 %16, i32 %21
  br label %39

; <label>:36:                                     ; preds = %29
  %37 = icmp eq i32 %16, 0
  %38 = select i1 %37, i32 %21, i32 %16
  br label %39

; <label>:39:                                     ; preds = %36, %31, %26
  %40 = phi i8* [ %27, %26 ], [ %32, %31 ], [ %19, %36 ]
  %41 = phi i32 [ %28, %26 ], [ %33, %31 ], [ %17, %36 ]
  %42 = phi i32 [ %16, %26 ], [ %35, %31 ], [ %38, %36 ]
  %43 = phi i32 [ 0, %26 ], [ 1, %31 ], [ %15, %36 ]
  %44 = load i8, i8* %20, align 1
  %45 = icmp ne i8 %44, 0
  %46 = icmp ult i32 %41, 79
  %47 = and i1 %46, %45
  br i1 %47, label %13, label %48

; <label>:48:                                     ; preds = %39
  %49 = icmp ne i32 %41, 0
  %50 = icmp ne i32 %43, 0
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %57

; <label>:52:                                     ; preds = %48
  %53 = add i32 %41, -1
  %54 = getelementptr inbounds i8, i8* %40, i64 -1
  %55 = icmp eq i32 %42, 0
  %56 = select i1 %55, i32 32, i32 %42
  br label %57

; <label>:57:                                     ; preds = %52, %48
  %58 = phi i8* [ %40, %48 ], [ %54, %52 ]
  %59 = phi i32 [ %41, %48 ], [ %53, %52 ]
  %60 = phi i32 [ %42, %48 ], [ %56, %52 ]
  store i8 0, i8* %58, align 1
  %61 = icmp eq i32 %59, 0
  br i1 %61, label %182, label %62

; <label>:62:                                     ; preds = %57
  %63 = load i8, i8* %20, align 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %66, label %65

; <label>:65:                                     ; preds = %62
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.179, i64 0, i64 0))
  br label %182

; <label>:66:                                     ; preds = %62
  %67 = icmp eq i32 %60, 0
  br i1 %67, label %182, label %68

; <label>:68:                                     ; preds = %66
  %69 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %6, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %69) #18
  %70 = load i8, i8* %1, align 1
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %85, label %72

; <label>:72:                                     ; preds = %68, %72
  %73 = phi i8 [ %79, %72 ], [ %70, %68 ]
  %74 = phi i8* [ %76, %72 ], [ %1, %68 ]
  %75 = phi i64 [ %77, %72 ], [ 0, %68 ]
  %76 = getelementptr inbounds i8, i8* %74, i64 1
  %77 = add nuw nsw i64 %75, 1
  %78 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %6, i64 0, i64 0, i64 %75
  store i8 %73, i8* %78, align 1
  %79 = load i8, i8* %76, align 1
  %80 = icmp ne i8 %79, 0
  %81 = icmp ult i64 %77, 31
  %82 = and i1 %81, %80
  br i1 %82, label %72, label %83

; <label>:83:                                     ; preds = %72
  %84 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %6, i64 0, i64 0, i64 %77
  br label %85

; <label>:85:                                     ; preds = %68, %83
  %86 = phi i8* [ %84, %83 ], [ %69, %68 ]
  store i8 0, i8* %86, align 1
  %87 = getelementptr inbounds [24 x i8], [24 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %87) #18
  %88 = sext i32 %60 to i64
  %89 = icmp slt i32 %60, 0
  %90 = sub nsw i64 0, %88
  %91 = select i1 %89, i64 %90, i64 %88
  %92 = getelementptr inbounds [24 x i8], [24 x i8]* %4, i64 0, i64 23
  store i8 0, i8* %92, align 1
  br label %97

; <label>:93:                                     ; preds = %97
  %94 = icmp ne i64 %105, 0
  %95 = icmp ult i32 %106, 2
  %96 = or i1 %95, %94
  br i1 %96, label %97, label %108

; <label>:97:                                     ; preds = %85, %93
  %98 = phi i8* [ %92, %85 ], [ %104, %93 ]
  %99 = phi i64 [ %91, %85 ], [ %105, %93 ]
  %100 = phi i32 [ 0, %85 ], [ %106, %93 ]
  %101 = and i64 %99, 15
  %102 = getelementptr inbounds [17 x i8], [17 x i8]* @MOZ_PNG_format_number.digits, i64 0, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = getelementptr inbounds i8, i8* %98, i64 -1
  store i8 %103, i8* %104, align 1
  %105 = lshr i64 %99, 4
  %106 = add nuw nsw i32 %100, 1
  %107 = icmp ugt i8* %104, %87
  br i1 %107, label %93, label %112

; <label>:108:                                    ; preds = %93
  %109 = and i1 %89, %107
  br i1 %109, label %110, label %112

; <label>:110:                                    ; preds = %108
  %111 = getelementptr inbounds i8, i8* %98, i64 -2
  store i8 45, i8* %111, align 1
  br label %112

; <label>:112:                                    ; preds = %97, %108, %110
  %113 = phi i8 [ %103, %108 ], [ 45, %110 ], [ %103, %97 ]
  %114 = phi i8* [ %104, %108 ], [ %111, %110 ], [ %104, %97 ]
  br label %115

; <label>:115:                                    ; preds = %112, %115
  %116 = phi i8 [ %122, %115 ], [ %113, %112 ]
  %117 = phi i8* [ %119, %115 ], [ %114, %112 ]
  %118 = phi i64 [ %120, %115 ], [ 0, %112 ]
  %119 = getelementptr inbounds i8, i8* %117, i64 1
  %120 = add nuw nsw i64 %118, 1
  %121 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %6, i64 0, i64 1, i64 %118
  store i8 %116, i8* %121, align 1
  %122 = load i8, i8* %119, align 1
  %123 = icmp ne i8 %122, 0
  %124 = icmp ult i64 %120, 31
  %125 = and i1 %124, %123
  br i1 %125, label %115, label %126

; <label>:126:                                    ; preds = %115
  %127 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %6, i64 0, i64 1, i64 %120
  store i8 0, i8* %127, align 1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %87) #18
  %128 = getelementptr inbounds [192 x i8], [192 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %128) #18, !noalias !849
  br label %129

; <label>:129:                                    ; preds = %175, %126
  %130 = phi i8* [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.180, i64 0, i64 0), %126 ], [ %177, %175 ]
  %131 = phi i64 [ 0, %126 ], [ %176, %175 ]
  %132 = load i8, i8* %130, align 1, !noalias !849
  switch i8 %132, label %169 [
    i8 0, label %179
    i8 64, label %133
  ]

; <label>:133:                                    ; preds = %129
  %134 = getelementptr inbounds i8, i8* %130, i64 1
  %135 = load i8, i8* %134, align 1, !noalias !849
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %169, label %137

; <label>:137:                                    ; preds = %133, %137
  %138 = phi i64 [ %144, %137 ], [ 0, %133 ]
  %139 = getelementptr inbounds [10 x i8], [10 x i8]* @MOZ_PNG_formatted_warning.valid_parameters, i64 0, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = icmp ne i8 %140, %135
  %142 = icmp ne i64 %138, 9
  %143 = and i1 %142, %141
  %144 = add nuw nsw i64 %138, 1
  br i1 %143, label %137, label %145

; <label>:145:                                    ; preds = %137
  %146 = trunc i64 %138 to i32
  %147 = and i64 %138, 4294967295
  %148 = icmp ult i32 %146, 8
  br i1 %148, label %149, label %169

; <label>:149:                                    ; preds = %145
  %150 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %6, i64 0, i64 %147, i64 32
  %151 = icmp ult i64 %131, 191
  br i1 %151, label %152, label %166

; <label>:152:                                    ; preds = %149
  %153 = getelementptr inbounds [8 x [32 x i8]], [8 x [32 x i8]]* %6, i64 0, i64 %147, i64 0
  br label %154

; <label>:154:                                    ; preds = %161, %152
  %155 = phi i8* [ %162, %161 ], [ %153, %152 ]
  %156 = phi i64 [ %163, %161 ], [ %131, %152 ]
  %157 = load i8, i8* %155, align 1, !noalias !849
  %158 = icmp ne i8 %157, 0
  %159 = icmp ult i8* %155, %150
  %160 = and i1 %159, %158
  br i1 %160, label %161, label %166

; <label>:161:                                    ; preds = %154
  %162 = getelementptr inbounds i8, i8* %155, i64 1
  %163 = add nuw nsw i64 %156, 1
  %164 = getelementptr inbounds [192 x i8], [192 x i8]* %5, i64 0, i64 %156
  store i8 %157, i8* %164, align 1, !noalias !849
  %165 = icmp ult i64 %163, 191
  br i1 %165, label %154, label %166

; <label>:166:                                    ; preds = %161, %154, %149
  %167 = phi i64 [ %131, %149 ], [ %156, %154 ], [ 191, %161 ]
  %168 = getelementptr inbounds i8, i8* %130, i64 2
  br label %175

; <label>:169:                                    ; preds = %129, %145, %133
  %170 = phi i8 [ 64, %133 ], [ %135, %145 ], [ %132, %129 ]
  %171 = phi i8* [ %130, %133 ], [ %134, %145 ], [ %130, %129 ]
  %172 = getelementptr inbounds i8, i8* %171, i64 1
  %173 = add i64 %131, 1
  %174 = getelementptr inbounds [192 x i8], [192 x i8]* %5, i64 0, i64 %131
  store i8 %170, i8* %174, align 1, !noalias !849
  br label %175

; <label>:175:                                    ; preds = %169, %166
  %176 = phi i64 [ %173, %169 ], [ %167, %166 ]
  %177 = phi i8* [ %172, %169 ], [ %168, %166 ]
  %178 = icmp ult i64 %176, 191
  br i1 %178, label %129, label %179

; <label>:179:                                    ; preds = %129, %175
  %180 = phi i64 [ %131, %129 ], [ %176, %175 ]
  %181 = getelementptr inbounds [192 x i8], [192 x i8]* %5, i64 0, i64 %180
  store i8 0, i8* %181, align 1, !noalias !849
  call void @MOZ_PNG_warning(%struct.png_struct_def* %0, i8* nonnull %128) #18
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %128) #18, !noalias !849
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %69) #18
  br label %182

; <label>:182:                                    ; preds = %11, %65, %179, %66, %57, %12
  %183 = phi i32 [ 0, %12 ], [ 0, %57 ], [ %59, %66 ], [ %59, %179 ], [ %59, %65 ], [ 0, %11 ]
  ret i32 %183
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden i32 @MOZ_PNG_set_interlace_handling(%struct.png_struct_def* noalias) local_unnamed_addr #3 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %11, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %5 = load i8, i8* %4, align 2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 12
  %9 = load i32, i32* %8, align 8
  %10 = or i32 %9, 2
  store i32 %10, i32* %8, align 8
  br label %11

; <label>:11:                                     ; preds = %1, %3, %7
  %12 = phi i32 [ 7, %7 ], [ 1, %3 ], [ 1, %1 ]
  ret i32 %12
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_data(%struct.png_struct_def* noalias, i8*, i64) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %5 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %4, align 8
  %6 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %5, null
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %3
  tail call void %5(%struct.png_struct_def* nonnull %0, i8* %1, i64 %2) #18
  ret void

; <label>:8:                                      ; preds = %3
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #19
  unreachable
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_default_write_data(%struct.png_struct_def*, i8* nocapture, i64) #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %12, label %5

; <label>:5:                                      ; preds = %3
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  %7 = bitcast i8** %6 to %struct._IO_FILE**
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %9 = tail call i64 @fwrite(i8* %1, i64 1, i64 %2, %struct._IO_FILE* %8)
  %10 = icmp eq i64 %9, %2
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %5
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.182, i64 0, i64 0)) #19
  unreachable

; <label>:12:                                     ; preds = %5, %3
  ret void
}

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_flush(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  %3 = load void (%struct.png_struct_def*)*, void (%struct.png_struct_def*)** %2, align 8
  %4 = icmp eq void (%struct.png_struct_def*)* %3, null
  br i1 %4, label %6, label %5

; <label>:5:                                      ; preds = %1
  tail call void %3(%struct.png_struct_def* nonnull %0) #18
  br label %6

; <label>:6:                                      ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_def_flush(%struct.png_struct_def* readonly) #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %8, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  %5 = bitcast i8** %4 to %struct._IO_FILE**
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %7 = tail call i32 @fflush(%struct._IO_FILE* %6)
  br label %8

; <label>:8:                                      ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_write_fn(%struct.png_struct_def* noalias, i8*, void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*)*) local_unnamed_addr #4 {
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %22, label %6

; <label>:6:                                      ; preds = %4
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 9
  store i8* %1, i8** %7, align 8
  %8 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %2, null
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %10 = select i1 %8, void (%struct.png_struct_def*, i8*, i64)* @MOZ_PNG_default_write_data, void (%struct.png_struct_def*, i8*, i64)* %2
  store void (%struct.png_struct_def*, i8*, i64)* %10, void (%struct.png_struct_def*, i8*, i64)** %9, align 8
  %11 = icmp eq void (%struct.png_struct_def*)* %3, null
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  %13 = select i1 %11, void (%struct.png_struct_def*)* @MOZ_PNG_def_flush, void (%struct.png_struct_def*)* %3
  store void (%struct.png_struct_def*)* %13, void (%struct.png_struct_def*)** %12, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 8
  %15 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %14, align 8
  %16 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %15, null
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %6
  store void (%struct.png_struct_def*, i8*, i64)* null, void (%struct.png_struct_def*, i8*, i64)** %14, align 8
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %19 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %18, align 8, !alias.scope !852
  %20 = icmp eq void (%struct.png_struct_def*, i8*)* %19, null
  br i1 %20, label %22, label %21

; <label>:21:                                     ; preds = %17
  tail call void %19(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.99, i64 0, i64 0)) #18
  br label %22

; <label>:22:                                     ; preds = %21, %17, %6, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_info_before_PLTE(%struct.png_struct_def* noalias, %struct.png_info_def* noalias readonly) local_unnamed_addr #4 {
  %3 = alloca [8 x i8], align 1
  %4 = alloca i64, align 8
  %5 = icmp eq %struct.png_struct_def* %0, null
  %6 = icmp eq %struct.png_info_def* %1, null
  %7 = or i1 %5, %6
  br i1 %7, label %88, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %10 = load i32, i32* %9, align 8
  %11 = and i32 %10, 1024
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %88

; <label>:13:                                     ; preds = %8
  %14 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #18, !noalias !855
  store i64 727905341920923785, i64* %4, align 8, !noalias !855
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %16 = load i8, i8* %15, align 1, !alias.scope !855
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %19 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %18, align 8, !alias.scope !858
  %20 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %19, null
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %13
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:22:                                     ; preds = %13
  %23 = sub nsw i64 8, %17
  %24 = bitcast i64* %4 to [8 x i8]*
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %24, i64 0, i64 %17
  call void %19(%struct.png_struct_def* nonnull %0, i8* %25, i64 %23) #18
  %26 = load i8, i8* %15, align 1, !alias.scope !855
  %27 = icmp ult i8 %26, 3
  br i1 %27, label %28, label %31

; <label>:28:                                     ; preds = %22
  %29 = load i32, i32* %9, align 8, !alias.scope !855
  %30 = or i32 %29, 4096
  store i32 %30, i32* %9, align 8, !alias.scope !855
  br label %31

; <label>:31:                                     ; preds = %22, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #18, !noalias !855
  %32 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  %37 = load i8, i8* %36, align 4
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 9
  %43 = load i8, i8* %42, align 2
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 10
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  call void @MOZ_PNG_write_IHDR(%struct.png_struct_def* nonnull %0, i32 %33, i32 %35, i32 %38, i32 %41, i32 %44, i32 %47, i32 undef)
  %48 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = and i32 %49, 131072
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %85, label %52

; <label>:52:                                     ; preds = %31
  %53 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 24
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #18
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 94
  store i32 %54, i32* %58, align 8
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %60 = load i32, i32* %59, align 8
  %61 = shl i32 %60, 31
  %62 = ashr exact i32 %61, 31
  %63 = add i32 %62, %54
  %64 = lshr i32 %63, 24
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %57, align 1
  %66 = lshr i32 %63, 16
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  store i8 %67, i8* %68, align 1
  %69 = lshr i32 %63, 8
  %70 = trunc i32 %69 to i8
  %71 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  store i8 %70, i8* %71, align 1
  %72 = trunc i32 %63 to i8
  %73 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  store i8 %72, i8* %73, align 1
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %75 = lshr i32 %56, 24
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* %74, align 1
  %77 = lshr i32 %56, 16
  %78 = trunc i32 %77 to i8
  %79 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  store i8 %78, i8* %79, align 1
  %80 = lshr i32 %56, 8
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  store i8 %81, i8* %82, align 1
  %83 = trunc i32 %56 to i8
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  store i8 %83, i8* %84, align 1
  call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* nonnull %0, i32 1633899596, i8* nonnull %57, i64 8) #18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #18
  br label %85

; <label>:85:                                     ; preds = %31, %52
  %86 = load i32, i32* %9, align 8
  %87 = or i32 %86, 1024
  store i32 %87, i32* %9, align 8
  br label %88

; <label>:88:                                     ; preds = %2, %85, %8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_sig(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #18
  store i64 727905341920923785, i64* %2, align 8
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 54
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %8 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %7, align 8, !alias.scope !861
  %9 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %8, null
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %1
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:11:                                     ; preds = %1
  %12 = sub nsw i64 8, %6
  %13 = bitcast i64* %2 to [8 x i8]*
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 %6
  call void %8(%struct.png_struct_def* nonnull %0, i8* %14, i64 %12) #18
  %15 = load i8, i8* %4, align 1
  %16 = icmp ult i8 %15, 3
  br i1 %16, label %17, label %21

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %19 = load i32, i32* %18, align 8
  %20 = or i32 %19, 4096
  store i32 %20, i32* %18, align 8
  br label %21

; <label>:21:                                     ; preds = %17, %11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_IHDR(%struct.png_struct_def* noalias, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4 {
  %9 = alloca [13 x i8], align 1
  %10 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 13, i8* nonnull %10) #18
  switch i32 %4, label %28 [
    i32 0, label %11
    i32 2, label %15
    i32 3, label %18
    i32 4, label %22
    i32 6, label %25
  ]

; <label>:11:                                     ; preds = %8
  %12 = add i32 %3, -1
  %13 = icmp ult i32 %12, 8
  br i1 %13, label %29, label %14

; <label>:14:                                     ; preds = %29, %11
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.191, i64 0, i64 0)) #19
  unreachable

; <label>:15:                                     ; preds = %8
  %16 = icmp eq i32 %3, 8
  br i1 %16, label %39, label %17

; <label>:17:                                     ; preds = %15
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.192, i64 0, i64 0)) #19
  unreachable

; <label>:18:                                     ; preds = %8
  %19 = add i32 %3, -1
  %20 = icmp ult i32 %19, 8
  br i1 %20, label %34, label %21

; <label>:21:                                     ; preds = %34, %18
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.193, i64 0, i64 0)) #19
  unreachable

; <label>:22:                                     ; preds = %8
  %23 = icmp eq i32 %3, 8
  br i1 %23, label %39, label %24

; <label>:24:                                     ; preds = %22
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.194, i64 0, i64 0)) #19
  unreachable

; <label>:25:                                     ; preds = %8
  %26 = icmp eq i32 %3, 8
  br i1 %26, label %39, label %27

; <label>:27:                                     ; preds = %25
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.195, i64 0, i64 0)) #19
  unreachable

; <label>:28:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.196, i64 0, i64 0)) #19
  unreachable

; <label>:29:                                     ; preds = %11
  %30 = trunc i32 %12 to i8
  %31 = lshr i8 -117, %30
  %32 = and i8 %31, 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %14, label %39

; <label>:34:                                     ; preds = %18
  %35 = trunc i32 %19 to i8
  %36 = lshr i8 -117, %35
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %21, label %39

; <label>:39:                                     ; preds = %29, %34, %25, %22, %15
  %40 = phi i8 [ 3, %15 ], [ 2, %22 ], [ 4, %25 ], [ 1, %29 ], [ 1, %34 ]
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 52
  store i8 %40, i8* %41, align 1
  %42 = icmp eq i32 %5, 0
  br i1 %42, label %44, label %43

; <label>:43:                                     ; preds = %39
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.197, i64 0, i64 0))
  br label %44

; <label>:44:                                     ; preds = %39, %43
  %45 = icmp eq i32 %6, 0
  br i1 %45, label %47, label %46

; <label>:46:                                     ; preds = %44
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.198, i64 0, i64 0))
  br label %47

; <label>:47:                                     ; preds = %44, %46
  %48 = trunc i32 %3 to i8
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  store i8 %48, i8* %49, align 2
  %50 = trunc i32 %4 to i8
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  store i8 %50, i8* %51, align 1
  %52 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  store i8 0, i8* %52, align 2
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 97
  store i8 0, i8* %53, align 8
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  store i32 %1, i32* %54, align 4
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  store i32 %2, i32* %55, align 8
  %56 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 52
  %57 = load i8, i8* %56, align 1
  %58 = mul i8 %57, %48
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  store i8 %58, i8* %59, align 4
  %60 = icmp ugt i8 %58, 7
  %61 = zext i32 %1 to i64
  %62 = zext i8 %58 to i64
  br i1 %60, label %63, label %66

; <label>:63:                                     ; preds = %47
  %64 = lshr i64 %62, 3
  %65 = mul nuw nsw i64 %64, %61
  br label %70

; <label>:66:                                     ; preds = %47
  %67 = mul nuw nsw i64 %62, %61
  %68 = add nuw nsw i64 %67, 7
  %69 = lshr i64 %68, 3
  br label %70

; <label>:70:                                     ; preds = %66, %63
  %71 = phi i64 [ %65, %63 ], [ %69, %66 ]
  %72 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  store i64 %71, i64* %72, align 8
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 30
  store i32 %1, i32* %73, align 8
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 50
  store i8 %48, i8* %74, align 1
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 53
  store i8 %57, i8* %75, align 2
  %76 = lshr i32 %1, 24
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %10, align 1
  %78 = lshr i32 %1, 16
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 1
  store i8 %79, i8* %80, align 1
  %81 = lshr i32 %1, 8
  %82 = trunc i32 %81 to i8
  %83 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 2
  store i8 %82, i8* %83, align 1
  %84 = trunc i32 %1 to i8
  %85 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 3
  store i8 %84, i8* %85, align 1
  %86 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 4
  %87 = lshr i32 %2, 24
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %86, align 1
  %89 = lshr i32 %2, 16
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 5
  store i8 %90, i8* %91, align 1
  %92 = lshr i32 %2, 8
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 6
  store i8 %93, i8* %94, align 1
  %95 = trunc i32 %2 to i8
  %96 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 7
  store i8 %95, i8* %96, align 1
  %97 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 8
  store i8 %48, i8* %97, align 1
  %98 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 9
  store i8 %50, i8* %98, align 1
  %99 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 10
  store i8 0, i8* %99, align 1
  %100 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 11
  store i8 0, i8* %100, align 1
  %101 = getelementptr inbounds [13 x i8], [13 x i8]* %9, i64 0, i64 12
  store i8 0, i8* %101, align 1
  call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* nonnull %0, i32 1229472850, i8* nonnull %10, i64 13)
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89
  store i32 %1, i32* %102, align 8
  %103 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 90
  store i32 %2, i32* %103, align 4
  %104 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %105 = load i8, i8* %104, align 8
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %116

; <label>:107:                                    ; preds = %70
  %108 = load i8, i8* %51, align 1
  %109 = icmp eq i8 %108, 3
  br i1 %109, label %114, label %110

; <label>:110:                                    ; preds = %107
  %111 = load i8, i8* %49, align 2
  %112 = icmp ult i8 %111, 8
  %113 = select i1 %112, i8 8, i8 -8
  br label %114

; <label>:114:                                    ; preds = %110, %107
  %115 = phi i8 [ 8, %107 ], [ %113, %110 ]
  store i8 %115, i8* %104, align 8
  br label %116

; <label>:116:                                    ; preds = %114, %70
  %117 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  store i32 1, i32* %117, align 8
  call void @llvm.lifetime.end.p0i8(i64 13, i8* nonnull %10) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_write_acTL(%struct.png_struct_def*, i32, i32) local_unnamed_addr #4 {
  %4 = alloca [8 x i8], align 1
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #18
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 94
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %8 = load i32, i32* %7, align 8
  %9 = shl i32 %8, 31
  %10 = ashr exact i32 %9, 31
  %11 = add i32 %10, %1
  %12 = lshr i32 %11, 24
  %13 = trunc i32 %12 to i8
  store i8 %13, i8* %5, align 1
  %14 = lshr i32 %11, 16
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 1
  store i8 %15, i8* %16, align 1
  %17 = lshr i32 %11, 8
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 2
  store i8 %18, i8* %19, align 1
  %20 = trunc i32 %11 to i8
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 3
  store i8 %20, i8* %21, align 1
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 4
  %23 = lshr i32 %2, 24
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %22, align 1
  %25 = lshr i32 %2, 16
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 5
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %2, 8
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 6
  store i8 %29, i8* %30, align 1
  %31 = trunc i32 %2 to i8
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 7
  store i8 %31, i8* %32, align 1
  call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* %0, i32 1633899596, i8* nonnull %5, i64 8)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_info(%struct.png_struct_def* noalias, %struct.png_info_def* noalias readonly) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  %4 = icmp eq %struct.png_info_def* %1, null
  %5 = or i1 %3, %4
  br i1 %5, label %37, label %6

; <label>:6:                                      ; preds = %2
  tail call void @MOZ_PNG_write_info_before_PLTE(%struct.png_struct_def* nonnull %0, %struct.png_info_def* nonnull %1)
  %7 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

; <label>:11:                                     ; preds = %6
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 4
  %13 = load %struct.png_color_struct*, %struct.png_color_struct** %12, align 8
  %14 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 5
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  tail call void @MOZ_PNG_write_PLTE(%struct.png_struct_def* nonnull %0, %struct.png_color_struct* %13, i32 %16)
  %17 = load i32, i32* %7, align 8
  br label %23

; <label>:18:                                     ; preds = %6
  %19 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 3
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %18
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.183, i64 0, i64 0)) #19
  unreachable

; <label>:23:                                     ; preds = %18, %11
  %24 = phi i32 [ %8, %18 ], [ %17, %11 ]
  %25 = and i32 %24, 16
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %37, label %27

; <label>:27:                                     ; preds = %23
  %28 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 20
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 21
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 6
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  tail call void @MOZ_PNG_write_tRNS(%struct.png_struct_def* nonnull %0, i8* %29, %struct.png_color_16_struct* nonnull %30, i32 %33, i32 %36)
  br label %37

; <label>:37:                                     ; preds = %23, %2, %27
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_PLTE(%struct.png_struct_def* noalias, %struct.png_color_struct* nocapture readonly, i32) local_unnamed_addr #4 {
  %4 = alloca [4 x i8], align 1
  %5 = alloca [8 x i8], align 1
  %6 = alloca [3 x i8], align 1
  %7 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %7) #18
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 3
  br i1 %10, label %11, label %16

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %13 = load i8, i8* %12, align 2
  %14 = zext i8 %13 to i32
  %15 = shl i32 1, %14
  br label %16

; <label>:16:                                     ; preds = %3, %11
  %17 = phi i32 [ %15, %11 ], [ 256, %3 ]
  %18 = add i32 %2, -1
  %19 = icmp ult i32 %18, %17
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %16
  br i1 %10, label %21, label %22

; <label>:21:                                     ; preds = %20
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.199, i64 0, i64 0)) #19
  unreachable

; <label>:22:                                     ; preds = %20
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.199, i64 0, i64 0))
  br label %123

; <label>:23:                                     ; preds = %16
  %24 = and i8 %9, 2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %23
  tail call void @MOZ_PNG_warning(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.200, i64 0, i64 0))
  br label %123

; <label>:27:                                     ; preds = %23
  %28 = trunc i32 %2 to i16
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  store i16 %28, i16* %29, align 8
  %30 = mul i32 %2, 3
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #18, !noalias !864
  %32 = lshr i32 %30, 24
  %33 = trunc i32 %32 to i8
  store i8 %33, i8* %31, align 1, !noalias !864
  %34 = lshr i32 %30, 16
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  store i8 %35, i8* %36, align 1, !noalias !864
  %37 = lshr i32 %30, 8
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  store i8 %38, i8* %39, align 1, !noalias !864
  %40 = trunc i32 %30 to i8
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  store i8 %40, i8* %41, align 1, !noalias !864
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  store i8 80, i8* %42, align 1, !noalias !864
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 5
  store i8 76, i8* %43, align 1, !noalias !864
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 6
  store i8 84, i8* %44, align 1, !noalias !864
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 7
  store i8 69, i8* %45, align 1, !noalias !864
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %47 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %46, align 8, !alias.scope !867
  %48 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %47, null
  br i1 %48, label %49, label %50

; <label>:49:                                     ; preds = %27
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:50:                                     ; preds = %27
  call void %47(%struct.png_struct_def* nonnull %0, i8* nonnull %31, i64 8) #18
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  store i32 1347179589, i32* %51, align 8, !alias.scope !864
  %52 = call i64 @MOZ_Z_crc32(i64 0, i8* null, i32 0) #18, !noalias !870
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %53, i32* %54, align 4, !alias.scope !873
  %55 = load i32, i32* %51, align 8, !alias.scope !874
  %56 = and i32 %55, 536870912
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %59 = load i32, i32* %58, align 4, !alias.scope !874
  %60 = and i32 %59, 768
  %61 = icmp ne i32 %60, 768
  %62 = and i32 %59, 2048
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %57, i1 %63, i1 %61
  br i1 %64, label %65, label %69

; <label>:65:                                     ; preds = %50
  %66 = and i64 %52, 4294967295
  %67 = call i64 @MOZ_Z_crc32(i64 %66, i8* nonnull %42, i32 4) #18, !noalias !874
  %68 = trunc i64 %67 to i32
  store i32 %68, i32* %54, align 4, !alias.scope !874
  br label %69

; <label>:69:                                     ; preds = %50, %65
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #18, !noalias !864
  %70 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 1
  %71 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 2
  br label %72

; <label>:72:                                     ; preds = %69, %99
  %73 = phi %struct.png_color_struct* [ %1, %69 ], [ %101, %99 ]
  %74 = phi i32 [ 0, %69 ], [ %100, %99 ]
  %75 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %73, i64 0, i32 0
  %76 = load i8, i8* %75, align 1
  store i8 %76, i8* %7, align 1
  %77 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %73, i64 0, i32 1
  %78 = load i8, i8* %77, align 1
  store i8 %78, i8* %70, align 1
  %79 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %73, i64 0, i32 2
  %80 = load i8, i8* %79, align 1
  store i8 %80, i8* %71, align 1
  %81 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %46, align 8, !alias.scope !877
  %82 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %81, null
  br i1 %82, label %83, label %84

; <label>:83:                                     ; preds = %72
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:84:                                     ; preds = %72
  call void %81(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 3) #18
  %85 = load i32, i32* %51, align 8, !alias.scope !882
  %86 = and i32 %85, 536870912
  %87 = icmp eq i32 %86, 0
  %88 = load i32, i32* %58, align 4, !alias.scope !882
  %89 = and i32 %88, 768
  %90 = icmp ne i32 %89, 768
  %91 = and i32 %88, 2048
  %92 = icmp eq i32 %91, 0
  %93 = select i1 %87, i1 %92, i1 %90
  br i1 %93, label %94, label %99

; <label>:94:                                     ; preds = %84
  %95 = load i32, i32* %54, align 4, !alias.scope !882
  %96 = zext i32 %95 to i64
  %97 = call i64 @MOZ_Z_crc32(i64 %96, i8* nonnull %7, i32 3) #18, !noalias !885
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %54, align 4, !alias.scope !882
  br label %99

; <label>:99:                                     ; preds = %84, %94
  %100 = add nuw i32 %74, 1
  %101 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %73, i64 1
  %102 = icmp ult i32 %100, %2
  br i1 %102, label %72, label %103

; <label>:103:                                    ; preds = %99
  %104 = load i32, i32* %54, align 4, !alias.scope !886
  %105 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %105) #18, !noalias !886
  %106 = lshr i32 %104, 24
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %105, align 1, !noalias !886
  %108 = lshr i32 %104, 16
  %109 = trunc i32 %108 to i8
  %110 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  store i8 %109, i8* %110, align 1, !noalias !886
  %111 = lshr i32 %104, 8
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  store i8 %112, i8* %113, align 1, !noalias !886
  %114 = trunc i32 %104 to i8
  %115 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  store i8 %114, i8* %115, align 1, !noalias !886
  %116 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %46, align 8, !alias.scope !889
  %117 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %116, null
  br i1 %117, label %118, label %119

; <label>:118:                                    ; preds = %103
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:119:                                    ; preds = %103
  call void %116(%struct.png_struct_def* nonnull %0, i8* nonnull %105, i64 4) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %105) #18, !noalias !886
  %120 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %121 = load i32, i32* %120, align 8
  %122 = or i32 %121, 2
  store i32 %122, i32* %120, align 8
  br label %123

; <label>:123:                                    ; preds = %119, %26, %22
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %7) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_tRNS(%struct.png_struct_def* noalias, i8*, %struct.png_color_16_struct* nocapture readonly, i32, i32) local_unnamed_addr #4 {
  %6 = alloca [6 x i8], align 1
  %7 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %7) #18
  switch i32 %4, label %89 [
    i32 3, label %8
    i32 0, label %28
    i32 2, label %53
  ]

; <label>:8:                                      ; preds = %5
  %9 = icmp slt i32 %3, 1
  br i1 %9, label %15, label %10

; <label>:10:                                     ; preds = %8
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = icmp slt i32 %13, %3
  br i1 %14, label %15, label %26

; <label>:15:                                     ; preds = %10, %8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %17 = load i32, i32* %16, align 4, !alias.scope !892
  %18 = and i32 %17, 2097152
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %15
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.202, i64 0, i64 0)) #22
  unreachable

; <label>:21:                                     ; preds = %15
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %23 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %22, align 8, !alias.scope !895
  %24 = icmp eq void (%struct.png_struct_def*, i8*)* %23, null
  br i1 %24, label %100, label %25

; <label>:25:                                     ; preds = %21
  tail call void %23(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.202, i64 0, i64 0)) #18
  br label %100

; <label>:26:                                     ; preds = %10
  %27 = sext i32 %3 to i64
  tail call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* nonnull %0, i32 1951551059, i8* %1, i64 %27)
  br label %100

; <label>:28:                                     ; preds = %5
  %29 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 4
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 49
  %33 = load i8, i8* %32, align 2
  %34 = zext i8 %33 to i32
  %35 = shl i32 1, %34
  %36 = icmp sgt i32 %35, %31
  br i1 %36, label %48, label %37

; <label>:37:                                     ; preds = %28
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %39 = load i32, i32* %38, align 4, !alias.scope !898
  %40 = and i32 %39, 2097152
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %37
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.203, i64 0, i64 0)) #22
  unreachable

; <label>:43:                                     ; preds = %37
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %45 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %44, align 8, !alias.scope !901
  %46 = icmp eq void (%struct.png_struct_def*, i8*)* %45, null
  br i1 %46, label %100, label %47

; <label>:47:                                     ; preds = %43
  tail call void %45(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.203, i64 0, i64 0)) #18
  br label %100

; <label>:48:                                     ; preds = %28
  %49 = lshr i16 %30, 8
  %50 = trunc i16 %49 to i8
  store i8 %50, i8* %7, align 1
  %51 = trunc i16 %30 to i8
  %52 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 1
  store i8 %51, i8* %52, align 1
  call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* nonnull %0, i32 1951551059, i8* nonnull %7, i64 2)
  br label %100

; <label>:53:                                     ; preds = %5
  %54 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 1
  %55 = load i16, i16* %54, align 2
  %56 = lshr i16 %55, 8
  %57 = trunc i16 %56 to i8
  store i8 %57, i8* %7, align 1
  %58 = trunc i16 %55 to i8
  %59 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 1
  store i8 %58, i8* %59, align 1
  %60 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 2
  %61 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 2
  %62 = load i16, i16* %61, align 2
  %63 = lshr i16 %62, 8
  %64 = trunc i16 %63 to i8
  store i8 %64, i8* %60, align 1
  %65 = trunc i16 %62 to i8
  %66 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 3
  store i8 %65, i8* %66, align 1
  %67 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 4
  %68 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 3
  %69 = load i16, i16* %68, align 2
  %70 = lshr i16 %69, 8
  %71 = trunc i16 %70 to i8
  store i8 %71, i8* %67, align 1
  %72 = trunc i16 %69 to i8
  %73 = getelementptr inbounds [6 x i8], [6 x i8]* %6, i64 0, i64 5
  store i8 %72, i8* %73, align 1
  %74 = or i16 %63, %56
  %75 = or i16 %74, %70
  %76 = icmp eq i16 %75, 0
  br i1 %76, label %88, label %77

; <label>:77:                                     ; preds = %53
  %78 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %79 = load i32, i32* %78, align 4, !alias.scope !904
  %80 = and i32 %79, 2097152
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %77
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.204, i64 0, i64 0)) #22
  unreachable

; <label>:83:                                     ; preds = %77
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %85 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %84, align 8, !alias.scope !907
  %86 = icmp eq void (%struct.png_struct_def*, i8*)* %85, null
  br i1 %86, label %100, label %87

; <label>:87:                                     ; preds = %83
  tail call void %85(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.204, i64 0, i64 0)) #18
  br label %100

; <label>:88:                                     ; preds = %53
  call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* %0, i32 1951551059, i8* nonnull %7, i64 6)
  br label %100

; <label>:89:                                     ; preds = %5
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %91 = load i32, i32* %90, align 4, !alias.scope !910
  %92 = and i32 %91, 2097152
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

; <label>:94:                                     ; preds = %89
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.205, i64 0, i64 0)) #22
  unreachable

; <label>:95:                                     ; preds = %89
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %97 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %96, align 8, !alias.scope !913
  %98 = icmp eq void (%struct.png_struct_def*, i8*)* %97, null
  br i1 %98, label %100, label %99

; <label>:99:                                     ; preds = %95
  tail call void %97(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.205, i64 0, i64 0)) #18
  br label %100

; <label>:100:                                    ; preds = %99, %95, %87, %83, %47, %43, %25, %21, %26, %88, %48
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %7) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_end(%struct.png_struct_def* noalias, %struct.png_info_def* noalias nocapture readnone) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %21, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %10

; <label>:9:                                      ; preds = %4
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.184, i64 0, i64 0)) #19
  unreachable

; <label>:10:                                     ; preds = %4
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 95
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 94
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %12, %14
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %10
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.185, i64 0, i64 0)) #19
  unreachable

; <label>:17:                                     ; preds = %10
  %18 = or i32 %6, 8
  store i32 %18, i32* %5, align 8
  tail call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* nonnull %0, i32 1229278788, i8* null, i64 0) #18
  %19 = load i32, i32* %5, align 8, !alias.scope !916
  %20 = or i32 %19, 16
  store i32 %20, i32* %5, align 8, !alias.scope !916
  br label %21

; <label>:21:                                     ; preds = %2, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_IEND(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  tail call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* %0, i32 1229278788, i8* null, i64 0)
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %3 = load i32, i32* %2, align 8
  %4 = or i32 %3, 16
  store i32 %4, i32* %2, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden noalias %struct.png_struct_def* @MOZ_PNG_cr_write_str(i8*, i8*, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*) local_unnamed_addr #4 {
  %5 = tail call noalias %struct.png_struct_def* @MOZ_PNG_create_png_struct(i8* %0, i8* %1, void (%struct.png_struct_def*, i8*)* %2, void (%struct.png_struct_def*, i8*)* %3, i8* undef, i8* (%struct.png_struct_def*, i64)* undef, void (%struct.png_struct_def*, i8*)* undef)
  %6 = icmp eq %struct.png_struct_def* %5, null
  br i1 %6, label %23, label %7

; <label>:7:                                      ; preds = %4
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 16
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 21
  store i32 1, i32* %9, align 4
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 20
  store i32 8, i32* %10, align 8
  %11 = bitcast i32* %8 to <4 x i32>*
  store <4 x i32> <i32 8192, i32 -1, i32 8, i32 15>, <4 x i32>* %11, align 8
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 9
  store i8* null, i8** %12, align 8, !alias.scope !919
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 7
  store void (%struct.png_struct_def*, i8*, i64)* @MOZ_PNG_default_write_data, void (%struct.png_struct_def*, i8*, i64)** %13, align 8, !alias.scope !919
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 58
  store void (%struct.png_struct_def*)* @MOZ_PNG_def_flush, void (%struct.png_struct_def*)** %14, align 8, !alias.scope !919
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 8
  %16 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %15, align 8, !alias.scope !919
  %17 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %16, null
  br i1 %17, label %23, label %18

; <label>:18:                                     ; preds = %7
  store void (%struct.png_struct_def*, i8*, i64)* null, void (%struct.png_struct_def*, i8*, i64)** %15, align 8, !alias.scope !919
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %5, i64 0, i32 5
  %20 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %19, align 8, !alias.scope !922
  %21 = icmp eq void (%struct.png_struct_def*, i8*)* %20, null
  br i1 %21, label %23, label %22

; <label>:22:                                     ; preds = %18
  tail call void %20(%struct.png_struct_def* nonnull %5, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.99, i64 0, i64 0)) #18
  br label %23

; <label>:23:                                     ; preds = %22, %18, %7, %4
  ret %struct.png_struct_def* %5
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_rows(%struct.png_struct_def* noalias, i8** nocapture readonly, i32) local_unnamed_addr #4 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne i32 %2, 0
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %3, %7
  %8 = phi i8** [ %12, %7 ], [ %1, %3 ]
  %9 = phi i32 [ %11, %7 ], [ 0, %3 ]
  %10 = load i8*, i8** %8, align 8
  tail call void @MOZ_PNG_write_row(%struct.png_struct_def* nonnull %0, i8* %10)
  %11 = add nuw i32 %9, 1
  %12 = getelementptr inbounds i8*, i8** %8, i64 1
  %13 = icmp eq i32 %11, %2
  br i1 %13, label %14, label %7

; <label>:14:                                     ; preds = %7, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_row(%struct.png_struct_def* noalias, i8* nocapture readonly) local_unnamed_addr #4 {
  %3 = alloca %struct.png_row_info_struct, align 8
  %4 = bitcast %struct.png_row_info_struct* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #18
  %5 = icmp eq %struct.png_struct_def* %0, null
  br i1 %5, label %107, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %59

; <label>:10:                                     ; preds = %6
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %12 = load i8, i8* %11, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %59

; <label>:14:                                     ; preds = %10
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 1024
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %14
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.186, i64 0, i64 0)) #19
  unreachable

; <label>:20:                                     ; preds = %14
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 53
  %22 = load i8, i8* %21, align 2, !alias.scope !925
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 50
  %25 = load i8, i8* %24, align 1, !alias.scope !925
  %26 = zext i8 %25 to i32
  %27 = mul nuw nsw i32 %26, %23
  %28 = icmp ugt i32 %27, 7
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %30 = load i32, i32* %29, align 4, !alias.scope !925
  %31 = zext i32 %30 to i64
  %32 = zext i32 %27 to i64
  br i1 %28, label %33, label %36

; <label>:33:                                     ; preds = %20
  %34 = lshr i64 %32, 3
  %35 = mul nuw nsw i64 %34, %31
  br label %40

; <label>:36:                                     ; preds = %20
  %37 = mul nuw nsw i64 %32, %31
  %38 = add nuw nsw i64 %37, 7
  %39 = lshr i64 %38, 3
  br label %40

; <label>:40:                                     ; preds = %36, %33
  %41 = phi i64 [ %35, %33 ], [ %39, %36 ]
  %42 = add nsw i64 %41, 1
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %44 = load i8, i8* %43, align 4, !alias.scope !925
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 56
  store i8 %44, i8* %45, align 1, !alias.scope !925
  %46 = trunc i32 %27 to i8
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 55
  store i8 %46, i8* %47, align 8, !alias.scope !925
  %48 = icmp eq i64 %42, 0
  br i1 %48, label %52, label %49

; <label>:49:                                     ; preds = %40
  %50 = tail call noalias i8* @malloc(i64 %42) #18
  %51 = icmp eq i8* %50, null
  br i1 %51, label %52, label %53

; <label>:52:                                     ; preds = %49, %40
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:53:                                     ; preds = %49
  %54 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  store i8* %50, i8** %54, align 8, !alias.scope !925
  store i8 0, i8* %50, align 1, !noalias !925
  %55 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %56 = load i32, i32* %55, align 8, !alias.scope !925
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  store i32 %56, i32* %57, align 4, !alias.scope !925
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 30
  store i32 %30, i32* %58, align 8, !alias.scope !925
  br label %59

; <label>:59:                                     ; preds = %53, %10, %6
  %60 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i64 0, i32 2
  store i8 %61, i8* %62, align 8
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 30
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i64 0, i32 0
  store i32 %64, i32* %65, align 8
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 53
  %67 = load i8, i8* %66, align 2
  %68 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i64 0, i32 4
  store i8 %67, i8* %68, align 2
  %69 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 50
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i64 0, i32 3
  store i8 %70, i8* %71, align 1
  %72 = mul i8 %70, %67
  %73 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i64 0, i32 5
  store i8 %72, i8* %73, align 1
  %74 = icmp ugt i8 %72, 7
  %75 = zext i32 %64 to i64
  %76 = zext i8 %72 to i64
  br i1 %74, label %77, label %80

; <label>:77:                                     ; preds = %59
  %78 = lshr i64 %76, 3
  %79 = mul nuw nsw i64 %78, %75
  br label %84

; <label>:80:                                     ; preds = %59
  %81 = mul nuw nsw i64 %76, %75
  %82 = add nuw nsw i64 %81, 7
  %83 = lshr i64 %82, 3
  br label %84

; <label>:84:                                     ; preds = %80, %77
  %85 = phi i64 [ %79, %77 ], [ %83, %80 ]
  %86 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %3, i64 0, i32 1
  store i64 %85, i64* %86, align 8
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %88 = load i8*, i8** %87, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %89, i8* align 1 %1, i64 %85, i1 false)
  %90 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %91 = load i8, i8* %90, align 4
  %92 = icmp eq i8 %72, %91
  br i1 %92, label %93, label %97

; <label>:93:                                     ; preds = %84
  %94 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 56
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %72, %95
  br i1 %96, label %98, label %97

; <label>:97:                                     ; preds = %93, %84
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.187, i64 0, i64 0)) #19
  unreachable

; <label>:98:                                     ; preds = %93
  call void @MOZ_PNG_write_find_filter(%struct.png_struct_def* nonnull %0, %struct.png_row_info_struct* nonnull %3)
  %99 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 69
  %100 = load void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)** %99, align 8
  %101 = icmp eq void (%struct.png_struct_def*, i32, i32)* %100, null
  br i1 %101, label %107, label %102

; <label>:102:                                    ; preds = %98
  %103 = load i32, i32* %7, align 4
  %104 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  tail call void %100(%struct.png_struct_def* nonnull %0, i32 %103, i32 %106) #18
  br label %107

; <label>:107:                                    ; preds = %102, %98, %2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_image(%struct.png_struct_def* noalias, i8** nocapture readonly) local_unnamed_addr #4 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %16, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %16, label %8

; <label>:8:                                      ; preds = %4, %8
  %9 = phi i8** [ %13, %8 ], [ %1, %4 ]
  %10 = phi i32 [ %12, %8 ], [ 0, %4 ]
  %11 = load i8*, i8** %9, align 8
  tail call void @MOZ_PNG_write_row(%struct.png_struct_def* nonnull %0, i8* %11)
  %12 = add nuw i32 %10, 1
  %13 = getelementptr inbounds i8*, i8** %9, i64 1
  %14 = load i32, i32* %5, align 8
  %15 = icmp ult i32 %12, %14
  br i1 %15, label %8, label %16

; <label>:16:                                     ; preds = %8, %4, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_trans(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 53
  %3 = load i8, i8* %2, align 2
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 50
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = mul nuw nsw i32 %7, %4
  %9 = icmp ugt i32 %8, 7
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = zext i32 %8 to i64
  br i1 %9, label %14, label %17

; <label>:14:                                     ; preds = %1
  %15 = lshr i64 %13, 3
  %16 = mul nuw nsw i64 %15, %12
  br label %21

; <label>:17:                                     ; preds = %1
  %18 = mul nuw nsw i64 %13, %12
  %19 = add nuw nsw i64 %18, 7
  %20 = lshr i64 %19, 3
  br label %21

; <label>:21:                                     ; preds = %14, %17
  %22 = phi i64 [ %16, %14 ], [ %20, %17 ]
  %23 = add nsw i64 %22, 1
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %25 = load i8, i8* %24, align 4
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 56
  store i8 %25, i8* %26, align 1
  %27 = trunc i32 %8 to i8
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 55
  store i8 %27, i8* %28, align 8
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %33, label %30

; <label>:30:                                     ; preds = %21
  %31 = tail call noalias i8* @malloc(i64 %23) #18
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %34

; <label>:33:                                     ; preds = %30, %21
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:34:                                     ; preds = %30
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  store i8* %31, i8** %35, align 8
  store i8 0, i8* %31, align 1
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 30
  store i32 %11, i32* %39, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_find_filter(%struct.png_struct_def* noalias, %struct.png_row_info_struct* nocapture readonly) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 1
  tail call void @MOZ_PNG_compress_IDAT(%struct.png_struct_def* %0, i8* %4, i64 %7, i32 0) #18
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %9 = load i32, i32* %8, align 4, !alias.scope !928
  %10 = add i32 %9, 1
  store i32 %10, i32* %8, align 4, !alias.scope !928
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  %12 = load i32, i32* %11, align 4, !alias.scope !928
  %13 = icmp ult i32 %10, %12
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %2
  tail call void @MOZ_PNG_compress_IDAT(%struct.png_struct_def* nonnull %0, i8* null, i64 0, i32 4) #18
  br label %15

; <label>:15:                                     ; preds = %14, %2
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %17 = load i32, i32* %16, align 4, !alias.scope !933
  %18 = add i32 %17, 1
  store i32 %18, i32* %16, align 4, !alias.scope !933
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 59
  %20 = load i32, i32* %19, align 8, !alias.scope !933
  %21 = add i32 %20, -1
  %22 = icmp ult i32 %21, %18
  br i1 %22, label %23, label %32

; <label>:23:                                     ; preds = %15
  %24 = load i32, i32* %8, align 4, !alias.scope !934
  %25 = load i32, i32* %11, align 4, !alias.scope !934
  %26 = icmp ult i32 %24, %25
  br i1 %26, label %27, label %32

; <label>:27:                                     ; preds = %23
  tail call void @MOZ_PNG_compress_IDAT(%struct.png_struct_def* nonnull %0, i8* null, i64 0, i32 2) #18
  store i32 0, i32* %16, align 4, !alias.scope !934
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  %29 = load void (%struct.png_struct_def*)*, void (%struct.png_struct_def*)** %28, align 8, !alias.scope !937
  %30 = icmp eq void (%struct.png_struct_def*)* %29, null
  br i1 %30, label %32, label %31

; <label>:31:                                     ; preds = %27
  tail call void %29(%struct.png_struct_def* nonnull %0) #18
  br label %32

; <label>:32:                                     ; preds = %15, %23, %27, %31
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_flush(%struct.png_struct_def* noalias, i32) local_unnamed_addr #3 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %8, label %4

; <label>:4:                                      ; preds = %2
  %5 = icmp sgt i32 %1, 0
  %6 = select i1 %5, i32 %1, i32 0
  %7 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 59
  store i32 %6, i32* %7, align 8
  br label %8

; <label>:8:                                      ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_flush(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = icmp eq %struct.png_struct_def* %0, null
  br i1 %2, label %15, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  br i1 %8, label %9, label %15

; <label>:9:                                      ; preds = %3
  tail call void @MOZ_PNG_compress_IDAT(%struct.png_struct_def* nonnull %0, i8* null, i64 0, i32 2)
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  %12 = load void (%struct.png_struct_def*)*, void (%struct.png_struct_def*)** %11, align 8, !alias.scope !940
  %13 = icmp eq void (%struct.png_struct_def*)* %12, null
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %9
  tail call void %12(%struct.png_struct_def* nonnull %0) #18
  br label %15

; <label>:15:                                     ; preds = %14, %9, %3, %1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_compress_IDAT(%struct.png_struct_def* noalias, i8*, i64, i32) local_unnamed_addr #4 {
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 13
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 1229209940
  br i1 %8, label %9, label %17

; <label>:9:                                      ; preds = %4
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %11 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %10, i64 0, i32 0
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 1
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 4
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 3
  br label %184

; <label>:17:                                     ; preds = %4
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %19 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %18, align 8
  %20 = icmp eq %struct.png_compression_buffer* %19, null
  br i1 %20, label %21, label %32

; <label>:21:                                     ; preds = %17
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %23 = load i32, i32* %22, align 8
  %24 = zext i32 %23 to i64
  %25 = add nuw nsw i64 %24, 8
  %26 = tail call noalias i8* @malloc(i64 %25) #18
  %27 = icmp eq i8* %26, null
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %21
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i64 0, i64 0)) #22
  unreachable

; <label>:29:                                     ; preds = %21
  %30 = bitcast %struct.png_compression_buffer** %18 to i8**
  store i8* %26, i8** %30, align 8
  %31 = bitcast i8* %26 to %struct.png_compression_buffer**
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %31, align 8
  br label %45

; <label>:32:                                     ; preds = %17
  %33 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %19, i64 0, i32 0
  %34 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %33, align 8, !noalias !943
  %35 = icmp eq %struct.png_compression_buffer* %34, null
  br i1 %35, label %45, label %36

; <label>:36:                                     ; preds = %32
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %33, align 8, !noalias !943
  br label %37

; <label>:37:                                     ; preds = %37, %36
  %38 = phi %struct.png_compression_buffer* [ %34, %36 ], [ %40, %37 ]
  %39 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %38, i64 0, i32 0
  %40 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %39, align 8
  %41 = bitcast %struct.png_compression_buffer* %38 to i8*
  tail call void @free(i8* nonnull %41) #18
  %42 = icmp eq %struct.png_compression_buffer* %40, null
  br i1 %42, label %43, label %37

; <label>:43:                                     ; preds = %37
  %44 = load i32, i32* %6, align 4, !alias.scope !946
  br label %45

; <label>:45:                                     ; preds = %43, %32, %29
  %46 = phi i32 [ %44, %43 ], [ %7, %32 ], [ %7, %29 ]
  %47 = tail call fastcc i64 @png_image_size(%struct.png_struct_def* nonnull %0)
  %48 = icmp eq i32 %46, 0
  br i1 %48, label %68, label %49

; <label>:49:                                     ; preds = %45
  %50 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %50) #18, !noalias !946
  store i8 73, i8* %50, align 16, !noalias !946
  %51 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 1
  store i8 68, i8* %51, align 1, !noalias !946
  %52 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 2
  store i8 65, i8* %52, align 2, !noalias !946
  %53 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 3
  store i8 84, i8* %53, align 1, !noalias !946
  %54 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 4
  store i8 58, i8* %54, align 4, !noalias !946
  %55 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 5
  store i8 32, i8* %55, align 1, !noalias !946
  %56 = lshr i32 %46, 24
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 6
  store i8 %57, i8* %58, align 2, !noalias !946
  %59 = lshr i32 %46, 16
  %60 = trunc i32 %59 to i8
  %61 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 7
  store i8 %60, i8* %61, align 1, !noalias !946
  %62 = lshr i32 %46, 8
  %63 = trunc i32 %62 to i8
  %64 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 8
  store i8 %63, i8* %64, align 8, !noalias !946
  %65 = trunc i32 %46 to i8
  %66 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 9
  store i8 %65, i8* %66, align 1, !noalias !946
  %67 = call i64 @MOZ_PNG_safecat(i8* nonnull %50, i64 64, i64 10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.219, i64 0, i64 0)) #18
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* nonnull %50) #22
  unreachable

; <label>:68:                                     ; preds = %45
  %69 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %70 = load i32, i32* %69, align 4, !alias.scope !946
  %71 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  %72 = load i32, i32* %71, align 8, !alias.scope !946
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %74 = load i32, i32* %73, align 4, !alias.scope !946
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 20
  %76 = load i32, i32* %75, align 8, !alias.scope !946
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %78 = load i32, i32* %77, align 4, !alias.scope !946
  %79 = and i32 %78, 1
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %84, label %81

; <label>:81:                                     ; preds = %68
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 21
  %83 = load i32, i32* %82, align 4, !alias.scope !946
  br label %89

; <label>:84:                                     ; preds = %68
  %85 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %86 = load i8, i8* %85, align 8, !alias.scope !946
  %87 = icmp ne i8 %86, 8
  %88 = zext i1 %87 to i32
  br label %89

; <label>:89:                                     ; preds = %84, %81
  %90 = phi i32 [ %83, %81 ], [ %88, %84 ]
  %91 = icmp ult i64 %47, 16385
  br i1 %91, label %92, label %105

; <label>:92:                                     ; preds = %89
  %93 = add nsw i32 %74, -1
  %94 = shl i32 1, %93
  %95 = add i64 %47, 262
  %96 = zext i32 %94 to i64
  %97 = icmp ugt i64 %95, %96
  br i1 %97, label %105, label %98

; <label>:98:                                     ; preds = %92, %98
  %99 = phi i32 [ %101, %98 ], [ %94, %92 ]
  %100 = phi i32 [ %102, %98 ], [ %74, %92 ]
  %101 = lshr i32 %99, 1
  %102 = add nsw i32 %100, -1
  %103 = zext i32 %101 to i64
  %104 = icmp ugt i64 %95, %103
  br i1 %104, label %105, label %98

; <label>:105:                                    ; preds = %98, %92, %89
  %106 = phi i32 [ %74, %89 ], [ %74, %92 ], [ %102, %98 ]
  %107 = and i32 %78, 2
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %141, label %109

; <label>:109:                                    ; preds = %105
  %110 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 22
  %111 = load i32, i32* %110, align 8, !alias.scope !946
  %112 = icmp eq i32 %111, %70
  br i1 %112, label %113, label %129

; <label>:113:                                    ; preds = %109
  %114 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 23
  %115 = load i32, i32* %114, align 4, !alias.scope !946
  %116 = icmp eq i32 %115, %72
  br i1 %116, label %117, label %129

; <label>:117:                                    ; preds = %113
  %118 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 24
  %119 = load i32, i32* %118, align 8, !alias.scope !946
  %120 = icmp eq i32 %119, %106
  br i1 %120, label %121, label %129

; <label>:121:                                    ; preds = %117
  %122 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 25
  %123 = load i32, i32* %122, align 4, !alias.scope !946
  %124 = icmp eq i32 %123, %76
  br i1 %124, label %125, label %129

; <label>:125:                                    ; preds = %121
  %126 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 26
  %127 = load i32, i32* %126, align 8, !alias.scope !946
  %128 = icmp eq i32 %127, %90
  br i1 %128, label %141, label %129

; <label>:129:                                    ; preds = %125, %121, %117, %113, %109
  %130 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %131 = tail call i32 @MOZ_Z_deflateEnd(%struct.z_stream_s* nonnull %130) #18
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %138, label %133

; <label>:133:                                    ; preds = %129
  %134 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %135 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %134, align 8, !alias.scope !949
  %136 = icmp eq void (%struct.png_struct_def*, i8*)* %135, null
  br i1 %136, label %138, label %137

; <label>:137:                                    ; preds = %133
  tail call void %135(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.224, i64 0, i64 0)) #18
  br label %138

; <label>:138:                                    ; preds = %137, %133, %129
  %139 = load i32, i32* %77, align 4, !alias.scope !946
  %140 = and i32 %139, -3
  store i32 %140, i32* %77, align 4, !alias.scope !946
  br label %141

; <label>:141:                                    ; preds = %138, %125, %105
  %142 = phi i32 [ %78, %125 ], [ %78, %105 ], [ %140, %138 ]
  %143 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14
  %144 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %143, i64 0, i32 0
  store i8* null, i8** %144, align 8, !alias.scope !946
  %145 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 1
  store i32 0, i32* %145, align 8, !alias.scope !946
  %146 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 3
  store i8* null, i8** %146, align 8, !alias.scope !946
  %147 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 4
  store i32 0, i32* %147, align 8, !alias.scope !946
  %148 = and i32 %142, 2
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %156

; <label>:150:                                    ; preds = %141
  %151 = tail call i32 @MOZ_Z_deflateInit2_(%struct.z_stream_s* nonnull %143, i32 %70, i32 %72, i32 %106, i32 %76, i32 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.220, i64 0, i64 0), i32 112) #18
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %159

; <label>:153:                                    ; preds = %150
  %154 = load i32, i32* %77, align 4, !alias.scope !946
  %155 = or i32 %154, 2
  store i32 %155, i32* %77, align 4, !alias.scope !946
  br label %179

; <label>:156:                                    ; preds = %141
  %157 = tail call i32 @MOZ_Z_deflateReset(%struct.z_stream_s* nonnull %143) #18
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %179, label %159

; <label>:159:                                    ; preds = %156, %150
  %160 = phi i32 [ %157, %156 ], [ %151, %150 ]
  %161 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %162 = load i8*, i8** %161, align 8, !alias.scope !952
  %163 = icmp eq i8* %162, null
  br i1 %163, label %164, label %177

; <label>:164:                                    ; preds = %159
  %165 = add i32 %160, 7
  %166 = icmp ult i32 %165, 10
  br i1 %166, label %167, label %174

; <label>:167:                                    ; preds = %164
  %168 = sext i32 %165 to i64
  %169 = getelementptr inbounds [10 x i8*], [10 x i8*]* @switch.table.MOZ_PNG_compress_IDAT.225, i64 0, i64 %168
  %170 = load i8*, i8** %169, align 8
  %171 = sext i32 %165 to i64
  %172 = getelementptr inbounds [10 x i8*], [10 x i8*]* @switch.table.MOZ_PNG_compress_IDAT.225, i64 0, i64 %171
  %173 = load i8*, i8** %172, align 8
  br label %174

; <label>:174:                                    ; preds = %164, %167
  %175 = phi i8* [ %170, %167 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), %164 ]
  %176 = phi i8* [ %173, %167 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), %164 ]
  store i8* %175, i8** %161, align 8, !alias.scope !952
  br label %177

; <label>:177:                                    ; preds = %174, %159
  %178 = phi i8* [ %162, %159 ], [ %176, %174 ]
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* nonnull %178) #19
  unreachable

; <label>:179:                                    ; preds = %156, %153
  store i32 1229209940, i32* %6, align 4, !alias.scope !946
  %180 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %18, align 8
  %181 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %180, i64 0, i32 1, i64 0
  store i8* %181, i8** %146, align 8
  %182 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %183 = load i32, i32* %182, align 8
  store i32 %183, i32* %147, align 8
  br label %184

; <label>:184:                                    ; preds = %9, %179
  %185 = phi i8** [ %16, %9 ], [ %146, %179 ]
  %186 = phi i32* [ %15, %9 ], [ %182, %179 ]
  %187 = phi %struct.png_compression_buffer** [ %14, %9 ], [ %18, %179 ]
  %188 = phi i32* [ %13, %9 ], [ %147, %179 ]
  %189 = phi i32* [ %12, %9 ], [ %145, %179 ]
  %190 = phi i8** [ %11, %9 ], [ %144, %179 ]
  %191 = phi %struct.z_stream_s* [ %10, %9 ], [ %143, %179 ]
  store i8* %1, i8** %190, align 8
  store i32 0, i32* %189, align 8
  %192 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %193 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 97
  %194 = icmp eq i32 %3, 0
  %195 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 95
  br label %196

; <label>:196:                                    ; preds = %277, %184
  %197 = phi i64 [ %2, %184 ], [ %207, %277 ]
  %198 = icmp ult i64 %197, 4294967295
  %199 = select i1 %198, i64 %197, i64 4294967295
  %200 = trunc i64 %199 to i32
  store i32 %200, i32* %189, align 8
  %201 = sub i64 %197, %199
  %202 = icmp eq i64 %201, 0
  %203 = select i1 %202, i32 %3, i32 0
  %204 = tail call i32 @MOZ_Z_deflate(%struct.z_stream_s* nonnull %191, i32 %203) #18
  %205 = load i32, i32* %189, align 8
  %206 = zext i32 %205 to i64
  %207 = add i64 %201, %206
  store i32 0, i32* %189, align 8
  %208 = load i32, i32* %188, align 8
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %272

; <label>:210:                                    ; preds = %196
  %211 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %187, align 8
  %212 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %211, i64 0, i32 1, i64 0
  %213 = load i32, i32* %186, align 8
  %214 = load i32, i32* %192, align 8
  %215 = and i32 %214, 4
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %259

; <label>:217:                                    ; preds = %210
  %218 = load i8, i8* %193, align 8
  %219 = icmp eq i8 %218, 0
  br i1 %219, label %220, label %259

; <label>:220:                                    ; preds = %217
  %221 = tail call fastcc i64 @png_image_size(%struct.png_struct_def* nonnull %0)
  %222 = icmp ult i64 %221, 16385
  br i1 %222, label %223, label %259

; <label>:223:                                    ; preds = %220
  %224 = load i8, i8* %212, align 1
  %225 = zext i8 %224 to i32
  %226 = and i32 %225, 15
  %227 = icmp eq i32 %226, 8
  %228 = and i32 %225, 240
  %229 = icmp ult i32 %228, 113
  %230 = and i1 %227, %229
  br i1 %230, label %231, label %259

; <label>:231:                                    ; preds = %223
  %232 = lshr i32 %225, 4
  %233 = shl i32 128, %232
  %234 = zext i32 %233 to i64
  %235 = icmp ugt i64 %221, %234
  br i1 %235, label %259, label %236

; <label>:236:                                    ; preds = %231, %236
  %237 = phi i32 [ %240, %236 ], [ %232, %231 ]
  %238 = phi i32 [ %239, %236 ], [ %233, %231 ]
  %239 = lshr i32 %238, 1
  %240 = add i32 %237, -1
  %241 = icmp eq i32 %240, 0
  %242 = zext i32 %239 to i64
  %243 = icmp ugt i64 %221, %242
  %244 = or i1 %241, %243
  br i1 %244, label %245, label %236

; <label>:245:                                    ; preds = %236
  %246 = shl i32 %240, 4
  %247 = or i32 %246, 8
  %248 = trunc i32 %247 to i8
  store i8 %248, i8* %212, align 1
  %249 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %211, i64 0, i32 1, i64 1
  %250 = load i8, i8* %249, align 1
  %251 = and i8 %250, -32
  %252 = zext i8 %251 to i32
  %253 = shl i32 %247, 8
  %254 = or i32 %253, %252
  %255 = urem i32 %254, 31
  %256 = trunc i32 %255 to i8
  %257 = or i8 %251, %256
  %258 = xor i8 %257, 31
  store i8 %258, i8* %249, align 1
  br label %259

; <label>:259:                                    ; preds = %245, %231, %223, %220, %217, %210
  %260 = icmp eq i32 %213, 0
  br i1 %260, label %267, label %261

; <label>:261:                                    ; preds = %259
  %262 = load i32, i32* %195, align 4
  %263 = icmp eq i32 %262, 0
  %264 = zext i32 %213 to i64
  br i1 %263, label %265, label %266

; <label>:265:                                    ; preds = %261
  tail call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* nonnull %0, i32 1229209940, i8* nonnull %212, i64 %264)
  br label %267

; <label>:266:                                    ; preds = %261
  tail call void @MOZ_APNG_write_fdAT(%struct.png_struct_def* nonnull %0, i8* nonnull %212, i64 %264)
  br label %267

; <label>:267:                                    ; preds = %259, %265, %266
  %268 = load i32, i32* %192, align 8
  %269 = or i32 %268, 4
  store i32 %269, i32* %192, align 8
  store i8* %212, i8** %185, align 8
  store i32 %213, i32* %188, align 8
  %270 = icmp ne i32 %204, 0
  %271 = or i1 %194, %270
  br i1 %271, label %272, label %277

; <label>:272:                                    ; preds = %267, %196
  %273 = phi i32 [ %213, %267 ], [ %208, %196 ]
  %274 = icmp eq i32 %204, 0
  br i1 %274, label %275, label %281

; <label>:275:                                    ; preds = %272
  %276 = icmp eq i64 %207, 0
  br i1 %276, label %278, label %277

; <label>:277:                                    ; preds = %275, %267
  br label %196

; <label>:278:                                    ; preds = %275
  %279 = icmp eq i32 %3, 4
  br i1 %279, label %280, label %349

; <label>:280:                                    ; preds = %278
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.201, i64 0, i64 0)) #19
  unreachable

; <label>:281:                                    ; preds = %272
  %282 = icmp eq i32 %204, 1
  %283 = icmp eq i32 %3, 4
  %284 = and i1 %283, %282
  br i1 %284, label %285, label %346

; <label>:285:                                    ; preds = %281
  %286 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %187, align 8
  %287 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %286, i64 0, i32 1, i64 0
  %288 = load i32, i32* %186, align 8
  %289 = sub i32 %288, %273
  %290 = load i32, i32* %192, align 8
  %291 = and i32 %290, 4
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %335

; <label>:293:                                    ; preds = %285
  %294 = load i8, i8* %193, align 8
  %295 = icmp eq i8 %294, 0
  br i1 %295, label %296, label %335

; <label>:296:                                    ; preds = %293
  %297 = tail call fastcc i64 @png_image_size(%struct.png_struct_def* nonnull %0)
  %298 = icmp ult i64 %297, 16385
  br i1 %298, label %299, label %335

; <label>:299:                                    ; preds = %296
  %300 = load i8, i8* %287, align 1
  %301 = zext i8 %300 to i32
  %302 = and i32 %301, 15
  %303 = icmp eq i32 %302, 8
  %304 = and i32 %301, 240
  %305 = icmp ult i32 %304, 113
  %306 = and i1 %303, %305
  br i1 %306, label %307, label %335

; <label>:307:                                    ; preds = %299
  %308 = lshr i32 %301, 4
  %309 = shl i32 128, %308
  %310 = zext i32 %309 to i64
  %311 = icmp ugt i64 %297, %310
  br i1 %311, label %335, label %312

; <label>:312:                                    ; preds = %307, %312
  %313 = phi i32 [ %316, %312 ], [ %308, %307 ]
  %314 = phi i32 [ %315, %312 ], [ %309, %307 ]
  %315 = lshr i32 %314, 1
  %316 = add i32 %313, -1
  %317 = icmp eq i32 %316, 0
  %318 = zext i32 %315 to i64
  %319 = icmp ugt i64 %297, %318
  %320 = or i1 %317, %319
  br i1 %320, label %321, label %312

; <label>:321:                                    ; preds = %312
  %322 = shl i32 %316, 4
  %323 = or i32 %322, 8
  %324 = trunc i32 %323 to i8
  store i8 %324, i8* %287, align 1
  %325 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %286, i64 0, i32 1, i64 1
  %326 = load i8, i8* %325, align 1
  %327 = and i8 %326, -32
  %328 = zext i8 %327 to i32
  %329 = shl i32 %323, 8
  %330 = or i32 %329, %328
  %331 = urem i32 %330, 31
  %332 = trunc i32 %331 to i8
  %333 = or i8 %327, %332
  %334 = xor i8 %333, 31
  store i8 %334, i8* %325, align 1
  br label %335

; <label>:335:                                    ; preds = %321, %307, %299, %296, %293, %285
  %336 = icmp eq i32 %289, 0
  br i1 %336, label %343, label %337

; <label>:337:                                    ; preds = %335
  %338 = load i32, i32* %195, align 4
  %339 = icmp eq i32 %338, 0
  %340 = zext i32 %289 to i64
  br i1 %339, label %341, label %342

; <label>:341:                                    ; preds = %337
  tail call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* nonnull %0, i32 1229209940, i8* nonnull %287, i64 %340)
  br label %343

; <label>:342:                                    ; preds = %337
  tail call void @MOZ_APNG_write_fdAT(%struct.png_struct_def* nonnull %0, i8* nonnull %287, i64 %340)
  br label %343

; <label>:343:                                    ; preds = %335, %341, %342
  store i32 0, i32* %188, align 8
  store i8* null, i8** %185, align 8
  %344 = load i32, i32* %192, align 8
  %345 = or i32 %344, 12
  store i32 %345, i32* %192, align 8
  store i32 0, i32* %6, align 4
  br label %349

; <label>:346:                                    ; preds = %281
  tail call void @MOZ_PNG_zstream_error(%struct.png_struct_def* %0, i32 %204)
  %347 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 14, i32 6
  %348 = load i8*, i8** %347, align 8
  tail call void @png_error(%struct.png_struct_def* %0, i8* %348) #19
  unreachable

; <label>:349:                                    ; preds = %343, %278
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_dest_write_str(%struct.png_struct_def**, %struct.png_info_def**) local_unnamed_addr #4 {
  %3 = alloca %struct.png_struct_def, align 8
  %4 = icmp eq %struct.png_struct_def** %0, null
  br i1 %4, label %42, label %5

; <label>:5:                                      ; preds = %2
  %6 = load %struct.png_struct_def*, %struct.png_struct_def** %0, align 8
  %7 = icmp eq %struct.png_struct_def* %6, null
  br i1 %7, label %42, label %8

; <label>:8:                                      ; preds = %5
  %9 = icmp eq %struct.png_info_def** %1, null
  br i1 %9, label %15, label %10

; <label>:10:                                     ; preds = %8
  %11 = load %struct.png_info_def*, %struct.png_info_def** %1, align 8, !noalias !955
  %12 = icmp eq %struct.png_info_def* %11, null
  br i1 %12, label %15, label %13

; <label>:13:                                     ; preds = %10
  %14 = bitcast %struct.png_info_def* %11 to i8*
  store %struct.png_info_def* null, %struct.png_info_def** %1, align 8, !noalias !955
  tail call void @MOZ_PNG_free_data(%struct.png_struct_def* nonnull %6, %struct.png_info_def* nonnull %11, i32 65535, i32 -1) #18
  tail call void @free(i8* nonnull %14) #18
  br label %15

; <label>:15:                                     ; preds = %8, %10, %13
  store %struct.png_struct_def* null, %struct.png_struct_def** %0, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i64 0, i32 11
  %17 = load i32, i32* %16, align 4, !alias.scope !958
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %23, label %20

; <label>:20:                                     ; preds = %15
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i64 0, i32 14
  %22 = tail call i32 @MOZ_Z_deflateEnd(%struct.z_stream_s* nonnull %21) #18
  br label %23

; <label>:23:                                     ; preds = %20, %15
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i64 0, i32 15
  %25 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %24, align 8, !alias.scope !958, !noalias !961
  %26 = icmp eq %struct.png_compression_buffer* %25, null
  br i1 %26, label %34, label %27

; <label>:27:                                     ; preds = %23
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %24, align 8, !alias.scope !958, !noalias !961
  br label %28

; <label>:28:                                     ; preds = %28, %27
  %29 = phi %struct.png_compression_buffer* [ %25, %27 ], [ %31, %28 ]
  %30 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %29, i64 0, i32 0
  %31 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %30, align 8
  %32 = bitcast %struct.png_compression_buffer* %29 to i8*
  tail call void @free(i8* nonnull %32) #18
  %33 = icmp eq %struct.png_compression_buffer* %31, null
  br i1 %33, label %34, label %28

; <label>:34:                                     ; preds = %28, %23
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %6, i64 0, i32 36
  %36 = load i8*, i8** %35, align 8, !alias.scope !958
  %37 = icmp eq i8* %36, null
  br i1 %37, label %39, label %38

; <label>:38:                                     ; preds = %34
  tail call void @free(i8* nonnull %36) #18
  br label %39

; <label>:39:                                     ; preds = %34, %38
  store i8* null, i8** %35, align 8, !alias.scope !958
  %40 = bitcast %struct.png_struct_def* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 984, i8* nonnull %40) #18, !noalias !964
  %41 = bitcast %struct.png_struct_def* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %40, i8* align 8 %41, i64 984, i1 false) #18
  tail call void @free(i8* nonnull %41) #18
  call void @MOZ_PNG_free_jmpbuf(%struct.png_struct_def* nonnull %3) #18
  call void @llvm.lifetime.end.p0i8(i64 984, i8* nonnull %40) #18, !noalias !964
  br label %42

; <label>:42:                                     ; preds = %39, %5, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_filter(%struct.png_struct_def* noalias, i32, i32) local_unnamed_addr #4 {
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %24, label %5

; <label>:5:                                      ; preds = %3
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %7, label %23

; <label>:7:                                      ; preds = %5
  %8 = and i32 %2, 255
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %7
  %11 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  store i8 8, i8* %11, align 8
  br label %24

; <label>:12:                                     ; preds = %7
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %14 = load i32, i32* %13, align 4, !alias.scope !967
  %15 = and i32 %14, 4194304
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

; <label>:17:                                     ; preds = %12
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.188, i64 0, i64 0)) #22
  unreachable

; <label>:18:                                     ; preds = %12
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 5
  %20 = load void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)** %19, align 8, !alias.scope !970
  %21 = icmp eq void (%struct.png_struct_def*, i8*)* %20, null
  br i1 %21, label %24, label %22

; <label>:22:                                     ; preds = %18
  tail call void %20(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.188, i64 0, i64 0)) #18
  br label %24

; <label>:23:                                     ; preds = %5
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.189, i64 0, i64 0)) #19
  unreachable

; <label>:24:                                     ; preds = %22, %18, %10, %3
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_set_write_status_fn(%struct.png_struct_def* noalias, void (%struct.png_struct_def*, i32, i32)*) local_unnamed_addr #3 {
  %3 = icmp eq %struct.png_struct_def* %0, null
  br i1 %3, label %6, label %4

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 69
  store void (%struct.png_struct_def*, i32, i32)* %1, void (%struct.png_struct_def*, i32, i32)** %5, align 8
  br label %6

; <label>:6:                                      ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_write_frame_head(%struct.png_struct_def*, %struct.png_info_def*, i8** nocapture readnone, i32, i32, i32, i32, i16 zeroext, i16 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #4 {
  %12 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 131072
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %11
  tail call void @png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.190, i64 0, i64 0)) #19
  unreachable

; <label>:17:                                     ; preds = %11
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  store i8 0, i8* %19, align 1
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, -5
  store i32 %22, i32* %20, align 8
  tail call void @MOZ_APNG_write_reinit(%struct.png_struct_def* %0, %struct.png_info_def* nonnull %1, i32 %3, i32 %4)
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 87
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

; <label>:27:                                     ; preds = %17
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 95
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %32, label %31

; <label>:31:                                     ; preds = %27, %17
  tail call void @MOZ_APNG_write_fcTL(%struct.png_struct_def* nonnull %0, i32 %3, i32 %4, i32 %5, i32 %6, i16 zeroext %7, i16 zeroext %8, i8 zeroext %9, i8 zeroext %10)
  br label %32

; <label>:32:                                     ; preds = %27, %31
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_APNG_write_reset(%struct.png_struct_def* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, -5
  store i32 %6, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_write_reinit(%struct.png_struct_def*, %struct.png_info_def*, i32, i32) local_unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 95
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89
  %9 = load i32, i32* %8, align 8
  br i1 %7, label %10, label %17

; <label>:10:                                     ; preds = %4
  %11 = icmp eq i32 %9, %2
  br i1 %11, label %12, label %16

; <label>:12:                                     ; preds = %10
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 90
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, %3
  br i1 %15, label %19, label %16

; <label>:16:                                     ; preds = %12, %10
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.207, i64 0, i64 0)) #19
  unreachable

; <label>:17:                                     ; preds = %4
  %18 = icmp ult i32 %9, %2
  br i1 %18, label %23, label %19

; <label>:19:                                     ; preds = %12, %17
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 90
  %21 = load i32, i32* %20, align 4
  %22 = icmp ult i32 %21, %3
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %19, %17
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.208, i64 0, i64 0)) #19
  unreachable

; <label>:24:                                     ; preds = %19
  %25 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 7
  %26 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 8
  %27 = icmp eq %struct.png_info_def* %1, null
  br i1 %27, label %28, label %30

; <label>:28:                                     ; preds = %24
  %29 = zext i32 %2 to i64
  br label %77

; <label>:30:                                     ; preds = %24
  %31 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 10
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 9
  %35 = load i8, i8* %34, align 2
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 11
  %38 = load i8, i8* %37, align 8
  %39 = zext i8 %38 to i32
  %40 = load i8, i8* %26, align 1
  %41 = zext i8 %40 to i32
  %42 = load i8, i8* %25, align 4
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 0
  store i32 %2, i32* %44, align 8, !alias.scope !973, !noalias !976
  %45 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 1
  store i32 %3, i32* %45, align 4, !alias.scope !973, !noalias !976
  tail call void @MOZ_PNG_ck_IHDR(%struct.png_struct_def* nonnull %0, i32 %2, i32 %3, i32 %43, i32 %41, i32 %39, i32 %36, i32 %33) #18
  %46 = load i8, i8* %26, align 1, !alias.scope !973, !noalias !976
  %47 = icmp eq i8 %46, 3
  br i1 %47, label %48, label %50

; <label>:48:                                     ; preds = %30
  %49 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  store i8 1, i8* %49, align 1, !alias.scope !973, !noalias !976
  br label %58

; <label>:50:                                     ; preds = %30
  %51 = and i8 %46, 2
  %52 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 12
  %53 = or i8 %51, 1
  store i8 %53, i8* %52, align 1, !alias.scope !973, !noalias !976
  %54 = and i8 %46, 4
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %50
  %57 = add nuw nsw i8 %53, 1
  store i8 %57, i8* %52, align 1, !alias.scope !973, !noalias !976
  br label %58

; <label>:58:                                     ; preds = %56, %50, %48
  %59 = phi i8 [ 1, %48 ], [ %53, %50 ], [ %57, %56 ]
  %60 = load i8, i8* %25, align 4, !alias.scope !973, !noalias !976
  %61 = mul i8 %60, %59
  %62 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 13
  store i8 %61, i8* %62, align 2, !alias.scope !973, !noalias !976
  %63 = icmp ugt i8 %61, 7
  %64 = zext i32 %2 to i64
  %65 = zext i8 %61 to i64
  br i1 %63, label %66, label %69

; <label>:66:                                     ; preds = %58
  %67 = lshr i64 %65, 3
  %68 = mul nuw nsw i64 %67, %64
  br label %73

; <label>:69:                                     ; preds = %58
  %70 = mul nuw nsw i64 %65, %64
  %71 = add nuw nsw i64 %70, 7
  %72 = lshr i64 %71, 3
  br label %73

; <label>:73:                                     ; preds = %69, %66
  %74 = phi i64 [ %68, %66 ], [ %72, %69 ]
  %75 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 3
  store i64 %74, i64* %75, align 8, !alias.scope !973, !noalias !976
  %76 = getelementptr inbounds %struct.png_info_def, %struct.png_info_def* %1, i64 0, i32 23
  store i32 1, i32* %76, align 8, !alias.scope !973, !noalias !976
  br label %77

; <label>:77:                                     ; preds = %28, %73
  %78 = phi i64 [ %29, %28 ], [ %64, %73 ]
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  store i32 %2, i32* %79, align 4
  %80 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  store i32 %3, i32* %80, align 8
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %82 = load i8, i8* %81, align 4
  %83 = icmp ugt i8 %82, 7
  %84 = zext i8 %82 to i64
  br i1 %83, label %85, label %88

; <label>:85:                                     ; preds = %77
  %86 = lshr i64 %84, 3
  %87 = mul nuw nsw i64 %86, %78
  br label %92

; <label>:88:                                     ; preds = %77
  %89 = mul nuw nsw i64 %78, %84
  %90 = add nuw nsw i64 %89, 7
  %91 = lshr i64 %90, 3
  br label %92

; <label>:92:                                     ; preds = %88, %85
  %93 = phi i64 [ %87, %85 ], [ %91, %88 ]
  %94 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 30
  store i32 %2, i32* %95, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_write_fcTL(%struct.png_struct_def*, i32, i32, i32, i32, i16 zeroext, i16 zeroext, i8 zeroext, i8 zeroext) local_unnamed_addr #4 {
  %10 = alloca [26 x i8], align 16
  %11 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 26, i8* nonnull %11) #18
  %12 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 95
  %13 = load i32, i32* %12, align 4
  %14 = icmp ne i32 %13, 0
  %15 = or i32 %4, %3
  %16 = icmp eq i32 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %19, label %18

; <label>:18:                                     ; preds = %9
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.206, i64 0, i64 0)) #19
  unreachable

; <label>:19:                                     ; preds = %9
  %20 = icmp eq i32 %13, 0
  br i1 %20, label %21, label %30

; <label>:21:                                     ; preds = %19
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 89
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, %1
  br i1 %24, label %25, label %29

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 90
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, %2
  br i1 %28, label %30, label %29

; <label>:29:                                     ; preds = %25, %21
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.207, i64 0, i64 0)) #19
  unreachable

; <label>:30:                                     ; preds = %25, %19
  tail call void @MOZ_APNG_ensure_fcTL_is_valid(%struct.png_struct_def* nonnull %0, i32 %1, i32 %2, i32 %3, i32 %4, i16 zeroext undef, i16 zeroext undef, i8 zeroext %7, i8 zeroext %8)
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 88
  %32 = load i32, i32* %31, align 4
  %33 = lshr i32 %32, 24
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %11, align 16
  %35 = lshr i32 %32, 16
  %36 = trunc i32 %35 to i8
  %37 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 1
  store i8 %36, i8* %37, align 1
  %38 = lshr i32 %32, 8
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 2
  store i8 %39, i8* %40, align 2
  %41 = trunc i32 %32 to i8
  %42 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 3
  store i8 %41, i8* %42, align 1
  %43 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 4
  %44 = lshr i32 %1, 24
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %43, align 4
  %46 = lshr i32 %1, 16
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 5
  store i8 %47, i8* %48, align 1
  %49 = lshr i32 %1, 8
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 6
  store i8 %50, i8* %51, align 2
  %52 = trunc i32 %1 to i8
  %53 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 7
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 8
  %55 = lshr i32 %2, 24
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %54, align 8
  %57 = lshr i32 %2, 16
  %58 = trunc i32 %57 to i8
  %59 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 9
  store i8 %58, i8* %59, align 1
  %60 = lshr i32 %2, 8
  %61 = trunc i32 %60 to i8
  %62 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 10
  store i8 %61, i8* %62, align 2
  %63 = trunc i32 %2 to i8
  %64 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 11
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 12
  %66 = lshr i32 %3, 24
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %65, align 4
  %68 = lshr i32 %3, 16
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 13
  store i8 %69, i8* %70, align 1
  %71 = lshr i32 %3, 8
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 14
  store i8 %72, i8* %73, align 2
  %74 = trunc i32 %3 to i8
  %75 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 15
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 16
  %77 = lshr i32 %4, 24
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %76, align 16
  %79 = lshr i32 %4, 16
  %80 = trunc i32 %79 to i8
  %81 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 17
  store i8 %80, i8* %81, align 1
  %82 = lshr i32 %4, 8
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 18
  store i8 %83, i8* %84, align 2
  %85 = trunc i32 %4 to i8
  %86 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 19
  store i8 %85, i8* %86, align 1
  %87 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 20
  %88 = lshr i16 %5, 8
  %89 = trunc i16 %88 to i8
  store i8 %89, i8* %87, align 4
  %90 = trunc i16 %5 to i8
  %91 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 21
  store i8 %90, i8* %91, align 1
  %92 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 22
  %93 = lshr i16 %6, 8
  %94 = trunc i16 %93 to i8
  store i8 %94, i8* %92, align 2
  %95 = trunc i16 %6 to i8
  %96 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 23
  store i8 %95, i8* %96, align 1
  %97 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 24
  store i8 %7, i8* %97, align 8
  %98 = getelementptr inbounds [26 x i8], [26 x i8]* %10, i64 0, i64 25
  store i8 %8, i8* %98, align 1
  call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* nonnull %0, i32 1717785676, i8* nonnull %11, i64 26)
  %99 = load i32, i32* %31, align 4
  %100 = add i32 %99, 1
  store i32 %100, i32* %31, align 4
  call void @llvm.lifetime.end.p0i8(i64 26, i8* nonnull %11) #18
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_APNG_write_frame_tail(%struct.png_struct_def* nocapture, %struct.png_info_def* nocapture readnone) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 95
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  store i32 %5, i32* %3, align 4
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_save_uint_32(i8* nocapture, i32) local_unnamed_addr #3 {
  %3 = lshr i32 %1, 24
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %0, align 1
  %5 = lshr i32 %1, 16
  %6 = trunc i32 %5 to i8
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %6, i8* %7, align 1
  %8 = lshr i32 %1, 8
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %9, i8* %10, align 1
  %11 = trunc i32 %1 to i8
  %12 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %11, i8* %12, align 1
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define hidden void @MOZ_PNG_save_uint_16(i8* nocapture, i32) local_unnamed_addr #3 {
  %3 = lshr i32 %1, 8
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %0, align 1
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %5, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_chunk_start(%struct.png_struct_def* noalias, i8* nocapture readonly, i32) local_unnamed_addr #4 {
  %4 = alloca [8 x i8], align 1
  %5 = load i8, i8* %1, align 1
  %6 = zext i8 %5 to i32
  %7 = shl nuw i32 %6, 24
  %8 = getelementptr inbounds i8, i8* %1, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = shl nuw nsw i32 %10, 16
  %12 = or i32 %11, %7
  %13 = getelementptr inbounds i8, i8* %1, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 8
  %17 = or i32 %12, %16
  %18 = getelementptr inbounds i8, i8* %1, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = or i32 %17, %20
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #18, !noalias !978
  %23 = icmp eq %struct.png_struct_def* %0, null
  br i1 %23, label %62, label %24

; <label>:24:                                     ; preds = %3
  %25 = lshr i32 %2, 24
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %22, align 1, !noalias !978
  %27 = lshr i32 %2, 16
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 1
  store i8 %28, i8* %29, align 1, !noalias !978
  %30 = lshr i32 %2, 8
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 2
  store i8 %31, i8* %32, align 1, !noalias !978
  %33 = trunc i32 %2 to i8
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 3
  store i8 %33, i8* %34, align 1, !noalias !978
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 4
  store i8 %5, i8* %35, align 1, !noalias !978
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 5
  store i8 %9, i8* %36, align 1, !noalias !978
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 6
  store i8 %14, i8* %37, align 1, !noalias !978
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %4, i64 0, i64 7
  store i8 %19, i8* %38, align 1, !noalias !978
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %40 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %39, align 8, !alias.scope !981
  %41 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %40, null
  br i1 %41, label %42, label %43

; <label>:42:                                     ; preds = %24
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:43:                                     ; preds = %24
  call void %40(%struct.png_struct_def* nonnull %0, i8* nonnull %22, i64 8) #18
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  store i32 %21, i32* %44, align 8, !alias.scope !978
  %45 = call i64 @MOZ_Z_crc32(i64 0, i8* null, i32 0) #18, !noalias !984
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %46, i32* %47, align 4, !alias.scope !987
  %48 = load i32, i32* %44, align 8, !alias.scope !988
  %49 = and i32 %48, 536870912
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %52 = load i32, i32* %51, align 4, !alias.scope !988
  %53 = and i32 %52, 768
  %54 = icmp ne i32 %53, 768
  %55 = and i32 %52, 2048
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %50, i1 %56, i1 %54
  br i1 %57, label %58, label %62

; <label>:58:                                     ; preds = %43
  %59 = and i64 %45, 4294967295
  %60 = call i64 @MOZ_Z_crc32(i64 %59, i8* nonnull %35, i32 4) #18, !noalias !988
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %47, align 4, !alias.scope !988
  br label %62

; <label>:62:                                     ; preds = %58, %43, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #18, !noalias !978
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_chunk_data(%struct.png_struct_def* noalias, i8*, i64) local_unnamed_addr #4 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne i8* %1, null
  %6 = and i1 %4, %5
  %7 = icmp ne i64 %2, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %44

; <label>:9:                                      ; preds = %3
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %11 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %10, align 8, !alias.scope !991
  %12 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %11, null
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %9
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:14:                                     ; preds = %9
  tail call void %11(%struct.png_struct_def* nonnull %0, i8* nonnull %1, i64 %2) #18
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %16 = load i32, i32* %15, align 8, !alias.scope !994
  %17 = and i32 %16, 536870912
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %20 = load i32, i32* %19, align 4, !alias.scope !994
  %21 = and i32 %20, 768
  %22 = icmp ne i32 %21, 768
  %23 = and i32 %20, 2048
  %24 = icmp eq i32 %23, 0
  %25 = select i1 %18, i1 %24, i1 %22
  br i1 %25, label %26, label %44

; <label>:26:                                     ; preds = %14
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %28 = load i32, i32* %27, align 4, !alias.scope !994
  %29 = zext i32 %28 to i64
  br label %30

; <label>:30:                                     ; preds = %30, %26
  %31 = phi i64 [ %2, %26 ], [ %40, %30 ]
  %32 = phi i64 [ %29, %26 ], [ %37, %30 ]
  %33 = phi i8* [ %1, %26 ], [ %39, %30 ]
  %34 = trunc i64 %31 to i32
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i32 -1, i32 %34
  %37 = tail call i64 @MOZ_Z_crc32(i64 %32, i8* %33, i32 %36) #18, !noalias !994
  %38 = zext i32 %36 to i64
  %39 = getelementptr inbounds i8, i8* %33, i64 %38
  %40 = sub i64 %31, %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %30

; <label>:42:                                     ; preds = %30
  %43 = trunc i64 %37 to i32
  store i32 %43, i32* %27, align 4, !alias.scope !994
  br label %44

; <label>:44:                                     ; preds = %42, %14, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_chunk_end(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = alloca [4 x i8], align 1
  %3 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #18
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %23, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 24
  %9 = trunc i32 %8 to i8
  store i8 %9, i8* %3, align 1
  %10 = lshr i32 %7, 16
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 1
  store i8 %11, i8* %12, align 1
  %13 = lshr i32 %7, 8
  %14 = trunc i32 %13 to i8
  %15 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 2
  store i8 %14, i8* %15, align 1
  %16 = trunc i32 %7 to i8
  %17 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 3
  store i8 %16, i8* %17, align 1
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %19 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %18, align 8, !alias.scope !997
  %20 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %19, null
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %5
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:22:                                     ; preds = %5
  call void %19(%struct.png_struct_def* nonnull %0, i8* nonnull %3, i64 4) #18
  br label %23

; <label>:23:                                     ; preds = %1, %22
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_chunk(%struct.png_struct_def* noalias, i8* nocapture readonly, i8*, i64) local_unnamed_addr #4 {
  %5 = load i8, i8* %1, align 1
  %6 = zext i8 %5 to i32
  %7 = shl nuw i32 %6, 24
  %8 = getelementptr inbounds i8, i8* %1, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = shl nuw nsw i32 %10, 16
  %12 = or i32 %11, %7
  %13 = getelementptr inbounds i8, i8* %1, i64 2
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 8
  %17 = or i32 %12, %16
  %18 = getelementptr inbounds i8, i8* %1, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = or i32 %17, %20
  tail call fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* %0, i32 %21, i8* %2, i64 %3)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @MOZ_PNG_write_complete_chunk(%struct.png_struct_def* noalias, i32, i8*, i64) unnamed_addr #4 {
  %5 = alloca [8 x i8], align 1
  %6 = alloca [4 x i8], align 1
  %7 = icmp eq %struct.png_struct_def* %0, null
  br i1 %7, label %111, label %8

; <label>:8:                                      ; preds = %4
  %9 = icmp ugt i64 %3, 2147483647
  br i1 %9, label %10, label %11

; <label>:10:                                     ; preds = %8
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.223, i64 0, i64 0)) #19
  unreachable

; <label>:11:                                     ; preds = %8
  %12 = trunc i64 %3 to i32
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #18, !noalias !1000
  %14 = lshr i32 %12, 24
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %13, align 1, !noalias !1000
  %16 = lshr i32 %12, 16
  %17 = trunc i32 %16 to i8
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  store i8 %17, i8* %18, align 1, !noalias !1000
  %19 = lshr i32 %12, 8
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  store i8 %20, i8* %21, align 1, !noalias !1000
  %22 = trunc i64 %3 to i8
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  store i8 %22, i8* %23, align 1, !noalias !1000
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  %25 = lshr i32 %1, 24
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %24, align 1, !noalias !1000
  %27 = lshr i32 %1, 16
  %28 = trunc i32 %27 to i8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 5
  store i8 %28, i8* %29, align 1, !noalias !1000
  %30 = lshr i32 %1, 8
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 6
  store i8 %31, i8* %32, align 1, !noalias !1000
  %33 = trunc i32 %1 to i8
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 7
  store i8 %33, i8* %34, align 1, !noalias !1000
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %36 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %35, align 8, !alias.scope !1003
  %37 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %36, null
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %11
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:39:                                     ; preds = %11
  call void %36(%struct.png_struct_def* nonnull %0, i8* nonnull %13, i64 8) #18
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  store i32 %1, i32* %40, align 8, !alias.scope !1000
  %41 = call i64 @MOZ_Z_crc32(i64 0, i8* null, i32 0) #18, !noalias !1006
  %42 = trunc i64 %41 to i32
  %43 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %42, i32* %43, align 4, !alias.scope !1009
  %44 = load i32, i32* %40, align 8, !alias.scope !1010
  %45 = and i32 %44, 536870912
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %48 = load i32, i32* %47, align 4, !alias.scope !1010
  %49 = and i32 %48, 768
  %50 = icmp ne i32 %49, 768
  %51 = and i32 %48, 2048
  %52 = icmp eq i32 %51, 0
  %53 = select i1 %46, i1 %52, i1 %50
  br i1 %53, label %54, label %58

; <label>:54:                                     ; preds = %39
  %55 = and i64 %41, 4294967295
  %56 = call i64 @MOZ_Z_crc32(i64 %55, i8* nonnull %24, i32 4) #18, !noalias !1010
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %43, align 4, !alias.scope !1010
  br label %58

; <label>:58:                                     ; preds = %54, %39
  %59 = phi i32 [ %57, %54 ], [ %42, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #18, !noalias !1000
  %60 = icmp ne i8* %2, null
  %61 = icmp ne i64 %3, 0
  %62 = and i1 %60, %61
  br i1 %62, label %63, label %94

; <label>:63:                                     ; preds = %58
  %64 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %35, align 8, !alias.scope !1013
  %65 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %64, null
  br i1 %65, label %66, label %67

; <label>:66:                                     ; preds = %63
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:67:                                     ; preds = %63
  call void %64(%struct.png_struct_def* nonnull %0, i8* nonnull %2, i64 %3) #18
  %68 = load i32, i32* %40, align 8, !alias.scope !1018
  %69 = and i32 %68, 536870912
  %70 = icmp eq i32 %69, 0
  %71 = load i32, i32* %47, align 4, !alias.scope !1018
  %72 = and i32 %71, 768
  %73 = icmp ne i32 %72, 768
  %74 = and i32 %71, 2048
  %75 = icmp eq i32 %74, 0
  %76 = select i1 %70, i1 %75, i1 %73
  %77 = load i32, i32* %43, align 4
  br i1 %76, label %78, label %94

; <label>:78:                                     ; preds = %67
  %79 = zext i32 %77 to i64
  br label %80

; <label>:80:                                     ; preds = %80, %78
  %81 = phi i64 [ %3, %78 ], [ %90, %80 ]
  %82 = phi i64 [ %79, %78 ], [ %87, %80 ]
  %83 = phi i8* [ %2, %78 ], [ %89, %80 ]
  %84 = trunc i64 %81 to i32
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i32 -1, i32 %84
  %87 = call i64 @MOZ_Z_crc32(i64 %82, i8* %83, i32 %86) #18, !noalias !1021
  %88 = zext i32 %86 to i64
  %89 = getelementptr inbounds i8, i8* %83, i64 %88
  %90 = sub i64 %81, %88
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %80

; <label>:92:                                     ; preds = %80
  %93 = trunc i64 %87 to i32
  store i32 %93, i32* %43, align 4, !alias.scope !1018
  br label %94

; <label>:94:                                     ; preds = %67, %92, %58
  %95 = phi i32 [ %93, %92 ], [ %59, %58 ], [ %77, %67 ]
  %96 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %96) #18, !noalias !1022
  %97 = lshr i32 %95, 24
  %98 = trunc i32 %97 to i8
  store i8 %98, i8* %96, align 1, !noalias !1022
  %99 = lshr i32 %95, 16
  %100 = trunc i32 %99 to i8
  %101 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 1
  store i8 %100, i8* %101, align 1, !noalias !1022
  %102 = lshr i32 %95, 8
  %103 = trunc i32 %102 to i8
  %104 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 2
  store i8 %103, i8* %104, align 1, !noalias !1022
  %105 = trunc i32 %95 to i8
  %106 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  store i8 %105, i8* %106, align 1, !noalias !1022
  %107 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %35, align 8, !alias.scope !1025
  %108 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %107, null
  br i1 %108, label %109, label %110

; <label>:109:                                    ; preds = %94
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:110:                                    ; preds = %94
  call void %107(%struct.png_struct_def* nonnull %0, i8* nonnull %96, i64 4) #18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #18, !noalias !1022
  br label %111

; <label>:111:                                    ; preds = %4, %110
  ret void
}

; Function Attrs: norecurse nounwind readonly sspstrong uwtable
define internal fastcc i64 @png_image_size(%struct.png_struct_def* noalias nocapture readonly) unnamed_addr #12 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 28
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, 32768
  %7 = icmp ult i32 %3, 32768
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %48

; <label>:9:                                      ; preds = %1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %11 = load i8, i8* %10, align 2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %44, label %13

; <label>:13:                                     ; preds = %9
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %17 = load i8, i8* %16, align 4
  %18 = icmp ugt i8 %17, 7
  %19 = zext i8 %17 to i64
  %20 = lshr i64 %19, 3
  %21 = add i32 %15, 7
  %22 = lshr i32 %21, 3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %39, label %24

; <label>:24:                                     ; preds = %13
  %25 = zext i32 %22 to i64
  br i1 %18, label %26, label %28

; <label>:26:                                     ; preds = %24
  %27 = mul nuw nsw i64 %20, %25
  br label %32

; <label>:28:                                     ; preds = %24
  %29 = mul nuw nsw i64 %25, %19
  %30 = add nuw nsw i64 %29, 7
  %31 = lshr i64 %30, 3
  br label %32

; <label>:32:                                     ; preds = %28, %26
  %33 = phi i64 [ %27, %26 ], [ %31, %28 ]
  %34 = add nsw i64 %33, 1
  %35 = add i32 %3, 7
  %36 = lshr i32 %35, 3
  %37 = zext i32 %36 to i64
  %38 = mul i64 %34, %37
  br label %39

; <label>:39:                                     ; preds = %13, %32
  %40 = phi i64 [ %38, %32 ], [ 0, %13 ]
  %41 = add i32 %15, 3
  %42 = lshr i32 %41, 3
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %66, label %50

; <label>:44:                                     ; preds = %9
  %45 = add i64 %5, 1
  %46 = zext i32 %3 to i64
  %47 = mul i64 %45, %46
  br label %48

; <label>:48:                                     ; preds = %149, %160, %1, %44
  %49 = phi i64 [ %47, %44 ], [ 4294967295, %1 ], [ %166, %160 ], [ %150, %149 ]
  ret i64 %49

; <label>:50:                                     ; preds = %39
  %51 = zext i32 %42 to i64
  br i1 %18, label %56, label %52

; <label>:52:                                     ; preds = %50
  %53 = mul nuw nsw i64 %51, %19
  %54 = add nuw nsw i64 %53, 7
  %55 = lshr i64 %54, 3
  br label %58

; <label>:56:                                     ; preds = %50
  %57 = mul nuw nsw i64 %20, %51
  br label %58

; <label>:58:                                     ; preds = %56, %52
  %59 = phi i64 [ %57, %56 ], [ %55, %52 ]
  %60 = add nsw i64 %59, 1
  %61 = add i32 %3, 7
  %62 = lshr i32 %61, 3
  %63 = zext i32 %62 to i64
  %64 = mul i64 %60, %63
  %65 = add i64 %64, %40
  br label %66

; <label>:66:                                     ; preds = %58, %39
  %67 = phi i64 [ %65, %58 ], [ %40, %39 ]
  %68 = add i32 %15, 3
  %69 = lshr i32 %68, 2
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %87, label %71

; <label>:71:                                     ; preds = %66
  %72 = zext i32 %69 to i64
  br i1 %18, label %77, label %73

; <label>:73:                                     ; preds = %71
  %74 = mul nuw nsw i64 %72, %19
  %75 = add nuw nsw i64 %74, 7
  %76 = lshr i64 %75, 3
  br label %79

; <label>:77:                                     ; preds = %71
  %78 = mul nuw nsw i64 %20, %72
  br label %79

; <label>:79:                                     ; preds = %77, %73
  %80 = phi i64 [ %78, %77 ], [ %76, %73 ]
  %81 = add nsw i64 %80, 1
  %82 = add i32 %3, 3
  %83 = lshr i32 %82, 3
  %84 = zext i32 %83 to i64
  %85 = mul i64 %81, %84
  %86 = add i64 %85, %67
  br label %87

; <label>:87:                                     ; preds = %79, %66
  %88 = phi i64 [ %86, %79 ], [ %67, %66 ]
  %89 = add i32 %15, 1
  %90 = lshr i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %108, label %92

; <label>:92:                                     ; preds = %87
  %93 = zext i32 %90 to i64
  br i1 %18, label %98, label %94

; <label>:94:                                     ; preds = %92
  %95 = mul nuw nsw i64 %93, %19
  %96 = add nuw nsw i64 %95, 7
  %97 = lshr i64 %96, 3
  br label %100

; <label>:98:                                     ; preds = %92
  %99 = mul nuw nsw i64 %20, %93
  br label %100

; <label>:100:                                    ; preds = %98, %94
  %101 = phi i64 [ %99, %98 ], [ %97, %94 ]
  %102 = add nsw i64 %101, 1
  %103 = add i32 %3, 3
  %104 = lshr i32 %103, 2
  %105 = zext i32 %104 to i64
  %106 = mul i64 %102, %105
  %107 = add i64 %106, %88
  br label %108

; <label>:108:                                    ; preds = %100, %87
  %109 = phi i64 [ %107, %100 ], [ %88, %87 ]
  %110 = add i32 %15, 1
  %111 = lshr i32 %110, 1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %129, label %113

; <label>:113:                                    ; preds = %108
  %114 = zext i32 %111 to i64
  br i1 %18, label %119, label %115

; <label>:115:                                    ; preds = %113
  %116 = mul nuw nsw i64 %114, %19
  %117 = add nuw nsw i64 %116, 7
  %118 = lshr i64 %117, 3
  br label %121

; <label>:119:                                    ; preds = %113
  %120 = mul nuw nsw i64 %20, %114
  br label %121

; <label>:121:                                    ; preds = %119, %115
  %122 = phi i64 [ %120, %119 ], [ %118, %115 ]
  %123 = add nsw i64 %122, 1
  %124 = add i32 %3, 1
  %125 = lshr i32 %124, 2
  %126 = zext i32 %125 to i64
  %127 = mul i64 %123, %126
  %128 = add i64 %127, %109
  br label %129

; <label>:129:                                    ; preds = %121, %108
  %130 = phi i64 [ %128, %121 ], [ %109, %108 ]
  %131 = lshr i32 %15, 1
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %149, label %133

; <label>:133:                                    ; preds = %129
  %134 = zext i32 %131 to i64
  br i1 %18, label %139, label %135

; <label>:135:                                    ; preds = %133
  %136 = mul nuw nsw i64 %134, %19
  %137 = add nuw nsw i64 %136, 7
  %138 = lshr i64 %137, 3
  br label %141

; <label>:139:                                    ; preds = %133
  %140 = mul nuw nsw i64 %20, %134
  br label %141

; <label>:141:                                    ; preds = %139, %135
  %142 = phi i64 [ %140, %139 ], [ %138, %135 ]
  %143 = add nsw i64 %142, 1
  %144 = add i32 %3, 1
  %145 = lshr i32 %144, 1
  %146 = zext i32 %145 to i64
  %147 = mul i64 %143, %146
  %148 = add i64 %147, %130
  br label %149

; <label>:149:                                    ; preds = %141, %129
  %150 = phi i64 [ %148, %141 ], [ %130, %129 ]
  %151 = icmp eq i32 %15, 0
  br i1 %151, label %48, label %152

; <label>:152:                                    ; preds = %149
  %153 = zext i32 %15 to i64
  br i1 %18, label %158, label %154

; <label>:154:                                    ; preds = %152
  %155 = mul nuw nsw i64 %153, %19
  %156 = add nuw nsw i64 %155, 7
  %157 = lshr i64 %156, 3
  br label %160

; <label>:158:                                    ; preds = %152
  %159 = mul nuw nsw i64 %20, %153
  br label %160

; <label>:160:                                    ; preds = %158, %154
  %161 = phi i64 [ %159, %158 ], [ %157, %154 ]
  %162 = add nsw i64 %161, 1
  %163 = lshr i32 %3, 1
  %164 = zext i32 %163 to i64
  %165 = mul i64 %162, %164
  %166 = add i64 %165, %150
  br label %48
}

declare hidden i32 @MOZ_Z_deflate(%struct.z_stream_s*, i32) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_APNG_write_fdAT(%struct.png_struct_def*, i8*, i64) local_unnamed_addr #4 {
  %4 = alloca [4 x i8], align 1
  %5 = alloca [8 x i8], align 1
  %6 = alloca [4 x i8], align 1
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #18
  %8 = trunc i64 %2 to i32
  %9 = add i32 %8, 4
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #18, !noalias !1028
  %11 = icmp eq %struct.png_struct_def* %0, null
  br i1 %11, label %50, label %12

; <label>:12:                                     ; preds = %3
  %13 = lshr i32 %9, 24
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %10, align 1, !noalias !1028
  %15 = lshr i32 %9, 16
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 1
  store i8 %16, i8* %17, align 1, !noalias !1028
  %18 = lshr i32 %9, 8
  %19 = trunc i32 %18 to i8
  %20 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 2
  store i8 %19, i8* %20, align 1, !noalias !1028
  %21 = trunc i32 %9 to i8
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 3
  store i8 %21, i8* %22, align 1, !noalias !1028
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 4
  store i8 102, i8* %23, align 1, !noalias !1028
  %24 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 5
  store i8 100, i8* %24, align 1, !noalias !1028
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 6
  store i8 65, i8* %25, align 1, !noalias !1028
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i64 0, i64 7
  store i8 84, i8* %26, align 1, !noalias !1028
  %27 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %28 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %27, align 8, !alias.scope !1031
  %29 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %28, null
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %12
  tail call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:31:                                     ; preds = %12
  call void %28(%struct.png_struct_def* nonnull %0, i8* nonnull %10, i64 8) #18
  %32 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  store i32 1717846356, i32* %32, align 8, !alias.scope !1028
  %33 = call i64 @MOZ_Z_crc32(i64 0, i8* null, i32 0) #18, !noalias !1034
  %34 = trunc i64 %33 to i32
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %34, i32* %35, align 4, !alias.scope !1037
  %36 = load i32, i32* %32, align 8, !alias.scope !1038
  %37 = and i32 %36, 536870912
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %40 = load i32, i32* %39, align 4, !alias.scope !1038
  %41 = and i32 %40, 768
  %42 = icmp ne i32 %41, 768
  %43 = and i32 %40, 2048
  %44 = icmp eq i32 %43, 0
  %45 = select i1 %38, i1 %44, i1 %42
  br i1 %45, label %46, label %50

; <label>:46:                                     ; preds = %31
  %47 = and i64 %33, 4294967295
  %48 = call i64 @MOZ_Z_crc32(i64 %47, i8* nonnull %23, i32 4) #18, !noalias !1038
  %49 = trunc i64 %48 to i32
  store i32 %49, i32* %35, align 4, !alias.scope !1038
  br label %50

; <label>:50:                                     ; preds = %46, %31, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #18, !noalias !1028
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 88
  %52 = load i32, i32* %51, align 4
  %53 = lshr i32 %52, 24
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %7, align 1
  %55 = lshr i32 %52, 16
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 1
  store i8 %56, i8* %57, align 1
  %58 = lshr i32 %52, 8
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 2
  store i8 %59, i8* %60, align 1
  %61 = trunc i32 %52 to i8
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  store i8 %61, i8* %62, align 1
  %63 = icmp eq %struct.png_struct_def* %0, null
  br i1 %63, label %123, label %64

; <label>:64:                                     ; preds = %50
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %66 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %65, align 8, !alias.scope !1041
  %67 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %66, null
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %64
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:69:                                     ; preds = %64
  call void %66(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 4) #18
  %70 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %71 = load i32, i32* %70, align 8, !alias.scope !1046
  %72 = and i32 %71, 536870912
  %73 = icmp eq i32 %72, 0
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 11
  %75 = load i32, i32* %74, align 4, !alias.scope !1046
  %76 = and i32 %75, 768
  %77 = icmp ne i32 %76, 768
  %78 = and i32 %75, 2048
  %79 = icmp eq i32 %78, 0
  %80 = select i1 %73, i1 %79, i1 %77
  br i1 %80, label %81, label %87

; <label>:81:                                     ; preds = %69
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %83 = load i32, i32* %82, align 4, !alias.scope !1046
  %84 = zext i32 %83 to i64
  %85 = call i64 @MOZ_Z_crc32(i64 %84, i8* nonnull %7, i32 4) #18, !noalias !1049
  %86 = trunc i64 %85 to i32
  store i32 %86, i32* %82, align 4, !alias.scope !1046
  br label %87

; <label>:87:                                     ; preds = %69, %81
  %88 = icmp ne i8* %1, null
  %89 = icmp ne i64 %2, 0
  %90 = and i1 %88, %89
  br i1 %90, label %91, label %123

; <label>:91:                                     ; preds = %87
  %92 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %65, align 8, !alias.scope !1050
  %93 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %92, null
  br i1 %93, label %94, label %95

; <label>:94:                                     ; preds = %91
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:95:                                     ; preds = %91
  call void %92(%struct.png_struct_def* nonnull %0, i8* nonnull %1, i64 %2) #18
  %96 = load i32, i32* %70, align 8, !alias.scope !1055
  %97 = and i32 %96, 536870912
  %98 = icmp eq i32 %97, 0
  %99 = load i32, i32* %74, align 4, !alias.scope !1055
  %100 = and i32 %99, 768
  %101 = icmp ne i32 %100, 768
  %102 = and i32 %99, 2048
  %103 = icmp eq i32 %102, 0
  %104 = select i1 %98, i1 %103, i1 %101
  br i1 %104, label %105, label %123

; <label>:105:                                    ; preds = %95
  %106 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %107 = load i32, i32* %106, align 4, !alias.scope !1055
  %108 = zext i32 %107 to i64
  br label %109

; <label>:109:                                    ; preds = %109, %105
  %110 = phi i64 [ %2, %105 ], [ %119, %109 ]
  %111 = phi i64 [ %108, %105 ], [ %116, %109 ]
  %112 = phi i8* [ %1, %105 ], [ %118, %109 ]
  %113 = trunc i64 %110 to i32
  %114 = icmp eq i32 %113, 0
  %115 = select i1 %114, i32 -1, i32 %113
  %116 = call i64 @MOZ_Z_crc32(i64 %111, i8* %112, i32 %115) #18, !noalias !1058
  %117 = zext i32 %115 to i64
  %118 = getelementptr inbounds i8, i8* %112, i64 %117
  %119 = sub i64 %110, %117
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %109

; <label>:121:                                    ; preds = %109
  %122 = trunc i64 %116 to i32
  store i32 %122, i32* %106, align 4, !alias.scope !1055
  br label %123

; <label>:123:                                    ; preds = %50, %87, %95, %121
  %124 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %124) #18, !noalias !1059
  br i1 %11, label %143, label %125

; <label>:125:                                    ; preds = %123
  %126 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %127 = load i32, i32* %126, align 4, !alias.scope !1059
  %128 = lshr i32 %127, 24
  %129 = trunc i32 %128 to i8
  store i8 %129, i8* %124, align 1, !noalias !1059
  %130 = lshr i32 %127, 16
  %131 = trunc i32 %130 to i8
  %132 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  store i8 %131, i8* %132, align 1, !noalias !1059
  %133 = lshr i32 %127, 8
  %134 = trunc i32 %133 to i8
  %135 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  store i8 %134, i8* %135, align 1, !noalias !1059
  %136 = trunc i32 %127 to i8
  %137 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  store i8 %136, i8* %137, align 1, !noalias !1059
  %138 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 7
  %139 = load void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)** %138, align 8, !alias.scope !1062
  %140 = icmp eq void (%struct.png_struct_def*, i8*, i64)* %139, null
  br i1 %140, label %141, label %142

; <label>:141:                                    ; preds = %125
  call void @png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i64 0, i64 0)) #22
  unreachable

; <label>:142:                                    ; preds = %125
  call void %139(%struct.png_struct_def* nonnull %0, i8* nonnull %124, i64 4) #18
  br label %143

; <label>:143:                                    ; preds = %123, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %124) #18, !noalias !1059
  %144 = load i32, i32* %51, align 4
  %145 = add i32 %144, 1
  store i32 %145, i32* %51, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #18
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define hidden void @MOZ_PNG_write_finish_row(%struct.png_struct_def* noalias) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 29
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %4, %6
  br i1 %7, label %9, label %8

; <label>:8:                                      ; preds = %1
  tail call void @MOZ_PNG_compress_IDAT(%struct.png_struct_def* nonnull %0, i8* null, i64 0, i32 4)
  br label %9

; <label>:9:                                      ; preds = %1, %8
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #17

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @MOZ_PNG_xy_from_XYZ(%struct.png_xy* nocapture, %struct.png_XYZ* nocapture readonly) unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, %4
  %8 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %7, %9
  %11 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 0
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %177, label %13

; <label>:13:                                     ; preds = %2
  %14 = icmp eq i32 %4, 0
  br i1 %14, label %27, label %15

; <label>:15:                                     ; preds = %13
  %16 = sitofp i32 %4 to double
  %17 = fmul double %16, 1.000000e+05
  %18 = sitofp i32 %10 to double
  %19 = fdiv double %17, %18
  %20 = fadd double %19, 5.000000e-01
  %21 = tail call double @llvm.floor.f64(double %20) #18
  %22 = fcmp ole double %21, 0x41DFFFFFFFC00000
  %23 = fcmp oge double %21, 0xC1E0000000000000
  %24 = and i1 %22, %23
  br i1 %24, label %25, label %177

; <label>:25:                                     ; preds = %15
  %26 = fptosi double %21 to i32
  br label %27

; <label>:27:                                     ; preds = %13, %25
  %28 = phi i32 [ %26, %25 ], [ 0, %13 ]
  store i32 %28, i32* %11, align 4
  %29 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 1
  %30 = load i32, i32* %5, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %44, label %32

; <label>:32:                                     ; preds = %27
  %33 = sitofp i32 %30 to double
  %34 = fmul double %33, 1.000000e+05
  %35 = sitofp i32 %10 to double
  %36 = fdiv double %34, %35
  %37 = fadd double %36, 5.000000e-01
  %38 = tail call double @llvm.floor.f64(double %37) #18
  %39 = fcmp ole double %38, 0x41DFFFFFFFC00000
  %40 = fcmp oge double %38, 0xC1E0000000000000
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %177

; <label>:42:                                     ; preds = %32
  %43 = fptosi double %38 to i32
  br label %44

; <label>:44:                                     ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ 0, %27 ]
  store i32 %45, i32* %29, align 4
  %46 = load i32, i32* %3, align 4
  %47 = load i32, i32* %5, align 4
  %48 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 4
  %51 = load i32, i32* %50, align 4
  %52 = add nsw i32 %51, %49
  %53 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 5
  %54 = load i32, i32* %53, align 4
  %55 = add nsw i32 %52, %54
  %56 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 2
  %57 = icmp eq i32 %55, 0
  br i1 %57, label %177, label %58

; <label>:58:                                     ; preds = %44
  %59 = icmp eq i32 %49, 0
  br i1 %59, label %72, label %60

; <label>:60:                                     ; preds = %58
  %61 = sitofp i32 %49 to double
  %62 = fmul double %61, 1.000000e+05
  %63 = sitofp i32 %55 to double
  %64 = fdiv double %62, %63
  %65 = fadd double %64, 5.000000e-01
  %66 = tail call double @llvm.floor.f64(double %65) #18
  %67 = fcmp ole double %66, 0x41DFFFFFFFC00000
  %68 = fcmp oge double %66, 0xC1E0000000000000
  %69 = and i1 %67, %68
  br i1 %69, label %70, label %177

; <label>:70:                                     ; preds = %60
  %71 = fptosi double %66 to i32
  br label %72

; <label>:72:                                     ; preds = %58, %70
  %73 = phi i32 [ %71, %70 ], [ 0, %58 ]
  store i32 %73, i32* %56, align 4
  %74 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 3
  %75 = load i32, i32* %50, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %89, label %77

; <label>:77:                                     ; preds = %72
  %78 = sitofp i32 %75 to double
  %79 = fmul double %78, 1.000000e+05
  %80 = sitofp i32 %55 to double
  %81 = fdiv double %79, %80
  %82 = fadd double %81, 5.000000e-01
  %83 = tail call double @llvm.floor.f64(double %82) #18
  %84 = fcmp ole double %83, 0x41DFFFFFFFC00000
  %85 = fcmp oge double %83, 0xC1E0000000000000
  %86 = and i1 %84, %85
  br i1 %86, label %87, label %177

; <label>:87:                                     ; preds = %77
  %88 = fptosi double %83 to i32
  br label %89

; <label>:89:                                     ; preds = %72, %87
  %90 = phi i32 [ %88, %87 ], [ 0, %72 ]
  store i32 %90, i32* %74, align 4
  %91 = add nsw i32 %55, %10
  %92 = load i32, i32* %48, align 4
  %93 = add nsw i32 %92, %46
  %94 = load i32, i32* %50, align 4
  %95 = add nsw i32 %94, %47
  %96 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 6
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 7
  %99 = load i32, i32* %98, align 4
  %100 = add nsw i32 %99, %97
  %101 = getelementptr inbounds %struct.png_XYZ, %struct.png_XYZ* %1, i64 0, i32 8
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %100, %102
  %104 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 4
  %105 = icmp eq i32 %103, 0
  br i1 %105, label %177, label %106

; <label>:106:                                    ; preds = %89
  %107 = icmp eq i32 %97, 0
  br i1 %107, label %120, label %108

; <label>:108:                                    ; preds = %106
  %109 = sitofp i32 %97 to double
  %110 = fmul double %109, 1.000000e+05
  %111 = sitofp i32 %103 to double
  %112 = fdiv double %110, %111
  %113 = fadd double %112, 5.000000e-01
  %114 = tail call double @llvm.floor.f64(double %113) #18
  %115 = fcmp ole double %114, 0x41DFFFFFFFC00000
  %116 = fcmp oge double %114, 0xC1E0000000000000
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %177

; <label>:118:                                    ; preds = %108
  %119 = fptosi double %114 to i32
  br label %120

; <label>:120:                                    ; preds = %106, %118
  %121 = phi i32 [ %119, %118 ], [ 0, %106 ]
  store i32 %121, i32* %104, align 4
  %122 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 5
  %123 = load i32, i32* %98, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %137, label %125

; <label>:125:                                    ; preds = %120
  %126 = sitofp i32 %123 to double
  %127 = fmul double %126, 1.000000e+05
  %128 = sitofp i32 %103 to double
  %129 = fdiv double %127, %128
  %130 = fadd double %129, 5.000000e-01
  %131 = tail call double @llvm.floor.f64(double %130) #18
  %132 = fcmp ole double %131, 0x41DFFFFFFFC00000
  %133 = fcmp oge double %131, 0xC1E0000000000000
  %134 = and i1 %132, %133
  br i1 %134, label %135, label %177

; <label>:135:                                    ; preds = %125
  %136 = fptosi double %131 to i32
  br label %137

; <label>:137:                                    ; preds = %120, %135
  %138 = phi i32 [ %136, %135 ], [ 0, %120 ]
  store i32 %138, i32* %122, align 4
  %139 = add nsw i32 %91, %103
  %140 = load i32, i32* %96, align 4
  %141 = add nsw i32 %93, %140
  %142 = load i32, i32* %98, align 4
  %143 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 6
  %144 = icmp eq i32 %139, 0
  br i1 %144, label %177, label %145

; <label>:145:                                    ; preds = %137
  %146 = icmp eq i32 %141, 0
  br i1 %146, label %159, label %147

; <label>:147:                                    ; preds = %145
  %148 = sitofp i32 %141 to double
  %149 = fmul double %148, 1.000000e+05
  %150 = sitofp i32 %139 to double
  %151 = fdiv double %149, %150
  %152 = fadd double %151, 5.000000e-01
  %153 = tail call double @llvm.floor.f64(double %152) #18
  %154 = fcmp ole double %153, 0x41DFFFFFFFC00000
  %155 = fcmp oge double %153, 0xC1E0000000000000
  %156 = and i1 %154, %155
  br i1 %156, label %157, label %177

; <label>:157:                                    ; preds = %147
  %158 = fptosi double %153 to i32
  br label %159

; <label>:159:                                    ; preds = %145, %157
  %160 = phi i32 [ %158, %157 ], [ 0, %145 ]
  store i32 %160, i32* %143, align 4
  %161 = add nsw i32 %95, %142
  %162 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %0, i64 0, i32 7
  %163 = icmp eq i32 %161, 0
  br i1 %163, label %164, label %165

; <label>:164:                                    ; preds = %159
  store i32 0, i32* %162, align 4
  br label %177

; <label>:165:                                    ; preds = %159
  %166 = sitofp i32 %161 to double
  %167 = fmul double %166, 1.000000e+05
  %168 = sitofp i32 %139 to double
  %169 = fdiv double %167, %168
  %170 = fadd double %169, 5.000000e-01
  %171 = tail call double @llvm.floor.f64(double %170) #18
  %172 = fcmp ole double %171, 0x41DFFFFFFFC00000
  %173 = fcmp oge double %171, 0xC1E0000000000000
  %174 = and i1 %172, %173
  br i1 %174, label %175, label %177

; <label>:175:                                    ; preds = %165
  %176 = fptosi double %171 to i32
  store i32 %176, i32* %162, align 4
  br label %177

; <label>:177:                                    ; preds = %175, %164, %137, %147, %89, %108, %44, %60, %2, %15, %165, %125, %77, %32
  %178 = phi i32 [ 1, %32 ], [ 1, %77 ], [ 1, %125 ], [ 1, %165 ], [ 1, %15 ], [ 1, %2 ], [ 1, %60 ], [ 1, %44 ], [ 1, %108 ], [ 1, %89 ], [ 1, %147 ], [ 1, %137 ], [ 0, %164 ], [ 0, %175 ]
  ret i32 %178
}

declare hidden i32 @MOZ_Z_inflateEnd(%struct.z_stream_s*) local_unnamed_addr #8

declare hidden i32 @MOZ_Z_inflateReset2(%struct.z_stream_s*, i32) local_unnamed_addr #8

declare hidden i32 @MOZ_Z_inflateInit2_(%struct.z_stream_s*, i32, i8*, i32) local_unnamed_addr #8

declare hidden i32 @inflateValidate(%struct.z_stream_s*, i32) local_unnamed_addr #8

; Function Attrs: norecurse nounwind sspstrong uwtable
define internal void @MOZ_PNG_read_filt_row_s(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readnone) #3 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = add nuw nsw i64 %8, 7
  %10 = lshr i64 %9, 3
  %11 = icmp ugt i64 %5, %10
  br i1 %11, label %12, label %145

; <label>:12:                                     ; preds = %3
  %13 = getelementptr inbounds i8, i8* %1, i64 %10
  %14 = sub nsw i64 0, %10
  %15 = sub i64 %5, %10
  %16 = icmp ult i64 %15, 32
  br i1 %16, label %96, label %17

; <label>:17:                                     ; preds = %12
  %18 = getelementptr i8, i8* %1, i64 %5
  %19 = sub i64 %5, %10
  %20 = getelementptr i8, i8* %1, i64 %19
  %21 = icmp ult i8* %13, %20
  %22 = icmp ugt i8* %18, %1
  %23 = and i1 %21, %22
  br i1 %23, label %96, label %24

; <label>:24:                                     ; preds = %17
  %25 = and i64 %15, -32
  %26 = getelementptr i8, i8* %13, i64 %25
  %27 = add i64 %10, %25
  %28 = add i64 %25, -32
  %29 = lshr exact i64 %28, 5
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %74, label %33

; <label>:33:                                     ; preds = %24
  %34 = sub nsw i64 %30, %31
  br label %35

; <label>:35:                                     ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %71, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %72, %35 ]
  %38 = getelementptr i8, i8* %13, i64 %36
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1, !alias.scope !1065, !noalias !1068
  %41 = getelementptr i8, i8* %38, i64 16
  %42 = bitcast i8* %41 to <16 x i8>*
  %43 = load <16 x i8>, <16 x i8>* %42, align 1, !alias.scope !1065, !noalias !1068
  %44 = getelementptr inbounds i8, i8* %38, i64 %14
  %45 = bitcast i8* %44 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1, !alias.scope !1068
  %47 = getelementptr inbounds i8, i8* %44, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !1068
  %50 = add <16 x i8> %46, %40
  %51 = add <16 x i8> %49, %43
  %52 = bitcast i8* %38 to <16 x i8>*
  store <16 x i8> %50, <16 x i8>* %52, align 1, !alias.scope !1065, !noalias !1068
  %53 = bitcast i8* %41 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %53, align 1, !alias.scope !1065, !noalias !1068
  %54 = or i64 %36, 32
  %55 = getelementptr i8, i8* %13, i64 %54
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !1065, !noalias !1068
  %58 = getelementptr i8, i8* %55, i64 16
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !1065, !noalias !1068
  %61 = getelementptr inbounds i8, i8* %55, i64 %14
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !1068
  %64 = getelementptr inbounds i8, i8* %61, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !1068
  %67 = add <16 x i8> %63, %57
  %68 = add <16 x i8> %66, %60
  %69 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %69, align 1, !alias.scope !1065, !noalias !1068
  %70 = bitcast i8* %58 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %70, align 1, !alias.scope !1065, !noalias !1068
  %71 = add i64 %36, 64
  %72 = add i64 %37, -2
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %35, !llvm.loop !1070

; <label>:74:                                     ; preds = %35, %24
  %75 = phi i64 [ 0, %24 ], [ %71, %35 ]
  %76 = icmp eq i64 %31, 0
  br i1 %76, label %94, label %77

; <label>:77:                                     ; preds = %74
  %78 = getelementptr i8, i8* %13, i64 %75
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !1065, !noalias !1068
  %81 = getelementptr i8, i8* %78, i64 16
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1, !alias.scope !1065, !noalias !1068
  %84 = getelementptr inbounds i8, i8* %78, i64 %14
  %85 = bitcast i8* %84 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !1068
  %87 = getelementptr inbounds i8, i8* %84, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !1068
  %90 = add <16 x i8> %86, %80
  %91 = add <16 x i8> %89, %83
  %92 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %92, align 1, !alias.scope !1065, !noalias !1068
  %93 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %93, align 1, !alias.scope !1065, !noalias !1068
  br label %94

; <label>:94:                                     ; preds = %74, %77
  %95 = icmp eq i64 %15, %25
  br i1 %95, label %145, label %96

; <label>:96:                                     ; preds = %94, %17, %12
  %97 = phi i8* [ %13, %17 ], [ %13, %12 ], [ %26, %94 ]
  %98 = phi i64 [ %10, %17 ], [ %10, %12 ], [ %27, %94 ]
  %99 = sub i64 %5, %98
  %100 = xor i64 %98, -1
  %101 = add i64 %5, %100
  %102 = and i64 %99, 3
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %116, label %104

; <label>:104:                                    ; preds = %96, %104
  %105 = phi i8* [ %112, %104 ], [ %97, %96 ]
  %106 = phi i64 [ %113, %104 ], [ %98, %96 ]
  %107 = phi i64 [ %114, %104 ], [ %102, %96 ]
  %108 = load i8, i8* %105, align 1
  %109 = getelementptr inbounds i8, i8* %105, i64 %14
  %110 = load i8, i8* %109, align 1
  %111 = add i8 %110, %108
  store i8 %111, i8* %105, align 1
  %112 = getelementptr inbounds i8, i8* %105, i64 1
  %113 = add nuw i64 %106, 1
  %114 = add i64 %107, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %104, !llvm.loop !1071

; <label>:116:                                    ; preds = %104, %96
  %117 = phi i8* [ %97, %96 ], [ %112, %104 ]
  %118 = phi i64 [ %98, %96 ], [ %113, %104 ]
  %119 = icmp ult i64 %101, 3
  br i1 %119, label %145, label %120

; <label>:120:                                    ; preds = %116, %120
  %121 = phi i8* [ %142, %120 ], [ %117, %116 ]
  %122 = phi i64 [ %143, %120 ], [ %118, %116 ]
  %123 = load i8, i8* %121, align 1
  %124 = getelementptr inbounds i8, i8* %121, i64 %14
  %125 = load i8, i8* %124, align 1
  %126 = add i8 %125, %123
  store i8 %126, i8* %121, align 1
  %127 = getelementptr inbounds i8, i8* %121, i64 1
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %127, i64 %14
  %130 = load i8, i8* %129, align 1
  %131 = add i8 %130, %128
  store i8 %131, i8* %127, align 1
  %132 = getelementptr inbounds i8, i8* %121, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = getelementptr inbounds i8, i8* %132, i64 %14
  %135 = load i8, i8* %134, align 1
  %136 = add i8 %135, %133
  store i8 %136, i8* %132, align 1
  %137 = getelementptr inbounds i8, i8* %121, i64 3
  %138 = load i8, i8* %137, align 1
  %139 = getelementptr inbounds i8, i8* %137, i64 %14
  %140 = load i8, i8* %139, align 1
  %141 = add i8 %140, %138
  store i8 %141, i8* %137, align 1
  %142 = getelementptr inbounds i8, i8* %121, i64 4
  %143 = add i64 %122, 4
  %144 = icmp eq i64 %143, %5
  br i1 %144, label %145, label %120, !llvm.loop !1072

; <label>:145:                                    ; preds = %116, %120, %94, %3
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define internal void @MOZ_PNG_read_filt_row_up(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readonly) #3 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %139, label %7

; <label>:7:                                      ; preds = %3
  %8 = icmp ult i64 %5, 32
  br i1 %8, label %87, label %9

; <label>:9:                                      ; preds = %7
  %10 = getelementptr i8, i8* %1, i64 %5
  %11 = getelementptr i8, i8* %2, i64 %5
  %12 = icmp ugt i8* %11, %1
  %13 = icmp ugt i8* %10, %2
  %14 = and i1 %12, %13
  br i1 %14, label %87, label %15

; <label>:15:                                     ; preds = %9
  %16 = and i64 %5, -32
  %17 = getelementptr i8, i8* %2, i64 %16
  %18 = getelementptr i8, i8* %1, i64 %16
  %19 = add i64 %16, -32
  %20 = lshr exact i64 %19, 5
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %65, label %24

; <label>:24:                                     ; preds = %15
  %25 = sub nsw i64 %21, %22
  br label %26

; <label>:26:                                     ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %62, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %63, %26 ]
  %29 = getelementptr i8, i8* %2, i64 %27
  %30 = getelementptr i8, i8* %1, i64 %27
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1, !alias.scope !1073, !noalias !1076
  %33 = getelementptr i8, i8* %30, i64 16
  %34 = bitcast i8* %33 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 1, !alias.scope !1073, !noalias !1076
  %36 = bitcast i8* %29 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1, !alias.scope !1076
  %38 = getelementptr i8, i8* %29, i64 16
  %39 = bitcast i8* %38 to <16 x i8>*
  %40 = load <16 x i8>, <16 x i8>* %39, align 1, !alias.scope !1076
  %41 = add <16 x i8> %37, %32
  %42 = add <16 x i8> %40, %35
  %43 = bitcast i8* %30 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %43, align 1, !alias.scope !1073, !noalias !1076
  %44 = bitcast i8* %33 to <16 x i8>*
  store <16 x i8> %42, <16 x i8>* %44, align 1, !alias.scope !1073, !noalias !1076
  %45 = or i64 %27, 32
  %46 = getelementptr i8, i8* %2, i64 %45
  %47 = getelementptr i8, i8* %1, i64 %45
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !1073, !noalias !1076
  %50 = getelementptr i8, i8* %47, i64 16
  %51 = bitcast i8* %50 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 1, !alias.scope !1073, !noalias !1076
  %53 = bitcast i8* %46 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !1076
  %55 = getelementptr i8, i8* %46, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !1076
  %58 = add <16 x i8> %54, %49
  %59 = add <16 x i8> %57, %52
  %60 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %60, align 1, !alias.scope !1073, !noalias !1076
  %61 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %61, align 1, !alias.scope !1073, !noalias !1076
  %62 = add i64 %27, 64
  %63 = add i64 %28, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %26, !llvm.loop !1078

; <label>:65:                                     ; preds = %26, %15
  %66 = phi i64 [ 0, %15 ], [ %62, %26 ]
  %67 = icmp eq i64 %22, 0
  br i1 %67, label %85, label %68

; <label>:68:                                     ; preds = %65
  %69 = getelementptr i8, i8* %2, i64 %66
  %70 = getelementptr i8, i8* %1, i64 %66
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !alias.scope !1073, !noalias !1076
  %73 = getelementptr i8, i8* %70, i64 16
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1, !alias.scope !1073, !noalias !1076
  %76 = bitcast i8* %69 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1, !alias.scope !1076
  %78 = getelementptr i8, i8* %69, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !1076
  %81 = add <16 x i8> %77, %72
  %82 = add <16 x i8> %80, %75
  %83 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %83, align 1, !alias.scope !1073, !noalias !1076
  %84 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1, !alias.scope !1073, !noalias !1076
  br label %85

; <label>:85:                                     ; preds = %65, %68
  %86 = icmp eq i64 %5, %16
  br i1 %86, label %139, label %87

; <label>:87:                                     ; preds = %85, %9, %7
  %88 = phi i8* [ %2, %9 ], [ %2, %7 ], [ %17, %85 ]
  %89 = phi i8* [ %1, %9 ], [ %1, %7 ], [ %18, %85 ]
  %90 = phi i64 [ 0, %9 ], [ 0, %7 ], [ %16, %85 ]
  %91 = xor i64 %90, -1
  %92 = add i64 %5, %91
  %93 = and i64 %5, 3
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %108, label %95

; <label>:95:                                     ; preds = %87, %95
  %96 = phi i8* [ %101, %95 ], [ %88, %87 ]
  %97 = phi i8* [ %104, %95 ], [ %89, %87 ]
  %98 = phi i64 [ %105, %95 ], [ %90, %87 ]
  %99 = phi i64 [ %106, %95 ], [ %93, %87 ]
  %100 = load i8, i8* %97, align 1
  %101 = getelementptr inbounds i8, i8* %96, i64 1
  %102 = load i8, i8* %96, align 1
  %103 = add i8 %102, %100
  store i8 %103, i8* %97, align 1
  %104 = getelementptr inbounds i8, i8* %97, i64 1
  %105 = add nuw i64 %98, 1
  %106 = add i64 %99, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %95, !llvm.loop !1079

; <label>:108:                                    ; preds = %95, %87
  %109 = phi i8* [ %88, %87 ], [ %101, %95 ]
  %110 = phi i8* [ %89, %87 ], [ %104, %95 ]
  %111 = phi i64 [ %90, %87 ], [ %105, %95 ]
  %112 = icmp ult i64 %92, 3
  br i1 %112, label %139, label %113

; <label>:113:                                    ; preds = %108, %113
  %114 = phi i8* [ %133, %113 ], [ %109, %108 ]
  %115 = phi i8* [ %136, %113 ], [ %110, %108 ]
  %116 = phi i64 [ %137, %113 ], [ %111, %108 ]
  %117 = load i8, i8* %115, align 1
  %118 = getelementptr inbounds i8, i8* %114, i64 1
  %119 = load i8, i8* %114, align 1
  %120 = add i8 %119, %117
  store i8 %120, i8* %115, align 1
  %121 = getelementptr inbounds i8, i8* %115, i64 1
  %122 = load i8, i8* %121, align 1
  %123 = getelementptr inbounds i8, i8* %114, i64 2
  %124 = load i8, i8* %118, align 1
  %125 = add i8 %124, %122
  store i8 %125, i8* %121, align 1
  %126 = getelementptr inbounds i8, i8* %115, i64 2
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %114, i64 3
  %129 = load i8, i8* %123, align 1
  %130 = add i8 %129, %127
  store i8 %130, i8* %126, align 1
  %131 = getelementptr inbounds i8, i8* %115, i64 3
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds i8, i8* %114, i64 4
  %134 = load i8, i8* %128, align 1
  %135 = add i8 %134, %132
  store i8 %135, i8* %131, align 1
  %136 = getelementptr inbounds i8, i8* %115, i64 4
  %137 = add i64 %116, 4
  %138 = icmp eq i64 %137, %5
  br i1 %138, label %139, label %113, !llvm.loop !1080

; <label>:139:                                    ; preds = %108, %113, %85, %3
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define internal void @MOZ_PNG_read_filt_row_a(%struct.png_row_info_struct* nocapture readonly, i8* nocapture, i8* nocapture readonly) #3 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = add nuw nsw i64 %6, 7
  %8 = lshr i64 %7, 3
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  %12 = icmp eq i64 %8, 0
  br i1 %12, label %129, label %13

; <label>:13:                                     ; preds = %3
  %14 = getelementptr i8, i8* %2, i64 %8
  %15 = icmp ult i64 %7, 256
  br i1 %15, label %16, label %43

; <label>:16:                                     ; preds = %125, %43, %13
  %17 = phi i64 [ 0, %43 ], [ 0, %13 ], [ %50, %125 ]
  %18 = phi i8* [ %1, %43 ], [ %1, %13 ], [ %51, %125 ]
  %19 = phi i8* [ %2, %43 ], [ %2, %13 ], [ %52, %125 ]
  %20 = xor i64 %17, -1
  %21 = add nsw i64 %8, %20
  %22 = and i64 %8, 3
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %38, label %24

; <label>:24:                                     ; preds = %16, %24
  %25 = phi i64 [ %35, %24 ], [ %17, %16 ]
  %26 = phi i8* [ %34, %24 ], [ %18, %16 ]
  %27 = phi i8* [ %30, %24 ], [ %19, %16 ]
  %28 = phi i64 [ %36, %24 ], [ %22, %16 ]
  %29 = load i8, i8* %26, align 1
  %30 = getelementptr inbounds i8, i8* %27, i64 1
  %31 = load i8, i8* %27, align 1
  %32 = lshr i8 %31, 1
  %33 = add i8 %32, %29
  store i8 %33, i8* %26, align 1
  %34 = getelementptr inbounds i8, i8* %26, i64 1
  %35 = add nuw nsw i64 %25, 1
  %36 = add i64 %28, -1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %24, !llvm.loop !1081

; <label>:38:                                     ; preds = %24, %16
  %39 = phi i64 [ %17, %16 ], [ %35, %24 ]
  %40 = phi i8* [ %18, %16 ], [ %34, %24 ]
  %41 = phi i8* [ %19, %16 ], [ %30, %24 ]
  %42 = icmp ult i64 %21, 3
  br i1 %42, label %127, label %250

; <label>:43:                                     ; preds = %13
  %44 = getelementptr i8, i8* %1, i64 %8
  %45 = getelementptr i8, i8* %2, i64 %8
  %46 = icmp ugt i8* %45, %1
  %47 = icmp ugt i8* %44, %2
  %48 = and i1 %46, %47
  br i1 %48, label %16, label %49

; <label>:49:                                     ; preds = %43
  %50 = and i64 %8, 32
  %51 = getelementptr i8, i8* %1, i64 %50
  %52 = getelementptr i8, i8* %2, i64 %50
  %53 = add nsw i64 %50, -32
  %54 = lshr exact i64 %53, 5
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 1
  %57 = icmp eq i64 %53, 0
  br i1 %57, label %103, label %58

; <label>:58:                                     ; preds = %49
  %59 = sub nsw i64 %55, %56
  br label %60

; <label>:60:                                     ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %100, %60 ]
  %62 = phi i64 [ %59, %58 ], [ %101, %60 ]
  %63 = getelementptr i8, i8* %1, i64 %61
  %64 = getelementptr i8, i8* %2, i64 %61
  %65 = bitcast i8* %63 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !1082, !noalias !1085
  %67 = getelementptr i8, i8* %63, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1, !alias.scope !1082, !noalias !1085
  %70 = bitcast i8* %64 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1, !alias.scope !1085
  %72 = getelementptr i8, i8* %64, i64 16
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1, !alias.scope !1085
  %75 = lshr <16 x i8> %71, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %76 = lshr <16 x i8> %74, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %77 = add <16 x i8> %75, %66
  %78 = add <16 x i8> %76, %69
  %79 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %79, align 1, !alias.scope !1082, !noalias !1085
  %80 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %78, <16 x i8>* %80, align 1, !alias.scope !1082, !noalias !1085
  %81 = or i64 %61, 32
  %82 = getelementptr i8, i8* %1, i64 %81
  %83 = getelementptr i8, i8* %2, i64 %81
  %84 = bitcast i8* %82 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !1082, !noalias !1085
  %86 = getelementptr i8, i8* %82, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !1082, !noalias !1085
  %89 = bitcast i8* %83 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1, !alias.scope !1085
  %91 = getelementptr i8, i8* %83, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !1085
  %94 = lshr <16 x i8> %90, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %95 = lshr <16 x i8> %93, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %96 = add <16 x i8> %94, %85
  %97 = add <16 x i8> %95, %88
  %98 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %96, <16 x i8>* %98, align 1, !alias.scope !1082, !noalias !1085
  %99 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %99, align 1, !alias.scope !1082, !noalias !1085
  %100 = add i64 %61, 64
  %101 = add i64 %62, -2
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %60, !llvm.loop !1087

; <label>:103:                                    ; preds = %60, %49
  %104 = phi i64 [ 0, %49 ], [ %100, %60 ]
  %105 = icmp eq i64 %56, 0
  br i1 %105, label %125, label %106

; <label>:106:                                    ; preds = %103
  %107 = getelementptr i8, i8* %1, i64 %104
  %108 = getelementptr i8, i8* %2, i64 %104
  %109 = bitcast i8* %107 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !1082, !noalias !1085
  %111 = getelementptr i8, i8* %107, i64 16
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1, !alias.scope !1082, !noalias !1085
  %114 = bitcast i8* %108 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !1085
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1, !alias.scope !1085
  %119 = lshr <16 x i8> %115, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %120 = lshr <16 x i8> %118, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %121 = add <16 x i8> %119, %110
  %122 = add <16 x i8> %120, %113
  %123 = bitcast i8* %107 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %123, align 1, !alias.scope !1082, !noalias !1085
  %124 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %124, align 1, !alias.scope !1082, !noalias !1085
  br label %125

; <label>:125:                                    ; preds = %103, %106
  %126 = icmp eq i64 %8, %50
  br i1 %126, label %127, label %16

; <label>:127:                                    ; preds = %38, %250, %125
  %128 = getelementptr i8, i8* %1, i64 %8
  br label %129

; <label>:129:                                    ; preds = %127, %3
  %130 = phi i8* [ %2, %3 ], [ %14, %127 ]
  %131 = phi i8* [ %1, %3 ], [ %128, %127 ]
  %132 = icmp eq i64 %11, 0
  br i1 %132, label %310, label %133

; <label>:133:                                    ; preds = %129
  %134 = sub nsw i64 0, %8
  %135 = icmp ult i64 %11, 16
  br i1 %135, label %136, label %164

; <label>:136:                                    ; preds = %248, %164, %133
  %137 = phi i64 [ 0, %164 ], [ 0, %133 ], [ %179, %248 ]
  %138 = phi i8* [ %131, %164 ], [ %131, %133 ], [ %180, %248 ]
  %139 = phi i8* [ %130, %164 ], [ %130, %133 ], [ %181, %248 ]
  %140 = sub i64 %10, %8
  %141 = xor i64 %8, -1
  %142 = add i64 %10, %141
  %143 = and i64 %140, 1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %159, label %145

; <label>:145:                                    ; preds = %136
  %146 = load i8, i8* %138, align 1
  %147 = getelementptr inbounds i8, i8* %139, i64 1
  %148 = load i8, i8* %139, align 1
  %149 = zext i8 %148 to i32
  %150 = getelementptr inbounds i8, i8* %138, i64 %134
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = add nuw nsw i32 %152, %149
  %154 = lshr i32 %153, 1
  %155 = trunc i32 %154 to i8
  %156 = add i8 %146, %155
  store i8 %156, i8* %138, align 1
  %157 = getelementptr inbounds i8, i8* %138, i64 1
  %158 = or i64 %137, 1
  br label %159

; <label>:159:                                    ; preds = %136, %145
  %160 = phi i64 [ %137, %136 ], [ %158, %145 ]
  %161 = phi i8* [ %138, %136 ], [ %157, %145 ]
  %162 = phi i8* [ %139, %136 ], [ %147, %145 ]
  %163 = icmp eq i64 %142, %137
  br i1 %163, label %310, label %280

; <label>:164:                                    ; preds = %133
  %165 = getelementptr i8, i8* %131, i64 %11
  %166 = getelementptr i8, i8* %130, i64 %11
  %167 = getelementptr i8, i8* %131, i64 %134
  %168 = shl nuw nsw i64 %8, 1
  %169 = sub i64 %10, %168
  %170 = getelementptr i8, i8* %131, i64 %169
  %171 = icmp ult i8* %131, %166
  %172 = icmp ult i8* %130, %165
  %173 = and i1 %171, %172
  %174 = icmp ult i8* %131, %170
  %175 = icmp ult i8* %167, %165
  %176 = and i1 %174, %175
  %177 = or i1 %173, %176
  br i1 %177, label %136, label %178

; <label>:178:                                    ; preds = %164
  %179 = and i64 %11, -16
  %180 = getelementptr i8, i8* %131, i64 %179
  %181 = getelementptr i8, i8* %130, i64 %179
  %182 = add i64 %179, -16
  %183 = lshr exact i64 %182, 4
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %228, label %187

; <label>:187:                                    ; preds = %178
  %188 = sub nsw i64 %184, %185
  br label %189

; <label>:189:                                    ; preds = %189, %187
  %190 = phi i64 [ 0, %187 ], [ %225, %189 ]
  %191 = phi i64 [ %188, %187 ], [ %226, %189 ]
  %192 = getelementptr i8, i8* %131, i64 %190
  %193 = getelementptr i8, i8* %130, i64 %190
  %194 = bitcast i8* %192 to <16 x i8>*
  %195 = load <16 x i8>, <16 x i8>* %194, align 1, !alias.scope !1088, !noalias !1091
  %196 = bitcast i8* %193 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !1094
  %198 = zext <16 x i8> %197 to <16 x i32>
  %199 = getelementptr inbounds i8, i8* %192, i64 %134
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1, !alias.scope !1095
  %202 = zext <16 x i8> %201 to <16 x i32>
  %203 = add nuw nsw <16 x i32> %202, %198
  %204 = lshr <16 x i32> %203, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %205 = trunc <16 x i32> %204 to <16 x i8>
  %206 = add <16 x i8> %195, %205
  %207 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %206, <16 x i8>* %207, align 1, !alias.scope !1088, !noalias !1091
  %208 = or i64 %190, 16
  %209 = getelementptr i8, i8* %131, i64 %208
  %210 = getelementptr i8, i8* %130, i64 %208
  %211 = bitcast i8* %209 to <16 x i8>*
  %212 = load <16 x i8>, <16 x i8>* %211, align 1, !alias.scope !1088, !noalias !1091
  %213 = bitcast i8* %210 to <16 x i8>*
  %214 = load <16 x i8>, <16 x i8>* %213, align 1, !alias.scope !1094
  %215 = zext <16 x i8> %214 to <16 x i32>
  %216 = getelementptr inbounds i8, i8* %209, i64 %134
  %217 = bitcast i8* %216 to <16 x i8>*
  %218 = load <16 x i8>, <16 x i8>* %217, align 1, !alias.scope !1095
  %219 = zext <16 x i8> %218 to <16 x i32>
  %220 = add nuw nsw <16 x i32> %219, %215
  %221 = lshr <16 x i32> %220, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %222 = trunc <16 x i32> %221 to <16 x i8>
  %223 = add <16 x i8> %212, %222
  %224 = bitcast i8* %209 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %224, align 1, !alias.scope !1088, !noalias !1091
  %225 = add i64 %190, 32
  %226 = add i64 %191, -2
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %189, !llvm.loop !1096

; <label>:228:                                    ; preds = %189, %178
  %229 = phi i64 [ 0, %178 ], [ %225, %189 ]
  %230 = icmp eq i64 %185, 0
  br i1 %230, label %248, label %231

; <label>:231:                                    ; preds = %228
  %232 = getelementptr i8, i8* %131, i64 %229
  %233 = getelementptr i8, i8* %130, i64 %229
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !1088, !noalias !1091
  %236 = bitcast i8* %233 to <16 x i8>*
  %237 = load <16 x i8>, <16 x i8>* %236, align 1, !alias.scope !1094
  %238 = zext <16 x i8> %237 to <16 x i32>
  %239 = getelementptr inbounds i8, i8* %232, i64 %134
  %240 = bitcast i8* %239 to <16 x i8>*
  %241 = load <16 x i8>, <16 x i8>* %240, align 1, !alias.scope !1095
  %242 = zext <16 x i8> %241 to <16 x i32>
  %243 = add nuw nsw <16 x i32> %242, %238
  %244 = lshr <16 x i32> %243, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %245 = trunc <16 x i32> %244 to <16 x i8>
  %246 = add <16 x i8> %235, %245
  %247 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %246, <16 x i8>* %247, align 1, !alias.scope !1088, !noalias !1091
  br label %248

; <label>:248:                                    ; preds = %228, %231
  %249 = icmp eq i64 %11, %179
  br i1 %249, label %310, label %136

; <label>:250:                                    ; preds = %38, %250
  %251 = phi i64 [ %278, %250 ], [ %39, %38 ]
  %252 = phi i8* [ %277, %250 ], [ %40, %38 ]
  %253 = phi i8* [ %273, %250 ], [ %41, %38 ]
  %254 = load i8, i8* %252, align 1
  %255 = getelementptr inbounds i8, i8* %253, i64 1
  %256 = load i8, i8* %253, align 1
  %257 = lshr i8 %256, 1
  %258 = add i8 %257, %254
  store i8 %258, i8* %252, align 1
  %259 = getelementptr inbounds i8, i8* %252, i64 1
  %260 = load i8, i8* %259, align 1
  %261 = getelementptr inbounds i8, i8* %253, i64 2
  %262 = load i8, i8* %255, align 1
  %263 = lshr i8 %262, 1
  %264 = add i8 %263, %260
  store i8 %264, i8* %259, align 1
  %265 = getelementptr inbounds i8, i8* %252, i64 2
  %266 = load i8, i8* %265, align 1
  %267 = getelementptr inbounds i8, i8* %253, i64 3
  %268 = load i8, i8* %261, align 1
  %269 = lshr i8 %268, 1
  %270 = add i8 %269, %266
  store i8 %270, i8* %265, align 1
  %271 = getelementptr inbounds i8, i8* %252, i64 3
  %272 = load i8, i8* %271, align 1
  %273 = getelementptr inbounds i8, i8* %253, i64 4
  %274 = load i8, i8* %267, align 1
  %275 = lshr i8 %274, 1
  %276 = add i8 %275, %272
  store i8 %276, i8* %271, align 1
  %277 = getelementptr inbounds i8, i8* %252, i64 4
  %278 = add nsw i64 %251, 4
  %279 = icmp eq i64 %278, %8
  br i1 %279, label %127, label %250, !llvm.loop !1097

; <label>:280:                                    ; preds = %159, %280
  %281 = phi i64 [ %308, %280 ], [ %160, %159 ]
  %282 = phi i8* [ %307, %280 ], [ %161, %159 ]
  %283 = phi i8* [ %297, %280 ], [ %162, %159 ]
  %284 = load i8, i8* %282, align 1
  %285 = getelementptr inbounds i8, i8* %283, i64 1
  %286 = load i8, i8* %283, align 1
  %287 = zext i8 %286 to i32
  %288 = getelementptr inbounds i8, i8* %282, i64 %134
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i32
  %291 = add nuw nsw i32 %290, %287
  %292 = lshr i32 %291, 1
  %293 = trunc i32 %292 to i8
  %294 = add i8 %284, %293
  store i8 %294, i8* %282, align 1
  %295 = getelementptr inbounds i8, i8* %282, i64 1
  %296 = load i8, i8* %295, align 1
  %297 = getelementptr inbounds i8, i8* %283, i64 2
  %298 = load i8, i8* %285, align 1
  %299 = zext i8 %298 to i32
  %300 = getelementptr inbounds i8, i8* %295, i64 %134
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i32
  %303 = add nuw nsw i32 %302, %299
  %304 = lshr i32 %303, 1
  %305 = trunc i32 %304 to i8
  %306 = add i8 %296, %305
  store i8 %306, i8* %295, align 1
  %307 = getelementptr inbounds i8, i8* %282, i64 2
  %308 = add i64 %281, 2
  %309 = icmp eq i64 %308, %11
  br i1 %309, label %310, label %280, !llvm.loop !1098

; <label>:310:                                    ; preds = %159, %280, %248, %129
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define internal void @MOZ_PNG_read_filt_row_p_1b_px(%struct.png_row_info_struct* nocapture readonly, i8*, i8* nocapture readonly) #3 {
  %4 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = load i8, i8* %2, align 1
  %8 = zext i8 %7 to i32
  %9 = load i8, i8* %1, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %10, %8
  %12 = trunc i32 %11 to i8
  store i8 %12, i8* %1, align 1
  %13 = icmp sgt i64 %5, 1
  br i1 %13, label %14, label %48

; <label>:14:                                     ; preds = %3
  %15 = getelementptr inbounds i8, i8* %1, i64 1
  br label %16

; <label>:16:                                     ; preds = %14, %16
  %17 = phi i8* [ %21, %16 ], [ %2, %14 ]
  %18 = phi i8* [ %46, %16 ], [ %15, %14 ]
  %19 = phi i32 [ %44, %16 ], [ %11, %14 ]
  %20 = phi i32 [ %24, %16 ], [ %8, %14 ]
  %21 = getelementptr inbounds i8, i8* %17, i64 1
  %22 = and i32 %19, 255
  %23 = load i8, i8* %21, align 1
  %24 = zext i8 %23 to i32
  %25 = sub nsw i32 %24, %20
  %26 = sub nsw i32 %22, %20
  %27 = icmp slt i32 %25, 0
  %28 = sub nsw i32 0, %25
  %29 = select i1 %27, i32 %28, i32 %25
  %30 = icmp slt i32 %26, 0
  %31 = sub nsw i32 0, %26
  %32 = select i1 %30, i32 %31, i32 %26
  %33 = add nsw i32 %25, %26
  %34 = icmp slt i32 %33, 0
  %35 = sub nsw i32 0, %33
  %36 = select i1 %34, i32 %35, i32 %33
  %37 = icmp slt i32 %32, %29
  %38 = select i1 %37, i32 %24, i32 %22
  %39 = select i1 %37, i32 %32, i32 %29
  %40 = icmp slt i32 %36, %39
  %41 = select i1 %40, i32 %20, i32 %38
  %42 = load i8, i8* %18, align 1
  %43 = zext i8 %42 to i32
  %44 = add nuw nsw i32 %41, %43
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %18, align 1
  %46 = getelementptr inbounds i8, i8* %18, i64 1
  %47 = icmp ult i8* %46, %6
  br i1 %47, label %16, label %48

; <label>:48:                                     ; preds = %16, %3
  ret void
}

; Function Attrs: norecurse nounwind sspstrong uwtable
define internal void @MOZ_PNG_read_filt_row_p_mb_px(%struct.png_row_info_struct* nocapture readonly, i8*, i8* nocapture readonly) #3 {
  %4 = ptrtoint i8* %1 to i64
  %5 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i64
  %8 = add nuw nsw i64 %7, 7
  %9 = lshr i64 %8, 3
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %113, label %12

; <label>:12:                                     ; preds = %3
  %13 = getelementptr i8, i8* %1, i64 1
  %14 = icmp ugt i8* %10, %13
  %15 = select i1 %14, i8* %10, i8* %13
  %16 = ptrtoint i8* %15 to i64
  %17 = sub i64 %16, %4
  %18 = icmp ult i64 %17, 32
  br i1 %18, label %101, label %19

; <label>:19:                                     ; preds = %12
  %20 = getelementptr i8, i8* %1, i64 1
  %21 = icmp ugt i8* %10, %20
  %22 = select i1 %21, i8* %10, i8* %20
  %23 = ptrtoint i8* %22 to i64
  %24 = sub i64 %23, %4
  %25 = getelementptr i8, i8* %2, i64 %24
  %26 = icmp ugt i8* %25, %1
  %27 = icmp ugt i8* %22, %2
  %28 = and i1 %26, %27
  br i1 %28, label %101, label %29

; <label>:29:                                     ; preds = %19
  %30 = and i64 %17, -32
  %31 = getelementptr i8, i8* %1, i64 %30
  %32 = getelementptr i8, i8* %2, i64 %30
  %33 = add i64 %30, -32
  %34 = lshr exact i64 %33, 5
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %79, label %38

; <label>:38:                                     ; preds = %29
  %39 = sub nsw i64 %35, %36
  br label %40

; <label>:40:                                     ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %76, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %77, %40 ]
  %43 = getelementptr i8, i8* %1, i64 %41
  %44 = getelementptr i8, i8* %2, i64 %41
  %45 = bitcast i8* %43 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1, !alias.scope !1099, !noalias !1102
  %47 = getelementptr i8, i8* %43, i64 16
  %48 = bitcast i8* %47 to <16 x i8>*
  %49 = load <16 x i8>, <16 x i8>* %48, align 1, !alias.scope !1099, !noalias !1102
  %50 = bitcast i8* %44 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !1102
  %52 = getelementptr i8, i8* %44, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !1102
  %55 = add <16 x i8> %51, %46
  %56 = add <16 x i8> %54, %49
  %57 = bitcast i8* %43 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %57, align 1, !alias.scope !1099, !noalias !1102
  %58 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %58, align 1, !alias.scope !1099, !noalias !1102
  %59 = or i64 %41, 32
  %60 = getelementptr i8, i8* %1, i64 %59
  %61 = getelementptr i8, i8* %2, i64 %59
  %62 = bitcast i8* %60 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !1099, !noalias !1102
  %64 = getelementptr i8, i8* %60, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !1099, !noalias !1102
  %67 = bitcast i8* %61 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1, !alias.scope !1102
  %69 = getelementptr i8, i8* %61, i64 16
  %70 = bitcast i8* %69 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1, !alias.scope !1102
  %72 = add <16 x i8> %68, %63
  %73 = add <16 x i8> %71, %66
  %74 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %72, <16 x i8>* %74, align 1, !alias.scope !1099, !noalias !1102
  %75 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %75, align 1, !alias.scope !1099, !noalias !1102
  %76 = add i64 %41, 64
  %77 = add i64 %42, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %40, !llvm.loop !1104

; <label>:79:                                     ; preds = %40, %29
  %80 = phi i64 [ 0, %29 ], [ %76, %40 ]
  %81 = icmp eq i64 %36, 0
  br i1 %81, label %99, label %82

; <label>:82:                                     ; preds = %79
  %83 = getelementptr i8, i8* %1, i64 %80
  %84 = getelementptr i8, i8* %2, i64 %80
  %85 = bitcast i8* %83 to <16 x i8>*
  %86 = load <16 x i8>, <16 x i8>* %85, align 1, !alias.scope !1099, !noalias !1102
  %87 = getelementptr i8, i8* %83, i64 16
  %88 = bitcast i8* %87 to <16 x i8>*
  %89 = load <16 x i8>, <16 x i8>* %88, align 1, !alias.scope !1099, !noalias !1102
  %90 = bitcast i8* %84 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !1102
  %92 = getelementptr i8, i8* %84, i64 16
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1, !alias.scope !1102
  %95 = add <16 x i8> %91, %86
  %96 = add <16 x i8> %94, %89
  %97 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %97, align 1, !alias.scope !1099, !noalias !1102
  %98 = bitcast i8* %87 to <16 x i8>*
  store <16 x i8> %96, <16 x i8>* %98, align 1, !alias.scope !1099, !noalias !1102
  br label %99

; <label>:99:                                     ; preds = %79, %82
  %100 = icmp eq i64 %17, %30
  br i1 %100, label %113, label %101

; <label>:101:                                    ; preds = %99, %19, %12
  %102 = phi i8* [ %1, %19 ], [ %1, %12 ], [ %31, %99 ]
  %103 = phi i8* [ %2, %19 ], [ %2, %12 ], [ %32, %99 ]
  br label %104

; <label>:104:                                    ; preds = %101, %104
  %105 = phi i8* [ %111, %104 ], [ %102, %101 ]
  %106 = phi i8* [ %108, %104 ], [ %103, %101 ]
  %107 = load i8, i8* %105, align 1
  %108 = getelementptr inbounds i8, i8* %106, i64 1
  %109 = load i8, i8* %106, align 1
  %110 = add i8 %109, %107
  %111 = getelementptr inbounds i8, i8* %105, i64 1
  store i8 %110, i8* %105, align 1
  %112 = icmp ult i8* %111, %10
  br i1 %112, label %104, label %113, !llvm.loop !1105

; <label>:113:                                    ; preds = %104, %99, %3
  %114 = phi i8* [ %2, %3 ], [ %32, %99 ], [ %108, %104 ]
  %115 = phi i8* [ %1, %3 ], [ %31, %99 ], [ %111, %104 ]
  %116 = ptrtoint i8* %115 to i64
  %117 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds i8, i8* %1, i64 %118
  %120 = icmp ult i8* %115, %119
  br i1 %120, label %121, label %231

; <label>:121:                                    ; preds = %113
  %122 = sub nsw i64 0, %9
  %123 = sub i64 %118, %116
  %124 = getelementptr i8, i8* %1, i64 %123
  %125 = ptrtoint i8* %124 to i64
  %126 = icmp ult i8* %124, inttoptr (i64 16 to i8*)
  br i1 %126, label %195, label %127

; <label>:127:                                    ; preds = %121
  %128 = getelementptr i8, i8* %114, i64 %122
  %129 = sub i64 %118, %9
  %130 = sub i64 %129, %116
  %131 = getelementptr i8, i8* %1, i64 %130
  %132 = ptrtoint i8* %131 to i64
  %133 = getelementptr i8, i8* %114, i64 %132
  %134 = getelementptr i8, i8* %115, i64 %122
  %135 = getelementptr i8, i8* %1, i64 %129
  %136 = sub i64 %118, %116
  %137 = getelementptr i8, i8* %1, i64 %136
  %138 = ptrtoint i8* %137 to i64
  %139 = getelementptr i8, i8* %114, i64 %138
  %140 = icmp ult i8* %115, %133
  %141 = icmp ult i8* %128, %119
  %142 = and i1 %140, %141
  %143 = icmp ult i8* %115, %135
  %144 = icmp ult i8* %134, %119
  %145 = and i1 %143, %144
  %146 = or i1 %142, %145
  %147 = icmp ult i8* %115, %139
  %148 = icmp ult i8* %114, %119
  %149 = and i1 %147, %148
  %150 = or i1 %146, %149
  br i1 %150, label %195, label %151

; <label>:151:                                    ; preds = %127
  %152 = and i64 %125, -16
  %153 = getelementptr i8, i8* %115, i64 %152
  %154 = getelementptr i8, i8* %114, i64 %152
  br label %155

; <label>:155:                                    ; preds = %155, %151
  %156 = phi i64 [ 0, %151 ], [ %191, %155 ]
  %157 = getelementptr i8, i8* %115, i64 %156
  %158 = getelementptr i8, i8* %114, i64 %156
  %159 = getelementptr inbounds i8, i8* %158, i64 %122
  %160 = bitcast i8* %159 to <16 x i8>*
  %161 = load <16 x i8>, <16 x i8>* %160, align 1, !alias.scope !1106
  %162 = zext <16 x i8> %161 to <16 x i32>
  %163 = getelementptr inbounds i8, i8* %157, i64 %122
  %164 = bitcast i8* %163 to <16 x i8>*
  %165 = load <16 x i8>, <16 x i8>* %164, align 1, !alias.scope !1109
  %166 = zext <16 x i8> %165 to <16 x i32>
  %167 = bitcast i8* %158 to <16 x i8>*
  %168 = load <16 x i8>, <16 x i8>* %167, align 1, !alias.scope !1111
  %169 = zext <16 x i8> %168 to <16 x i32>
  %170 = sub nsw <16 x i32> %169, %162
  %171 = sub nsw <16 x i32> %166, %162
  %172 = icmp slt <16 x i32> %170, zeroinitializer
  %173 = sub nsw <16 x i32> zeroinitializer, %170
  %174 = select <16 x i1> %172, <16 x i32> %173, <16 x i32> %170
  %175 = icmp slt <16 x i32> %171, zeroinitializer
  %176 = sub nsw <16 x i32> zeroinitializer, %171
  %177 = select <16 x i1> %175, <16 x i32> %176, <16 x i32> %171
  %178 = add nsw <16 x i32> %170, %171
  %179 = icmp slt <16 x i32> %178, zeroinitializer
  %180 = sub nsw <16 x i32> zeroinitializer, %178
  %181 = select <16 x i1> %179, <16 x i32> %180, <16 x i32> %178
  %182 = icmp slt <16 x i32> %177, %174
  %183 = select <16 x i1> %182, <16 x i8> %168, <16 x i8> %165
  %184 = select <16 x i1> %182, <16 x i32> %177, <16 x i32> %174
  %185 = icmp slt <16 x i32> %181, %184
  %186 = select <16 x i1> %185, <16 x i8> %161, <16 x i8> %183
  %187 = bitcast i8* %157 to <16 x i8>*
  %188 = load <16 x i8>, <16 x i8>* %187, align 1, !alias.scope !1113, !noalias !1115
  %189 = add <16 x i8> %186, %188
  %190 = bitcast i8* %157 to <16 x i8>*
  store <16 x i8> %189, <16 x i8>* %190, align 1, !alias.scope !1113, !noalias !1115
  %191 = add i64 %156, 16
  %192 = icmp eq i64 %191, %152
  br i1 %192, label %193, label %155, !llvm.loop !1116

; <label>:193:                                    ; preds = %155
  %194 = icmp eq i64 %152, %125
  br i1 %194, label %231, label %195

; <label>:195:                                    ; preds = %193, %127, %121
  %196 = phi i8* [ %115, %127 ], [ %115, %121 ], [ %153, %193 ]
  %197 = phi i8* [ %114, %127 ], [ %114, %121 ], [ %154, %193 ]
  br label %198

; <label>:198:                                    ; preds = %195, %198
  %199 = phi i8* [ %229, %198 ], [ %196, %195 ]
  %200 = phi i8* [ %207, %198 ], [ %197, %195 ]
  %201 = getelementptr inbounds i8, i8* %200, i64 %122
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = getelementptr inbounds i8, i8* %199, i64 %122
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = getelementptr inbounds i8, i8* %200, i64 1
  %208 = load i8, i8* %200, align 1
  %209 = zext i8 %208 to i32
  %210 = sub nsw i32 %209, %203
  %211 = sub nsw i32 %206, %203
  %212 = icmp slt i32 %210, 0
  %213 = sub nsw i32 0, %210
  %214 = select i1 %212, i32 %213, i32 %210
  %215 = icmp slt i32 %211, 0
  %216 = sub nsw i32 0, %211
  %217 = select i1 %215, i32 %216, i32 %211
  %218 = add nsw i32 %210, %211
  %219 = icmp slt i32 %218, 0
  %220 = sub nsw i32 0, %218
  %221 = select i1 %219, i32 %220, i32 %218
  %222 = icmp slt i32 %217, %214
  %223 = select i1 %222, i8 %208, i8 %205
  %224 = select i1 %222, i32 %217, i32 %214
  %225 = icmp slt i32 %221, %224
  %226 = select i1 %225, i8 %202, i8 %223
  %227 = load i8, i8* %199, align 1
  %228 = add i8 %226, %227
  %229 = getelementptr inbounds i8, i8* %199, i64 1
  store i8 %228, i8* %199, align 1
  %230 = icmp eq i8* %229, %119
  br i1 %230, label %231, label %198, !llvm.loop !1117

; <label>:231:                                    ; preds = %198, %193, %113
  ret void
}

declare hidden i32 @MOZ_Z_deflateEnd(%struct.z_stream_s*) local_unnamed_addr #8

declare hidden i32 @MOZ_Z_deflateReset(%struct.z_stream_s*) local_unnamed_addr #8

declare hidden i32 @MOZ_Z_deflateInit2_(%struct.z_stream_s*, i32, i32, i32, i32, i32, i8*, i32) local_unnamed_addr #8

attributes #0 = { norecurse nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { norecurse nounwind readonly sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { norecurse nounwind readnone sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readnone speculatable }
attributes #15 = { nounwind readnone sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { argmemonly nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind readnone }
attributes #18 = { nounwind }
attributes #19 = { noreturn }
attributes #20 = { nounwind readonly }
attributes #21 = { nounwind returns_twice }
attributes #22 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.1 (tags/RELEASE_701/final)"}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"MOZ_PNG_warning: argument 0"}
!5 = distinct !{!5, !"MOZ_PNG_warning"}
!6 = distinct !{!6, !7, !"MOZ_PNG_malloc_warn: argument 0"}
!7 = distinct !{!7, !"MOZ_PNG_malloc_warn"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"MOZ_PNG_warning: argument 0"}
!10 = distinct !{!10, !"MOZ_PNG_warning"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"MOZ_PNG_set_error_fn: argument 0"}
!13 = distinct !{!13, !"MOZ_PNG_set_error_fn"}
!14 = !{!15, !17}
!15 = distinct !{!15, !16, !"MOZ_PNG_warning: argument 0"}
!16 = distinct !{!16, !"MOZ_PNG_warning"}
!17 = distinct !{!17, !18, !"MOZ_PNG_malloc_warn: argument 0"}
!18 = distinct !{!18, !"MOZ_PNG_malloc_warn"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"png_colorspace_check_gamma: argument 1"}
!21 = distinct !{!21, !"png_colorspace_check_gamma"}
!22 = !{!23}
!23 = distinct !{!23, !21, !"png_colorspace_check_gamma: argument 0"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"MOZ_PNG_chunk_benign_err: argument 0"}
!26 = distinct !{!26, !"MOZ_PNG_chunk_benign_err"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"MOZ_PNG_warning: argument 0"}
!29 = distinct !{!29, !"MOZ_PNG_warning"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"MOZ_PNG_warning: argument 0"}
!32 = distinct !{!32, !"MOZ_PNG_warning"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"MOZ_PNG_free_data: argument 1"}
!35 = distinct !{!35, !"MOZ_PNG_free_data"}
!36 = !{!37}
!37 = distinct !{!37, !35, !"MOZ_PNG_free_data: argument 0"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"png_colorspace_set_xy_and_XYZ: argument 1"}
!40 = distinct !{!40, !"png_colorspace_set_xy_and_XYZ"}
!41 = !{!42}
!42 = distinct !{!42, !40, !"png_colorspace_set_xy_and_XYZ: argument 0"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"MOZ_PNG_benign_err: argument 0"}
!45 = distinct !{!45, !"MOZ_PNG_benign_err"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"MOZ_PNG_warning: argument 0"}
!48 = distinct !{!48, !"MOZ_PNG_warning"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"MOZ_PNG_benign_err: argument 0"}
!51 = distinct !{!51, !"MOZ_PNG_benign_err"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"MOZ_PNG_warning: argument 0"}
!54 = distinct !{!54, !"MOZ_PNG_warning"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"png_colorspace_set_xy_and_XYZ: argument 1"}
!57 = distinct !{!57, !"png_colorspace_set_xy_and_XYZ"}
!58 = !{!59}
!59 = distinct !{!59, !57, !"png_colorspace_set_xy_and_XYZ: argument 0"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"MOZ_PNG_benign_err: argument 0"}
!62 = distinct !{!62, !"MOZ_PNG_benign_err"}
!63 = !{!64}
!64 = distinct !{!64, !65, !"MOZ_PNG_warning: argument 0"}
!65 = distinct !{!65, !"MOZ_PNG_warning"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"MOZ_PNG_benign_err: argument 0"}
!68 = distinct !{!68, !"MOZ_PNG_benign_err"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"MOZ_PNG_warning: argument 0"}
!71 = distinct !{!71, !"MOZ_PNG_warning"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"MOZ_PNG_benign_err: argument 0"}
!74 = distinct !{!74, !"MOZ_PNG_benign_err"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"MOZ_PNG_warning: argument 0"}
!77 = distinct !{!77, !"MOZ_PNG_warning"}
!78 = !{!79}
!79 = distinct !{!79, !80, !"png_colorspace_check_gamma: argument 1"}
!80 = distinct !{!80, !"png_colorspace_check_gamma"}
!81 = !{!82}
!82 = distinct !{!82, !80, !"png_colorspace_check_gamma: argument 0"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"MOZ_PNG_destroy_gamma_table: argument 0"}
!85 = distinct !{!85, !"MOZ_PNG_destroy_gamma_table"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"MOZ_PNG_build_8bit_table: argument 0"}
!88 = distinct !{!88, !"MOZ_PNG_build_8bit_table"}
!89 = !{!90, !92}
!90 = distinct !{!90, !91, !"MOZ_PNG_calloc: argument 0"}
!91 = distinct !{!91, !"MOZ_PNG_calloc"}
!92 = distinct !{!92, !93, !"MOZ_PNG_build_16to8_table: argument 0"}
!93 = distinct !{!93, !"MOZ_PNG_build_16to8_table"}
!94 = !{!92}
!95 = distinct !{!95, !96}
!96 = !{!"llvm.loop.unroll.disable"}
!97 = distinct !{!97, !96}
!98 = !{!99, !101}
!99 = distinct !{!99, !100, !"MOZ_PNG_calloc: argument 0"}
!100 = distinct !{!100, !"MOZ_PNG_calloc"}
!101 = distinct !{!101, !102, !"MOZ_PNG_build_16bit_table: argument 0"}
!102 = distinct !{!102, !"MOZ_PNG_build_16bit_table"}
!103 = !{!101}
!104 = distinct !{!104, !105}
!105 = !{!"llvm.loop.isvectorized", i32 1}
!106 = !{!107}
!107 = distinct !{!107, !108, !"MOZ_PNG_warning: argument 0"}
!108 = distinct !{!108, !"MOZ_PNG_warning"}
!109 = !{!110, !112}
!110 = distinct !{!110, !111, !"MOZ_PNG_warning: argument 0"}
!111 = distinct !{!111, !"MOZ_PNG_warning"}
!112 = distinct !{!112, !113, !"MOZ_PNG_malloc_warn: argument 0"}
!113 = distinct !{!113, !"MOZ_PNG_malloc_warn"}
!114 = !{!115}
!115 = distinct !{!115, !116, !"MOZ_PNG_warning: argument 0"}
!116 = distinct !{!116, !"MOZ_PNG_warning"}
!117 = !{!118}
!118 = distinct !{!118, !119, !"MOZ_PNG_push_rest_buf: argument 0"}
!119 = distinct !{!119, !"MOZ_PNG_push_rest_buf"}
!120 = !{!121}
!121 = distinct !{!121, !122, !"MOZ_PNG_proc_some_data: argument 0"}
!122 = distinct !{!122, !"MOZ_PNG_proc_some_data"}
!123 = !{!124}
!124 = distinct !{!124, !122, !"MOZ_PNG_proc_some_data: argument 1"}
!125 = !{!126}
!126 = distinct !{!126, !127}
!127 = distinct !{!127, !"LVerDomain"}
!128 = !{!129}
!129 = distinct !{!129, !127}
!130 = distinct !{!130, !105}
!131 = distinct !{!131, !96}
!132 = distinct !{!132, !96}
!133 = distinct !{!133, !105}
!134 = !{!135, !137}
!135 = distinct !{!135, !136, !"MOZ_PNG_warning: argument 0"}
!136 = distinct !{!136, !"MOZ_PNG_warning"}
!137 = distinct !{!137, !138, !"MOZ_PNG_malloc_warn: argument 0"}
!138 = distinct !{!138, !"MOZ_PNG_malloc_warn"}
!139 = !{!140}
!140 = distinct !{!140, !141, !"MOZ_PNG_app_warn: argument 0"}
!141 = distinct !{!141, !"MOZ_PNG_app_warn"}
!142 = !{!143}
!143 = distinct !{!143, !144, !"MOZ_PNG_warning: argument 0"}
!144 = distinct !{!144, !"MOZ_PNG_warning"}
!145 = !{!146}
!146 = distinct !{!146, !147, !"MOZ_PNG_get_uint_31: argument 0"}
!147 = distinct !{!147, !"MOZ_PNG_get_uint_31"}
!148 = !{!149}
!149 = distinct !{!149, !150, !"MOZ_PNG_reset_crc: argument 0"}
!150 = distinct !{!150, !"MOZ_PNG_reset_crc"}
!151 = !{!152, !154}
!152 = distinct !{!152, !153, !"MOZ_PNG_read_data: argument 0"}
!153 = distinct !{!153, !"MOZ_PNG_read_data"}
!154 = distinct !{!154, !155, !"MOZ_PNG_crc_read: argument 0"}
!155 = distinct !{!155, !"MOZ_PNG_crc_read"}
!156 = !{!157, !154}
!157 = distinct !{!157, !158, !"MOZ_PNG_calc_crc: argument 0"}
!158 = distinct !{!158, !"MOZ_PNG_calc_crc"}
!159 = !{!157}
!160 = !{!161}
!161 = distinct !{!161, !162, !"png_check_chunk_length: argument 0"}
!162 = distinct !{!162, !"png_check_chunk_length"}
!163 = !{!164}
!164 = distinct !{!164, !165, !"MOZ_PNG_push_have_end: argument 0"}
!165 = distinct !{!165, !"MOZ_PNG_push_have_end"}
!166 = !{!167}
!167 = distinct !{!167, !165, !"MOZ_PNG_push_have_end: argument 1"}
!168 = !{!169}
!169 = distinct !{!169, !170, !"MOZ_PNG_benign_err: argument 0"}
!170 = distinct !{!170, !"MOZ_PNG_benign_err"}
!171 = !{!172}
!172 = distinct !{!172, !173, !"MOZ_PNG_warning: argument 0"}
!173 = distinct !{!173, !"MOZ_PNG_warning"}
!174 = !{!175}
!175 = distinct !{!175, !176, !"MOZ_PNG_handle_IEND: argument 0"}
!176 = distinct !{!176, !"MOZ_PNG_handle_IEND"}
!177 = !{!178, !175}
!178 = distinct !{!178, !179, !"MOZ_PNG_chunk_benign_err: argument 0"}
!179 = distinct !{!179, !"MOZ_PNG_chunk_benign_err"}
!180 = !{!181}
!181 = distinct !{!181, !182, !"MOZ_PNG_push_have_end: argument 0"}
!182 = distinct !{!182, !"MOZ_PNG_push_have_end"}
!183 = !{!184}
!184 = distinct !{!184, !182, !"MOZ_PNG_push_have_end: argument 1"}
!185 = !{!186}
!186 = distinct !{!186, !187, !"MOZ_PNG_push_have_info: argument 0"}
!187 = distinct !{!187, !"MOZ_PNG_push_have_info"}
!188 = !{!189}
!189 = distinct !{!189, !187, !"MOZ_PNG_push_have_info: argument 1"}
!190 = !{!191}
!191 = distinct !{!191, !192, !"MOZ_PNG_handle_unknown: argument 0"}
!192 = distinct !{!192, !"MOZ_PNG_handle_unknown"}
!193 = !{!194}
!194 = distinct !{!194, !195, !"MOZ_PNG_get_uint_31: argument 0"}
!195 = distinct !{!195, !"MOZ_PNG_get_uint_31"}
!196 = !{!197}
!197 = distinct !{!197, !198, !"MOZ_PNG_reset_crc: argument 0"}
!198 = distinct !{!198, !"MOZ_PNG_reset_crc"}
!199 = !{!200, !202}
!200 = distinct !{!200, !201, !"MOZ_PNG_read_data: argument 0"}
!201 = distinct !{!201, !"MOZ_PNG_read_data"}
!202 = distinct !{!202, !203, !"MOZ_PNG_crc_read: argument 0"}
!203 = distinct !{!203, !"MOZ_PNG_crc_read"}
!204 = !{!205, !202}
!205 = distinct !{!205, !206, !"MOZ_PNG_calc_crc: argument 0"}
!206 = distinct !{!206, !"MOZ_PNG_calc_crc"}
!207 = !{!205}
!208 = !{!209}
!209 = distinct !{!209, !210, !"MOZ_PNG_calc_crc: argument 0"}
!210 = distinct !{!210, !"MOZ_PNG_calc_crc"}
!211 = !{!212}
!212 = distinct !{!212, !213, !"MOZ_PNG_calc_crc: argument 0"}
!213 = distinct !{!213, !"MOZ_PNG_calc_crc"}
!214 = !{!215}
!215 = distinct !{!215, !216, !"MOZ_PNG_read_data: argument 0"}
!216 = distinct !{!216, !"MOZ_PNG_read_data"}
!217 = !{!218}
!218 = distinct !{!218, !219, !"MOZ_PNG_calc_crc: argument 0"}
!219 = distinct !{!219, !"MOZ_PNG_calc_crc"}
!220 = !{!221, !223}
!221 = distinct !{!221, !222, !"MOZ_PNG_read_data: argument 0"}
!222 = distinct !{!222, !"MOZ_PNG_read_data"}
!223 = distinct !{!223, !224, !"MOZ_PNG_crc_read: argument 0"}
!224 = distinct !{!224, !"MOZ_PNG_crc_read"}
!225 = !{!226, !223}
!226 = distinct !{!226, !227, !"MOZ_PNG_calc_crc: argument 0"}
!227 = distinct !{!227, !"MOZ_PNG_calc_crc"}
!228 = !{!226}
!229 = !{!230}
!230 = distinct !{!230, !231, !"MOZ_PNG_crc_error: argument 0"}
!231 = distinct !{!231, !"MOZ_PNG_crc_error"}
!232 = !{!233, !230}
!233 = distinct !{!233, !234, !"MOZ_PNG_read_data: argument 0"}
!234 = distinct !{!234, !"MOZ_PNG_read_data"}
!235 = !{!236, !238}
!236 = distinct !{!236, !237, !"MOZ_PNG_read_data: argument 0"}
!237 = distinct !{!237, !"MOZ_PNG_read_data"}
!238 = distinct !{!238, !239, !"MOZ_PNG_crc_read: argument 0"}
!239 = distinct !{!239, !"MOZ_PNG_crc_read"}
!240 = !{!241, !238}
!241 = distinct !{!241, !242, !"MOZ_PNG_calc_crc: argument 0"}
!242 = distinct !{!242, !"MOZ_PNG_calc_crc"}
!243 = !{!241}
!244 = !{!245}
!245 = distinct !{!245, !246, !"MOZ_PNG_get_uint_31: argument 0"}
!246 = distinct !{!246, !"MOZ_PNG_get_uint_31"}
!247 = !{!248, !250}
!248 = distinct !{!248, !249, !"MOZ_PNG_read_data: argument 0"}
!249 = distinct !{!249, !"MOZ_PNG_read_data"}
!250 = distinct !{!250, !251, !"MOZ_PNG_crc_read: argument 0"}
!251 = distinct !{!251, !"MOZ_PNG_crc_read"}
!252 = !{!253, !250}
!253 = distinct !{!253, !254, !"MOZ_PNG_calc_crc: argument 0"}
!254 = distinct !{!254, !"MOZ_PNG_calc_crc"}
!255 = !{!253}
!256 = !{!257}
!257 = distinct !{!257, !258, !"MOZ_PNG_get_uint_31: argument 0"}
!258 = distinct !{!258, !"MOZ_PNG_get_uint_31"}
!259 = !{!260}
!260 = distinct !{!260, !261, !"MOZ_PNG_get_uint_31: argument 0"}
!261 = distinct !{!261, !"MOZ_PNG_get_uint_31"}
!262 = !{!263}
!263 = distinct !{!263, !264, !"MOZ_PNG_get_uint_31: argument 0"}
!264 = distinct !{!264, !"MOZ_PNG_get_uint_31"}
!265 = !{!266}
!266 = distinct !{!266, !267, !"MOZ_PNG_get_uint_31: argument 0"}
!267 = distinct !{!267, !"MOZ_PNG_get_uint_31"}
!268 = !{!269}
!269 = distinct !{!269, !270, !"MOZ_PNG_get_valid: argument 1"}
!270 = distinct !{!270, !"MOZ_PNG_get_valid"}
!271 = !{!272}
!272 = distinct !{!272, !270, !"MOZ_PNG_get_valid: argument 0"}
!273 = !{!274}
!274 = distinct !{!274, !275, !"MOZ_PNG_warning: argument 0"}
!275 = distinct !{!275, !"MOZ_PNG_warning"}
!276 = !{!277, !279}
!277 = distinct !{!277, !278, !"MOZ_PNG_read_data: argument 0"}
!278 = distinct !{!278, !"MOZ_PNG_read_data"}
!279 = distinct !{!279, !280, !"MOZ_PNG_crc_read: argument 0"}
!280 = distinct !{!280, !"MOZ_PNG_crc_read"}
!281 = !{!282, !279}
!282 = distinct !{!282, !283, !"MOZ_PNG_calc_crc: argument 0"}
!283 = distinct !{!283, !"MOZ_PNG_calc_crc"}
!284 = !{!282}
!285 = !{!286}
!286 = distinct !{!286, !287, !"MOZ_PNG_get_uint_31: argument 0"}
!287 = distinct !{!287, !"MOZ_PNG_get_uint_31"}
!288 = !{!289}
!289 = distinct !{!289, !290, !"MOZ_PNG_get_uint_31: argument 0"}
!290 = distinct !{!290, !"MOZ_PNG_get_uint_31"}
!291 = !{!292}
!292 = distinct !{!292, !293, !"MOZ_PNG_set_IHDR: argument 1"}
!293 = distinct !{!293, !"MOZ_PNG_set_IHDR"}
!294 = !{!295}
!295 = distinct !{!295, !293, !"MOZ_PNG_set_IHDR: argument 0"}
!296 = !{!297}
!297 = distinct !{!297, !298, !"MOZ_PNG_chunk_benign_err: argument 0"}
!298 = distinct !{!298, !"MOZ_PNG_chunk_benign_err"}
!299 = !{!300}
!300 = distinct !{!300, !301, !"MOZ_PNG_chunk_benign_err: argument 0"}
!301 = distinct !{!301, !"MOZ_PNG_chunk_benign_err"}
!302 = !{!303}
!303 = distinct !{!303, !304, !"MOZ_PNG_chunk_benign_err: argument 0"}
!304 = distinct !{!304, !"MOZ_PNG_chunk_benign_err"}
!305 = !{!306}
!306 = distinct !{!306, !307, !"MOZ_PNG_chunk_benign_err: argument 0"}
!307 = distinct !{!307, !"MOZ_PNG_chunk_benign_err"}
!308 = !{!309, !311}
!309 = distinct !{!309, !310, !"MOZ_PNG_read_data: argument 0"}
!310 = distinct !{!310, !"MOZ_PNG_read_data"}
!311 = distinct !{!311, !312, !"MOZ_PNG_crc_read: argument 0"}
!312 = distinct !{!312, !"MOZ_PNG_crc_read"}
!313 = !{!314, !311}
!314 = distinct !{!314, !315, !"MOZ_PNG_calc_crc: argument 0"}
!315 = distinct !{!315, !"MOZ_PNG_calc_crc"}
!316 = !{!314}
!317 = !{!318}
!318 = distinct !{!318, !319, !"MOZ_PNG_crc_error: argument 0"}
!319 = distinct !{!319, !"MOZ_PNG_crc_error"}
!320 = !{!321, !318}
!321 = distinct !{!321, !322, !"MOZ_PNG_read_data: argument 0"}
!322 = distinct !{!322, !"MOZ_PNG_read_data"}
!323 = !{!324}
!324 = distinct !{!324, !325, !"MOZ_PNG_chunk_benign_err: argument 0"}
!325 = distinct !{!325, !"MOZ_PNG_chunk_benign_err"}
!326 = !{!327}
!327 = distinct !{!327, !328, !"MOZ_PNG_chunk_benign_err: argument 0"}
!328 = distinct !{!328, !"MOZ_PNG_chunk_benign_err"}
!329 = !{!330}
!330 = distinct !{!330, !331, !"MOZ_PNG_chunk_benign_err: argument 0"}
!331 = distinct !{!331, !"MOZ_PNG_chunk_benign_err"}
!332 = !{!333, !335}
!333 = distinct !{!333, !334, !"MOZ_PNG_read_data: argument 0"}
!334 = distinct !{!334, !"MOZ_PNG_read_data"}
!335 = distinct !{!335, !336, !"MOZ_PNG_crc_read: argument 0"}
!336 = distinct !{!336, !"MOZ_PNG_crc_read"}
!337 = !{!338, !335}
!338 = distinct !{!338, !339, !"MOZ_PNG_calc_crc: argument 0"}
!339 = distinct !{!339, !"MOZ_PNG_calc_crc"}
!340 = !{!338}
!341 = !{!342, !344}
!342 = distinct !{!342, !343, !"MOZ_PNG_cs_sync: argument 0"}
!343 = distinct !{!343, !"MOZ_PNG_cs_sync"}
!344 = distinct !{!344, !343, !"MOZ_PNG_cs_sync: argument 1"}
!345 = !{!346}
!346 = distinct !{!346, !347, !"MOZ_PNG_chunk_benign_err: argument 0"}
!347 = distinct !{!347, !"MOZ_PNG_chunk_benign_err"}
!348 = !{!349}
!349 = distinct !{!349, !350, !"MOZ_PNG_chunk_benign_err: argument 0"}
!350 = distinct !{!350, !"MOZ_PNG_chunk_benign_err"}
!351 = !{!352, !354}
!352 = distinct !{!352, !353, !"MOZ_PNG_read_data: argument 0"}
!353 = distinct !{!353, !"MOZ_PNG_read_data"}
!354 = distinct !{!354, !355, !"MOZ_PNG_crc_read: argument 0"}
!355 = distinct !{!355, !"MOZ_PNG_crc_read"}
!356 = !{!357, !354}
!357 = distinct !{!357, !358, !"MOZ_PNG_calc_crc: argument 0"}
!358 = distinct !{!358, !"MOZ_PNG_calc_crc"}
!359 = !{!357}
!360 = !{!361}
!361 = distinct !{!361, !362, !"MOZ_PNG_chunk_benign_err: argument 0"}
!362 = distinct !{!362, !"MOZ_PNG_chunk_benign_err"}
!363 = !{!364, !366}
!364 = distinct !{!364, !365, !"MOZ_PNG_cs_sync: argument 0"}
!365 = distinct !{!365, !"MOZ_PNG_cs_sync"}
!366 = distinct !{!366, !365, !"MOZ_PNG_cs_sync: argument 1"}
!367 = !{!368}
!368 = distinct !{!368, !369, !"MOZ_PNG_chunk_benign_err: argument 0"}
!369 = distinct !{!369, !"MOZ_PNG_chunk_benign_err"}
!370 = !{!371, !373}
!371 = distinct !{!371, !372, !"MOZ_PNG_cs_sync: argument 0"}
!372 = distinct !{!372, !"MOZ_PNG_cs_sync"}
!373 = distinct !{!373, !372, !"MOZ_PNG_cs_sync: argument 1"}
!374 = !{!375}
!375 = distinct !{!375, !376, !"MOZ_PNG_chunk_benign_err: argument 0"}
!376 = distinct !{!376, !"MOZ_PNG_chunk_benign_err"}
!377 = !{!378}
!378 = distinct !{!378, !379, !"MOZ_PNG_chunk_benign_err: argument 0"}
!379 = distinct !{!379, !"MOZ_PNG_chunk_benign_err"}
!380 = !{!381, !383}
!381 = distinct !{!381, !382, !"MOZ_PNG_read_data: argument 0"}
!382 = distinct !{!382, !"MOZ_PNG_read_data"}
!383 = distinct !{!383, !384, !"MOZ_PNG_crc_read: argument 0"}
!384 = distinct !{!384, !"MOZ_PNG_crc_read"}
!385 = !{!386, !383}
!386 = distinct !{!386, !387, !"MOZ_PNG_calc_crc: argument 0"}
!387 = distinct !{!387, !"MOZ_PNG_calc_crc"}
!388 = !{!386}
!389 = !{!390, !392}
!390 = distinct !{!390, !391, !"MOZ_PNG_cs_sync: argument 0"}
!391 = distinct !{!391, !"MOZ_PNG_cs_sync"}
!392 = distinct !{!392, !391, !"MOZ_PNG_cs_sync: argument 1"}
!393 = !{!394}
!394 = distinct !{!394, !395, !"MOZ_PNG_chunk_benign_err: argument 0"}
!395 = distinct !{!395, !"MOZ_PNG_chunk_benign_err"}
!396 = !{!397, !399}
!397 = distinct !{!397, !398, !"MOZ_PNG_cs_sync: argument 0"}
!398 = distinct !{!398, !"MOZ_PNG_cs_sync"}
!399 = distinct !{!399, !398, !"MOZ_PNG_cs_sync: argument 1"}
!400 = !{!401}
!401 = distinct !{!401, !402, !"MOZ_PNG_chunk_benign_err: argument 0"}
!402 = distinct !{!402, !"MOZ_PNG_chunk_benign_err"}
!403 = !{!404}
!404 = distinct !{!404, !405, !"MOZ_PNG_chunk_benign_err: argument 0"}
!405 = distinct !{!405, !"MOZ_PNG_chunk_benign_err"}
!406 = !{!407, !409}
!407 = distinct !{!407, !408, !"MOZ_PNG_read_data: argument 0"}
!408 = distinct !{!408, !"MOZ_PNG_read_data"}
!409 = distinct !{!409, !410, !"MOZ_PNG_crc_read: argument 0"}
!410 = distinct !{!410, !"MOZ_PNG_crc_read"}
!411 = !{!412, !409}
!412 = distinct !{!412, !413, !"MOZ_PNG_calc_crc: argument 0"}
!413 = distinct !{!413, !"MOZ_PNG_calc_crc"}
!414 = !{!412}
!415 = !{!416}
!416 = distinct !{!416, !417, !"MOZ_PNG_chunk_benign_err: argument 0"}
!417 = distinct !{!417, !"MOZ_PNG_chunk_benign_err"}
!418 = !{!419}
!419 = distinct !{!419, !420, !"MOZ_PNG_icc_check_length: argument 0"}
!420 = distinct !{!420, !"MOZ_PNG_icc_check_length"}
!421 = !{!422}
!422 = distinct !{!422, !420, !"MOZ_PNG_icc_check_length: argument 1"}
!423 = !{!424}
!424 = distinct !{!424, !425, !"png_read_buffer: argument 0"}
!425 = distinct !{!425, !"png_read_buffer"}
!426 = !{!427}
!427 = distinct !{!427, !428, !"MOZ_PNG_free_data: argument 1"}
!428 = distinct !{!428, !"MOZ_PNG_free_data"}
!429 = !{!430}
!430 = distinct !{!430, !428, !"MOZ_PNG_free_data: argument 0"}
!431 = !{!432, !434}
!432 = distinct !{!432, !433, !"MOZ_PNG_cs_sync: argument 0"}
!433 = distinct !{!433, !"MOZ_PNG_cs_sync"}
!434 = distinct !{!434, !433, !"MOZ_PNG_cs_sync: argument 1"}
!435 = !{!436, !438}
!436 = distinct !{!436, !437, !"MOZ_PNG_cs_sync: argument 0"}
!437 = distinct !{!437, !"MOZ_PNG_cs_sync"}
!438 = distinct !{!438, !437, !"MOZ_PNG_cs_sync: argument 1"}
!439 = !{!440}
!440 = distinct !{!440, !441, !"MOZ_PNG_chunk_benign_err: argument 0"}
!441 = distinct !{!441, !"MOZ_PNG_chunk_benign_err"}
!442 = !{!443}
!443 = distinct !{!443, !444, !"MOZ_PNG_chunk_benign_err: argument 0"}
!444 = distinct !{!444, !"MOZ_PNG_chunk_benign_err"}
!445 = !{!446}
!446 = distinct !{!446, !447, !"MOZ_PNG_chunk_benign_err: argument 0"}
!447 = distinct !{!447, !"MOZ_PNG_chunk_benign_err"}
!448 = !{!449}
!449 = distinct !{!449, !450, !"MOZ_PNG_chunk_benign_err: argument 0"}
!450 = distinct !{!450, !"MOZ_PNG_chunk_benign_err"}
!451 = !{!452, !454}
!452 = distinct !{!452, !453, !"MOZ_PNG_read_data: argument 0"}
!453 = distinct !{!453, !"MOZ_PNG_read_data"}
!454 = distinct !{!454, !455, !"MOZ_PNG_crc_read: argument 0"}
!455 = distinct !{!455, !"MOZ_PNG_crc_read"}
!456 = !{!457, !454}
!457 = distinct !{!457, !458, !"MOZ_PNG_calc_crc: argument 0"}
!458 = distinct !{!458, !"MOZ_PNG_calc_crc"}
!459 = !{!457}
!460 = !{!461}
!461 = distinct !{!461, !462, !"MOZ_PNG_chunk_benign_err: argument 0"}
!462 = distinct !{!462, !"MOZ_PNG_chunk_benign_err"}
!463 = !{!464, !466}
!464 = distinct !{!464, !465, !"MOZ_PNG_read_data: argument 0"}
!465 = distinct !{!465, !"MOZ_PNG_read_data"}
!466 = distinct !{!466, !467, !"MOZ_PNG_crc_read: argument 0"}
!467 = distinct !{!467, !"MOZ_PNG_crc_read"}
!468 = !{!469, !466}
!469 = distinct !{!469, !470, !"MOZ_PNG_calc_crc: argument 0"}
!470 = distinct !{!470, !"MOZ_PNG_calc_crc"}
!471 = !{!469}
!472 = !{!473}
!473 = distinct !{!473, !474, !"MOZ_PNG_chunk_benign_err: argument 0"}
!474 = distinct !{!474, !"MOZ_PNG_chunk_benign_err"}
!475 = !{!476}
!476 = distinct !{!476, !477, !"MOZ_PNG_chunk_benign_err: argument 0"}
!477 = distinct !{!477, !"MOZ_PNG_chunk_benign_err"}
!478 = !{!479, !481}
!479 = distinct !{!479, !480, !"MOZ_PNG_read_data: argument 0"}
!480 = distinct !{!480, !"MOZ_PNG_read_data"}
!481 = distinct !{!481, !482, !"MOZ_PNG_crc_read: argument 0"}
!482 = distinct !{!482, !"MOZ_PNG_crc_read"}
!483 = !{!484, !481}
!484 = distinct !{!484, !485, !"MOZ_PNG_calc_crc: argument 0"}
!485 = distinct !{!485, !"MOZ_PNG_calc_crc"}
!486 = !{!484}
!487 = !{!488}
!488 = distinct !{!488, !489, !"MOZ_PNG_chunk_benign_err: argument 0"}
!489 = distinct !{!489, !"MOZ_PNG_chunk_benign_err"}
!490 = !{!491, !493}
!491 = distinct !{!491, !492, !"MOZ_PNG_read_data: argument 0"}
!492 = distinct !{!492, !"MOZ_PNG_read_data"}
!493 = distinct !{!493, !494, !"MOZ_PNG_crc_read: argument 0"}
!494 = distinct !{!494, !"MOZ_PNG_crc_read"}
!495 = !{!496, !493}
!496 = distinct !{!496, !497, !"MOZ_PNG_calc_crc: argument 0"}
!497 = distinct !{!497, !"MOZ_PNG_calc_crc"}
!498 = !{!496}
!499 = !{!500}
!500 = distinct !{!500, !501, !"MOZ_PNG_get_uint_31: argument 0"}
!501 = distinct !{!501, !"MOZ_PNG_get_uint_31"}
!502 = !{!503}
!503 = distinct !{!503, !504, !"MOZ_PNG_get_uint_31: argument 0"}
!504 = distinct !{!504, !"MOZ_PNG_get_uint_31"}
!505 = !{!506}
!506 = distinct !{!506, !507, !"MOZ_PNG_warning: argument 0"}
!507 = distinct !{!507, !"MOZ_PNG_warning"}
!508 = !{!509}
!509 = distinct !{!509, !510, !"png_zlib_inflate: argument 0"}
!510 = distinct !{!510, !"png_zlib_inflate"}
!511 = !{!512}
!512 = distinct !{!512, !513, !"MOZ_PNG_benign_err: argument 0"}
!513 = distinct !{!513, !"MOZ_PNG_benign_err"}
!514 = !{!515}
!515 = distinct !{!515, !516, !"MOZ_PNG_warning: argument 0"}
!516 = distinct !{!516, !"MOZ_PNG_warning"}
!517 = !{!518}
!518 = distinct !{!518, !519, !"MOZ_PNG_read_filt_row: argument 0"}
!519 = distinct !{!519, !"MOZ_PNG_read_filt_row"}
!520 = !{!521, !518}
!521 = distinct !{!521, !522, !"MOZ_PNG_init_filt_func: argument 0"}
!522 = distinct !{!522, !"MOZ_PNG_init_filt_func"}
!523 = !{!524}
!524 = distinct !{!524, !525, !"MOZ_PNG_push_have_row: argument 0"}
!525 = distinct !{!525, !"MOZ_PNG_push_have_row"}
!526 = !{!527}
!527 = distinct !{!527, !528, !"MOZ_PNG_push_have_row: argument 0"}
!528 = distinct !{!528, !"MOZ_PNG_push_have_row"}
!529 = !{!530}
!530 = distinct !{!530, !531, !"MOZ_PNG_push_have_row: argument 0"}
!531 = distinct !{!531, !"MOZ_PNG_push_have_row"}
!532 = !{!533}
!533 = distinct !{!533, !534, !"MOZ_PNG_push_have_row: argument 0"}
!534 = distinct !{!534, !"MOZ_PNG_push_have_row"}
!535 = !{!536}
!536 = distinct !{!536, !537, !"MOZ_PNG_push_have_row: argument 0"}
!537 = distinct !{!537, !"MOZ_PNG_push_have_row"}
!538 = !{!539}
!539 = distinct !{!539, !540, !"MOZ_PNG_push_have_row: argument 0"}
!540 = distinct !{!540, !"MOZ_PNG_push_have_row"}
!541 = !{!542}
!542 = distinct !{!542, !543, !"MOZ_PNG_push_have_row: argument 0"}
!543 = distinct !{!543, !"MOZ_PNG_push_have_row"}
!544 = !{!545}
!545 = distinct !{!545, !546, !"MOZ_PNG_push_have_row: argument 0"}
!546 = distinct !{!546, !"MOZ_PNG_push_have_row"}
!547 = !{!548}
!548 = distinct !{!548, !549, !"MOZ_PNG_push_have_row: argument 0"}
!549 = distinct !{!549, !"MOZ_PNG_push_have_row"}
!550 = !{!551}
!551 = distinct !{!551, !552, !"MOZ_PNG_push_have_row: argument 0"}
!552 = distinct !{!552, !"MOZ_PNG_push_have_row"}
!553 = !{!554}
!554 = distinct !{!554, !555, !"MOZ_PNG_push_have_row: argument 0"}
!555 = distinct !{!555, !"MOZ_PNG_push_have_row"}
!556 = !{!557}
!557 = distinct !{!557, !558, !"MOZ_PNG_push_have_row: argument 0"}
!558 = distinct !{!558, !"MOZ_PNG_push_have_row"}
!559 = !{!560}
!560 = distinct !{!560, !561, !"MOZ_PNG_push_have_row: argument 0"}
!561 = distinct !{!561, !"MOZ_PNG_push_have_row"}
!562 = !{!563}
!563 = distinct !{!563, !564, !"MOZ_PNG_push_have_row: argument 0"}
!564 = distinct !{!564, !"MOZ_PNG_push_have_row"}
!565 = !{!566}
!566 = distinct !{!566, !567, !"MOZ_PNG_push_have_row: argument 0"}
!567 = distinct !{!567, !"MOZ_PNG_push_have_row"}
!568 = !{!569}
!569 = distinct !{!569, !570, !"MOZ_PNG_push_have_row: argument 0"}
!570 = distinct !{!570, !"MOZ_PNG_push_have_row"}
!571 = !{!572}
!572 = distinct !{!572, !573, !"MOZ_PNG_push_have_row: argument 0"}
!573 = distinct !{!573, !"MOZ_PNG_push_have_row"}
!574 = !{!575}
!575 = distinct !{!575, !576, !"MOZ_PNG_push_have_row: argument 0"}
!576 = distinct !{!576, !"MOZ_PNG_push_have_row"}
!577 = !{!578}
!578 = distinct !{!578, !579, !"MOZ_PNG_push_have_row: argument 0"}
!579 = distinct !{!579, !"MOZ_PNG_push_have_row"}
!580 = !{!581}
!581 = distinct !{!581, !582, !"MOZ_PNG_init_filt_func: argument 0"}
!582 = distinct !{!582, !"MOZ_PNG_init_filt_func"}
!583 = !{!584}
!584 = distinct !{!584, !585, !"MOZ_PNG_do_gamma: argument 0"}
!585 = distinct !{!585, !"MOZ_PNG_do_gamma"}
!586 = distinct !{!586, !96}
!587 = distinct !{!587, !96}
!588 = !{!589}
!589 = distinct !{!589, !590}
!590 = distinct !{!590, !"LVerDomain"}
!591 = !{!592}
!592 = distinct !{!592, !590}
!593 = distinct !{!593, !105}
!594 = distinct !{!594, !96}
!595 = distinct !{!595, !96}
!596 = distinct !{!596, !105}
!597 = !{!598}
!598 = distinct !{!598, !599}
!599 = distinct !{!599, !"LVerDomain"}
!600 = !{!601}
!601 = distinct !{!601, !599}
!602 = distinct !{!602, !105}
!603 = distinct !{!603, !96}
!604 = distinct !{!604, !96}
!605 = distinct !{!605, !105}
!606 = !{!607}
!607 = distinct !{!607, !608, !"MOZ_PNG_set_read_fn: argument 0"}
!608 = distinct !{!608, !"MOZ_PNG_set_read_fn"}
!609 = !{!610, !607}
!610 = distinct !{!610, !611, !"MOZ_PNG_warning: argument 0"}
!611 = distinct !{!611, !"MOZ_PNG_warning"}
!612 = !{!613}
!613 = distinct !{!613, !614, !"MOZ_PNG_warning: argument 0"}
!614 = distinct !{!614, !"MOZ_PNG_warning"}
!615 = !{!616}
!616 = distinct !{!616, !617, !"MOZ_PNG_set_read_fn: argument 0"}
!617 = distinct !{!617, !"MOZ_PNG_set_read_fn"}
!618 = !{!619, !616}
!619 = distinct !{!619, !620, !"MOZ_PNG_warning: argument 0"}
!620 = distinct !{!620, !"MOZ_PNG_warning"}
!621 = !{!622}
!622 = distinct !{!622, !623, !"MOZ_PNG_read_data: argument 0"}
!623 = distinct !{!623, !"MOZ_PNG_read_data"}
!624 = !{!625}
!625 = distinct !{!625, !626, !"MOZ_PNG_get_uint_31: argument 0"}
!626 = distinct !{!626, !"MOZ_PNG_get_uint_31"}
!627 = !{!628}
!628 = distinct !{!628, !629, !"MOZ_PNG_reset_crc: argument 0"}
!629 = distinct !{!629, !"MOZ_PNG_reset_crc"}
!630 = !{!631}
!631 = distinct !{!631, !632, !"MOZ_PNG_calc_crc: argument 0"}
!632 = distinct !{!632, !"MOZ_PNG_calc_crc"}
!633 = !{!634}
!634 = distinct !{!634, !635, !"png_check_chunk_length: argument 0"}
!635 = distinct !{!635, !"png_check_chunk_length"}
!636 = !{!637}
!637 = distinct !{!637, !638, !"MOZ_PNG_warning: argument 0"}
!638 = distinct !{!638, !"MOZ_PNG_warning"}
!639 = !{!640}
!640 = distinct !{!640, !641, !"MOZ_PNG_calloc: argument 0"}
!641 = distinct !{!641, !"MOZ_PNG_calloc"}
!642 = !{!643}
!643 = distinct !{!643, !644, !"MOZ_PNG_dest_info_str: argument 0"}
!644 = distinct !{!644, !"MOZ_PNG_dest_info_str"}
!645 = !{!646}
!646 = distinct !{!646, !647, !"MOZ_PNG_dest_info_str: argument 0"}
!647 = distinct !{!647, !"MOZ_PNG_dest_info_str"}
!648 = !{!649, !651}
!649 = distinct !{!649, !650, !"MOZ_PNG_destroy_gamma_table: argument 0"}
!650 = distinct !{!650, !"MOZ_PNG_destroy_gamma_table"}
!651 = distinct !{!651, !652, !"MOZ_PNG_read_dest: argument 0"}
!652 = distinct !{!652, !"MOZ_PNG_read_dest"}
!653 = !{!651}
!654 = !{!655}
!655 = distinct !{!655, !656, !"MOZ_PNG_destroy_png_struct: argument 0"}
!656 = distinct !{!656, !"MOZ_PNG_destroy_png_struct"}
!657 = !{!658}
!658 = distinct !{!658, !659, !"MOZ_PNG_warning: argument 0"}
!659 = distinct !{!659, !"MOZ_PNG_warning"}
!660 = !{!661}
!661 = distinct !{!661, !662, !"png_rtran_ok: argument 0"}
!662 = distinct !{!662, !"png_rtran_ok"}
!663 = !{!664}
!664 = distinct !{!664, !665, !"MOZ_PNG_warning: argument 0"}
!665 = distinct !{!665, !"MOZ_PNG_warning"}
!666 = !{!667}
!667 = distinct !{!667, !668, !"png_rtran_ok: argument 0"}
!668 = distinct !{!668, !"png_rtran_ok"}
!669 = !{!670}
!670 = distinct !{!670, !671, !"MOZ_PNG_warning: argument 0"}
!671 = distinct !{!671, !"MOZ_PNG_warning"}
!672 = !{!673}
!673 = distinct !{!673, !674, !"MOZ_translate_gamma_flags: argument 0"}
!674 = distinct !{!674, !"MOZ_translate_gamma_flags"}
!675 = !{!676}
!676 = distinct !{!676, !677, !"MOZ_translate_gamma_flags: argument 0"}
!677 = distinct !{!677, !"MOZ_translate_gamma_flags"}
!678 = !{!679}
!679 = distinct !{!679, !680, !"png_rtran_ok: argument 0"}
!680 = distinct !{!680, !"png_rtran_ok"}
!681 = !{!682}
!682 = distinct !{!682, !683, !"MOZ_PNG_warning: argument 0"}
!683 = distinct !{!683, !"MOZ_PNG_warning"}
!684 = !{!685}
!685 = distinct !{!685, !686, !"png_rtran_ok: argument 0"}
!686 = distinct !{!686, !"png_rtran_ok"}
!687 = !{!688}
!688 = distinct !{!688, !689, !"MOZ_PNG_warning: argument 0"}
!689 = distinct !{!689, !"MOZ_PNG_warning"}
!690 = !{!691}
!691 = distinct !{!691, !692, !"png_rtran_ok: argument 0"}
!692 = distinct !{!692, !"png_rtran_ok"}
!693 = !{!694}
!694 = distinct !{!694, !695, !"MOZ_PNG_warning: argument 0"}
!695 = distinct !{!695, !"MOZ_PNG_warning"}
!696 = !{!697}
!697 = distinct !{!697, !698, !"png_rtran_ok: argument 0"}
!698 = distinct !{!698, !"png_rtran_ok"}
!699 = !{!700}
!700 = distinct !{!700, !701, !"MOZ_PNG_warning: argument 0"}
!701 = distinct !{!701, !"MOZ_PNG_warning"}
!702 = !{!703}
!703 = distinct !{!703, !704, !"png_rtran_ok: argument 0"}
!704 = distinct !{!704, !"png_rtran_ok"}
!705 = !{!706}
!706 = distinct !{!706, !707, !"MOZ_PNG_warning: argument 0"}
!707 = distinct !{!707, !"MOZ_PNG_warning"}
!708 = !{!709, !711}
!709 = distinct !{!709, !710, !"png_rtran_ok: argument 0"}
!710 = distinct !{!710, !"png_rtran_ok"}
!711 = distinct !{!711, !712, !"MOZ_PNG_set_x_g_124_to_8: argument 0"}
!712 = distinct !{!712, !"MOZ_PNG_set_x_g_124_to_8"}
!713 = !{!711}
!714 = !{!715}
!715 = distinct !{!715, !716, !"MOZ_PNG_init_palette_transf: argument 0"}
!716 = distinct !{!716, !"MOZ_PNG_init_palette_transf"}
!717 = !{!718}
!718 = distinct !{!718, !719, !"MOZ_PNG_init_rgb_transf: argument 0"}
!719 = distinct !{!719, !"MOZ_PNG_init_rgb_transf"}
!720 = distinct !{!720, !96}
!721 = !{!722}
!722 = distinct !{!722, !723, !"MOZ_PNG_read_data: argument 0"}
!723 = distinct !{!723, !"MOZ_PNG_read_data"}
!724 = !{!725}
!725 = distinct !{!725, !726, !"MOZ_PNG_read_data: argument 0"}
!726 = distinct !{!726, !"MOZ_PNG_read_data"}
!727 = !{!728}
!728 = distinct !{!728, !729, !"MOZ_PNG_free_data: argument 1"}
!729 = distinct !{!729, !"MOZ_PNG_free_data"}
!730 = !{!731}
!731 = distinct !{!731, !729, !"MOZ_PNG_free_data: argument 0"}
!732 = !{!733}
!733 = distinct !{!733, !734, !"MOZ_PNG_zstream_error: argument 0"}
!734 = distinct !{!734, !"MOZ_PNG_zstream_error"}
!735 = !{!736, !738}
!736 = distinct !{!736, !737, !"MOZ_PNG_read_data: argument 0"}
!737 = distinct !{!737, !"MOZ_PNG_read_data"}
!738 = distinct !{!738, !739, !"MOZ_PNG_crc_read: argument 0"}
!739 = distinct !{!739, !"MOZ_PNG_crc_read"}
!740 = !{!741, !738}
!741 = distinct !{!741, !742, !"MOZ_PNG_calc_crc: argument 0"}
!742 = distinct !{!742, !"MOZ_PNG_calc_crc"}
!743 = !{!741}
!744 = !{!745}
!745 = distinct !{!745, !746, !"png_zlib_inflate: argument 0"}
!746 = distinct !{!746, !"png_zlib_inflate"}
!747 = !{!748}
!748 = distinct !{!748, !749, !"MOZ_PNG_zstream_error: argument 0"}
!749 = distinct !{!749, !"MOZ_PNG_zstream_error"}
!750 = !{!751}
!751 = distinct !{!751, !752, !"MOZ_PNG_free_data: argument 1"}
!752 = distinct !{!752, !"MOZ_PNG_free_data"}
!753 = !{!754}
!754 = distinct !{!754, !752, !"MOZ_PNG_free_data: argument 0"}
!755 = !{!756}
!756 = distinct !{!756, !757, !"MOZ_PNG_get_valid: argument 1"}
!757 = distinct !{!757, !"MOZ_PNG_get_valid"}
!758 = !{!759}
!759 = distinct !{!759, !757, !"MOZ_PNG_get_valid: argument 0"}
!760 = !{!761, !763}
!761 = distinct !{!761, !762, !"MOZ_PNG_set_cHRM_fixed: argument 0"}
!762 = distinct !{!762, !"MOZ_PNG_set_cHRM_fixed"}
!763 = distinct !{!763, !762, !"MOZ_PNG_set_cHRM_fixed: argument 1"}
!764 = !{!763}
!765 = !{!761}
!766 = !{!767}
!767 = distinct !{!767, !768, !"MOZ_PNG_cs_sync_info: argument 1"}
!768 = distinct !{!768, !"MOZ_PNG_cs_sync_info"}
!769 = !{!770}
!770 = distinct !{!770, !768, !"MOZ_PNG_cs_sync_info: argument 0"}
!771 = !{!772, !767}
!772 = distinct !{!772, !773, !"MOZ_PNG_free_data: argument 1"}
!773 = distinct !{!773, !"MOZ_PNG_free_data"}
!774 = !{!775, !770}
!775 = distinct !{!775, !773, !"MOZ_PNG_free_data: argument 0"}
!776 = !{!777, !779}
!777 = distinct !{!777, !778, !"MOZ_PNG_set_cHRM_XYZ_fixed: argument 0"}
!778 = distinct !{!778, !"MOZ_PNG_set_cHRM_XYZ_fixed"}
!779 = distinct !{!779, !778, !"MOZ_PNG_set_cHRM_XYZ_fixed: argument 1"}
!780 = !{!779}
!781 = !{!777}
!782 = !{!783}
!783 = distinct !{!783, !784, !"MOZ_PNG_cs_sync_info: argument 1"}
!784 = distinct !{!784, !"MOZ_PNG_cs_sync_info"}
!785 = !{!786}
!786 = distinct !{!786, !784, !"MOZ_PNG_cs_sync_info: argument 0"}
!787 = !{!788, !783}
!788 = distinct !{!788, !789, !"MOZ_PNG_free_data: argument 1"}
!789 = distinct !{!789, !"MOZ_PNG_free_data"}
!790 = !{!791, !786}
!791 = distinct !{!791, !789, !"MOZ_PNG_free_data: argument 0"}
!792 = !{!793}
!793 = distinct !{!793, !794, !"MOZ_PNG_cs_sync_info: argument 1"}
!794 = distinct !{!794, !"MOZ_PNG_cs_sync_info"}
!795 = !{!796}
!796 = distinct !{!796, !794, !"MOZ_PNG_cs_sync_info: argument 0"}
!797 = !{!798, !793}
!798 = distinct !{!798, !799, !"MOZ_PNG_free_data: argument 1"}
!799 = distinct !{!799, !"MOZ_PNG_free_data"}
!800 = !{!801, !796}
!801 = distinct !{!801, !799, !"MOZ_PNG_free_data: argument 0"}
!802 = !{!803}
!803 = distinct !{!803, !804, !"MOZ_PNG_app_err: argument 0"}
!804 = distinct !{!804, !"MOZ_PNG_app_err"}
!805 = !{!806}
!806 = distinct !{!806, !807, !"MOZ_PNG_warning: argument 0"}
!807 = distinct !{!807, !"MOZ_PNG_warning"}
!808 = !{!809}
!809 = distinct !{!809, !810, !"MOZ_PNG_cs_set_ICC: argument 1"}
!810 = distinct !{!810, !"MOZ_PNG_cs_set_ICC"}
!811 = !{!812}
!812 = distinct !{!812, !810, !"MOZ_PNG_cs_set_ICC: argument 0"}
!813 = !{!814, !816}
!814 = distinct !{!814, !815, !"MOZ_PNG_warning: argument 0"}
!815 = distinct !{!815, !"MOZ_PNG_warning"}
!816 = distinct !{!816, !817, !"MOZ_PNG_malloc_warn: argument 0"}
!817 = distinct !{!817, !"MOZ_PNG_malloc_warn"}
!818 = !{!819}
!819 = distinct !{!819, !820, !"MOZ_PNG_benign_err: argument 0"}
!820 = distinct !{!820, !"MOZ_PNG_benign_err"}
!821 = !{!822}
!822 = distinct !{!822, !823, !"MOZ_PNG_warning: argument 0"}
!823 = distinct !{!823, !"MOZ_PNG_warning"}
!824 = !{!825, !827}
!825 = distinct !{!825, !826, !"MOZ_PNG_warning: argument 0"}
!826 = distinct !{!826, !"MOZ_PNG_warning"}
!827 = distinct !{!827, !828, !"MOZ_PNG_malloc_warn: argument 0"}
!828 = distinct !{!828, !"MOZ_PNG_malloc_warn"}
!829 = !{!830}
!830 = distinct !{!830, !831, !"MOZ_PNG_benign_err: argument 0"}
!831 = distinct !{!831, !"MOZ_PNG_benign_err"}
!832 = !{!833}
!833 = distinct !{!833, !834, !"MOZ_PNG_warning: argument 0"}
!834 = distinct !{!834, !"MOZ_PNG_warning"}
!835 = !{!836}
!836 = distinct !{!836, !837, !"MOZ_PNG_free_data: argument 1"}
!837 = distinct !{!837, !"MOZ_PNG_free_data"}
!838 = !{!839}
!839 = distinct !{!839, !837, !"MOZ_PNG_free_data: argument 0"}
!840 = !{!841}
!841 = distinct !{!841, !842, !"MOZ_PNG_warning: argument 0"}
!842 = distinct !{!842, !"MOZ_PNG_warning"}
!843 = !{!844}
!844 = distinct !{!844, !845, !"MOZ_PNG_warning: argument 0"}
!845 = distinct !{!845, !"MOZ_PNG_warning"}
!846 = !{!847}
!847 = distinct !{!847, !848, !"MOZ_PNG_free_buffer_list: argument 0"}
!848 = distinct !{!848, !"MOZ_PNG_free_buffer_list"}
!849 = !{!850}
!850 = distinct !{!850, !851, !"MOZ_PNG_formatted_warning: argument 0"}
!851 = distinct !{!851, !"MOZ_PNG_formatted_warning"}
!852 = !{!853}
!853 = distinct !{!853, !854, !"MOZ_PNG_warning: argument 0"}
!854 = distinct !{!854, !"MOZ_PNG_warning"}
!855 = !{!856}
!856 = distinct !{!856, !857, !"MOZ_PNG_write_sig: argument 0"}
!857 = distinct !{!857, !"MOZ_PNG_write_sig"}
!858 = !{!859, !856}
!859 = distinct !{!859, !860, !"MOZ_PNG_write_data: argument 0"}
!860 = distinct !{!860, !"MOZ_PNG_write_data"}
!861 = !{!862}
!862 = distinct !{!862, !863, !"MOZ_PNG_write_data: argument 0"}
!863 = distinct !{!863, !"MOZ_PNG_write_data"}
!864 = !{!865}
!865 = distinct !{!865, !866, !"MOZ_PNG_write_chunk_header: argument 0"}
!866 = distinct !{!866, !"MOZ_PNG_write_chunk_header"}
!867 = !{!868, !865}
!868 = distinct !{!868, !869, !"MOZ_PNG_write_data: argument 0"}
!869 = distinct !{!869, !"MOZ_PNG_write_data"}
!870 = !{!871}
!871 = distinct !{!871, !872, !"MOZ_PNG_reset_crc: argument 0"}
!872 = distinct !{!872, !"MOZ_PNG_reset_crc"}
!873 = !{!871, !865}
!874 = !{!875}
!875 = distinct !{!875, !876, !"MOZ_PNG_calc_crc: argument 0"}
!876 = distinct !{!876, !"MOZ_PNG_calc_crc"}
!877 = !{!878, !880}
!878 = distinct !{!878, !879, !"MOZ_PNG_write_data: argument 0"}
!879 = distinct !{!879, !"MOZ_PNG_write_data"}
!880 = distinct !{!880, !881, !"MOZ_PNG_write_chunk_data: argument 0"}
!881 = distinct !{!881, !"MOZ_PNG_write_chunk_data"}
!882 = !{!883, !880}
!883 = distinct !{!883, !884, !"MOZ_PNG_calc_crc: argument 0"}
!884 = distinct !{!884, !"MOZ_PNG_calc_crc"}
!885 = !{!883}
!886 = !{!887}
!887 = distinct !{!887, !888, !"MOZ_PNG_write_chunk_end: argument 0"}
!888 = distinct !{!888, !"MOZ_PNG_write_chunk_end"}
!889 = !{!890, !887}
!890 = distinct !{!890, !891, !"MOZ_PNG_write_data: argument 0"}
!891 = distinct !{!891, !"MOZ_PNG_write_data"}
!892 = !{!893}
!893 = distinct !{!893, !894, !"MOZ_PNG_app_warn: argument 0"}
!894 = distinct !{!894, !"MOZ_PNG_app_warn"}
!895 = !{!896}
!896 = distinct !{!896, !897, !"MOZ_PNG_warning: argument 0"}
!897 = distinct !{!897, !"MOZ_PNG_warning"}
!898 = !{!899}
!899 = distinct !{!899, !900, !"MOZ_PNG_app_warn: argument 0"}
!900 = distinct !{!900, !"MOZ_PNG_app_warn"}
!901 = !{!902}
!902 = distinct !{!902, !903, !"MOZ_PNG_warning: argument 0"}
!903 = distinct !{!903, !"MOZ_PNG_warning"}
!904 = !{!905}
!905 = distinct !{!905, !906, !"MOZ_PNG_app_warn: argument 0"}
!906 = distinct !{!906, !"MOZ_PNG_app_warn"}
!907 = !{!908}
!908 = distinct !{!908, !909, !"MOZ_PNG_warning: argument 0"}
!909 = distinct !{!909, !"MOZ_PNG_warning"}
!910 = !{!911}
!911 = distinct !{!911, !912, !"MOZ_PNG_app_warn: argument 0"}
!912 = distinct !{!912, !"MOZ_PNG_app_warn"}
!913 = !{!914}
!914 = distinct !{!914, !915, !"MOZ_PNG_warning: argument 0"}
!915 = distinct !{!915, !"MOZ_PNG_warning"}
!916 = !{!917}
!917 = distinct !{!917, !918, !"MOZ_PNG_write_IEND: argument 0"}
!918 = distinct !{!918, !"MOZ_PNG_write_IEND"}
!919 = !{!920}
!920 = distinct !{!920, !921, !"MOZ_PNG_set_write_fn: argument 0"}
!921 = distinct !{!921, !"MOZ_PNG_set_write_fn"}
!922 = !{!923, !920}
!923 = distinct !{!923, !924, !"MOZ_PNG_warning: argument 0"}
!924 = distinct !{!924, !"MOZ_PNG_warning"}
!925 = !{!926}
!926 = distinct !{!926, !927, !"MOZ_PNG_write_trans: argument 0"}
!927 = distinct !{!927, !"MOZ_PNG_write_trans"}
!928 = !{!929, !931}
!929 = distinct !{!929, !930, !"MOZ_PNG_write_finish_row: argument 0"}
!930 = distinct !{!930, !"MOZ_PNG_write_finish_row"}
!931 = distinct !{!931, !932, !"MOZ_PNG_write_filtered_row: argument 0"}
!932 = distinct !{!932, !"MOZ_PNG_write_filtered_row"}
!933 = !{!931}
!934 = !{!935, !931}
!935 = distinct !{!935, !936, !"MOZ_PNG_write_flush: argument 0"}
!936 = distinct !{!936, !"MOZ_PNG_write_flush"}
!937 = !{!938, !935, !931}
!938 = distinct !{!938, !939, !"MOZ_PNG_flush: argument 0"}
!939 = distinct !{!939, !"MOZ_PNG_flush"}
!940 = !{!941}
!941 = distinct !{!941, !942, !"MOZ_PNG_flush: argument 0"}
!942 = distinct !{!942, !"MOZ_PNG_flush"}
!943 = !{!944}
!944 = distinct !{!944, !945, !"MOZ_PNG_free_buffer_list: argument 0"}
!945 = distinct !{!945, !"MOZ_PNG_free_buffer_list"}
!946 = !{!947}
!947 = distinct !{!947, !948, !"png_deflate_claim: argument 0"}
!948 = distinct !{!948, !"png_deflate_claim"}
!949 = !{!950}
!950 = distinct !{!950, !951, !"MOZ_PNG_warning: argument 0"}
!951 = distinct !{!951, !"MOZ_PNG_warning"}
!952 = !{!953, !947}
!953 = distinct !{!953, !954, !"MOZ_PNG_zstream_error: argument 0"}
!954 = distinct !{!954, !"MOZ_PNG_zstream_error"}
!955 = !{!956}
!956 = distinct !{!956, !957, !"MOZ_PNG_dest_info_str: argument 0"}
!957 = distinct !{!957, !"MOZ_PNG_dest_info_str"}
!958 = !{!959}
!959 = distinct !{!959, !960, !"MOZ_PNG_write_destroy: argument 0"}
!960 = distinct !{!960, !"MOZ_PNG_write_destroy"}
!961 = !{!962}
!962 = distinct !{!962, !963, !"MOZ_PNG_free_buffer_list: argument 0"}
!963 = distinct !{!963, !"MOZ_PNG_free_buffer_list"}
!964 = !{!965}
!965 = distinct !{!965, !966, !"MOZ_PNG_destroy_png_struct: argument 0"}
!966 = distinct !{!966, !"MOZ_PNG_destroy_png_struct"}
!967 = !{!968}
!968 = distinct !{!968, !969, !"MOZ_PNG_app_err: argument 0"}
!969 = distinct !{!969, !"MOZ_PNG_app_err"}
!970 = !{!971}
!971 = distinct !{!971, !972, !"MOZ_PNG_warning: argument 0"}
!972 = distinct !{!972, !"MOZ_PNG_warning"}
!973 = !{!974}
!974 = distinct !{!974, !975, !"MOZ_PNG_set_IHDR: argument 1"}
!975 = distinct !{!975, !"MOZ_PNG_set_IHDR"}
!976 = !{!977}
!977 = distinct !{!977, !975, !"MOZ_PNG_set_IHDR: argument 0"}
!978 = !{!979}
!979 = distinct !{!979, !980, !"MOZ_PNG_write_chunk_header: argument 0"}
!980 = distinct !{!980, !"MOZ_PNG_write_chunk_header"}
!981 = !{!982, !979}
!982 = distinct !{!982, !983, !"MOZ_PNG_write_data: argument 0"}
!983 = distinct !{!983, !"MOZ_PNG_write_data"}
!984 = !{!985}
!985 = distinct !{!985, !986, !"MOZ_PNG_reset_crc: argument 0"}
!986 = distinct !{!986, !"MOZ_PNG_reset_crc"}
!987 = !{!985, !979}
!988 = !{!989}
!989 = distinct !{!989, !990, !"MOZ_PNG_calc_crc: argument 0"}
!990 = distinct !{!990, !"MOZ_PNG_calc_crc"}
!991 = !{!992}
!992 = distinct !{!992, !993, !"MOZ_PNG_write_data: argument 0"}
!993 = distinct !{!993, !"MOZ_PNG_write_data"}
!994 = !{!995}
!995 = distinct !{!995, !996, !"MOZ_PNG_calc_crc: argument 0"}
!996 = distinct !{!996, !"MOZ_PNG_calc_crc"}
!997 = !{!998}
!998 = distinct !{!998, !999, !"MOZ_PNG_write_data: argument 0"}
!999 = distinct !{!999, !"MOZ_PNG_write_data"}
!1000 = !{!1001}
!1001 = distinct !{!1001, !1002, !"MOZ_PNG_write_chunk_header: argument 0"}
!1002 = distinct !{!1002, !"MOZ_PNG_write_chunk_header"}
!1003 = !{!1004, !1001}
!1004 = distinct !{!1004, !1005, !"MOZ_PNG_write_data: argument 0"}
!1005 = distinct !{!1005, !"MOZ_PNG_write_data"}
!1006 = !{!1007}
!1007 = distinct !{!1007, !1008, !"MOZ_PNG_reset_crc: argument 0"}
!1008 = distinct !{!1008, !"MOZ_PNG_reset_crc"}
!1009 = !{!1007, !1001}
!1010 = !{!1011}
!1011 = distinct !{!1011, !1012, !"MOZ_PNG_calc_crc: argument 0"}
!1012 = distinct !{!1012, !"MOZ_PNG_calc_crc"}
!1013 = !{!1014, !1016}
!1014 = distinct !{!1014, !1015, !"MOZ_PNG_write_data: argument 0"}
!1015 = distinct !{!1015, !"MOZ_PNG_write_data"}
!1016 = distinct !{!1016, !1017, !"MOZ_PNG_write_chunk_data: argument 0"}
!1017 = distinct !{!1017, !"MOZ_PNG_write_chunk_data"}
!1018 = !{!1019, !1016}
!1019 = distinct !{!1019, !1020, !"MOZ_PNG_calc_crc: argument 0"}
!1020 = distinct !{!1020, !"MOZ_PNG_calc_crc"}
!1021 = !{!1019}
!1022 = !{!1023}
!1023 = distinct !{!1023, !1024, !"MOZ_PNG_write_chunk_end: argument 0"}
!1024 = distinct !{!1024, !"MOZ_PNG_write_chunk_end"}
!1025 = !{!1026, !1023}
!1026 = distinct !{!1026, !1027, !"MOZ_PNG_write_data: argument 0"}
!1027 = distinct !{!1027, !"MOZ_PNG_write_data"}
!1028 = !{!1029}
!1029 = distinct !{!1029, !1030, !"MOZ_PNG_write_chunk_header: argument 0"}
!1030 = distinct !{!1030, !"MOZ_PNG_write_chunk_header"}
!1031 = !{!1032, !1029}
!1032 = distinct !{!1032, !1033, !"MOZ_PNG_write_data: argument 0"}
!1033 = distinct !{!1033, !"MOZ_PNG_write_data"}
!1034 = !{!1035}
!1035 = distinct !{!1035, !1036, !"MOZ_PNG_reset_crc: argument 0"}
!1036 = distinct !{!1036, !"MOZ_PNG_reset_crc"}
!1037 = !{!1035, !1029}
!1038 = !{!1039}
!1039 = distinct !{!1039, !1040, !"MOZ_PNG_calc_crc: argument 0"}
!1040 = distinct !{!1040, !"MOZ_PNG_calc_crc"}
!1041 = !{!1042, !1044}
!1042 = distinct !{!1042, !1043, !"MOZ_PNG_write_data: argument 0"}
!1043 = distinct !{!1043, !"MOZ_PNG_write_data"}
!1044 = distinct !{!1044, !1045, !"MOZ_PNG_write_chunk_data: argument 0"}
!1045 = distinct !{!1045, !"MOZ_PNG_write_chunk_data"}
!1046 = !{!1047, !1044}
!1047 = distinct !{!1047, !1048, !"MOZ_PNG_calc_crc: argument 0"}
!1048 = distinct !{!1048, !"MOZ_PNG_calc_crc"}
!1049 = !{!1047}
!1050 = !{!1051, !1053}
!1051 = distinct !{!1051, !1052, !"MOZ_PNG_write_data: argument 0"}
!1052 = distinct !{!1052, !"MOZ_PNG_write_data"}
!1053 = distinct !{!1053, !1054, !"MOZ_PNG_write_chunk_data: argument 0"}
!1054 = distinct !{!1054, !"MOZ_PNG_write_chunk_data"}
!1055 = !{!1056, !1053}
!1056 = distinct !{!1056, !1057, !"MOZ_PNG_calc_crc: argument 0"}
!1057 = distinct !{!1057, !"MOZ_PNG_calc_crc"}
!1058 = !{!1056}
!1059 = !{!1060}
!1060 = distinct !{!1060, !1061, !"MOZ_PNG_write_chunk_end: argument 0"}
!1061 = distinct !{!1061, !"MOZ_PNG_write_chunk_end"}
!1062 = !{!1063, !1060}
!1063 = distinct !{!1063, !1064, !"MOZ_PNG_write_data: argument 0"}
!1064 = distinct !{!1064, !"MOZ_PNG_write_data"}
!1065 = !{!1066}
!1066 = distinct !{!1066, !1067}
!1067 = distinct !{!1067, !"LVerDomain"}
!1068 = !{!1069}
!1069 = distinct !{!1069, !1067}
!1070 = distinct !{!1070, !105}
!1071 = distinct !{!1071, !96}
!1072 = distinct !{!1072, !105}
!1073 = !{!1074}
!1074 = distinct !{!1074, !1075}
!1075 = distinct !{!1075, !"LVerDomain"}
!1076 = !{!1077}
!1077 = distinct !{!1077, !1075}
!1078 = distinct !{!1078, !105}
!1079 = distinct !{!1079, !96}
!1080 = distinct !{!1080, !105}
!1081 = distinct !{!1081, !96}
!1082 = !{!1083}
!1083 = distinct !{!1083, !1084}
!1084 = distinct !{!1084, !"LVerDomain"}
!1085 = !{!1086}
!1086 = distinct !{!1086, !1084}
!1087 = distinct !{!1087, !105}
!1088 = !{!1089}
!1089 = distinct !{!1089, !1090}
!1090 = distinct !{!1090, !"LVerDomain"}
!1091 = !{!1092, !1093}
!1092 = distinct !{!1092, !1090}
!1093 = distinct !{!1093, !1090}
!1094 = !{!1092}
!1095 = !{!1093}
!1096 = distinct !{!1096, !105}
!1097 = distinct !{!1097, !105}
!1098 = distinct !{!1098, !105}
!1099 = !{!1100}
!1100 = distinct !{!1100, !1101}
!1101 = distinct !{!1101, !"LVerDomain"}
!1102 = !{!1103}
!1103 = distinct !{!1103, !1101}
!1104 = distinct !{!1104, !105}
!1105 = distinct !{!1105, !105}
!1106 = !{!1107}
!1107 = distinct !{!1107, !1108}
!1108 = distinct !{!1108, !"LVerDomain"}
!1109 = !{!1110}
!1110 = distinct !{!1110, !1108}
!1111 = !{!1112}
!1112 = distinct !{!1112, !1108}
!1113 = !{!1114}
!1114 = distinct !{!1114, !1108}
!1115 = !{!1107, !1110, !1112}
!1116 = distinct !{!1116, !105}
!1117 = distinct !{!1117, !105}
