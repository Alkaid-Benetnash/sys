; ModuleID = '../../third_party/angle/src/compiler/translator/IntermNode.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/IntermNode.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol" = type { %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i32, i32, i32 }
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, %"struct.sh::TMemoryQualifier", %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TVector"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type { i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i32, i32, i32, i32 }
%"struct.sh::WorkGroupSize" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.1"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.1" = type { %"class.std::__1::vector.2" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.4" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol", %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.14, i32 }
%union.anon.14 = type { i32 }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.15", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i32 }>
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.15" = type { %"class.std::__1::vector.16" }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.sh::TIntermNode"** }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol", %"class.sh::TVector.31"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i32, i8, i8, i8, i8 }>
%"class.sh::TVector.31" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.23", i8, [7 x i8] }>
%"class.sh::TVector.23" = type { %"class.std::__1::vector.24" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { i32*, i32*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [4 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermInvariantDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"* }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBlock" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.15" }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.15" }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.TPoolAllocator = type <{ i64, i64, i64, i64, i64, %"struct.TPoolAllocator::tHeader"*, %"struct.TPoolAllocator::tHeader"*, %"class.std::__1::vector.62", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.TPoolAllocator::tHeader" = type { %"struct.TPoolAllocator::tHeader"*, i64 }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"struct.TPoolAllocator::tAllocState"*, %"struct.TPoolAllocator::tAllocState"*, %"class.std::__1::__compressed_pair.64" }
%"struct.TPoolAllocator::tAllocState" = type { i64, %"struct.TPoolAllocator::tHeader"* }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.TPoolAllocator::tAllocState"* }
%"class.sh::TIntermOperator" = type <{ %"class.sh::TIntermExpression", i32, [4 x i8] }>
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string.33" }
%"class.std::__1::basic_string.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.36 }
%union.anon.36 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.angle::Matrix" = type { %"class.std::__1::vector.41", i32, i32 }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { float*, float*, %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { float* }
%"class.sh::TIntermTraverser" = type opaque

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_ = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EERS8_ = comdat any

$_ZNK5angle6MatrixIfE9transposeEv = comdat any

$_ZNK5angle6MatrixIfE11determinantEv = comdat any

$_ZNK5angle6MatrixIfE7inverseEv = comdat any

$_ZNK5angle6MatrixIfE8compMultERKS1_ = comdat any

$_ZNK5angle6MatrixIfE12outerProductERKS1_ = comdat any

$_ZN2sh11TIntermNodeD2Ev = comdat any

$_ZN2sh12TIntermTypedD0Ev = comdat any

$_ZN2sh12TIntermTyped10getAsTypedEv = comdat any

$_ZN2sh11TIntermNode18getAsConstantUnionEv = comdat any

$_ZN2sh11TIntermNode23getAsFunctionDefinitionEv = comdat any

$_ZN2sh11TIntermNode14getAsAggregateEv = comdat any

$_ZN2sh11TIntermNode10getAsBlockEv = comdat any

$_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv = comdat any

$_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv = comdat any

$_ZN2sh11TIntermNode20getAsDeclarationNodeEv = comdat any

$_ZN2sh11TIntermNode16getAsSwizzleNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsBinaryNodeEv = comdat any

$_ZN2sh11TIntermNode14getAsUnaryNodeEv = comdat any

$_ZN2sh11TIntermNode16getAsTernaryNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsIfElseNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsSwitchNodeEv = comdat any

$_ZN2sh11TIntermNode13getAsCaseNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsSymbolNodeEv = comdat any

$_ZN2sh11TIntermNode13getAsLoopNodeEv = comdat any

$_ZN2sh11TIntermNode15getAsBranchNodeEv = comdat any

$_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv = comdat any

$_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE = comdat any

$_ZN2sh13TIntermSymbolD0Ev = comdat any

$_ZN2sh13TIntermSymbol15getAsSymbolNodeEv = comdat any

$_ZN2sh13TIntermSymbol16replaceChildNodeEPNS_11TIntermNodeES2_ = comdat any

$_ZNK2sh13TIntermSymbol8deepCopyEv = comdat any

$_ZNK2sh13TIntermSymbol14hasSideEffectsEv = comdat any

$_ZN2sh20TIntermConstantUnionD0Ev = comdat any

$_ZN2sh20TIntermConstantUnion18getAsConstantUnionEv = comdat any

$_ZN2sh20TIntermConstantUnion16replaceChildNodeEPNS_11TIntermNodeES2_ = comdat any

$_ZNK2sh20TIntermConstantUnion8deepCopyEv = comdat any

$_ZNK2sh20TIntermConstantUnion14hasSideEffectsEv = comdat any

$_ZNK2sh17TIntermExpression7getTypeEv = comdat any

$_ZN2sh16TIntermAggregateD2Ev = comdat any

$_ZN2sh16TIntermAggregateD0Ev = comdat any

$_ZN2sh16TIntermAggregate14getAsAggregateEv = comdat any

$_ZNK2sh16TIntermAggregate8deepCopyEv = comdat any

$_ZN2sh16TIntermAggregate11getSequenceEv = comdat any

$_ZNK2sh16TIntermAggregate11getSequenceEv = comdat any

$_ZThn160_N2sh16TIntermAggregateD1Ev = comdat any

$_ZThn160_N2sh16TIntermAggregateD0Ev = comdat any

$_ZThn160_N2sh16TIntermAggregate11getSequenceEv = comdat any

$_ZThn160_NK2sh16TIntermAggregate11getSequenceEv = comdat any

$_ZN2sh13TIntermBinaryD0Ev = comdat any

$_ZN2sh13TIntermBinary15getAsBinaryNodeEv = comdat any

$_ZNK2sh13TIntermBinary8deepCopyEv = comdat any

$_ZNK2sh13TIntermBinary14hasSideEffectsEv = comdat any

$_ZN2sh11TIntermNode10getAsTypedEv = comdat any

$_ZN2sh28TIntermPreprocessorDirective26getAsPreprocessorDirectiveEv = comdat any

$_ZN2sh28TIntermPreprocessorDirective16replaceChildNodeEPNS_11TIntermNodeES2_ = comdat any

$_ZN2sh17TIntermExpressionD0Ev = comdat any

$_ZN2sh15TIntermOperatorD0Ev = comdat any

$_ZNK2sh15TIntermOperator14hasSideEffectsEv = comdat any

$_ZNSt3__16vectorIi14pool_allocatorIiEE6assignIPiEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_ = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE21__push_back_slow_pathIRKS3_EEvOT_ = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE21__push_back_slow_pathIS3_EEvOT_ = comdat any

$_ZNSt3__16vectorIi14pool_allocatorIiEE21__push_back_slow_pathIRKiEEvOT_ = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_ = comdat any

$_ZTVN2sh17TIntermExpressionE = comdat any

$_ZTVN2sh15TIntermOperatorE = comdat any

@_ZTVN2sh17TIntermExpressionE = linkonce_odr hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermExpression"*)* @_ZN2sh17TIntermExpressionD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh11TIntermNode8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermInvariantDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16getConstantValueEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*)] }, comdat, align 8
@_ZTVN2sh13TIntermSymbolE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermSymbol"*)* @_ZN2sh13TIntermSymbolD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermSymbol"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh13TIntermSymbol8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermSymbol"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh13TIntermSymbol5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermInvariantDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermSymbol"*)* @_ZN2sh13TIntermSymbol15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermSymbol"*, i64)* @_ZNK2sh13TIntermSymbol12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermSymbol"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh13TIntermSymbol16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol8deepCopyEv to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermSymbol"*)* @_ZNK2sh13TIntermSymbol7getTypeEv to i8*)] }, align 8
@_ZTVN2sh16TIntermAggregateE = hidden unnamed_addr constant { [36 x i8*], [6 x i8*] } { [36 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregateD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregateD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermAggregate"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermAggregate8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermAggregate"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermAggregate5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregate14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermInvariantDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermAggregate"*, i64)* @_ZNK2sh16TIntermAggregate12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermAggregate"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh16TIntermAggregate16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate8deepCopyEv to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*)* @_ZN2sh16TIntermAggregate4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*), i8* bitcast (%"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregate11getSequenceEv to i8*), i8* bitcast (%"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)* @_ZNK2sh16TIntermAggregate11getSequenceEv to i8*)], [6 x i8*] [i8* inttoptr (i64 -160 to i8*), i8* null, i8* bitcast (void (%"class.sh::TIntermAggregate"*)* @_ZThn160_N2sh16TIntermAggregateD1Ev to i8*), i8* bitcast (void (%"class.sh::TIntermAggregate"*)* @_ZThn160_N2sh16TIntermAggregateD0Ev to i8*), i8* bitcast (%"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)* @_ZThn160_N2sh16TIntermAggregate11getSequenceEv to i8*), i8* bitcast (%"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)* @_ZThn160_NK2sh16TIntermAggregate11getSequenceEv to i8*)] }, align 8
@.str = private unnamed_addr constant [12 x i8] c"textureSize\00", align 1
@_ZTVN2sh12TIntermTypedE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTypedD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh11TIntermNode8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermInvariantDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16getConstantValueEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN2sh20TIntermConstantUnionE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermConstantUnion"*)* @_ZN2sh20TIntermConstantUnionD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh20TIntermConstantUnion8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermConstantUnion"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh20TIntermConstantUnion5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermConstantUnion"*)* @_ZN2sh20TIntermConstantUnion18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermInvariantDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermConstantUnion"*, i64)* @_ZNK2sh20TIntermConstantUnion12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh20TIntermConstantUnion16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion8deepCopyEv to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermConstantUnion"*)* @_ZNK2sh20TIntermConstantUnion14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*)] }, align 8
@_ZTVN2sh24TIntermFunctionPrototypeE = external unnamed_addr constant { [34 x i8*] }
@_ZTVN2sh14TIntermSwizzleE = external unnamed_addr constant { [34 x i8*] }
@_ZTVN2sh13TIntermBinaryE = hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermBinary"*)* @_ZN2sh13TIntermBinaryD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermBinary"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh13TIntermBinary8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermBinary"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh13TIntermBinary5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermInvariantDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermBinary"*)* @_ZN2sh13TIntermBinary15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermBinary"*, i64)* @_ZNK2sh13TIntermBinary12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermBinary"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh13TIntermBinary16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary8deepCopyEv to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermBinary"*, %"class.sh::TDiagnostics"*)* @_ZN2sh13TIntermBinary4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermBinary"*)* @_ZNK2sh13TIntermBinary14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*)] }, align 8
@_ZTVN2sh12TIntermUnaryE = external unnamed_addr constant { [34 x i8*] }
@_ZTVN2sh14TIntermTernaryE = external unnamed_addr constant { [34 x i8*] }
@_ZTVN2sh27TIntermInvariantDeclarationE = external unnamed_addr constant { [28 x i8*] }
@_ZTVN2sh11TIntermLoopE = external unnamed_addr constant { [28 x i8*] }
@_ZTVN2sh13TIntermIfElseE = external unnamed_addr constant { [28 x i8*] }
@_ZTVN2sh13TIntermSwitchE = external unnamed_addr constant { [28 x i8*] }
@.str.1 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.5 = private unnamed_addr constant [46 x i8] c"casting a negative float to uint is undefined\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"Zero divided by zero during constant folding generated NaN\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"Divide by zero during constant folding\00", align 1
@.str.9 = private unnamed_addr constant [67 x i8] c"Infinity divided by infinity during constant folding generated NaN\00", align 1
@.str.10 = private unnamed_addr constant [48 x i8] c"Constant folded division overflowed to infinity\00", align 1
@.str.11 = private unnamed_addr constant [45 x i8] c"Divide by zero error during constant folding\00", align 1
@.str.12 = private unnamed_addr constant [94 x i8] c"Negative modulus operator operand encountered during constant folding. Results are undefined.\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@_ZTVN2sh28TIntermPreprocessorDirectiveE = hidden unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirectiveD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirectiveD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh28TIntermPreprocessorDirective8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (i1 (%"class.sh::TIntermPreprocessorDirective"*, i32, %"class.sh::TIntermTraverser"*)* @_ZN2sh28TIntermPreprocessorDirective5visitENS_5VisitEPNS_16TIntermTraverserE to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermInvariantDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirective26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (i64 (%"class.sh::TIntermPreprocessorDirective"*)* @_ZNK2sh28TIntermPreprocessorDirective13getChildCountEv to i8*), i8* bitcast (%"class.sh::TIntermNode"* (%"class.sh::TIntermPreprocessorDirective"*, i64)* @_ZNK2sh28TIntermPreprocessorDirective12getChildNodeEm to i8*), i8* bitcast (i1 (%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*)* @_ZN2sh28TIntermPreprocessorDirective16replaceChildNodeEPNS_11TIntermNodeES2_ to i8*)] }, align 8
@_ZTVN2sh15TIntermOperatorE = linkonce_odr hidden unnamed_addr constant { [34 x i8*] } { [34 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNodeD2Ev to i8*), i8* bitcast (void (%"class.sh::TIntermOperator"*)* @_ZN2sh15TIntermOperatorD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)* @_ZN2sh11TIntermNode8traverseEPNS_16TIntermTraverserE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)* @_ZN2sh12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv to i8*), i8* bitcast (%"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode10getAsBlockEv to i8*), i8* bitcast (%"class.sh::TIntermFunctionPrototype"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv to i8*), i8* bitcast (%"class.sh::TIntermInvariantDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermUnary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermTernary"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode16getAsTernaryNodeEv to i8*), i8* bitcast (%"class.sh::TIntermIfElse"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsIfElseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSwitch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (%"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%"class.sh::TIntermLoop"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%"class.sh::TIntermBranch"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%"class.sh::TIntermPreprocessorDirective"* (%"class.sh::TIntermNode"*)* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*)* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16hasConstantValueEv to i8*), i8* bitcast (%"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)* @_ZNK2sh12TIntermTyped16getConstantValueEv to i8*), i8* bitcast (i1 (%"class.sh::TIntermOperator"*)* @_ZNK2sh15TIntermOperator14hasSideEffectsEv to i8*), i8* bitcast (%"class.sh::TType"* (%"class.sh::TIntermExpression"*)* @_ZNK2sh17TIntermExpression7getTypeEv to i8*)] }, comdat, align 8
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.16 = private unnamed_addr constant [55 x i8] c"operation result is undefined for the values passed in\00", align 1

@_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE = hidden unnamed_addr alias void (%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*), void (%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*)* @_ZN2sh13TIntermSymbolC2EPKNS_9TVariableE
@_ZN2sh16TIntermAggregateC1EPKNS_9TFunctionERKNS_5TTypeE9TOperatorPNS_7TVectorIPNS_11TIntermNodeEEE = hidden unnamed_addr alias void (%"class.sh::TIntermAggregate"*, %"class.sh::TFunction"*, %"class.sh::TType"*, i32, %"class.sh::TVector.15"*), void (%"class.sh::TIntermAggregate"*, %"class.sh::TFunction"*, %"class.sh::TType"*, i32, %"class.sh::TVector.15"*)* @_ZN2sh16TIntermAggregateC2EPKNS_9TFunctionERKNS_5TTypeE9TOperatorPNS_7TVectorIPNS_11TIntermNodeEEE
@_ZN2sh20TIntermConstantUnionC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermConstantUnion"*), void (%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh20TIntermConstantUnionC2ERKS0_
@_ZN2sh24TIntermFunctionPrototypeC1EPKNS_9TFunctionE = hidden unnamed_addr alias void (%"class.sh::TIntermFunctionPrototype"*, %"class.sh::TFunction"*), void (%"class.sh::TIntermFunctionPrototype"*, %"class.sh::TFunction"*)* @_ZN2sh24TIntermFunctionPrototypeC2EPKNS_9TFunctionE
@_ZN2sh16TIntermAggregateC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermAggregate"*, %"class.sh::TIntermAggregate"*), void (%"class.sh::TIntermAggregate"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermAggregateC2ERKS0_
@_ZN2sh14TIntermSwizzleC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermSwizzle"*), void (%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermSwizzle"*)* @_ZN2sh14TIntermSwizzleC2ERKS0_
@_ZN2sh13TIntermBinaryC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"*), void (%"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"*)* @_ZN2sh13TIntermBinaryC2ERKS0_
@_ZN2sh12TIntermUnaryC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermUnary"*, %"class.sh::TIntermUnary"*), void (%"class.sh::TIntermUnary"*, %"class.sh::TIntermUnary"*)* @_ZN2sh12TIntermUnaryC2ERKS0_
@_ZN2sh14TIntermTernaryC1ERKS0_ = hidden unnamed_addr alias void (%"class.sh::TIntermTernary"*, %"class.sh::TIntermTernary"*), void (%"class.sh::TIntermTernary"*, %"class.sh::TIntermTernary"*)* @_ZN2sh14TIntermTernaryC2ERKS0_
@_ZN2sh14TIntermSwizzleC1EPNS_12TIntermTypedERKNS_7TVectorIiEE = hidden unnamed_addr alias void (%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.23"*), void (%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.23"*)* @_ZN2sh14TIntermSwizzleC2EPNS_12TIntermTypedERKNS_7TVectorIiEE
@_ZN2sh12TIntermUnaryC1E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE = hidden unnamed_addr alias void (%"class.sh::TIntermUnary"*, i32, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*), void (%"class.sh::TIntermUnary"*, i32, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*)* @_ZN2sh12TIntermUnaryC2E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE
@_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_ = hidden unnamed_addr alias void (%"class.sh::TIntermBinary"*, i32, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*), void (%"class.sh::TIntermBinary"*, i32, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*)* @_ZN2sh13TIntermBinaryC2E9TOperatorPNS_12TIntermTypedES3_
@_ZN2sh27TIntermInvariantDeclarationC1EPNS_13TIntermSymbolERKNS_10TSourceLocE = hidden unnamed_addr alias void (%"class.sh::TIntermInvariantDeclaration"*, %"class.sh::TIntermSymbol"*, %"struct.sh::TSourceLoc"*), void (%"class.sh::TIntermInvariantDeclaration"*, %"class.sh::TIntermSymbol"*, %"struct.sh::TSourceLoc"*)* @_ZN2sh27TIntermInvariantDeclarationC2EPNS_13TIntermSymbolERKNS_10TSourceLocE
@_ZN2sh14TIntermTernaryC1EPNS_12TIntermTypedES2_S2_ = hidden unnamed_addr alias void (%"class.sh::TIntermTernary"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*), void (%"class.sh::TIntermTernary"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*)* @_ZN2sh14TIntermTernaryC2EPNS_12TIntermTypedES2_S2_
@_ZN2sh11TIntermLoopC1ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE = hidden unnamed_addr alias void (%"class.sh::TIntermLoop"*, i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*), void (%"class.sh::TIntermLoop"*, i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*)* @_ZN2sh11TIntermLoopC2ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE
@_ZN2sh13TIntermIfElseC1EPNS_12TIntermTypedEPNS_12TIntermBlockES4_ = hidden unnamed_addr alias void (%"class.sh::TIntermIfElse"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*), void (%"class.sh::TIntermIfElse"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*)* @_ZN2sh13TIntermIfElseC2EPNS_12TIntermTypedEPNS_12TIntermBlockES4_
@_ZN2sh13TIntermSwitchC1EPNS_12TIntermTypedEPNS_12TIntermBlockE = hidden unnamed_addr alias void (%"class.sh::TIntermSwitch"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*), void (%"class.sh::TIntermSwitch"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*)* @_ZN2sh13TIntermSwitchC2EPNS_12TIntermTypedEPNS_12TIntermBlockE
@_ZN2sh28TIntermPreprocessorDirectiveC1ENS_21PreprocessorDirectiveENS_15ImmutableStringE = hidden unnamed_addr alias void (%"class.sh::TIntermPreprocessorDirective"*, i32, i8*, i64), void (%"class.sh::TIntermPreprocessorDirective"*, i32, i8*, i64)* @_ZN2sh28TIntermPreprocessorDirectiveC2ENS_21PreprocessorDirectiveENS_15ImmutableStringE
@_ZN2sh28TIntermPreprocessorDirectiveD1Ev = hidden unnamed_addr alias void (%"class.sh::TIntermPreprocessorDirective"*), void (%"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh28TIntermPreprocessorDirectiveD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh17TIntermExpressionC2ERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(128)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = bitcast i32* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 16, i1 false) #18
  %5 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %6, %"class.sh::TType"* nonnull dereferenceable(128) %1) #18
  ret void
}

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(128)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh17TIntermExpression24setTypePreservePrecisionERKNS_5TTypeE(%"class.sh::TIntermExpression"*, %"class.sh::TType"* dereferenceable(128)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 0
  %4 = bitcast %"class.sh::TIntermExpression"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(128) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %3) #18
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 1
  %12 = tail call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %11, %"class.sh::TType"* nonnull dereferenceable(128) %1) #18
  %13 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 1, i32 1
  store i32 %10, i32* %13, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

declare dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(128)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh13TIntermSymbol13getChildCountEv(%"class.sh::TIntermSymbol"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TIntermNode"* @_ZNK2sh13TIntermSymbol12getChildNodeEm(%"class.sh::TIntermSymbol"* nocapture readnone, i64) unnamed_addr #3 align 2 {
  ret %"class.sh::TIntermNode"* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh20TIntermConstantUnion13getChildCountEv(%"class.sh::TIntermConstantUnion"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TIntermNode"* @_ZNK2sh20TIntermConstantUnion12getChildNodeEm(%"class.sh::TIntermConstantUnion"* nocapture readnone, i64) unnamed_addr #3 align 2 {
  ret %"class.sh::TIntermNode"* null
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh11TIntermLoop13getChildCountEv(%"class.sh::TIntermLoop"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  %3 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, align 8
  %4 = icmp ne %"class.sh::TIntermNode"* %3, null
  %5 = zext i1 %4 to i64
  %6 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  %7 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %8 = icmp ne %"class.sh::TIntermTyped"* %7, null
  %9 = zext i1 %8 to i64
  %10 = add nuw nsw i64 %9, %5
  %11 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  %12 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  %13 = icmp ne %"class.sh::TIntermTyped"* %12, null
  %14 = zext i1 %13 to i64
  %15 = add nuw nsw i64 %10, %14
  %16 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  %17 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %16, align 8
  %18 = icmp ne %"class.sh::TIntermBlock"* %17, null
  %19 = zext i1 %18 to i64
  %20 = add nuw nsw i64 %15, %19
  ret i64 %20
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh11TIntermLoop12getChildNodeEm(%"class.sh::TIntermLoop"* nocapture readonly, i64) unnamed_addr #5 align 2 {
  %3 = alloca [4 x %"class.sh::TIntermNode"*], align 16
  %4 = bitcast [4 x %"class.sh::TIntermNode"*]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #18
  %5 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, null
  br i1 %7, label %10, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 0
  store %"class.sh::TIntermNode"* %6, %"class.sh::TIntermNode"** %9, align 16
  br label %10

; <label>:10:                                     ; preds = %2, %8
  %11 = phi i32 [ 1, %8 ], [ 0, %2 ]
  %12 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  %13 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %12, align 8
  %14 = icmp eq %"class.sh::TIntermTyped"* %13, null
  br i1 %14, label %20, label %15

; <label>:15:                                     ; preds = %10
  %16 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %13, i64 0, i32 0
  %17 = zext i32 %11 to i64
  %18 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 %17
  store %"class.sh::TIntermNode"* %16, %"class.sh::TIntermNode"** %18, align 8
  %19 = add nuw nsw i32 %11, 1
  br label %20

; <label>:20:                                     ; preds = %10, %15
  %21 = phi i32 [ %19, %15 ], [ %11, %10 ]
  %22 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  %23 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %22, align 8
  %24 = icmp eq %"class.sh::TIntermTyped"* %23, null
  br i1 %24, label %30, label %25

; <label>:25:                                     ; preds = %20
  %26 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %23, i64 0, i32 0
  %27 = zext i32 %21 to i64
  %28 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 %27
  store %"class.sh::TIntermNode"* %26, %"class.sh::TIntermNode"** %28, align 8
  %29 = add nsw i32 %21, 1
  br label %30

; <label>:30:                                     ; preds = %20, %25
  %31 = phi i32 [ %29, %25 ], [ %21, %20 ]
  %32 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  %33 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %32, align 8
  %34 = icmp eq %"class.sh::TIntermBlock"* %33, null
  br i1 %34, label %39, label %35

; <label>:35:                                     ; preds = %30
  %36 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %33, i64 0, i32 0
  %37 = zext i32 %31 to i64
  %38 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 %37
  store %"class.sh::TIntermNode"* %36, %"class.sh::TIntermNode"** %38, align 8
  br label %39

; <label>:39:                                     ; preds = %30, %35
  %40 = getelementptr inbounds [4 x %"class.sh::TIntermNode"*], [4 x %"class.sh::TIntermNode"*]* %3, i64 0, i64 %1
  %41 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %40, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #18
  ret %"class.sh::TIntermNode"* %41
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh11TIntermLoop16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermLoop"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"* %5, %1
  br i1 %6, label %22, label %7

; <label>:7:                                      ; preds = %3
  %8 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  %9 = bitcast %"class.sh::TIntermTyped"** %8 to %"class.sh::TIntermNode"**
  %10 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %9, align 8
  %11 = icmp eq %"class.sh::TIntermNode"* %10, %1
  br i1 %11, label %22, label %12

; <label>:12:                                     ; preds = %7
  %13 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  %14 = bitcast %"class.sh::TIntermTyped"** %13 to %"class.sh::TIntermNode"**
  %15 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, align 8
  %16 = icmp eq %"class.sh::TIntermNode"* %15, %1
  br i1 %16, label %22, label %17

; <label>:17:                                     ; preds = %12
  %18 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  %19 = bitcast %"class.sh::TIntermBlock"** %18 to %"class.sh::TIntermNode"**
  %20 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, align 8
  %21 = icmp eq %"class.sh::TIntermNode"* %20, %1
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %17, %12, %7, %3
  %23 = phi %"class.sh::TIntermNode"** [ %4, %3 ], [ %9, %7 ], [ %14, %12 ], [ %19, %17 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %23, align 8
  br label %24

; <label>:24:                                     ; preds = %22, %17
  %25 = phi i1 [ false, %17 ], [ true, %22 ]
  ret i1 %25
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh13TIntermBranch13getChildCountEv(%"class.sh::TIntermBranch"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 2
  %3 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %2, align 8
  %4 = icmp ne %"class.sh::TIntermTyped"* %3, null
  %5 = zext i1 %4 to i64
  ret i64 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh13TIntermBranch12getChildNodeEm(%"class.sh::TIntermBranch"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 2
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13TIntermBranch16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermBranch"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermBranch", %"class.sh::TIntermBranch"* %0, i64 0, i32 2
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

; <label>:9:                                      ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh14TIntermSwizzle13getChildCountEv(%"class.sh::TIntermSwizzle"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh14TIntermSwizzle12getChildNodeEm(%"class.sh::TIntermSwizzle"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh14TIntermSwizzle16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermSwizzle"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

; <label>:9:                                      ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh13TIntermBinary13getChildCountEv(%"class.sh::TIntermBinary"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh13TIntermBinary12getChildNodeEm(%"class.sh::TIntermBinary"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = icmp eq i64 %1, 0
  %4 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %6 = select i1 %3, %"class.sh::TIntermTyped"** %4, %"class.sh::TIntermTyped"** %5
  %7 = bitcast %"class.sh::TIntermTyped"** %6 to %"class.sh::TIntermNode"**
  %8 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %7, align 8
  ret %"class.sh::TIntermNode"* %8
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13TIntermBinary16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermBinary"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %13, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %10 = bitcast %"class.sh::TIntermTyped"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %8, %3
  %14 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %14, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %8
  %16 = phi i1 [ false, %8 ], [ true, %13 ]
  ret i1 %16
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh12TIntermUnary13getChildCountEv(%"class.sh::TIntermUnary"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh12TIntermUnary12getChildNodeEm(%"class.sh::TIntermUnary"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh12TIntermUnary16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermUnary"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

; <label>:9:                                      ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh27TIntermInvariantDeclaration13getChildCountEv(%"class.sh::TIntermInvariantDeclaration"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh27TIntermInvariantDeclaration12getChildNodeEm(%"class.sh::TIntermInvariantDeclaration"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermInvariantDeclaration", %"class.sh::TIntermInvariantDeclaration"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermSymbol"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh27TIntermInvariantDeclaration16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermInvariantDeclaration"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermInvariantDeclaration", %"class.sh::TIntermInvariantDeclaration"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermSymbol"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

; <label>:9:                                      ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh25TIntermFunctionDefinition13getChildCountEv(%"class.sh::TIntermFunctionDefinition"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh25TIntermFunctionDefinition12getChildNodeEm(%"class.sh::TIntermFunctionDefinition"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = icmp eq i64 %1, 0
  %4 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermFunctionPrototype"** %4 to %"class.sh::TIntermNode"**
  %6 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %0, i64 0, i32 2
  %7 = bitcast %"class.sh::TIntermBlock"** %6 to %"class.sh::TIntermNode"**
  %8 = select i1 %3, %"class.sh::TIntermNode"** %5, %"class.sh::TIntermNode"** %7
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  ret %"class.sh::TIntermNode"* %9
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh25TIntermFunctionDefinition16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermFunctionDefinition"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermFunctionPrototype"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %13, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %0, i64 0, i32 2
  %10 = bitcast %"class.sh::TIntermBlock"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %8, %3
  %14 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %14, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %8
  %16 = phi i1 [ false, %8 ], [ true, %13 ]
  ret i1 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh16TIntermAggregate13getChildCountEv(%"class.sh::TIntermAggregate"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TIntermNode"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.16"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh16TIntermAggregate12getChildNodeEm(%"class.sh::TIntermAggregate"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, i64 %1
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  ret %"class.sh::TIntermNode"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TIntermAggregate16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermAggregate"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermAggregateBase"* %4 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)***
  %6 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %6, i64 2
  %8 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %7, align 8
  %9 = tail call %"class.sh::TVector.15"* %8(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %10 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %9, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.sh::TVector.15"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %49, label %16

; <label>:16:                                     ; preds = %3, %27
  %17 = phi i64 [ %28, %27 ], [ 0, %3 ]
  %18 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %18, i64 2
  %20 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.15"* %20(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %22 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %17
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = icmp eq %"class.sh::TIntermNode"* %25, %1
  br i1 %26, label %41, label %27

; <label>:27:                                     ; preds = %16
  %28 = add nuw i64 %17, 1
  %29 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %30 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %29, i64 2
  %31 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %30, align 8
  %32 = tail call %"class.sh::TVector.15"* %31(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %33 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %32, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TVector.15"* %32 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp ult i64 %28, %39
  br i1 %40, label %16, label %49

; <label>:41:                                     ; preds = %16
  %42 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %43 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %42, i64 2
  %44 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %43, align 8
  %45 = tail call %"class.sh::TVector.15"* %44(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %46 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %17
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %48, align 8
  br label %49

; <label>:49:                                     ; preds = %27, %3, %41
  %50 = phi i1 [ true, %41 ], [ false, %3 ], [ false, %27 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh20TIntermAggregateBase24replaceChildNodeInternalEPNS_11TIntermNodeES2_(%"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermAggregateBase"* %0 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)***
  %5 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %5, i64 2
  %7 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %6, align 8
  %8 = tail call %"class.sh::TVector.15"* %7(%"class.sh::TIntermAggregateBase"* %0) #18
  %9 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %8, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.sh::TVector.15"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %11, %13
  br i1 %14, label %48, label %15

; <label>:15:                                     ; preds = %3, %26
  %16 = phi i64 [ %27, %26 ], [ 0, %3 ]
  %17 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %18 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %17, i64 2
  %19 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %18, align 8
  %20 = tail call %"class.sh::TVector.15"* %19(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %21 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %22, i64 %16
  %24 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, align 8
  %25 = icmp eq %"class.sh::TIntermNode"* %24, %1
  br i1 %25, label %40, label %26

; <label>:26:                                     ; preds = %15
  %27 = add nuw i64 %16, 1
  %28 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %29 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %28, i64 2
  %30 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %29, align 8
  %31 = tail call %"class.sh::TVector.15"* %30(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %32 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %31, i64 0, i32 0, i32 0, i32 1
  %33 = bitcast %"class.sh::TIntermNode"*** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.sh::TVector.15"* %31 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 3
  %39 = icmp ult i64 %27, %38
  br i1 %39, label %15, label %48

; <label>:40:                                     ; preds = %15
  %41 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %42 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %41, i64 2
  %43 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %42, align 8
  %44 = tail call %"class.sh::TVector.15"* %43(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %45 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %45, align 8
  %47 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %16
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %47, align 8
  br label %48

; <label>:48:                                     ; preds = %26, %3, %40
  %49 = phi i1 [ true, %40 ], [ false, %3 ], [ false, %26 ]
  ret i1 %49
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh12TIntermBlock13getChildCountEv(%"class.sh::TIntermBlock"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0
  %3 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TIntermNode"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.16"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh12TIntermBlock12getChildNodeEm(%"class.sh::TIntermBlock"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, i64 %1
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  ret %"class.sh::TIntermNode"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh12TIntermBlock16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermAggregateBase"* %4 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)***
  %6 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %6, i64 2
  %8 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %7, align 8
  %9 = tail call %"class.sh::TVector.15"* %8(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %10 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %9, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.sh::TVector.15"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %49, label %16

; <label>:16:                                     ; preds = %3, %27
  %17 = phi i64 [ %28, %27 ], [ 0, %3 ]
  %18 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %18, i64 2
  %20 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.15"* %20(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %22 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %17
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = icmp eq %"class.sh::TIntermNode"* %25, %1
  br i1 %26, label %41, label %27

; <label>:27:                                     ; preds = %16
  %28 = add nuw i64 %17, 1
  %29 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %30 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %29, i64 2
  %31 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %30, align 8
  %32 = tail call %"class.sh::TVector.15"* %31(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %33 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %32, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TVector.15"* %32 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp ult i64 %28, %39
  br i1 %40, label %16, label %49

; <label>:41:                                     ; preds = %16
  %42 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %43 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %42, i64 2
  %44 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %43, align 8
  %45 = tail call %"class.sh::TVector.15"* %44(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %46 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %17
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %48, align 8
  br label %49

; <label>:49:                                     ; preds = %27, %3, %41
  %50 = phi i1 [ true, %41 ], [ false, %3 ], [ false, %27 ]
  ret i1 %50
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh24TIntermFunctionPrototype13getChildCountEv(%"class.sh::TIntermFunctionPrototype"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TIntermNode"* @_ZNK2sh24TIntermFunctionPrototype12getChildNodeEm(%"class.sh::TIntermFunctionPrototype"* nocapture readnone, i64) unnamed_addr #3 align 2 {
  ret %"class.sh::TIntermNode"* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2sh24TIntermFunctionPrototype16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermFunctionPrototype"* nocapture readnone, %"class.sh::TIntermNode"* nocapture readnone, %"class.sh::TIntermNode"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh18TIntermDeclaration13getChildCountEv(%"class.sh::TIntermDeclaration"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0
  %3 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TIntermNode"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.16"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh18TIntermDeclaration12getChildNodeEm(%"class.sh::TIntermDeclaration"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, i64 %1
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  ret %"class.sh::TIntermNode"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh18TIntermDeclaration16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermAggregateBase"* %4 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)***
  %6 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %6, i64 2
  %8 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %7, align 8
  %9 = tail call %"class.sh::TVector.15"* %8(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %10 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %9, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.sh::TIntermNode"*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.sh::TVector.15"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %49, label %16

; <label>:16:                                     ; preds = %3, %27
  %17 = phi i64 [ %28, %27 ], [ 0, %3 ]
  %18 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %18, i64 2
  %20 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.15"* %20(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %22 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %17
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = icmp eq %"class.sh::TIntermNode"* %25, %1
  br i1 %26, label %41, label %27

; <label>:27:                                     ; preds = %16
  %28 = add nuw i64 %17, 1
  %29 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %30 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %29, i64 2
  %31 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %30, align 8
  %32 = tail call %"class.sh::TVector.15"* %31(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %33 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %32, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TVector.15"* %32 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %35, %37
  %39 = ashr exact i64 %38, 3
  %40 = icmp ult i64 %28, %39
  br i1 %40, label %16, label %49

; <label>:41:                                     ; preds = %16
  %42 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %5, align 8
  %43 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %42, i64 2
  %44 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %43, align 8
  %45 = tail call %"class.sh::TVector.15"* %44(%"class.sh::TIntermAggregateBase"* nonnull %4) #18
  %46 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %47, i64 %17
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %48, align 8
  br label %49

; <label>:49:                                     ; preds = %27, %3, %41
  %50 = phi i1 [ true, %41 ], [ false, %3 ], [ false, %27 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh20TIntermAggregateBase28replaceChildNodeWithMultipleEPNS_11TIntermNodeERKNS_7TVectorIS2_EE(%"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"* readnone, %"class.sh::TVector.15"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermAggregateBase"* %0 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)***
  %5 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %5, i64 2
  %7 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %6, align 8
  %8 = tail call %"class.sh::TVector.15"* %7(%"class.sh::TIntermAggregateBase"* %0) #18
  %9 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %12 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %11, i64 2
  %13 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %12, align 8
  %14 = tail call %"class.sh::TVector.15"* %13(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %15 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %14, i64 0, i32 0, i32 0, i32 1
  %16 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %17 = icmp ult %"class.sh::TIntermNode"** %10, %16
  br i1 %17, label %18, label %59

; <label>:18:                                     ; preds = %3, %38
  %19 = phi %"class.sh::TIntermNode"** [ %39, %38 ], [ %10, %3 ]
  %20 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, align 8
  %21 = icmp eq %"class.sh::TIntermNode"* %20, %1
  br i1 %21, label %22, label %38

; <label>:22:                                     ; preds = %18
  %23 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %24 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %23, i64 2
  %25 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %24, align 8
  %26 = tail call %"class.sh::TVector.15"* %25(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %27 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, i64 1
  %28 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %26, i64 0, i32 0, i32 0, i32 1
  %29 = bitcast %"class.sh::TIntermNode"*** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = ptrtoint %"class.sh::TIntermNode"** %27 to i64
  %32 = sub i64 %30, %31
  %33 = ashr exact i64 %32, 3
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %47, label %35

; <label>:35:                                     ; preds = %22
  %36 = bitcast %"class.sh::TIntermNode"** %19 to i8*
  %37 = bitcast %"class.sh::TIntermNode"** %27 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %36, i8* nonnull align 8 %37, i64 %32, i1 false) #18
  br label %47

; <label>:38:                                     ; preds = %18
  %39 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, i64 1
  %40 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %41 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %40, i64 2
  %42 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %41, align 8
  %43 = tail call %"class.sh::TVector.15"* %42(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %44 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %43, i64 0, i32 0, i32 0, i32 1
  %45 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %44, align 8
  %46 = icmp ult %"class.sh::TIntermNode"** %39, %45
  br i1 %46, label %18, label %59

; <label>:47:                                     ; preds = %35, %22
  %48 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %19, i64 %33
  store %"class.sh::TIntermNode"** %48, %"class.sh::TIntermNode"*** %28, align 8
  %49 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %50 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %49, i64 2
  %51 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %50, align 8
  %52 = tail call %"class.sh::TVector.15"* %51(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %53 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %52, i64 0, i32 0
  %54 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %2, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %54, align 8
  %56 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %2, i64 0, i32 0, i32 0, i32 1
  %57 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %56, align 8
  %58 = tail call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.16"* %53, %"class.sh::TIntermNode"** nonnull %19, %"class.sh::TIntermNode"** %55, %"class.sh::TIntermNode"** %57)
  br label %59

; <label>:59:                                     ; preds = %38, %3, %47
  %60 = phi i1 [ true, %47 ], [ false, %3 ], [ false, %38 ]
  ret i1 %60
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.16"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.sh::TIntermNode"** %2 to i64
  %6 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %7 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %8 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint %"class.sh::TIntermNode"** %3 to i64
  %10 = sub i64 %9, %5
  %11 = ashr exact i64 %10, 3
  %12 = icmp sgt i64 %10, 0
  br i1 %12, label %13, label %777

; <label>:13:                                     ; preds = %4
  %14 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"class.sh::TIntermNode"*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = ptrtoint %"class.sh::TIntermNode"** %18 to i64
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 3
  %22 = icmp sgt i64 %11, %21
  %23 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  br i1 %22, label %332, label %24

; <label>:24:                                     ; preds = %13
  %25 = sub i64 %19, %6
  %26 = ashr exact i64 %25, 3
  %27 = icmp sgt i64 %11, %26
  br i1 %27, label %28, label %90

; <label>:28:                                     ; preds = %24
  %29 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %26
  %30 = icmp eq %"class.sh::TIntermNode"** %29, %3
  br i1 %30, label %85, label %31

; <label>:31:                                     ; preds = %28
  %32 = xor i64 %26, -1
  %33 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 %32
  %34 = ptrtoint %"class.sh::TIntermNode"** %33 to i64
  %35 = sub i64 %34, %5
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 3
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %52, label %40

; <label>:40:                                     ; preds = %31, %40
  %41 = phi %"class.sh::TIntermNode"** [ %49, %40 ], [ %18, %31 ]
  %42 = phi %"class.sh::TIntermNode"** [ %47, %40 ], [ %29, %31 ]
  %43 = phi i64 [ %50, %40 ], [ %38, %31 ]
  %44 = bitcast %"class.sh::TIntermNode"** %41 to i64*
  %45 = bitcast %"class.sh::TIntermNode"** %42 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %44, align 8
  %47 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %42, i64 1
  %48 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %49 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %48, i64 1
  store %"class.sh::TIntermNode"** %49, %"class.sh::TIntermNode"*** %17, align 8
  %50 = add i64 %43, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %40, !llvm.loop !2

; <label>:52:                                     ; preds = %40, %31
  %53 = phi %"class.sh::TIntermNode"** [ undef, %31 ], [ %49, %40 ]
  %54 = phi %"class.sh::TIntermNode"** [ %18, %31 ], [ %49, %40 ]
  %55 = phi %"class.sh::TIntermNode"** [ %29, %31 ], [ %47, %40 ]
  %56 = icmp ult i64 %35, 24
  br i1 %56, label %85, label %57

; <label>:57:                                     ; preds = %52, %57
  %58 = phi %"class.sh::TIntermNode"** [ %83, %57 ], [ %54, %52 ]
  %59 = phi %"class.sh::TIntermNode"** [ %81, %57 ], [ %55, %52 ]
  %60 = bitcast %"class.sh::TIntermNode"** %58 to i64*
  %61 = bitcast %"class.sh::TIntermNode"** %59 to i64*
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %60, align 8
  %63 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 1
  %64 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %65 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %64, i64 1
  store %"class.sh::TIntermNode"** %65, %"class.sh::TIntermNode"*** %17, align 8
  %66 = bitcast %"class.sh::TIntermNode"** %65 to i64*
  %67 = bitcast %"class.sh::TIntermNode"** %63 to i64*
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %66, align 8
  %69 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 2
  %70 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %71 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %70, i64 1
  store %"class.sh::TIntermNode"** %71, %"class.sh::TIntermNode"*** %17, align 8
  %72 = bitcast %"class.sh::TIntermNode"** %71 to i64*
  %73 = bitcast %"class.sh::TIntermNode"** %69 to i64*
  %74 = load i64, i64* %73, align 8
  store i64 %74, i64* %72, align 8
  %75 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 3
  %76 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %77 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %76, i64 1
  store %"class.sh::TIntermNode"** %77, %"class.sh::TIntermNode"*** %17, align 8
  %78 = bitcast %"class.sh::TIntermNode"** %77 to i64*
  %79 = bitcast %"class.sh::TIntermNode"** %75 to i64*
  %80 = load i64, i64* %79, align 8
  store i64 %80, i64* %78, align 8
  %81 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 4
  %82 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %83 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %82, i64 1
  store %"class.sh::TIntermNode"** %83, %"class.sh::TIntermNode"*** %17, align 8
  %84 = icmp eq %"class.sh::TIntermNode"** %81, %3
  br i1 %84, label %85, label %57

; <label>:85:                                     ; preds = %52, %57, %28
  %86 = phi %"class.sh::TIntermNode"** [ %18, %28 ], [ %53, %52 ], [ %83, %57 ]
  %87 = icmp sgt i64 %25, 0
  br i1 %87, label %88, label %777

; <label>:88:                                     ; preds = %85
  %89 = ptrtoint %"class.sh::TIntermNode"** %86 to i64
  br label %90

; <label>:90:                                     ; preds = %88, %24
  %91 = phi i64 [ %89, %88 ], [ %19, %24 ]
  %92 = phi %"class.sh::TIntermNode"** [ %86, %88 ], [ %18, %24 ]
  %93 = phi %"class.sh::TIntermNode"** [ %29, %88 ], [ %3, %24 ]
  %94 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %11
  %95 = ptrtoint %"class.sh::TIntermNode"** %94 to i64
  %96 = sub i64 %91, %95
  %97 = ashr exact i64 %96, 3
  %98 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %97
  %99 = icmp ult %"class.sh::TIntermNode"** %98, %18
  br i1 %99, label %100, label %127

; <label>:100:                                    ; preds = %90
  %101 = sub nsw i64 0, %97
  %102 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 %101
  %103 = bitcast %"class.sh::TIntermNode"** %102 to i8*
  %104 = xor i64 %6, -1
  %105 = getelementptr i8, i8* %103, i64 %104
  %106 = ptrtoint i8* %105 to i64
  %107 = lshr i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %123, label %111

; <label>:111:                                    ; preds = %100, %111
  %112 = phi %"class.sh::TIntermNode"** [ %120, %111 ], [ %92, %100 ]
  %113 = phi %"class.sh::TIntermNode"** [ %118, %111 ], [ %98, %100 ]
  %114 = phi i64 [ %121, %111 ], [ %109, %100 ]
  %115 = bitcast %"class.sh::TIntermNode"** %112 to i64*
  %116 = bitcast %"class.sh::TIntermNode"** %113 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %115, align 8
  %118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %113, i64 1
  %119 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 1
  store %"class.sh::TIntermNode"** %120, %"class.sh::TIntermNode"*** %17, align 8
  %121 = add i64 %114, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %111, !llvm.loop !4

; <label>:123:                                    ; preds = %111, %100
  %124 = phi %"class.sh::TIntermNode"** [ %92, %100 ], [ %120, %111 ]
  %125 = phi %"class.sh::TIntermNode"** [ %98, %100 ], [ %118, %111 ]
  %126 = icmp ult i8* %105, inttoptr (i64 24 to i8*)
  br i1 %126, label %127, label %133

; <label>:127:                                    ; preds = %123, %133, %90
  %128 = icmp eq i64 %96, 0
  br i1 %128, label %161, label %129

; <label>:129:                                    ; preds = %127
  %130 = sub nsw i64 0, %97
  %131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %130
  %132 = bitcast %"class.sh::TIntermNode"** %131 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %132, i8* align 8 %7, i64 %96, i1 false) #18
  br label %161

; <label>:133:                                    ; preds = %123, %133
  %134 = phi %"class.sh::TIntermNode"** [ %159, %133 ], [ %124, %123 ]
  %135 = phi %"class.sh::TIntermNode"** [ %157, %133 ], [ %125, %123 ]
  %136 = bitcast %"class.sh::TIntermNode"** %134 to i64*
  %137 = bitcast %"class.sh::TIntermNode"** %135 to i64*
  %138 = load i64, i64* %137, align 8
  store i64 %138, i64* %136, align 8
  %139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 1
  %140 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 1
  store %"class.sh::TIntermNode"** %141, %"class.sh::TIntermNode"*** %17, align 8
  %142 = bitcast %"class.sh::TIntermNode"** %141 to i64*
  %143 = bitcast %"class.sh::TIntermNode"** %139 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %142, align 8
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 2
  %146 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %146, i64 1
  store %"class.sh::TIntermNode"** %147, %"class.sh::TIntermNode"*** %17, align 8
  %148 = bitcast %"class.sh::TIntermNode"** %147 to i64*
  %149 = bitcast %"class.sh::TIntermNode"** %145 to i64*
  %150 = load i64, i64* %149, align 8
  store i64 %150, i64* %148, align 8
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 3
  %152 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %152, i64 1
  store %"class.sh::TIntermNode"** %153, %"class.sh::TIntermNode"*** %17, align 8
  %154 = bitcast %"class.sh::TIntermNode"** %153 to i64*
  %155 = bitcast %"class.sh::TIntermNode"** %151 to i64*
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %154, align 8
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %135, i64 4
  %158 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %158, i64 1
  store %"class.sh::TIntermNode"** %159, %"class.sh::TIntermNode"*** %17, align 8
  %160 = icmp ult %"class.sh::TIntermNode"** %157, %18
  br i1 %160, label %133, label %127

; <label>:161:                                    ; preds = %127, %129
  %162 = icmp eq %"class.sh::TIntermNode"** %93, %2
  br i1 %162, label %777, label %163

; <label>:163:                                    ; preds = %161
  %164 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 -1
  %165 = ptrtoint %"class.sh::TIntermNode"** %164 to i64
  %166 = sub i64 %165, %5
  %167 = lshr i64 %166, 3
  %168 = add nuw nsw i64 %167, 1
  %169 = icmp ult i64 %168, 4
  br i1 %169, label %262, label %170

; <label>:170:                                    ; preds = %163
  %171 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 -1
  %172 = ptrtoint %"class.sh::TIntermNode"** %171 to i64
  %173 = sub i64 %172, %5
  %174 = lshr i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %175
  %177 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %175
  %178 = icmp ugt %"class.sh::TIntermNode"** %177, %1
  %179 = icmp ugt %"class.sh::TIntermNode"** %176, %2
  %180 = and i1 %178, %179
  br i1 %180, label %262, label %181

; <label>:181:                                    ; preds = %170
  %182 = and i64 %168, 4611686018427387900
  %183 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %182
  %184 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %182
  %185 = add nsw i64 %182, -4
  %186 = lshr exact i64 %185, 2
  %187 = add nuw nsw i64 %186, 1
  %188 = and i64 %187, 3
  %189 = icmp ult i64 %185, 12
  br i1 %189, label %241, label %190

; <label>:190:                                    ; preds = %181
  %191 = sub nsw i64 %187, %188
  br label %192

; <label>:192:                                    ; preds = %192, %190
  %193 = phi i64 [ 0, %190 ], [ %238, %192 ]
  %194 = phi i64 [ %191, %190 ], [ %239, %192 ]
  %195 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %193
  %196 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %193
  %197 = bitcast %"class.sh::TIntermNode"** %196 to <2 x i64>*
  %198 = load <2 x i64>, <2 x i64>* %197, align 8, !alias.scope !5
  %199 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %196, i64 2
  %200 = bitcast %"class.sh::TIntermNode"** %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 8, !alias.scope !5
  %202 = bitcast %"class.sh::TIntermNode"** %195 to <2 x i64>*
  store <2 x i64> %198, <2 x i64>* %202, align 8, !alias.scope !8, !noalias !5
  %203 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %195, i64 2
  %204 = bitcast %"class.sh::TIntermNode"** %203 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %204, align 8, !alias.scope !8, !noalias !5
  %205 = or i64 %193, 4
  %206 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %205
  %207 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %205
  %208 = bitcast %"class.sh::TIntermNode"** %207 to <2 x i64>*
  %209 = load <2 x i64>, <2 x i64>* %208, align 8, !alias.scope !5
  %210 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, i64 2
  %211 = bitcast %"class.sh::TIntermNode"** %210 to <2 x i64>*
  %212 = load <2 x i64>, <2 x i64>* %211, align 8, !alias.scope !5
  %213 = bitcast %"class.sh::TIntermNode"** %206 to <2 x i64>*
  store <2 x i64> %209, <2 x i64>* %213, align 8, !alias.scope !8, !noalias !5
  %214 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %206, i64 2
  %215 = bitcast %"class.sh::TIntermNode"** %214 to <2 x i64>*
  store <2 x i64> %212, <2 x i64>* %215, align 8, !alias.scope !8, !noalias !5
  %216 = or i64 %193, 8
  %217 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %216
  %218 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %216
  %219 = bitcast %"class.sh::TIntermNode"** %218 to <2 x i64>*
  %220 = load <2 x i64>, <2 x i64>* %219, align 8, !alias.scope !5
  %221 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %218, i64 2
  %222 = bitcast %"class.sh::TIntermNode"** %221 to <2 x i64>*
  %223 = load <2 x i64>, <2 x i64>* %222, align 8, !alias.scope !5
  %224 = bitcast %"class.sh::TIntermNode"** %217 to <2 x i64>*
  store <2 x i64> %220, <2 x i64>* %224, align 8, !alias.scope !8, !noalias !5
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %217, i64 2
  %226 = bitcast %"class.sh::TIntermNode"** %225 to <2 x i64>*
  store <2 x i64> %223, <2 x i64>* %226, align 8, !alias.scope !8, !noalias !5
  %227 = or i64 %193, 12
  %228 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %227
  %229 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %227
  %230 = bitcast %"class.sh::TIntermNode"** %229 to <2 x i64>*
  %231 = load <2 x i64>, <2 x i64>* %230, align 8, !alias.scope !5
  %232 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %229, i64 2
  %233 = bitcast %"class.sh::TIntermNode"** %232 to <2 x i64>*
  %234 = load <2 x i64>, <2 x i64>* %233, align 8, !alias.scope !5
  %235 = bitcast %"class.sh::TIntermNode"** %228 to <2 x i64>*
  store <2 x i64> %231, <2 x i64>* %235, align 8, !alias.scope !8, !noalias !5
  %236 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %228, i64 2
  %237 = bitcast %"class.sh::TIntermNode"** %236 to <2 x i64>*
  store <2 x i64> %234, <2 x i64>* %237, align 8, !alias.scope !8, !noalias !5
  %238 = add i64 %193, 16
  %239 = add i64 %194, -4
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %192, !llvm.loop !10

; <label>:241:                                    ; preds = %192, %181
  %242 = phi i64 [ 0, %181 ], [ %238, %192 ]
  %243 = icmp eq i64 %188, 0
  br i1 %243, label %260, label %244

; <label>:244:                                    ; preds = %241, %244
  %245 = phi i64 [ %257, %244 ], [ %242, %241 ]
  %246 = phi i64 [ %258, %244 ], [ %188, %241 ]
  %247 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %245
  %248 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %245
  %249 = bitcast %"class.sh::TIntermNode"** %248 to <2 x i64>*
  %250 = load <2 x i64>, <2 x i64>* %249, align 8, !alias.scope !5
  %251 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %248, i64 2
  %252 = bitcast %"class.sh::TIntermNode"** %251 to <2 x i64>*
  %253 = load <2 x i64>, <2 x i64>* %252, align 8, !alias.scope !5
  %254 = bitcast %"class.sh::TIntermNode"** %247 to <2 x i64>*
  store <2 x i64> %250, <2 x i64>* %254, align 8, !alias.scope !8, !noalias !5
  %255 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %247, i64 2
  %256 = bitcast %"class.sh::TIntermNode"** %255 to <2 x i64>*
  store <2 x i64> %253, <2 x i64>* %256, align 8, !alias.scope !8, !noalias !5
  %257 = add i64 %245, 4
  %258 = add i64 %246, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %244, !llvm.loop !12

; <label>:260:                                    ; preds = %244, %241
  %261 = icmp eq i64 %168, %182
  br i1 %261, label %777, label %262

; <label>:262:                                    ; preds = %260, %170, %163
  %263 = phi %"class.sh::TIntermNode"** [ %1, %170 ], [ %1, %163 ], [ %183, %260 ]
  %264 = phi %"class.sh::TIntermNode"** [ %2, %170 ], [ %2, %163 ], [ %184, %260 ]
  %265 = ptrtoint %"class.sh::TIntermNode"** %264 to i64
  %266 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %93, i64 -1
  %267 = ptrtoint %"class.sh::TIntermNode"** %266 to i64
  %268 = sub i64 %267, %265
  %269 = lshr i64 %268, 3
  %270 = add nuw nsw i64 %269, 1
  %271 = and i64 %270, 7
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %284, label %273

; <label>:273:                                    ; preds = %262, %273
  %274 = phi %"class.sh::TIntermNode"** [ %281, %273 ], [ %263, %262 ]
  %275 = phi %"class.sh::TIntermNode"** [ %280, %273 ], [ %264, %262 ]
  %276 = phi i64 [ %282, %273 ], [ %271, %262 ]
  %277 = bitcast %"class.sh::TIntermNode"** %275 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = bitcast %"class.sh::TIntermNode"** %274 to i64*
  store i64 %278, i64* %279, align 8
  %280 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %275, i64 1
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %274, i64 1
  %282 = add i64 %276, -1
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %284, label %273, !llvm.loop !13

; <label>:284:                                    ; preds = %273, %262
  %285 = phi %"class.sh::TIntermNode"** [ %263, %262 ], [ %281, %273 ]
  %286 = phi %"class.sh::TIntermNode"** [ %264, %262 ], [ %280, %273 ]
  %287 = icmp ult i64 %268, 56
  br i1 %287, label %777, label %288

; <label>:288:                                    ; preds = %284, %288
  %289 = phi %"class.sh::TIntermNode"** [ %330, %288 ], [ %285, %284 ]
  %290 = phi %"class.sh::TIntermNode"** [ %329, %288 ], [ %286, %284 ]
  %291 = bitcast %"class.sh::TIntermNode"** %290 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = bitcast %"class.sh::TIntermNode"** %289 to i64*
  store i64 %292, i64* %293, align 8
  %294 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 1
  %295 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 1
  %296 = bitcast %"class.sh::TIntermNode"** %294 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = bitcast %"class.sh::TIntermNode"** %295 to i64*
  store i64 %297, i64* %298, align 8
  %299 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 2
  %300 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 2
  %301 = bitcast %"class.sh::TIntermNode"** %299 to i64*
  %302 = load i64, i64* %301, align 8
  %303 = bitcast %"class.sh::TIntermNode"** %300 to i64*
  store i64 %302, i64* %303, align 8
  %304 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 3
  %305 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 3
  %306 = bitcast %"class.sh::TIntermNode"** %304 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = bitcast %"class.sh::TIntermNode"** %305 to i64*
  store i64 %307, i64* %308, align 8
  %309 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 4
  %310 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 4
  %311 = bitcast %"class.sh::TIntermNode"** %309 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = bitcast %"class.sh::TIntermNode"** %310 to i64*
  store i64 %312, i64* %313, align 8
  %314 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 5
  %315 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 5
  %316 = bitcast %"class.sh::TIntermNode"** %314 to i64*
  %317 = load i64, i64* %316, align 8
  %318 = bitcast %"class.sh::TIntermNode"** %315 to i64*
  store i64 %317, i64* %318, align 8
  %319 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 6
  %320 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 6
  %321 = bitcast %"class.sh::TIntermNode"** %319 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = bitcast %"class.sh::TIntermNode"** %320 to i64*
  store i64 %322, i64* %323, align 8
  %324 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 7
  %325 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 7
  %326 = bitcast %"class.sh::TIntermNode"** %324 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = bitcast %"class.sh::TIntermNode"** %325 to i64*
  store i64 %327, i64* %328, align 8
  %329 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %290, i64 8
  %330 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %289, i64 8
  %331 = icmp eq %"class.sh::TIntermNode"** %329, %93
  br i1 %331, label %777, label %288, !llvm.loop !14

; <label>:332:                                    ; preds = %13
  %333 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = sub i64 %19, %334
  %336 = ashr exact i64 %335, 3
  %337 = add nsw i64 %336, %11
  %338 = icmp ugt i64 %337, 2305843009213693951
  br i1 %338, label %339, label %341

; <label>:339:                                    ; preds = %332
  %340 = bitcast %"class.std::__1::vector.16"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %340) #12
  unreachable

; <label>:341:                                    ; preds = %332
  %342 = sub i64 %16, %334
  %343 = ashr exact i64 %342, 3
  %344 = icmp ult i64 %343, 1152921504606846975
  br i1 %344, label %348, label %345

; <label>:345:                                    ; preds = %341
  %346 = sub i64 %6, %334
  %347 = ashr exact i64 %346, 3
  br label %355

; <label>:348:                                    ; preds = %341
  %349 = ashr exact i64 %342, 2
  %350 = icmp ult i64 %349, %337
  %351 = select i1 %350, i64 %337, i64 %349
  %352 = sub i64 %6, %334
  %353 = ashr exact i64 %352, 3
  %354 = icmp eq i64 %351, 0
  br i1 %354, label %362, label %355

; <label>:355:                                    ; preds = %345, %348
  %356 = phi i64 [ %347, %345 ], [ %353, %348 ]
  %357 = phi i64 [ 2305843009213693951, %345 ], [ %351, %348 ]
  %358 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %359 = shl i64 %357, 3
  %360 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* nonnull %358, i64 %359) #18
  %361 = bitcast i8* %360 to %"class.sh::TIntermNode"**
  br label %362

; <label>:362:                                    ; preds = %348, %355
  %363 = phi i64 [ %356, %355 ], [ %353, %348 ]
  %364 = phi i64 [ %357, %355 ], [ 0, %348 ]
  %365 = phi %"class.sh::TIntermNode"** [ %361, %355 ], [ null, %348 ]
  %366 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 %363
  %367 = ptrtoint %"class.sh::TIntermNode"** %366 to i64
  %368 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 %364
  %369 = ptrtoint %"class.sh::TIntermNode"** %368 to i64
  %370 = icmp eq %"class.sh::TIntermNode"** %2, %3
  br i1 %370, label %551, label %371

; <label>:371:                                    ; preds = %362
  %372 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %373 = ptrtoint %"class.sh::TIntermNode"** %372 to i64
  %374 = sub i64 %373, %5
  %375 = lshr i64 %374, 3
  %376 = add nsw i64 %363, %375
  %377 = add nsw i64 %376, 1
  %378 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %379 = ptrtoint %"class.sh::TIntermNode"** %378 to i64
  %380 = sub i64 %379, %5
  %381 = lshr i64 %380, 3
  %382 = add nuw nsw i64 %381, 1
  %383 = icmp ult i64 %382, 4
  br i1 %383, label %478, label %384

; <label>:384:                                    ; preds = %371
  %385 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %386 = ptrtoint %"class.sh::TIntermNode"** %385 to i64
  %387 = sub i64 %386, %5
  %388 = lshr i64 %387, 3
  %389 = add nsw i64 %363, %388
  %390 = add nsw i64 %389, 1
  %391 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 %390
  %392 = add nuw nsw i64 %388, 1
  %393 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %392
  %394 = icmp ult %"class.sh::TIntermNode"** %366, %393
  %395 = icmp ugt %"class.sh::TIntermNode"** %391, %2
  %396 = and i1 %394, %395
  br i1 %396, label %478, label %397

; <label>:397:                                    ; preds = %384
  %398 = and i64 %382, 4611686018427387900
  %399 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %398
  %400 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %398
  %401 = add nsw i64 %398, -4
  %402 = lshr exact i64 %401, 2
  %403 = add nuw nsw i64 %402, 1
  %404 = and i64 %403, 3
  %405 = icmp ult i64 %401, 12
  br i1 %405, label %457, label %406

; <label>:406:                                    ; preds = %397
  %407 = sub nsw i64 %403, %404
  br label %408

; <label>:408:                                    ; preds = %408, %406
  %409 = phi i64 [ 0, %406 ], [ %454, %408 ]
  %410 = phi i64 [ %407, %406 ], [ %455, %408 ]
  %411 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %409
  %412 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %409
  %413 = bitcast %"class.sh::TIntermNode"** %412 to <2 x i64>*
  %414 = load <2 x i64>, <2 x i64>* %413, align 8, !alias.scope !15
  %415 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %412, i64 2
  %416 = bitcast %"class.sh::TIntermNode"** %415 to <2 x i64>*
  %417 = load <2 x i64>, <2 x i64>* %416, align 8, !alias.scope !15
  %418 = bitcast %"class.sh::TIntermNode"** %411 to <2 x i64>*
  store <2 x i64> %414, <2 x i64>* %418, align 8, !alias.scope !18, !noalias !15
  %419 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %411, i64 2
  %420 = bitcast %"class.sh::TIntermNode"** %419 to <2 x i64>*
  store <2 x i64> %417, <2 x i64>* %420, align 8, !alias.scope !18, !noalias !15
  %421 = or i64 %409, 4
  %422 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %421
  %423 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %421
  %424 = bitcast %"class.sh::TIntermNode"** %423 to <2 x i64>*
  %425 = load <2 x i64>, <2 x i64>* %424, align 8, !alias.scope !15
  %426 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %423, i64 2
  %427 = bitcast %"class.sh::TIntermNode"** %426 to <2 x i64>*
  %428 = load <2 x i64>, <2 x i64>* %427, align 8, !alias.scope !15
  %429 = bitcast %"class.sh::TIntermNode"** %422 to <2 x i64>*
  store <2 x i64> %425, <2 x i64>* %429, align 8, !alias.scope !18, !noalias !15
  %430 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %422, i64 2
  %431 = bitcast %"class.sh::TIntermNode"** %430 to <2 x i64>*
  store <2 x i64> %428, <2 x i64>* %431, align 8, !alias.scope !18, !noalias !15
  %432 = or i64 %409, 8
  %433 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %432
  %434 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %432
  %435 = bitcast %"class.sh::TIntermNode"** %434 to <2 x i64>*
  %436 = load <2 x i64>, <2 x i64>* %435, align 8, !alias.scope !15
  %437 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %434, i64 2
  %438 = bitcast %"class.sh::TIntermNode"** %437 to <2 x i64>*
  %439 = load <2 x i64>, <2 x i64>* %438, align 8, !alias.scope !15
  %440 = bitcast %"class.sh::TIntermNode"** %433 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %440, align 8, !alias.scope !18, !noalias !15
  %441 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %433, i64 2
  %442 = bitcast %"class.sh::TIntermNode"** %441 to <2 x i64>*
  store <2 x i64> %439, <2 x i64>* %442, align 8, !alias.scope !18, !noalias !15
  %443 = or i64 %409, 12
  %444 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %443
  %445 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %443
  %446 = bitcast %"class.sh::TIntermNode"** %445 to <2 x i64>*
  %447 = load <2 x i64>, <2 x i64>* %446, align 8, !alias.scope !15
  %448 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %445, i64 2
  %449 = bitcast %"class.sh::TIntermNode"** %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 8, !alias.scope !15
  %451 = bitcast %"class.sh::TIntermNode"** %444 to <2 x i64>*
  store <2 x i64> %447, <2 x i64>* %451, align 8, !alias.scope !18, !noalias !15
  %452 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %444, i64 2
  %453 = bitcast %"class.sh::TIntermNode"** %452 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %453, align 8, !alias.scope !18, !noalias !15
  %454 = add i64 %409, 16
  %455 = add i64 %410, -4
  %456 = icmp eq i64 %455, 0
  br i1 %456, label %457, label %408, !llvm.loop !20

; <label>:457:                                    ; preds = %408, %397
  %458 = phi i64 [ 0, %397 ], [ %454, %408 ]
  %459 = icmp eq i64 %404, 0
  br i1 %459, label %476, label %460

; <label>:460:                                    ; preds = %457, %460
  %461 = phi i64 [ %473, %460 ], [ %458, %457 ]
  %462 = phi i64 [ %474, %460 ], [ %404, %457 ]
  %463 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %461
  %464 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %461
  %465 = bitcast %"class.sh::TIntermNode"** %464 to <2 x i64>*
  %466 = load <2 x i64>, <2 x i64>* %465, align 8, !alias.scope !15
  %467 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %464, i64 2
  %468 = bitcast %"class.sh::TIntermNode"** %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 8, !alias.scope !15
  %470 = bitcast %"class.sh::TIntermNode"** %463 to <2 x i64>*
  store <2 x i64> %466, <2 x i64>* %470, align 8, !alias.scope !18, !noalias !15
  %471 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %463, i64 2
  %472 = bitcast %"class.sh::TIntermNode"** %471 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %472, align 8, !alias.scope !18, !noalias !15
  %473 = add i64 %461, 4
  %474 = add i64 %462, -1
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %476, label %460, !llvm.loop !21

; <label>:476:                                    ; preds = %460, %457
  %477 = icmp eq i64 %382, %398
  br i1 %477, label %548, label %478

; <label>:478:                                    ; preds = %476, %384, %371
  %479 = phi %"class.sh::TIntermNode"** [ %366, %384 ], [ %366, %371 ], [ %399, %476 ]
  %480 = phi %"class.sh::TIntermNode"** [ %2, %384 ], [ %2, %371 ], [ %400, %476 ]
  %481 = ptrtoint %"class.sh::TIntermNode"** %480 to i64
  %482 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %3, i64 -1
  %483 = ptrtoint %"class.sh::TIntermNode"** %482 to i64
  %484 = sub i64 %483, %481
  %485 = lshr i64 %484, 3
  %486 = add nuw nsw i64 %485, 1
  %487 = and i64 %486, 7
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %500, label %489

; <label>:489:                                    ; preds = %478, %489
  %490 = phi %"class.sh::TIntermNode"** [ %496, %489 ], [ %479, %478 ]
  %491 = phi %"class.sh::TIntermNode"** [ %497, %489 ], [ %480, %478 ]
  %492 = phi i64 [ %498, %489 ], [ %487, %478 ]
  %493 = bitcast %"class.sh::TIntermNode"** %490 to i64*
  %494 = bitcast %"class.sh::TIntermNode"** %491 to i64*
  %495 = load i64, i64* %494, align 8
  store i64 %495, i64* %493, align 8
  %496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %490, i64 1
  %497 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %491, i64 1
  %498 = add i64 %492, -1
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %489, !llvm.loop !22

; <label>:500:                                    ; preds = %489, %478
  %501 = phi %"class.sh::TIntermNode"** [ %479, %478 ], [ %496, %489 ]
  %502 = phi %"class.sh::TIntermNode"** [ %480, %478 ], [ %497, %489 ]
  %503 = icmp ult i64 %484, 56
  br i1 %503, label %548, label %504

; <label>:504:                                    ; preds = %500, %504
  %505 = phi %"class.sh::TIntermNode"** [ %545, %504 ], [ %501, %500 ]
  %506 = phi %"class.sh::TIntermNode"** [ %546, %504 ], [ %502, %500 ]
  %507 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  %508 = bitcast %"class.sh::TIntermNode"** %506 to i64*
  %509 = load i64, i64* %508, align 8
  store i64 %509, i64* %507, align 8
  %510 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 1
  %511 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 1
  %512 = bitcast %"class.sh::TIntermNode"** %510 to i64*
  %513 = bitcast %"class.sh::TIntermNode"** %511 to i64*
  %514 = load i64, i64* %513, align 8
  store i64 %514, i64* %512, align 8
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 2
  %516 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 2
  %517 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %518 = bitcast %"class.sh::TIntermNode"** %516 to i64*
  %519 = load i64, i64* %518, align 8
  store i64 %519, i64* %517, align 8
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 3
  %521 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 3
  %522 = bitcast %"class.sh::TIntermNode"** %520 to i64*
  %523 = bitcast %"class.sh::TIntermNode"** %521 to i64*
  %524 = load i64, i64* %523, align 8
  store i64 %524, i64* %522, align 8
  %525 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 4
  %526 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 4
  %527 = bitcast %"class.sh::TIntermNode"** %525 to i64*
  %528 = bitcast %"class.sh::TIntermNode"** %526 to i64*
  %529 = load i64, i64* %528, align 8
  store i64 %529, i64* %527, align 8
  %530 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 5
  %531 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 5
  %532 = bitcast %"class.sh::TIntermNode"** %530 to i64*
  %533 = bitcast %"class.sh::TIntermNode"** %531 to i64*
  %534 = load i64, i64* %533, align 8
  store i64 %534, i64* %532, align 8
  %535 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 6
  %536 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 6
  %537 = bitcast %"class.sh::TIntermNode"** %535 to i64*
  %538 = bitcast %"class.sh::TIntermNode"** %536 to i64*
  %539 = load i64, i64* %538, align 8
  store i64 %539, i64* %537, align 8
  %540 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 7
  %541 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 7
  %542 = bitcast %"class.sh::TIntermNode"** %540 to i64*
  %543 = bitcast %"class.sh::TIntermNode"** %541 to i64*
  %544 = load i64, i64* %543, align 8
  store i64 %544, i64* %542, align 8
  %545 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %505, i64 8
  %546 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %506, i64 8
  %547 = icmp eq %"class.sh::TIntermNode"** %546, %3
  br i1 %547, label %548, label %504, !llvm.loop !23

; <label>:548:                                    ; preds = %500, %504, %476
  %549 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 %377
  %550 = ptrtoint %"class.sh::TIntermNode"** %549 to i64
  br label %551

; <label>:551:                                    ; preds = %548, %362
  %552 = phi i64 [ %367, %362 ], [ %550, %548 ]
  %553 = inttoptr i64 %552 to %"class.sh::TIntermNode"**
  %554 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %555 = ptrtoint %"class.sh::TIntermNode"** %554 to i64
  %556 = icmp eq %"class.sh::TIntermNode"** %554, %1
  br i1 %556, label %686, label %557

; <label>:557:                                    ; preds = %551
  %558 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %559 = ptrtoint %"class.sh::TIntermNode"** %558 to i64
  %560 = sub i64 %559, %555
  %561 = lshr i64 %560, 3
  %562 = xor i64 %561, -1
  %563 = add nsw i64 %363, %562
  %564 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %565 = ptrtoint %"class.sh::TIntermNode"** %564 to i64
  %566 = sub i64 %565, %555
  %567 = lshr i64 %566, 3
  %568 = add nuw nsw i64 %567, 1
  %569 = icmp ult i64 %568, 4
  br i1 %569, label %614, label %570

; <label>:570:                                    ; preds = %557
  %571 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %572 = ptrtoint %"class.sh::TIntermNode"** %571 to i64
  %573 = sub i64 %572, %555
  %574 = lshr i64 %573, 3
  %575 = xor i64 %574, -1
  %576 = add nsw i64 %363, %575
  %577 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 %576
  %578 = xor i64 %574, -1
  %579 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %578
  %580 = icmp ult %"class.sh::TIntermNode"** %577, %1
  %581 = icmp ult %"class.sh::TIntermNode"** %579, %366
  %582 = and i1 %580, %581
  br i1 %582, label %614, label %583

; <label>:583:                                    ; preds = %570
  %584 = and i64 %568, 3
  %585 = sub nsw i64 %568, %584
  %586 = xor i64 %567, -1
  %587 = add nsw i64 %584, %586
  %588 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 %587
  %589 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %587
  %590 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %366, i64 -1
  %591 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %592

; <label>:592:                                    ; preds = %592, %583
  %593 = phi i64 [ 0, %583 ], [ %610, %592 ]
  %594 = sub i64 0, %593
  %595 = sub i64 0, %593
  %596 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %590, i64 %594
  %597 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %591, i64 %595
  %598 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %597, i64 -1
  %599 = bitcast %"class.sh::TIntermNode"** %598 to <2 x i64>*
  %600 = load <2 x i64>, <2 x i64>* %599, align 8, !alias.scope !24
  %601 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %597, i64 -2
  %602 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %601, i64 -1
  %603 = bitcast %"class.sh::TIntermNode"** %602 to <2 x i64>*
  %604 = load <2 x i64>, <2 x i64>* %603, align 8, !alias.scope !24
  %605 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %596, i64 -1
  %606 = bitcast %"class.sh::TIntermNode"** %605 to <2 x i64>*
  store <2 x i64> %600, <2 x i64>* %606, align 8, !alias.scope !27, !noalias !24
  %607 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %596, i64 -2
  %608 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %607, i64 -1
  %609 = bitcast %"class.sh::TIntermNode"** %608 to <2 x i64>*
  store <2 x i64> %604, <2 x i64>* %609, align 8, !alias.scope !27, !noalias !24
  %610 = add i64 %593, 4
  %611 = icmp eq i64 %610, %585
  br i1 %611, label %612, label %592, !llvm.loop !29

; <label>:612:                                    ; preds = %592
  %613 = icmp eq i64 %584, 0
  br i1 %613, label %683, label %614

; <label>:614:                                    ; preds = %612, %570, %557
  %615 = phi %"class.sh::TIntermNode"** [ %366, %570 ], [ %366, %557 ], [ %588, %612 ]
  %616 = phi %"class.sh::TIntermNode"** [ %1, %570 ], [ %1, %557 ], [ %589, %612 ]
  %617 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %616, i64 -1
  %618 = ptrtoint %"class.sh::TIntermNode"** %617 to i64
  %619 = sub i64 %618, %555
  %620 = lshr i64 %619, 3
  %621 = add nuw nsw i64 %620, 1
  %622 = and i64 %621, 7
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %635, label %624

; <label>:624:                                    ; preds = %614, %624
  %625 = phi %"class.sh::TIntermNode"** [ %628, %624 ], [ %615, %614 ]
  %626 = phi %"class.sh::TIntermNode"** [ %629, %624 ], [ %616, %614 ]
  %627 = phi i64 [ %633, %624 ], [ %622, %614 ]
  %628 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %625, i64 -1
  %629 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, i64 -1
  %630 = bitcast %"class.sh::TIntermNode"** %629 to i64*
  %631 = load i64, i64* %630, align 8
  %632 = bitcast %"class.sh::TIntermNode"** %628 to i64*
  store i64 %631, i64* %632, align 8
  %633 = add i64 %627, -1
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %635, label %624, !llvm.loop !30

; <label>:635:                                    ; preds = %624, %614
  %636 = phi %"class.sh::TIntermNode"** [ %615, %614 ], [ %628, %624 ]
  %637 = phi %"class.sh::TIntermNode"** [ %616, %614 ], [ %629, %624 ]
  %638 = icmp ult i64 %619, 56
  br i1 %638, label %683, label %639

; <label>:639:                                    ; preds = %635, %639
  %640 = phi %"class.sh::TIntermNode"** [ %677, %639 ], [ %636, %635 ]
  %641 = phi %"class.sh::TIntermNode"** [ %678, %639 ], [ %637, %635 ]
  %642 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %640, i64 -1
  %643 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -1
  %644 = bitcast %"class.sh::TIntermNode"** %643 to i64*
  %645 = load i64, i64* %644, align 8
  %646 = bitcast %"class.sh::TIntermNode"** %642 to i64*
  store i64 %645, i64* %646, align 8
  %647 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %640, i64 -2
  %648 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -2
  %649 = bitcast %"class.sh::TIntermNode"** %648 to i64*
  %650 = load i64, i64* %649, align 8
  %651 = bitcast %"class.sh::TIntermNode"** %647 to i64*
  store i64 %650, i64* %651, align 8
  %652 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %640, i64 -3
  %653 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -3
  %654 = bitcast %"class.sh::TIntermNode"** %653 to i64*
  %655 = load i64, i64* %654, align 8
  %656 = bitcast %"class.sh::TIntermNode"** %652 to i64*
  store i64 %655, i64* %656, align 8
  %657 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %640, i64 -4
  %658 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -4
  %659 = bitcast %"class.sh::TIntermNode"** %658 to i64*
  %660 = load i64, i64* %659, align 8
  %661 = bitcast %"class.sh::TIntermNode"** %657 to i64*
  store i64 %660, i64* %661, align 8
  %662 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %640, i64 -5
  %663 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -5
  %664 = bitcast %"class.sh::TIntermNode"** %663 to i64*
  %665 = load i64, i64* %664, align 8
  %666 = bitcast %"class.sh::TIntermNode"** %662 to i64*
  store i64 %665, i64* %666, align 8
  %667 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %640, i64 -6
  %668 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -6
  %669 = bitcast %"class.sh::TIntermNode"** %668 to i64*
  %670 = load i64, i64* %669, align 8
  %671 = bitcast %"class.sh::TIntermNode"** %667 to i64*
  store i64 %670, i64* %671, align 8
  %672 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %640, i64 -7
  %673 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -7
  %674 = bitcast %"class.sh::TIntermNode"** %673 to i64*
  %675 = load i64, i64* %674, align 8
  %676 = bitcast %"class.sh::TIntermNode"** %672 to i64*
  store i64 %675, i64* %676, align 8
  %677 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %640, i64 -8
  %678 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -8
  %679 = bitcast %"class.sh::TIntermNode"** %678 to i64*
  %680 = load i64, i64* %679, align 8
  %681 = bitcast %"class.sh::TIntermNode"** %677 to i64*
  store i64 %680, i64* %681, align 8
  %682 = icmp eq %"class.sh::TIntermNode"** %678, %554
  br i1 %682, label %683, label %639, !llvm.loop !31

; <label>:683:                                    ; preds = %635, %639, %612
  %684 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %365, i64 %563
  %685 = ptrtoint %"class.sh::TIntermNode"** %684 to i64
  br label %686

; <label>:686:                                    ; preds = %683, %551
  %687 = phi i64 [ %367, %551 ], [ %685, %683 ]
  %688 = phi %"class.sh::TIntermNode"** [ %366, %551 ], [ %684, %683 ]
  %689 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %690 = icmp eq %"class.sh::TIntermNode"** %689, %1
  br i1 %690, label %691, label %693

; <label>:691:                                    ; preds = %686
  %692 = ptrtoint %"class.sh::TIntermNode"** %688 to i64
  br label %774

; <label>:693:                                    ; preds = %686
  %694 = inttoptr i64 %552 to i64*
  %695 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 -1
  %696 = ptrtoint %"class.sh::TIntermNode"** %695 to i64
  %697 = sub i64 %696, %6
  %698 = lshr i64 %697, 3
  %699 = add nuw nsw i64 %698, 1
  %700 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 -1
  %701 = ptrtoint %"class.sh::TIntermNode"** %700 to i64
  %702 = sub i64 %701, %6
  %703 = lshr i64 %702, 3
  %704 = add nuw nsw i64 %703, 1
  %705 = and i64 %704, 7
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %721, label %707

; <label>:707:                                    ; preds = %693, %707
  %708 = phi %"class.sh::TIntermNode"** [ %715, %707 ], [ %553, %693 ]
  %709 = phi i64* [ %716, %707 ], [ %694, %693 ]
  %710 = phi %"class.sh::TIntermNode"** [ %714, %707 ], [ %1, %693 ]
  %711 = phi i64 [ %717, %707 ], [ %705, %693 ]
  %712 = bitcast %"class.sh::TIntermNode"** %710 to i64*
  %713 = load i64, i64* %712, align 8
  store i64 %713, i64* %709, align 8
  %714 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %710, i64 1
  %715 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %708, i64 1
  %716 = bitcast %"class.sh::TIntermNode"** %715 to i64*
  %717 = add i64 %711, -1
  %718 = icmp eq i64 %717, 0
  br i1 %718, label %719, label %707, !llvm.loop !32

; <label>:719:                                    ; preds = %707
  %720 = bitcast %"class.sh::TIntermNode"** %715 to i64*
  br label %721

; <label>:721:                                    ; preds = %693, %719
  %722 = phi %"class.sh::TIntermNode"** [ %553, %693 ], [ %715, %719 ]
  %723 = phi i64* [ %694, %693 ], [ %720, %719 ]
  %724 = phi %"class.sh::TIntermNode"** [ %1, %693 ], [ %714, %719 ]
  %725 = icmp ult i64 %702, 56
  br i1 %725, label %771, label %726

; <label>:726:                                    ; preds = %721, %726
  %727 = phi %"class.sh::TIntermNode"** [ %768, %726 ], [ %722, %721 ]
  %728 = phi i64* [ %770, %726 ], [ %723, %721 ]
  %729 = phi %"class.sh::TIntermNode"** [ %767, %726 ], [ %724, %721 ]
  %730 = bitcast %"class.sh::TIntermNode"** %729 to i64*
  %731 = load i64, i64* %730, align 8
  store i64 %731, i64* %728, align 8
  %732 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %729, i64 1
  %733 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 1
  %734 = bitcast %"class.sh::TIntermNode"** %733 to i64*
  %735 = bitcast %"class.sh::TIntermNode"** %732 to i64*
  %736 = load i64, i64* %735, align 8
  store i64 %736, i64* %734, align 8
  %737 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %729, i64 2
  %738 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 2
  %739 = bitcast %"class.sh::TIntermNode"** %738 to i64*
  %740 = bitcast %"class.sh::TIntermNode"** %737 to i64*
  %741 = load i64, i64* %740, align 8
  store i64 %741, i64* %739, align 8
  %742 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %729, i64 3
  %743 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 3
  %744 = bitcast %"class.sh::TIntermNode"** %743 to i64*
  %745 = bitcast %"class.sh::TIntermNode"** %742 to i64*
  %746 = load i64, i64* %745, align 8
  store i64 %746, i64* %744, align 8
  %747 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %729, i64 4
  %748 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 4
  %749 = bitcast %"class.sh::TIntermNode"** %748 to i64*
  %750 = bitcast %"class.sh::TIntermNode"** %747 to i64*
  %751 = load i64, i64* %750, align 8
  store i64 %751, i64* %749, align 8
  %752 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %729, i64 5
  %753 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 5
  %754 = bitcast %"class.sh::TIntermNode"** %753 to i64*
  %755 = bitcast %"class.sh::TIntermNode"** %752 to i64*
  %756 = load i64, i64* %755, align 8
  store i64 %756, i64* %754, align 8
  %757 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %729, i64 6
  %758 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 6
  %759 = bitcast %"class.sh::TIntermNode"** %758 to i64*
  %760 = bitcast %"class.sh::TIntermNode"** %757 to i64*
  %761 = load i64, i64* %760, align 8
  store i64 %761, i64* %759, align 8
  %762 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %729, i64 7
  %763 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 7
  %764 = bitcast %"class.sh::TIntermNode"** %763 to i64*
  %765 = bitcast %"class.sh::TIntermNode"** %762 to i64*
  %766 = load i64, i64* %765, align 8
  store i64 %766, i64* %764, align 8
  %767 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %729, i64 8
  %768 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %727, i64 8
  %769 = icmp eq %"class.sh::TIntermNode"** %767, %689
  %770 = bitcast %"class.sh::TIntermNode"** %768 to i64*
  br i1 %769, label %771, label %726

; <label>:771:                                    ; preds = %726, %721
  %772 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %553, i64 %699
  %773 = ptrtoint %"class.sh::TIntermNode"** %772 to i64
  br label %774

; <label>:774:                                    ; preds = %771, %691
  %775 = phi i64 [ %552, %691 ], [ %773, %771 ]
  %776 = phi i64 [ %692, %691 ], [ %687, %771 ]
  store i64 %776, i64* %333, align 8
  store i64 %775, i64* %23, align 8
  store i64 %369, i64* %15, align 8
  ret %"class.sh::TIntermNode"** %366

; <label>:777:                                    ; preds = %284, %288, %260, %85, %161, %4
  ret %"class.sh::TIntermNode"** %1
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh20TIntermAggregateBase16insertChildNodesEmRKNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregateBase"*, i64, %"class.sh::TVector.15"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermAggregateBase"* %0 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)***
  %5 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %5, i64 2
  %7 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %6, align 8
  %8 = tail call %"class.sh::TVector.15"* %7(%"class.sh::TIntermAggregateBase"* %0) #18
  %9 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %8, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.sh::TVector.15"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 3
  %16 = icmp ult i64 %15, %1
  br i1 %16, label %35, label %17

; <label>:17:                                     ; preds = %3
  %18 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %19 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %18, i64 2
  %20 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %19, align 8
  %21 = tail call %"class.sh::TVector.15"* %20(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %22 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %21, i64 0, i32 0, i32 0, i32 0
  %23 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %23, i64 %1
  %25 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*** %4, align 8
  %26 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %25, i64 2
  %27 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregateBase"*)** %26, align 8
  %28 = tail call %"class.sh::TVector.15"* %27(%"class.sh::TIntermAggregateBase"* nonnull %0) #18
  %29 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %28, i64 0, i32 0
  %30 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %2, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %2, i64 0, i32 0, i32 0, i32 1
  %33 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %32, align 8
  %34 = tail call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.16"* %29, %"class.sh::TIntermNode"** %24, %"class.sh::TIntermNode"** %31, %"class.sh::TIntermNode"** %33)
  br label %35

; <label>:35:                                     ; preds = %3, %17
  %36 = phi i1 [ true, %17 ], [ false, %3 ]
  ret i1 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermSymbolC2EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* nocapture, %"class.sh::TVariable"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = bitcast i32* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 16, i1 false) #18
  %5 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermSymbolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  store %"class.sh::TVariable"* %1, %"class.sh::TVariable"** %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh13TIntermSymbol16hasConstantValueEv(%"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %3, i64 0, i32 2
  %5 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %4, align 8
  %6 = icmp ne %"class.sh::TConstantUnion"* %5, null
  ret i1 %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZNK2sh13TIntermSymbol16getConstantValueEv(%"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %3, i64 0, i32 2
  %5 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %4, align 8
  ret %"class.sh::TConstantUnion"* %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden nonnull dereferenceable(4) %"class.sh::TSymbolUniqueId"* @_ZNK2sh13TIntermSymbol8uniqueIdEv(%"class.sh::TIntermSymbol"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = bitcast %"class.sh::TVariable"** %2 to %"class.sh::TSymbol"**
  %4 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %4, i64 0, i32 1
  ret %"class.sh::TSymbolUniqueId"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = bitcast %"class.sh::TVariable"** %2 to %"class.sh::TSymbol"**
  %4 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %3, align 8
  %5 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %4) #18
  ret { i8*, i64 } %5
}

declare { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(128) %"class.sh::TType"* @_ZNK2sh13TIntermSymbol7getTypeEv(%"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %3 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TVariable", %"class.sh::TVariable"* %3, i64 0, i32 1
  %5 = load %"class.sh::TType"*, %"class.sh::TType"** %4, align 8
  ret %"class.sh::TType"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate18CreateFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(88), %"class.sh::TVector.15"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %4 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %3, i64 208) #18
  %5 = bitcast i8* %4 to %"class.sh::TIntermAggregate"*
  %6 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %0, i64 0, i32 4
  %7 = load %"class.sh::TType"*, %"class.sh::TType"** %6, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 24
  %11 = bitcast i8* %10 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %11, %"class.sh::TType"* nonnull dereferenceable(128) %7) #18
  %12 = getelementptr inbounds i8, i8* %4, i64 152
  %13 = bitcast i8* %12 to i32*
  store i32 1, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %4, i64 160
  %15 = bitcast i8* %14 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %16 = getelementptr inbounds i8, i8* %4, i64 168
  %17 = getelementptr inbounds i8, i8* %4, i64 200
  %18 = bitcast i8* %17 to %"class.sh::TFunction"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 26, i1 false) #18
  store %"class.sh::TFunction"* %0, %"class.sh::TFunction"** %18, align 8
  %19 = icmp eq %"class.sh::TVector.15"* %1, null
  br i1 %19, label %36, label %20

; <label>:20:                                     ; preds = %2
  %21 = bitcast i8* %16 to i64*
  %22 = bitcast %"class.sh::TVector.15"* %1 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %21, align 8
  store i64 0, i64* %22, align 8
  %24 = getelementptr inbounds i8, i8* %4, i64 176
  %25 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %1, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i8* %24 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.sh::TIntermNode"*** %25 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %26, align 8
  store i64 %27, i64* %28, align 8
  %30 = getelementptr inbounds i8, i8* %4, i64 184
  %31 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %32 = bitcast i8* %30 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.sh::TIntermNode"*** %31 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %32, align 8
  store i64 %33, i64* %34, align 8
  br label %36

; <label>:36:                                     ; preds = %2, %20
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* nonnull %5) #18
  ret %"class.sh::TIntermAggregate"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate21CreateRawFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(88), %"class.sh::TVector.15"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %4 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %3, i64 208) #18
  %5 = bitcast i8* %4 to %"class.sh::TIntermAggregate"*
  %6 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %0, i64 0, i32 4
  %7 = load %"class.sh::TType"*, %"class.sh::TType"** %6, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 24
  %11 = bitcast i8* %10 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %11, %"class.sh::TType"* nonnull dereferenceable(128) %7) #18
  %12 = getelementptr inbounds i8, i8* %4, i64 152
  %13 = bitcast i8* %12 to i32*
  store i32 2, i32* %13, align 8
  %14 = getelementptr inbounds i8, i8* %4, i64 160
  %15 = bitcast i8* %14 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %16 = getelementptr inbounds i8, i8* %4, i64 168
  %17 = getelementptr inbounds i8, i8* %4, i64 200
  %18 = bitcast i8* %17 to %"class.sh::TFunction"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 26, i1 false) #18
  store %"class.sh::TFunction"* %0, %"class.sh::TFunction"** %18, align 8
  %19 = icmp eq %"class.sh::TVector.15"* %1, null
  br i1 %19, label %36, label %20

; <label>:20:                                     ; preds = %2
  %21 = bitcast i8* %16 to i64*
  %22 = bitcast %"class.sh::TVector.15"* %1 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %21, align 8
  store i64 0, i64* %22, align 8
  %24 = getelementptr inbounds i8, i8* %4, i64 176
  %25 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %1, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i8* %24 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.sh::TIntermNode"*** %25 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %26, align 8
  store i64 %27, i64* %28, align 8
  %30 = getelementptr inbounds i8, i8* %4, i64 184
  %31 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %32 = bitcast i8* %30 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.sh::TIntermNode"*** %31 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %32, align 8
  store i64 %33, i64* %34, align 8
  br label %36

; <label>:36:                                     ; preds = %2, %20
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* nonnull %5) #18
  ret %"class.sh::TIntermAggregate"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate25CreateBuiltInFunctionCallERKNS_9TFunctionEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TFunction"* dereferenceable(88), %"class.sh::TVector.15"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %4 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %3, i64 208) #18
  %5 = bitcast i8* %4 to %"class.sh::TIntermAggregate"*
  %6 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %0, i64 0, i32 4
  %7 = load %"class.sh::TType"*, %"class.sh::TType"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %0, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 16, i1 false) #18
  %11 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds i8, i8* %4, i64 24
  %13 = bitcast i8* %12 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %13, %"class.sh::TType"* nonnull dereferenceable(128) %7) #18
  %14 = getelementptr inbounds i8, i8* %4, i64 152
  %15 = bitcast i8* %14 to i32*
  store i32 %9, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %4, i64 160
  %17 = bitcast i8* %16 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = getelementptr inbounds i8, i8* %4, i64 168
  %19 = getelementptr inbounds i8, i8* %4, i64 200
  %20 = bitcast i8* %19 to %"class.sh::TFunction"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 26, i1 false) #18
  store %"class.sh::TFunction"* %0, %"class.sh::TFunction"** %20, align 8
  %21 = icmp eq %"class.sh::TVector.15"* %1, null
  br i1 %21, label %38, label %22

; <label>:22:                                     ; preds = %2
  %23 = bitcast i8* %18 to i64*
  %24 = bitcast %"class.sh::TVector.15"* %1 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %23, align 8
  store i64 0, i64* %24, align 8
  %26 = getelementptr inbounds i8, i8* %4, i64 176
  %27 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %1, i64 0, i32 0, i32 0, i32 1
  %28 = bitcast i8* %26 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.sh::TIntermNode"*** %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %28, align 8
  store i64 %29, i64* %30, align 8
  %32 = getelementptr inbounds i8, i8* %4, i64 184
  %33 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast i8* %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %34, align 8
  store i64 %35, i64* %36, align 8
  br label %38

; <label>:38:                                     ; preds = %2, %22
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* nonnull %5) #18
  ret %"class.sh::TIntermAggregate"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate17CreateConstructorERKNS_5TTypeEPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TType"* dereferenceable(128), %"class.sh::TVector.15"*) local_unnamed_addr #0 align 2 {
  %3 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %4 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %3, i64 208) #18
  %5 = bitcast i8* %4 to %"class.sh::TIntermAggregate"*
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #18
  %7 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 24
  %9 = bitcast i8* %8 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %9, %"class.sh::TType"* nonnull dereferenceable(128) %0) #18
  %10 = getelementptr inbounds i8, i8* %4, i64 152
  %11 = bitcast i8* %10 to i32*
  store i32 136, i32* %11, align 8
  %12 = getelementptr inbounds i8, i8* %4, i64 160
  %13 = bitcast i8* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds i8, i8* %4, i64 168
  %15 = getelementptr inbounds i8, i8* %4, i64 200
  %16 = bitcast i8* %15 to %"class.sh::TFunction"**
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 26, i1 false) #18
  store %"class.sh::TFunction"* null, %"class.sh::TFunction"** %16, align 8
  %17 = icmp eq %"class.sh::TVector.15"* %1, null
  br i1 %17, label %34, label %18

; <label>:18:                                     ; preds = %2
  %19 = bitcast i8* %14 to i64*
  %20 = bitcast %"class.sh::TVector.15"* %1 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %19, align 8
  store i64 0, i64* %20, align 8
  %22 = getelementptr inbounds i8, i8* %4, i64 176
  %23 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %1, i64 0, i32 0, i32 0, i32 1
  %24 = bitcast i8* %22 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.sh::TIntermNode"*** %23 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %24, align 8
  store i64 %25, i64* %26, align 8
  %28 = getelementptr inbounds i8, i8* %4, i64 184
  %29 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %30 = bitcast i8* %28 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.sh::TIntermNode"*** %29 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %30, align 8
  store i64 %31, i64* %32, align 8
  br label %34

; <label>:34:                                     ; preds = %2, %18
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* nonnull %5) #18
  ret %"class.sh::TIntermAggregate"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregateC2EPKNS_9TFunctionERKNS_5TTypeE9TOperatorPNS_7TVectorIPNS_11TIntermNodeEEE(%"class.sh::TIntermAggregate"*, %"class.sh::TFunction"*, %"class.sh::TType"* dereferenceable(128), i32, %"class.sh::TVector.15"*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false) #18
  %8 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %9, %"class.sh::TType"* nonnull dereferenceable(128) %2) #18
  %10 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  store i32 %3, i32* %10, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2
  %13 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %14 = bitcast %"class.sh::TVector.15"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 26, i1 false)
  store %"class.sh::TFunction"* %1, %"class.sh::TFunction"** %13, align 8
  %15 = icmp eq %"class.sh::TVector.15"* %4, null
  br i1 %15, label %32, label %16

; <label>:16:                                     ; preds = %5
  %17 = bitcast %"class.sh::TVector.15"* %12 to i64*
  %18 = bitcast %"class.sh::TVector.15"* %4 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %17, align 8
  store i64 0, i64* %18, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %4, i64 0, i32 0, i32 0, i32 1
  %22 = bitcast %"class.sh::TIntermNode"*** %20 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.sh::TIntermNode"*** %21 to i64*
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %22, align 8
  store i64 %23, i64* %24, align 8
  %26 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %27 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast %"class.sh::TIntermNode"*** %26 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.sh::TIntermNode"*** %27 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %28, align 8
  store i64 %29, i64* %30, align 8
  br label %32

; <label>:32:                                     ; preds = %5, %16
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* nonnull %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 3
  br i1 %5, label %6, label %55

; <label>:6:                                      ; preds = %1
  %7 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp eq %"class.sh::TIntermNode"** %8, %10
  br i1 %11, label %42, label %12

; <label>:12:                                     ; preds = %6, %39
  %13 = phi %"class.sh::TIntermNode"** [ %40, %39 ], [ %8, %6 ]
  %14 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, align 8
  %15 = bitcast %"class.sh::TIntermNode"* %14 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %16 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %16, i64 4
  %18 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %17, align 8
  %19 = tail call %"class.sh::TIntermTyped"* %18(%"class.sh::TIntermNode"* %14) #18
  %20 = icmp eq %"class.sh::TIntermTyped"* %19, null
  br i1 %20, label %39, label %21

; <label>:21:                                     ; preds = %12
  %22 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %23 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %23, i64 31
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %24, align 8
  %26 = tail call dereferenceable(128) %"class.sh::TType"* %25(%"class.sh::TIntermTyped"* nonnull %19) #18
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = add i32 %28, -7
  %30 = icmp ult i32 %29, 24
  br i1 %30, label %31, label %39

; <label>:31:                                     ; preds = %21
  %32 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %33 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, i64 31
  %35 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %34, align 8
  %36 = tail call dereferenceable(128) %"class.sh::TType"* %35(%"class.sh::TIntermTyped"* nonnull %19) #18
  %37 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %36, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  br label %42

; <label>:39:                                     ; preds = %21, %12
  %40 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %13, i64 1
  %41 = icmp eq %"class.sh::TIntermNode"** %40, %10
  br i1 %41, label %42, label %12

; <label>:42:                                     ; preds = %39, %6, %31
  %43 = phi i32 [ %38, %31 ], [ 0, %6 ], [ 0, %39 ]
  %44 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %45 = bitcast %"class.sh::TFunction"** %44 to %"class.sh::TSymbol"**
  %46 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %45, align 8
  %47 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %46) #18
  %48 = extractvalue { i8*, i64 } %47, 0
  %49 = icmp eq i8* %48, null
  %50 = select i1 %49, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %48
  %51 = tail call i32 @strcmp(i8* %50, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #19
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %54 = select i1 %52, i32 3, i32 %43
  store i32 %54, i32* %53, align 4
  br label %192

; <label>:55:                                     ; preds = %1
  %56 = add i32 %4, -1
  %57 = icmp ult i32 %56, 3
  br i1 %57, label %192, label %58

; <label>:58:                                     ; preds = %55
  %59 = icmp eq i32 %4, 136
  br i1 %59, label %60, label %115

; <label>:60:                                     ; preds = %58
  %61 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %63 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %62, align 8
  %64 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %63, i64 31
  %65 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %64, align 8
  %66 = tail call dereferenceable(128) %"class.sh::TType"* %65(%"class.sh::TIntermTyped"* %61) #18
  %67 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %66, i64 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 43
  br i1 %69, label %164, label %70

; <label>:70:                                     ; preds = %60
  %71 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %71, align 1
  %72 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %62, align 8
  %73 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %72, i64 31
  %74 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %73, align 8
  %75 = tail call dereferenceable(128) %"class.sh::TType"* %74(%"class.sh::TIntermTyped"* %61) #18
  %76 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %75, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 4
  br i1 %78, label %79, label %81

; <label>:79:                                     ; preds = %70
  %80 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 0, i32* %80, align 4
  br label %164

; <label>:81:                                     ; preds = %70
  %82 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %83 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %82, align 8
  %84 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %85 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %84, align 8
  %86 = icmp eq %"class.sh::TIntermNode"** %83, %85
  br i1 %86, label %112, label %87

; <label>:87:                                     ; preds = %81, %107
  %88 = phi i32 [ %108, %107 ], [ 0, %81 ]
  %89 = phi %"class.sh::TIntermNode"** [ %109, %107 ], [ %83, %81 ]
  %90 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, align 8
  %91 = bitcast %"class.sh::TIntermNode"* %90 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %92 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %91, align 8
  %93 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %92, i64 4
  %94 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %93, align 8
  %95 = tail call %"class.sh::TIntermTyped"* %94(%"class.sh::TIntermNode"* %90) #18
  %96 = icmp eq %"class.sh::TIntermTyped"* %95, null
  br i1 %96, label %107, label %97

; <label>:97:                                     ; preds = %87
  %98 = bitcast %"class.sh::TIntermTyped"* %95 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %99 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %98, align 8
  %100 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %99, i64 31
  %101 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %100, align 8
  %102 = tail call dereferenceable(128) %"class.sh::TType"* %101(%"class.sh::TIntermTyped"* nonnull %95) #18
  %103 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %102, i64 0, i32 1
  %104 = load i32, i32* %103, align 4
  %105 = icmp sgt i32 %104, %88
  %106 = select i1 %105, i32 %104, i32 %88
  br label %107

; <label>:107:                                    ; preds = %97, %87
  %108 = phi i32 [ %106, %97 ], [ %88, %87 ]
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %89, i64 1
  %110 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %84, align 8
  %111 = icmp eq %"class.sh::TIntermNode"** %109, %110
  br i1 %111, label %112, label %87

; <label>:112:                                    ; preds = %107, %81
  %113 = phi i32 [ 0, %81 ], [ %108, %107 ]
  %114 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %113, i32* %114, align 4
  br label %164

; <label>:115:                                    ; preds = %58
  %116 = tail call zeroext i1 @_ZN2sh16TIntermAggregate31setPrecisionForSpecialBuiltInOpEv(%"class.sh::TIntermAggregate"* nonnull %0) #18
  br i1 %116, label %164, label %117

; <label>:117:                                    ; preds = %115
  %118 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %118, align 1
  %119 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %120 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %121 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %120, align 8
  %122 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %121, i64 31
  %123 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %122, align 8
  %124 = tail call dereferenceable(128) %"class.sh::TType"* %123(%"class.sh::TIntermTyped"* %119) #18
  %125 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %124, i64 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 4
  br i1 %127, label %128, label %130

; <label>:128:                                    ; preds = %117
  %129 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 0, i32* %129, align 4
  br label %164

; <label>:130:                                    ; preds = %117
  %131 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %132 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %131, align 8
  %133 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %134 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %133, align 8
  %135 = icmp eq %"class.sh::TIntermNode"** %132, %134
  br i1 %135, label %161, label %136

; <label>:136:                                    ; preds = %130, %156
  %137 = phi i32 [ %157, %156 ], [ 0, %130 ]
  %138 = phi %"class.sh::TIntermNode"** [ %158, %156 ], [ %132, %130 ]
  %139 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, align 8
  %140 = bitcast %"class.sh::TIntermNode"* %139 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %141 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %140, align 8
  %142 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %141, i64 4
  %143 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %142, align 8
  %144 = tail call %"class.sh::TIntermTyped"* %143(%"class.sh::TIntermNode"* %139) #18
  %145 = icmp eq %"class.sh::TIntermTyped"* %144, null
  br i1 %145, label %156, label %146

; <label>:146:                                    ; preds = %136
  %147 = bitcast %"class.sh::TIntermTyped"* %144 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %148 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %147, align 8
  %149 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %148, i64 31
  %150 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %149, align 8
  %151 = tail call dereferenceable(128) %"class.sh::TType"* %150(%"class.sh::TIntermTyped"* nonnull %144) #18
  %152 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %151, i64 0, i32 1
  %153 = load i32, i32* %152, align 4
  %154 = icmp sgt i32 %153, %137
  %155 = select i1 %154, i32 %153, i32 %137
  br label %156

; <label>:156:                                    ; preds = %146, %136
  %157 = phi i32 [ %155, %146 ], [ %137, %136 ]
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 1
  %159 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %133, align 8
  %160 = icmp eq %"class.sh::TIntermNode"** %158, %159
  br i1 %160, label %161, label %136

; <label>:161:                                    ; preds = %156, %130
  %162 = phi i32 [ 0, %130 ], [ %157, %156 ]
  %163 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %162, i32* %163, align 4
  br label %164

; <label>:164:                                    ; preds = %161, %128, %115, %112, %79, %60
  %165 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %166 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %165, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %168 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %167, align 8
  %169 = icmp eq %"class.sh::TIntermNode"** %166, %168
  br i1 %169, label %191, label %170

; <label>:170:                                    ; preds = %164, %188
  %171 = phi %"class.sh::TIntermNode"** [ %189, %188 ], [ %166, %164 ]
  %172 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, align 8
  %173 = bitcast %"class.sh::TIntermNode"* %172 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %174 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %173, align 8
  %175 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %174, i64 4
  %176 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %175, align 8
  %177 = tail call %"class.sh::TIntermTyped"* %176(%"class.sh::TIntermNode"* %172) #18
  %178 = icmp eq %"class.sh::TIntermTyped"* %177, null
  br i1 %178, label %188, label %179

; <label>:179:                                    ; preds = %170
  %180 = bitcast %"class.sh::TIntermTyped"* %177 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %181 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %180, align 8
  %182 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %181, i64 31
  %183 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %182, align 8
  %184 = tail call dereferenceable(128) %"class.sh::TType"* %183(%"class.sh::TIntermTyped"* nonnull %177) #18
  %185 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %184, i64 0, i32 2
  %186 = load i32, i32* %185, align 8
  %187 = icmp eq i32 %186, 2
  br i1 %187, label %188, label %192

; <label>:188:                                    ; preds = %179, %170
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %171, i64 1
  %190 = icmp eq %"class.sh::TIntermNode"** %189, %168
  br i1 %190, label %191, label %170

; <label>:191:                                    ; preds = %188, %164
  store i32 2, i32* %2, align 8
  br label %192

; <label>:192:                                    ; preds = %179, %55, %191, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregate27setBuiltInFunctionPrecisionEv(%"class.sh::TIntermAggregate"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %5 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"** %3, %5
  br i1 %6, label %37, label %7

; <label>:7:                                      ; preds = %1, %34
  %8 = phi %"class.sh::TIntermNode"** [ %35, %34 ], [ %3, %1 ]
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  %10 = bitcast %"class.sh::TIntermNode"* %9 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %11 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %10, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %11, i64 4
  %13 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %12, align 8
  %14 = tail call %"class.sh::TIntermTyped"* %13(%"class.sh::TIntermNode"* %9) #18
  %15 = icmp eq %"class.sh::TIntermTyped"* %14, null
  br i1 %15, label %34, label %16

; <label>:16:                                     ; preds = %7
  %17 = bitcast %"class.sh::TIntermTyped"* %14 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %18 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, i64 31
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %19, align 8
  %21 = tail call dereferenceable(128) %"class.sh::TType"* %20(%"class.sh::TIntermTyped"* nonnull %14) #18
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, -7
  %25 = icmp ult i32 %24, 24
  br i1 %25, label %26, label %34

; <label>:26:                                     ; preds = %16
  %27 = bitcast %"class.sh::TIntermTyped"* %14 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %28, i64 31
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, align 8
  %31 = tail call dereferenceable(128) %"class.sh::TType"* %30(%"class.sh::TIntermTyped"* nonnull %14) #18
  %32 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %31, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  br label %37

; <label>:34:                                     ; preds = %7, %16
  %35 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 1
  %36 = icmp eq %"class.sh::TIntermNode"** %35, %5
  br i1 %36, label %37, label %7

; <label>:37:                                     ; preds = %34, %1, %26
  %38 = phi i32 [ %33, %26 ], [ 0, %1 ], [ 0, %34 ]
  %39 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %40 = bitcast %"class.sh::TFunction"** %39 to %"class.sh::TSymbol"**
  %41 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %40, align 8
  %42 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %41) #18
  %43 = extractvalue { i8*, i64 } %42, 0
  %44 = icmp eq i8* %43, null
  %45 = select i1 %44, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %43
  %46 = tail call i32 @strcmp(i8* %45, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0)) #19
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %49 = select i1 %47, i32 3, i32 %38
  store i32 %49, i32* %48, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh15TIntermOperator14isFunctionCallEv(%"class.sh::TIntermOperator"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -1
  %5 = icmp ult i32 %4, 3
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh15TIntermOperator13isConstructorEv(%"class.sh::TIntermOperator"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 136
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregate24setPrecisionFromChildrenEv(%"class.sh::TIntermAggregate"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %2, align 1
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(128) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %3) #18
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 4
  br i1 %11, label %43, label %12

; <label>:12:                                     ; preds = %1
  %13 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %14 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %16 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %17 = icmp eq %"class.sh::TIntermNode"** %14, %16
  br i1 %17, label %43, label %18

; <label>:18:                                     ; preds = %12, %38
  %19 = phi i32 [ %39, %38 ], [ 0, %12 ]
  %20 = phi %"class.sh::TIntermNode"** [ %40, %38 ], [ %14, %12 ]
  %21 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %20, align 8
  %22 = bitcast %"class.sh::TIntermNode"* %21 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %23 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %23, i64 4
  %25 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %24, align 8
  %26 = tail call %"class.sh::TIntermTyped"* %25(%"class.sh::TIntermNode"* %21) #18
  %27 = icmp eq %"class.sh::TIntermTyped"* %26, null
  br i1 %27, label %38, label %28

; <label>:28:                                     ; preds = %18
  %29 = bitcast %"class.sh::TIntermTyped"* %26 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, i64 31
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %31, align 8
  %33 = tail call dereferenceable(128) %"class.sh::TType"* %32(%"class.sh::TIntermTyped"* nonnull %26) #18
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %33, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %35, %19
  %37 = select i1 %36, i32 %35, i32 %19
  br label %38

; <label>:38:                                     ; preds = %18, %28
  %39 = phi i32 [ %37, %28 ], [ %19, %18 ]
  %40 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %20, i64 1
  %41 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %42 = icmp eq %"class.sh::TIntermNode"** %40, %41
  br i1 %42, label %43, label %18

; <label>:43:                                     ; preds = %38, %12, %1
  %44 = phi i32 [ 0, %1 ], [ 0, %12 ], [ %39, %38 ]
  %45 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %44, i32* %45, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregate24setPrecisionForBuiltInOpEv(%"class.sh::TIntermAggregate"*) local_unnamed_addr #0 align 2 {
  %2 = tail call zeroext i1 @_ZN2sh16TIntermAggregate31setPrecisionForSpecialBuiltInOpEv(%"class.sh::TIntermAggregate"* %0)
  br i1 %2, label %48, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %4, align 1
  %5 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, i64 31
  %9 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %8, align 8
  %10 = tail call dereferenceable(128) %"class.sh::TType"* %9(%"class.sh::TIntermTyped"* %5) #18
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 4
  br i1 %13, label %45, label %14

; <label>:14:                                     ; preds = %3
  %15 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = icmp eq %"class.sh::TIntermNode"** %16, %18
  br i1 %19, label %45, label %20

; <label>:20:                                     ; preds = %14, %40
  %21 = phi i32 [ %41, %40 ], [ 0, %14 ]
  %22 = phi %"class.sh::TIntermNode"** [ %42, %40 ], [ %16, %14 ]
  %23 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %22, align 8
  %24 = bitcast %"class.sh::TIntermNode"* %23 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %25 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %25, i64 4
  %27 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %26, align 8
  %28 = tail call %"class.sh::TIntermTyped"* %27(%"class.sh::TIntermNode"* %23) #18
  %29 = icmp eq %"class.sh::TIntermTyped"* %28, null
  br i1 %29, label %40, label %30

; <label>:30:                                     ; preds = %20
  %31 = bitcast %"class.sh::TIntermTyped"* %28 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %32, i64 31
  %34 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, align 8
  %35 = tail call dereferenceable(128) %"class.sh::TType"* %34(%"class.sh::TIntermTyped"* nonnull %28) #18
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %35, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %37, %21
  %39 = select i1 %38, i32 %37, i32 %21
  br label %40

; <label>:40:                                     ; preds = %30, %20
  %41 = phi i32 [ %39, %30 ], [ %21, %20 ]
  %42 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %22, i64 1
  %43 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %44 = icmp eq %"class.sh::TIntermNode"** %42, %43
  br i1 %44, label %45, label %20

; <label>:45:                                     ; preds = %40, %14, %3
  %46 = phi i32 [ 0, %3 ], [ 0, %14 ], [ %41, %40 ]
  %47 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %46, i32* %47, align 4
  br label %48

; <label>:48:                                     ; preds = %45, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TIntermAggregate25areChildrenConstQualifiedEv(%"class.sh::TIntermAggregate"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %5 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"** %3, %5
  br i1 %6, label %28, label %7

; <label>:7:                                      ; preds = %1, %25
  %8 = phi %"class.sh::TIntermNode"** [ %26, %25 ], [ %3, %1 ]
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  %10 = bitcast %"class.sh::TIntermNode"* %9 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %11 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %10, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %11, i64 4
  %13 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %12, align 8
  %14 = tail call %"class.sh::TIntermTyped"* %13(%"class.sh::TIntermNode"* %9) #18
  %15 = icmp eq %"class.sh::TIntermTyped"* %14, null
  br i1 %15, label %25, label %16

; <label>:16:                                     ; preds = %7
  %17 = bitcast %"class.sh::TIntermTyped"* %14 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %18 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, i64 31
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %19, align 8
  %21 = tail call dereferenceable(128) %"class.sh::TType"* %20(%"class.sh::TIntermTyped"* nonnull %14) #18
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %21, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %28

; <label>:25:                                     ; preds = %7, %16
  %26 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 1
  %27 = icmp eq %"class.sh::TIntermNode"** %26, %5
  br i1 %27, label %28, label %7

; <label>:28:                                     ; preds = %16, %25, %1
  %29 = phi i1 [ true, %1 ], [ true, %25 ], [ false, %16 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh16TIntermAggregate31setPrecisionForSpecialBuiltInOpEv(%"class.sh::TIntermAggregate"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %59 [
    i32 122, label %4
    i32 123, label %22
    i32 128, label %57
    i32 129, label %57
  ]

; <label>:4:                                      ; preds = %1
  %5 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %6 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %5, align 8
  %7 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %6, align 8
  %8 = bitcast %"class.sh::TIntermNode"* %7 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %9 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %9, i64 4
  %11 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %10, align 8
  %12 = tail call %"class.sh::TIntermTyped"* %11(%"class.sh::TIntermNode"* %7) #18
  %13 = bitcast %"class.sh::TIntermTyped"* %12 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %14 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %14, i64 31
  %16 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %15, align 8
  %17 = tail call dereferenceable(128) %"class.sh::TType"* %16(%"class.sh::TIntermTyped"* %12) #18
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %17, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %19, i32* %20, align 4
  %21 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %21, align 1
  br label %59

; <label>:22:                                     ; preds = %1
  %23 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %24 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %25 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %24, align 8
  %26 = bitcast %"class.sh::TIntermNode"* %25 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %27 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %26, align 8
  %28 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %27, i64 4
  %29 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %28, align 8
  %30 = tail call %"class.sh::TIntermTyped"* %29(%"class.sh::TIntermNode"* %25) #18
  %31 = bitcast %"class.sh::TIntermTyped"* %30 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %32, i64 31
  %34 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, align 8
  %35 = tail call dereferenceable(128) %"class.sh::TType"* %34(%"class.sh::TIntermTyped"* %30) #18
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %35, i64 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %39 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 1
  %40 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %39, align 8
  %41 = bitcast %"class.sh::TIntermNode"* %40 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %42 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %41, align 8
  %43 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %42, i64 4
  %44 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %43, align 8
  %45 = tail call %"class.sh::TIntermTyped"* %44(%"class.sh::TIntermNode"* %40) #18
  %46 = bitcast %"class.sh::TIntermTyped"* %45 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %47 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %47, i64 31
  %49 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %48, align 8
  %50 = tail call dereferenceable(128) %"class.sh::TType"* %49(%"class.sh::TIntermTyped"* %45) #18
  %51 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %50, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp sgt i32 %37, %52
  %54 = select i1 %53, i32 %37, i32 %52
  %55 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  store i8 1, i8* %56, align 1
  br label %59

; <label>:57:                                     ; preds = %1, %1
  %58 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 3, i32* %58, align 4
  br label %59

; <label>:59:                                     ; preds = %1, %57, %22, %4
  %60 = phi i1 [ true, %57 ], [ true, %22 ], [ true, %4 ], [ false, %1 ]
  ret i1 %60
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK2sh16TIntermAggregate12functionNameEv(%"class.sh::TIntermAggregate"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -1
  %5 = icmp ult i32 %4, 3
  br i1 %5, label %6, label %14

; <label>:6:                                      ; preds = %1
  %7 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %8 = bitcast %"class.sh::TFunction"** %7 to %"class.sh::TSymbol"**
  %9 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %8, align 8
  %10 = tail call { i8*, i64 } @_ZNK2sh7TSymbol4nameEv(%"class.sh::TSymbol"* %9) #18
  %11 = extractvalue { i8*, i64 } %10, 0
  %12 = icmp eq i8* %11, null
  %13 = select i1 %12, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %11
  br label %16

; <label>:14:                                     ; preds = %1
  %15 = tail call i8* @_Z17GetOperatorString9TOperator(i32 %3) #18
  br label %16

; <label>:16:                                     ; preds = %14, %6
  %17 = phi i8* [ %13, %6 ], [ %15, %14 ]
  ret i8* %17
}

declare i8* @_Z17GetOperatorString9TOperator(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh16TIntermAggregate16hasConstantValueEv(%"class.sh::TIntermAggregate"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 136
  br i1 %4, label %5, label %27

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %10 = icmp eq %"class.sh::TIntermNode"** %7, %9
  br i1 %10, label %27, label %13

; <label>:11:                                     ; preds = %13
  %12 = icmp eq %"class.sh::TIntermNode"** %26, %9
  br i1 %12, label %27, label %13

; <label>:13:                                     ; preds = %5, %11
  %14 = phi %"class.sh::TIntermNode"** [ %26, %11 ], [ %7, %5 ]
  %15 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, align 8
  %16 = bitcast %"class.sh::TIntermNode"* %15 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %17, i64 4
  %19 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %18, align 8
  %20 = tail call %"class.sh::TIntermTyped"* %19(%"class.sh::TIntermNode"* %15) #18
  %21 = bitcast %"class.sh::TIntermTyped"* %20 to i1 (%"class.sh::TIntermTyped"*)***
  %22 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %22, i64 28
  %24 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.sh::TIntermTyped"* %20) #18
  %26 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, i64 1
  br i1 %25, label %11, label %27

; <label>:27:                                     ; preds = %13, %11, %5, %1
  %28 = phi i1 [ false, %1 ], [ true, %5 ], [ false, %13 ], [ true, %11 ]
  ret i1 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZNK2sh16TIntermAggregate16getConstantValueEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.sh::TIntermAggregate"* %0 to i1 (%"class.sh::TIntermAggregate"*)***
  %3 = load i1 (%"class.sh::TIntermAggregate"*)**, i1 (%"class.sh::TIntermAggregate"*)*** %2, align 8
  %4 = getelementptr inbounds i1 (%"class.sh::TIntermAggregate"*)*, i1 (%"class.sh::TIntermAggregate"*)** %3, i64 28
  %5 = load i1 (%"class.sh::TIntermAggregate"*)*, i1 (%"class.sh::TIntermAggregate"*)** %4, align 8
  %6 = tail call zeroext i1 %5(%"class.sh::TIntermAggregate"* %0) #18
  br i1 %6, label %7, label %341

; <label>:7:                                      ; preds = %1
  %8 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %10 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %10, i64 31
  %12 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %11, align 8
  %13 = tail call dereferenceable(128) %"class.sh::TType"* %12(%"class.sh::TIntermTyped"* %8) #18
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %13, i64 0, i32 8
  %15 = load %"class.sh::TVector"*, %"class.sh::TVector"** %14, align 8
  %16 = icmp eq %"class.sh::TVector"* %15, null
  br i1 %16, label %92, label %17

; <label>:17:                                     ; preds = %7
  %18 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %15, i64 0, i32 0, i32 0, i32 0
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %15, i64 0, i32 0, i32 0, i32 1
  %21 = load i32*, i32** %20, align 8
  %22 = icmp eq i32* %19, %21
  br i1 %22, label %92, label %23

; <label>:23:                                     ; preds = %17
  %24 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %25 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %24, align 8
  %26 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %25, align 8
  %27 = bitcast %"class.sh::TIntermNode"* %26 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %28 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %28, i64 4
  %30 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %29, align 8
  %31 = tail call %"class.sh::TIntermTyped"* %30(%"class.sh::TIntermNode"* %26) #18
  %32 = bitcast %"class.sh::TIntermTyped"* %31 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %33 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, i64 31
  %35 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %34, align 8
  %36 = tail call dereferenceable(128) %"class.sh::TType"* %35(%"class.sh::TIntermTyped"* %31) #18
  %37 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %36) #18
  %38 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %39 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %38, i64 31
  %40 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %39, align 8
  %41 = tail call dereferenceable(128) %"class.sh::TType"* %40(%"class.sh::TIntermTyped"* %8) #18
  %42 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %41, i64 0, i32 8
  %43 = bitcast %"class.sh::TVector"** %42 to %"class.std::__1::vector"**
  %44 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %43, align 8
  %45 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %44, i64 0, i32 0, i32 1
  %46 = load i32*, i32** %45, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 -1
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = mul i64 %37, %49
  %51 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %50, i64 8)
  %52 = extractvalue { i64, i1 } %51, 1
  %53 = extractvalue { i64, i1 } %51, 0
  %54 = select i1 %52, i64 -1, i64 %53
  %55 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %56 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %55, i64 %54) #18
  %57 = bitcast i8* %56 to %"class.sh::TConstantUnion"*
  %58 = icmp eq i64 %50, 0
  br i1 %58, label %65, label %59

; <label>:59:                                     ; preds = %23
  %60 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %57, i64 %50
  br label %61

; <label>:61:                                     ; preds = %61, %59
  %62 = phi %"class.sh::TConstantUnion"* [ %57, %59 ], [ %63, %61 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %62) #18
  %63 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %62, i64 1
  %64 = icmp eq %"class.sh::TConstantUnion"* %63, %60
  br i1 %64, label %65, label %61

; <label>:65:                                     ; preds = %61, %23
  %66 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %24, align 8
  %67 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %68 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %67, align 8
  %69 = icmp eq %"class.sh::TIntermNode"** %66, %68
  br i1 %69, label %341, label %70

; <label>:70:                                     ; preds = %65
  %71 = shl i64 %37, 3
  br label %72

; <label>:72:                                     ; preds = %70, %72
  %73 = phi i64 [ 0, %70 ], [ %89, %72 ]
  %74 = phi %"class.sh::TIntermNode"** [ %66, %70 ], [ %90, %72 ]
  %75 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, align 8
  %76 = bitcast %"class.sh::TIntermNode"* %75 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %77 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %76, align 8
  %78 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %77, i64 4
  %79 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %78, align 8
  %80 = tail call %"class.sh::TIntermTyped"* %79(%"class.sh::TIntermNode"* %75) #18
  %81 = bitcast %"class.sh::TIntermTyped"* %80 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %82 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %81, align 8
  %83 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %82, i64 29
  %84 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %83, align 8
  %85 = tail call %"class.sh::TConstantUnion"* %84(%"class.sh::TIntermTyped"* %80) #18
  %86 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %57, i64 %73
  %87 = bitcast %"class.sh::TConstantUnion"* %86 to i8*
  %88 = bitcast %"class.sh::TConstantUnion"* %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %88, i64 %71, i1 false)
  %89 = add i64 %73, %37
  %90 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %74, i64 1
  %91 = icmp eq %"class.sh::TIntermNode"** %90, %68
  br i1 %91, label %341, label %72

; <label>:92:                                     ; preds = %17, %7
  %93 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %95 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %94, align 8
  %96 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %95, i64 31
  %97 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %96, align 8
  %98 = tail call dereferenceable(128) %"class.sh::TType"* %97(%"class.sh::TIntermExpression"* %93) #18
  %99 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %98) #18
  %100 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %99, i64 8)
  %101 = extractvalue { i64, i1 } %100, 1
  %102 = extractvalue { i64, i1 } %100, 0
  %103 = select i1 %101, i64 -1, i64 %102
  %104 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %105 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %104, i64 %103) #18
  %106 = bitcast i8* %105 to %"class.sh::TConstantUnion"*
  %107 = icmp eq i64 %99, 0
  br i1 %107, label %114, label %108

; <label>:108:                                    ; preds = %92
  %109 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %99
  br label %110

; <label>:110:                                    ; preds = %110, %108
  %111 = phi %"class.sh::TConstantUnion"* [ %106, %108 ], [ %112, %110 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %111) #18
  %112 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %111, i64 1
  %113 = icmp eq %"class.sh::TConstantUnion"* %112, %109
  br i1 %113, label %114, label %110

; <label>:114:                                    ; preds = %110, %92
  %115 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %116 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %115, i64 31
  %117 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %116, align 8
  %118 = tail call dereferenceable(128) %"class.sh::TType"* %117(%"class.sh::TIntermTyped"* %8) #18
  %119 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %118, i64 0, i32 0
  %120 = load i32, i32* %119, align 8
  %121 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0
  %122 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %123 = bitcast %"class.sh::TIntermNode"*** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.std::__1::vector.16"* %121 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = sub i64 %124, %126
  %128 = icmp eq i64 %127, 8
  br i1 %128, label %131, label %129

; <label>:129:                                    ; preds = %114
  %130 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %121, i64 0, i32 0, i32 0
  br label %298

; <label>:131:                                    ; preds = %114
  %132 = inttoptr i64 %126 to %"class.sh::TIntermNode"**
  %133 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %121, i64 0, i32 0, i32 0
  %134 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, align 8
  %135 = bitcast %"class.sh::TIntermNode"* %134 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %136 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %135, align 8
  %137 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %136, i64 4
  %138 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %137, align 8
  %139 = tail call %"class.sh::TIntermTyped"* %138(%"class.sh::TIntermNode"* %134) #18
  %140 = bitcast %"class.sh::TIntermTyped"* %139 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %141 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %140, align 8
  %142 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %141, i64 29
  %143 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %142, align 8
  %144 = tail call %"class.sh::TConstantUnion"* %143(%"class.sh::TIntermTyped"* %139) #18
  %145 = bitcast %"class.sh::TIntermTyped"* %139 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %146 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %145, align 8
  %147 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %146, i64 31
  %148 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %147, align 8
  %149 = tail call dereferenceable(128) %"class.sh::TType"* %148(%"class.sh::TIntermTyped"* %139) #18
  %150 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %149) #18
  %151 = icmp eq i64 %150, 1
  %152 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %153 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %152, i64 31
  %154 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %153, align 8
  %155 = tail call dereferenceable(128) %"class.sh::TType"* %154(%"class.sh::TIntermTyped"* nonnull %8) #18
  %156 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %155, i64 0, i32 6
  %157 = load i8, i8* %156, align 4
  %158 = icmp ugt i8 %157, 1
  %159 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %155, i64 0, i32 7
  %160 = load i8, i8* %159, align 1
  %161 = icmp ugt i8 %160, 1
  %162 = and i1 %158, %161
  br i1 %151, label %163, label %215

; <label>:163:                                    ; preds = %131
  br i1 %162, label %165, label %164

; <label>:164:                                    ; preds = %163
  br i1 %107, label %341, label %209

; <label>:165:                                    ; preds = %163
  %166 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %94, align 8
  %167 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %166, i64 31
  %168 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %167, align 8
  %169 = tail call dereferenceable(128) %"class.sh::TType"* %168(%"class.sh::TIntermExpression"* nonnull %93) #18
  %170 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %169, i64 0, i32 6
  %171 = load i8, i8* %170, align 4
  %172 = zext i8 %171 to i32
  %173 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %94, align 8
  %174 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %173, i64 31
  %175 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %174, align 8
  %176 = tail call dereferenceable(128) %"class.sh::TType"* %175(%"class.sh::TIntermExpression"* nonnull %93) #18
  %177 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %176, i64 0, i32 7
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = icmp eq i8 %171, 0
  br i1 %180, label %341, label %181

; <label>:181:                                    ; preds = %165
  %182 = icmp eq i8 %178, 0
  %183 = add nsw i32 %179, -1
  %184 = zext i32 %183 to i64
  %185 = add nuw nsw i64 %184, 1
  br label %186

; <label>:186:                                    ; preds = %191, %181
  %187 = phi i64 [ 0, %181 ], [ %192, %191 ]
  %188 = phi i32 [ 0, %181 ], [ %193, %191 ]
  br i1 %182, label %191, label %195

; <label>:189:                                    ; preds = %205
  %190 = add i64 %185, %187
  br label %191

; <label>:191:                                    ; preds = %189, %186
  %192 = phi i64 [ %187, %186 ], [ %190, %189 ]
  %193 = add nuw nsw i32 %188, 1
  %194 = icmp eq i32 %193, %172
  br i1 %194, label %341, label %186

; <label>:195:                                    ; preds = %186, %205
  %196 = phi i64 [ %206, %205 ], [ %187, %186 ]
  %197 = phi i32 [ %207, %205 ], [ 0, %186 ]
  %198 = icmp eq i32 %188, %197
  %199 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %196
  br i1 %198, label %200, label %202

; <label>:200:                                    ; preds = %195
  %201 = tail call zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"* %199, i32 %120, %"class.sh::TConstantUnion"* dereferenceable(8) %144) #18
  br label %205

; <label>:202:                                    ; preds = %195
  %203 = bitcast %"class.sh::TConstantUnion"* %199 to float*
  store float 0.000000e+00, float* %203, align 4
  %204 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %196, i32 1
  store i32 1, i32* %204, align 4
  br label %205

; <label>:205:                                    ; preds = %202, %200
  %206 = add i64 %196, 1
  %207 = add nuw nsw i32 %197, 1
  %208 = icmp eq i32 %207, %179
  br i1 %208, label %189, label %195

; <label>:209:                                    ; preds = %164, %209
  %210 = phi i64 [ %213, %209 ], [ 0, %164 ]
  %211 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %210
  %212 = tail call zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"* %211, i32 %120, %"class.sh::TConstantUnion"* dereferenceable(8) %144) #18
  %213 = add nuw i64 %210, 1
  %214 = icmp eq i64 %213, %99
  br i1 %214, label %341, label %209

; <label>:215:                                    ; preds = %131
  br i1 %162, label %216, label %298

; <label>:216:                                    ; preds = %215
  %217 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %145, align 8
  %218 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %217, i64 31
  %219 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %218, align 8
  %220 = tail call dereferenceable(128) %"class.sh::TType"* %219(%"class.sh::TIntermTyped"* %139) #18
  %221 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %220, i64 0, i32 6
  %222 = load i8, i8* %221, align 4
  %223 = icmp ugt i8 %222, 1
  %224 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %220, i64 0, i32 7
  %225 = load i8, i8* %224, align 1
  %226 = icmp ugt i8 %225, 1
  %227 = and i1 %223, %226
  br i1 %227, label %228, label %298

; <label>:228:                                    ; preds = %216
  %229 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %145, align 8
  %230 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %229, i64 31
  %231 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %230, align 8
  %232 = tail call dereferenceable(128) %"class.sh::TType"* %231(%"class.sh::TIntermTyped"* nonnull %139) #18
  %233 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %232, i64 0, i32 6
  %234 = load i8, i8* %233, align 4
  %235 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %145, align 8
  %236 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %235, i64 31
  %237 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %236, align 8
  %238 = tail call dereferenceable(128) %"class.sh::TType"* %237(%"class.sh::TIntermTyped"* nonnull %139) #18
  %239 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %238, i64 0, i32 7
  %240 = load i8, i8* %239, align 1
  %241 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %94, align 8
  %242 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %241, i64 31
  %243 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %242, align 8
  %244 = tail call dereferenceable(128) %"class.sh::TType"* %243(%"class.sh::TIntermExpression"* nonnull %93) #18
  %245 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %244, i64 0, i32 6
  %246 = load i8, i8* %245, align 4
  %247 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %94, align 8
  %248 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %247, i64 31
  %249 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %248, align 8
  %250 = tail call dereferenceable(128) %"class.sh::TType"* %249(%"class.sh::TIntermExpression"* nonnull %93) #18
  %251 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %250, i64 0, i32 7
  %252 = load i8, i8* %251, align 1
  %253 = icmp eq i8 %246, 0
  br i1 %253, label %341, label %254

; <label>:254:                                    ; preds = %228
  %255 = zext i8 %252 to i64
  %256 = icmp eq i8 %252, 0
  %257 = zext i8 %240 to i64
  %258 = add nuw nsw i64 %255, 4294967295
  %259 = and i64 %258, 4294967295
  %260 = add nuw nsw i64 %259, 1
  %261 = zext i8 %234 to i64
  %262 = zext i8 %246 to i64
  %263 = zext i8 %252 to i64
  br label %264

; <label>:264:                                    ; preds = %272, %254
  %265 = phi i64 [ 0, %254 ], [ %274, %272 ]
  %266 = phi i64 [ 0, %254 ], [ %273, %272 ]
  br i1 %256, label %272, label %267

; <label>:267:                                    ; preds = %264
  %268 = icmp ult i64 %265, %261
  %269 = mul nuw nsw i64 %265, %257
  br label %276

; <label>:270:                                    ; preds = %294
  %271 = add i64 %260, %266
  br label %272

; <label>:272:                                    ; preds = %270, %264
  %273 = phi i64 [ %266, %264 ], [ %271, %270 ]
  %274 = add nuw nsw i64 %265, 1
  %275 = icmp eq i64 %274, %262
  br i1 %275, label %341, label %264

; <label>:276:                                    ; preds = %294, %267
  %277 = phi i64 [ 0, %267 ], [ %296, %294 ]
  %278 = phi i64 [ %266, %267 ], [ %295, %294 ]
  %279 = icmp ult i64 %277, %257
  %280 = and i1 %268, %279
  br i1 %280, label %281, label %286

; <label>:281:                                    ; preds = %276
  %282 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %278
  %283 = add nuw nsw i64 %277, %269
  %284 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %144, i64 %283
  %285 = tail call zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"* %282, i32 %120, %"class.sh::TConstantUnion"* dereferenceable(8) %284) #18
  br label %294

; <label>:286:                                    ; preds = %276
  %287 = icmp eq i64 %265, %277
  %288 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %278
  %289 = bitcast %"class.sh::TConstantUnion"* %288 to float*
  br i1 %287, label %290, label %292

; <label>:290:                                    ; preds = %286
  store float 1.000000e+00, float* %289, align 4
  %291 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %278, i32 1
  store i32 1, i32* %291, align 4
  br label %294

; <label>:292:                                    ; preds = %286
  store float 0.000000e+00, float* %289, align 4
  %293 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %278, i32 1
  store i32 1, i32* %293, align 4
  br label %294

; <label>:294:                                    ; preds = %290, %292, %281
  %295 = add i64 %278, 1
  %296 = add nuw nsw i64 %277, 1
  %297 = icmp eq i64 %296, %263
  br i1 %297, label %270, label %276

; <label>:298:                                    ; preds = %129, %215, %216
  %299 = phi %"class.sh::TIntermNode"*** [ %130, %129 ], [ %133, %215 ], [ %133, %216 ]
  %300 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %299, align 8
  %301 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %122, align 8
  %302 = icmp eq %"class.sh::TIntermNode"** %300, %301
  br i1 %302, label %341, label %303

; <label>:303:                                    ; preds = %298, %337
  %304 = phi i64 [ %338, %337 ], [ 0, %298 ]
  %305 = phi %"class.sh::TIntermNode"** [ %339, %337 ], [ %300, %298 ]
  %306 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %305, align 8
  %307 = bitcast %"class.sh::TIntermNode"* %306 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %308 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %307, align 8
  %309 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %308, i64 4
  %310 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %309, align 8
  %311 = tail call %"class.sh::TIntermTyped"* %310(%"class.sh::TIntermNode"* %306) #18
  %312 = bitcast %"class.sh::TIntermTyped"* %311 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %313 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %312, align 8
  %314 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %313, i64 31
  %315 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %314, align 8
  %316 = tail call dereferenceable(128) %"class.sh::TType"* %315(%"class.sh::TIntermTyped"* %311) #18
  %317 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %316) #18
  %318 = bitcast %"class.sh::TIntermTyped"* %311 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %319 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %318, align 8
  %320 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %319, i64 29
  %321 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %320, align 8
  %322 = tail call %"class.sh::TConstantUnion"* %321(%"class.sh::TIntermTyped"* %311) #18
  %323 = icmp ne i64 %317, 0
  %324 = icmp ult i64 %304, %99
  %325 = and i1 %324, %323
  br i1 %325, label %326, label %337

; <label>:326:                                    ; preds = %303, %326
  %327 = phi i64 [ %333, %326 ], [ 0, %303 ]
  %328 = phi i64 [ %332, %326 ], [ %304, %303 ]
  %329 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %106, i64 %328
  %330 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %322, i64 %327
  %331 = tail call zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"* %329, i32 %120, %"class.sh::TConstantUnion"* dereferenceable(8) %330) #18
  %332 = add nuw i64 %328, 1
  %333 = add nuw i64 %327, 1
  %334 = icmp ult i64 %333, %317
  %335 = icmp ult i64 %332, %99
  %336 = and i1 %335, %334
  br i1 %336, label %326, label %337

; <label>:337:                                    ; preds = %326, %303
  %338 = phi i64 [ %304, %303 ], [ %332, %326 ]
  %339 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %305, i64 1
  %340 = icmp eq %"class.sh::TIntermNode"** %339, %301
  br i1 %340, label %341, label %303

; <label>:341:                                    ; preds = %72, %337, %272, %209, %191, %165, %164, %228, %65, %298, %1
  %342 = phi %"class.sh::TConstantUnion"* [ null, %1 ], [ %106, %165 ], [ %106, %164 ], [ %106, %228 ], [ %106, %298 ], [ %57, %65 ], [ %106, %191 ], [ %106, %209 ], [ %106, %272 ], [ %106, %337 ], [ %57, %72 ]
  ret %"class.sh::TConstantUnion"* %342
}

declare i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #7

declare void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh14TConstantUnion4castENS_10TBasicTypeERKS0_(%"class.sh::TConstantUnion"*, i32, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh16TIntermAggregate14hasSideEffectsEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %4 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %4, i64 31
  %6 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, align 8
  %7 = tail call dereferenceable(128) %"class.sh::TType"* %6(%"class.sh::TIntermTyped"* %2) #18
  %8 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %7, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %48, label %11

; <label>:11:                                     ; preds = %1
  %12 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = icmp ult i32 %14, 3
  br i1 %15, label %16, label %24

; <label>:16:                                     ; preds = %11
  %17 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %18 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %17, align 8
  %19 = icmp eq %"class.sh::TFunction"* %18, null
  br i1 %19, label %48, label %20

; <label>:20:                                     ; preds = %16
  %21 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %18, i64 0, i32 9
  %22 = load i8, i8* %21, align 2, !range !33
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %48, label %26

; <label>:24:                                     ; preds = %11
  %25 = icmp eq i32 %13, 136
  br i1 %25, label %26, label %48

; <label>:26:                                     ; preds = %20, %24
  %27 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %28 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %30 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %29, align 8
  %31 = icmp eq %"class.sh::TIntermNode"** %28, %30
  br i1 %31, label %48, label %34

; <label>:32:                                     ; preds = %34
  %33 = icmp eq %"class.sh::TIntermNode"** %47, %30
  br i1 %33, label %48, label %34

; <label>:34:                                     ; preds = %26, %32
  %35 = phi %"class.sh::TIntermNode"** [ %47, %32 ], [ %28, %26 ]
  %36 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, align 8
  %37 = bitcast %"class.sh::TIntermNode"* %36 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %38 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %37, align 8
  %39 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %38, i64 4
  %40 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %39, align 8
  %41 = tail call %"class.sh::TIntermTyped"* %40(%"class.sh::TIntermNode"* %36) #18
  %42 = bitcast %"class.sh::TIntermTyped"* %41 to i1 (%"class.sh::TIntermTyped"*)***
  %43 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %42, align 8
  %44 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %43, i64 30
  %45 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %44, align 8
  %46 = tail call zeroext i1 %45(%"class.sh::TIntermTyped"* %41) #18
  %47 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 1
  br i1 %46, label %48, label %32

; <label>:48:                                     ; preds = %32, %34, %26, %20, %1, %24, %16
  %49 = phi i1 [ false, %1 ], [ true, %24 ], [ true, %16 ], [ true, %20 ], [ false, %26 ], [ false, %32 ], [ true, %34 ]
  ret i1 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermBlock15appendStatementEPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermNode"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::TIntermNode"*, align 8
  store %"class.sh::TIntermNode"* %1, %"class.sh::TIntermNode"** %3, align 8
  %4 = icmp eq %"class.sh::TIntermNode"* %1, null
  %5 = ptrtoint %"class.sh::TIntermNode"* %1 to i64
  br i1 %4, label %18, label %6

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp eq %"class.sh::TIntermNode"** %8, %10
  br i1 %11, label %16, label %12

; <label>:12:                                     ; preds = %6
  %13 = bitcast %"class.sh::TIntermNode"** %8 to i64*
  store i64 %5, i64* %13, align 8
  %14 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, i64 1
  store %"class.sh::TIntermNode"** %15, %"class.sh::TIntermNode"*** %7, align 8
  br label %18

; <label>:16:                                     ; preds = %6
  %17 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0
  call void @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector.16"* nonnull %17, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %3) #18
  br label %18

; <label>:18:                                     ; preds = %16, %12, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermBlock15insertStatementEmPNS_11TIntermNodeE(%"class.sh::TIntermBlock"*, i64, %"class.sh::TIntermNode"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermNode"*, align 8
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %4, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %0, i64 0, i32 2, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %5, i64 0, i32 0, i32 0
  %7 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %7, i64 %1
  %9 = call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EERS8_(%"class.std::__1::vector.16"* nonnull %5, %"class.sh::TIntermNode"** %8, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertENS_11__wrap_iterIPKS3_EERS8_(%"class.std::__1::vector.16"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %9, align 8
  %11 = icmp ult %"class.sh::TIntermNode"** %8, %10
  %12 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %13 = ptrtoint %"class.sh::TIntermNode"** %10 to i64
  br i1 %11, label %14, label %102

; <label>:14:                                     ; preds = %3
  %15 = icmp eq %"class.sh::TIntermNode"** %8, %1
  br i1 %15, label %16, label %22

; <label>:16:                                     ; preds = %14
  %17 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %18, i64* %19, align 8
  %20 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %21 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %20, i64 1
  store %"class.sh::TIntermNode"** %21, %"class.sh::TIntermNode"*** %7, align 8
  br label %484

; <label>:22:                                     ; preds = %14
  %23 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 1
  %24 = ptrtoint %"class.sh::TIntermNode"** %23 to i64
  %25 = sub i64 %12, %24
  %26 = ashr exact i64 %25, 3
  %27 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %26
  %28 = icmp ult %"class.sh::TIntermNode"** %27, %8
  br i1 %28, label %29, label %56

; <label>:29:                                     ; preds = %22
  %30 = sub nsw i64 0, %26
  %31 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %30
  %32 = bitcast %"class.sh::TIntermNode"** %31 to i8*
  %33 = xor i64 %4, -1
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 3
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %52, label %40

; <label>:40:                                     ; preds = %29, %40
  %41 = phi %"class.sh::TIntermNode"** [ %49, %40 ], [ %8, %29 ]
  %42 = phi %"class.sh::TIntermNode"** [ %47, %40 ], [ %27, %29 ]
  %43 = phi i64 [ %50, %40 ], [ %38, %29 ]
  %44 = bitcast %"class.sh::TIntermNode"** %41 to i64*
  %45 = bitcast %"class.sh::TIntermNode"** %42 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %44, align 8
  %47 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %42, i64 1
  %48 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %49 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %48, i64 1
  store %"class.sh::TIntermNode"** %49, %"class.sh::TIntermNode"*** %7, align 8
  %50 = add i64 %43, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %40, !llvm.loop !34

; <label>:52:                                     ; preds = %40, %29
  %53 = phi %"class.sh::TIntermNode"** [ %8, %29 ], [ %49, %40 ]
  %54 = phi %"class.sh::TIntermNode"** [ %27, %29 ], [ %47, %40 ]
  %55 = icmp ult i8* %34, inttoptr (i64 24 to i8*)
  br i1 %55, label %56, label %62

; <label>:56:                                     ; preds = %52, %62, %22
  %57 = icmp eq i64 %25, 0
  br i1 %57, label %90, label %58

; <label>:58:                                     ; preds = %56
  %59 = sub nsw i64 0, %26
  %60 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, i64 %59
  %61 = bitcast %"class.sh::TIntermNode"** %60 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %5, i64 %25, i1 false) #18
  br label %90

; <label>:62:                                     ; preds = %52, %62
  %63 = phi %"class.sh::TIntermNode"** [ %88, %62 ], [ %53, %52 ]
  %64 = phi %"class.sh::TIntermNode"** [ %86, %62 ], [ %54, %52 ]
  %65 = bitcast %"class.sh::TIntermNode"** %63 to i64*
  %66 = bitcast %"class.sh::TIntermNode"** %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %65, align 8
  %68 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %64, i64 1
  %69 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %70 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %69, i64 1
  store %"class.sh::TIntermNode"** %70, %"class.sh::TIntermNode"*** %7, align 8
  %71 = bitcast %"class.sh::TIntermNode"** %70 to i64*
  %72 = bitcast %"class.sh::TIntermNode"** %68 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %71, align 8
  %74 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %64, i64 2
  %75 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %76 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 1
  store %"class.sh::TIntermNode"** %76, %"class.sh::TIntermNode"*** %7, align 8
  %77 = bitcast %"class.sh::TIntermNode"** %76 to i64*
  %78 = bitcast %"class.sh::TIntermNode"** %74 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %77, align 8
  %80 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %64, i64 3
  %81 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %82 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 1
  store %"class.sh::TIntermNode"** %82, %"class.sh::TIntermNode"*** %7, align 8
  %83 = bitcast %"class.sh::TIntermNode"** %82 to i64*
  %84 = bitcast %"class.sh::TIntermNode"** %80 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %83, align 8
  %86 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %64, i64 4
  %87 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %88 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %87, i64 1
  store %"class.sh::TIntermNode"** %88, %"class.sh::TIntermNode"*** %7, align 8
  %89 = icmp ult %"class.sh::TIntermNode"** %86, %8
  br i1 %89, label %62, label %56

; <label>:90:                                     ; preds = %56, %58
  %91 = icmp ugt %"class.sh::TIntermNode"** %1, %2
  br i1 %91, label %97, label %92

; <label>:92:                                     ; preds = %90
  %93 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %94 = icmp ugt %"class.sh::TIntermNode"** %93, %2
  %95 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 1
  %96 = select i1 %94, %"class.sh::TIntermNode"** %95, %"class.sh::TIntermNode"** %2
  br label %97

; <label>:97:                                     ; preds = %92, %90
  %98 = phi %"class.sh::TIntermNode"** [ %2, %90 ], [ %96, %92 ]
  %99 = bitcast %"class.sh::TIntermNode"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  store i64 %100, i64* %101, align 8
  br label %484

; <label>:102:                                    ; preds = %3
  %103 = bitcast %"class.sh::TIntermNode"*** %7 to i64*
  %104 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = sub i64 %12, %105
  %107 = ashr exact i64 %106, 3
  %108 = add nsw i64 %107, 1
  %109 = icmp ugt i64 %108, 2305843009213693951
  br i1 %109, label %110, label %112

; <label>:110:                                    ; preds = %102
  %111 = bitcast %"class.std::__1::vector.16"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %111) #12
  unreachable

; <label>:112:                                    ; preds = %102
  %113 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %114 = sub i64 %13, %105
  %115 = ashr exact i64 %114, 3
  %116 = icmp ult i64 %115, 1152921504606846975
  br i1 %116, label %120, label %117

; <label>:117:                                    ; preds = %112
  %118 = sub i64 %4, %105
  %119 = ashr exact i64 %118, 3
  br label %127

; <label>:120:                                    ; preds = %112
  %121 = ashr exact i64 %114, 2
  %122 = icmp ult i64 %121, %108
  %123 = select i1 %122, i64 %108, i64 %121
  %124 = sub i64 %4, %105
  %125 = ashr exact i64 %124, 3
  %126 = icmp eq i64 %123, 0
  br i1 %126, label %134, label %127

; <label>:127:                                    ; preds = %117, %120
  %128 = phi i64 [ %119, %117 ], [ %125, %120 ]
  %129 = phi i64 [ 2305843009213693951, %117 ], [ %123, %120 ]
  %130 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %131 = shl i64 %129, 3
  %132 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* nonnull %130, i64 %131) #18
  %133 = bitcast i8* %132 to %"class.sh::TIntermNode"**
  br label %134

; <label>:134:                                    ; preds = %120, %127
  %135 = phi i64 [ %128, %127 ], [ %125, %120 ]
  %136 = phi i64 [ %129, %127 ], [ 0, %120 ]
  %137 = phi %"class.sh::TIntermNode"** [ %133, %127 ], [ null, %120 ]
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 %135
  %139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 %136
  %140 = ptrtoint %"class.sh::TIntermNode"** %139 to i64
  %141 = icmp eq i64 %135, %136
  br i1 %141, label %142, label %164

; <label>:142:                                    ; preds = %134
  %143 = icmp sgt i64 %135, 0
  br i1 %143, label %144, label %148

; <label>:144:                                    ; preds = %142
  %145 = add nsw i64 %135, 1
  %146 = sdiv i64 %145, -2
  %147 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 %146
  br label %164

; <label>:148:                                    ; preds = %142
  %149 = shl nsw i64 %135, 1
  %150 = icmp eq i64 %135, 0
  %151 = select i1 %150, i64 1, i64 %149
  %152 = lshr i64 %151, 2
  %153 = icmp eq i64 %151, 0
  br i1 %153, label %159, label %154

; <label>:154:                                    ; preds = %148
  %155 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %156 = shl i64 %151, 3
  %157 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* nonnull %155, i64 %156) #18
  %158 = bitcast i8* %157 to %"class.sh::TIntermNode"**
  br label %159

; <label>:159:                                    ; preds = %148, %154
  %160 = phi %"class.sh::TIntermNode"** [ %158, %154 ], [ null, %148 ]
  %161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 %152
  %162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %160, i64 %151
  %163 = ptrtoint %"class.sh::TIntermNode"** %162 to i64
  br label %164

; <label>:164:                                    ; preds = %134, %144, %159
  %165 = phi %"class.sh::TIntermNode"** [ %147, %144 ], [ %161, %159 ], [ %138, %134 ]
  %166 = phi i64 [ %140, %144 ], [ %163, %159 ], [ %140, %134 ]
  %167 = bitcast %"class.sh::TIntermNode"** %165 to i64*
  %168 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %167, align 8
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 1
  %171 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %172 = ptrtoint %"class.sh::TIntermNode"** %171 to i64
  %173 = icmp eq %"class.sh::TIntermNode"** %171, %1
  br i1 %173, label %299, label %174

; <label>:174:                                    ; preds = %164
  %175 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %176 = ptrtoint %"class.sh::TIntermNode"** %175 to i64
  %177 = sub i64 %176, %172
  %178 = lshr i64 %177, 3
  %179 = xor i64 %178, -1
  %180 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %181 = ptrtoint %"class.sh::TIntermNode"** %180 to i64
  %182 = sub i64 %181, %172
  %183 = lshr i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = icmp ult i64 %184, 4
  br i1 %185, label %228, label %186

; <label>:186:                                    ; preds = %174
  %187 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  %188 = ptrtoint %"class.sh::TIntermNode"** %187 to i64
  %189 = sub i64 %188, %172
  %190 = lshr i64 %189, 3
  %191 = xor i64 %190, -1
  %192 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %191
  %193 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %191
  %194 = icmp ult %"class.sh::TIntermNode"** %192, %1
  %195 = icmp ult %"class.sh::TIntermNode"** %193, %165
  %196 = and i1 %194, %195
  br i1 %196, label %228, label %197

; <label>:197:                                    ; preds = %186
  %198 = and i64 %184, 3
  %199 = sub nsw i64 %184, %198
  %200 = xor i64 %183, -1
  %201 = add nsw i64 %198, %200
  %202 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %201
  %203 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %201
  %204 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 -1
  %205 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 -1
  br label %206

; <label>:206:                                    ; preds = %206, %197
  %207 = phi i64 [ 0, %197 ], [ %224, %206 ]
  %208 = sub i64 0, %207
  %209 = sub i64 0, %207
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %204, i64 %208
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %205, i64 %209
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %211, i64 -1
  %213 = bitcast %"class.sh::TIntermNode"** %212 to <2 x i64>*
  %214 = load <2 x i64>, <2 x i64>* %213, align 8, !alias.scope !35
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %211, i64 -2
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -1
  %217 = bitcast %"class.sh::TIntermNode"** %216 to <2 x i64>*
  %218 = load <2 x i64>, <2 x i64>* %217, align 8, !alias.scope !35
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 -1
  %220 = bitcast %"class.sh::TIntermNode"** %219 to <2 x i64>*
  store <2 x i64> %214, <2 x i64>* %220, align 8, !alias.scope !38, !noalias !35
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 -2
  %222 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %221, i64 -1
  %223 = bitcast %"class.sh::TIntermNode"** %222 to <2 x i64>*
  store <2 x i64> %218, <2 x i64>* %223, align 8, !alias.scope !38, !noalias !35
  %224 = add i64 %207, 4
  %225 = icmp eq i64 %224, %199
  br i1 %225, label %226, label %206, !llvm.loop !40

; <label>:226:                                    ; preds = %206
  %227 = icmp eq i64 %198, 0
  br i1 %227, label %297, label %228

; <label>:228:                                    ; preds = %226, %186, %174
  %229 = phi %"class.sh::TIntermNode"** [ %165, %186 ], [ %165, %174 ], [ %202, %226 ]
  %230 = phi %"class.sh::TIntermNode"** [ %1, %186 ], [ %1, %174 ], [ %203, %226 ]
  %231 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %230, i64 -1
  %232 = ptrtoint %"class.sh::TIntermNode"** %231 to i64
  %233 = sub i64 %232, %172
  %234 = lshr i64 %233, 3
  %235 = add nuw nsw i64 %234, 1
  %236 = and i64 %235, 7
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %249, label %238

; <label>:238:                                    ; preds = %228, %238
  %239 = phi %"class.sh::TIntermNode"** [ %242, %238 ], [ %229, %228 ]
  %240 = phi %"class.sh::TIntermNode"** [ %243, %238 ], [ %230, %228 ]
  %241 = phi i64 [ %247, %238 ], [ %236, %228 ]
  %242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %239, i64 -1
  %243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %240, i64 -1
  %244 = bitcast %"class.sh::TIntermNode"** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast %"class.sh::TIntermNode"** %242 to i64*
  store i64 %245, i64* %246, align 8
  %247 = add i64 %241, -1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %238, !llvm.loop !41

; <label>:249:                                    ; preds = %238, %228
  %250 = phi %"class.sh::TIntermNode"** [ %229, %228 ], [ %242, %238 ]
  %251 = phi %"class.sh::TIntermNode"** [ %230, %228 ], [ %243, %238 ]
  %252 = icmp ult i64 %233, 56
  br i1 %252, label %297, label %253

; <label>:253:                                    ; preds = %249, %253
  %254 = phi %"class.sh::TIntermNode"** [ %291, %253 ], [ %250, %249 ]
  %255 = phi %"class.sh::TIntermNode"** [ %292, %253 ], [ %251, %249 ]
  %256 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -1
  %257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -1
  %258 = bitcast %"class.sh::TIntermNode"** %257 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = bitcast %"class.sh::TIntermNode"** %256 to i64*
  store i64 %259, i64* %260, align 8
  %261 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -2
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -2
  %263 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = bitcast %"class.sh::TIntermNode"** %261 to i64*
  store i64 %264, i64* %265, align 8
  %266 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -3
  %267 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -3
  %268 = bitcast %"class.sh::TIntermNode"** %267 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = bitcast %"class.sh::TIntermNode"** %266 to i64*
  store i64 %269, i64* %270, align 8
  %271 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -4
  %272 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -4
  %273 = bitcast %"class.sh::TIntermNode"** %272 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = bitcast %"class.sh::TIntermNode"** %271 to i64*
  store i64 %274, i64* %275, align 8
  %276 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -5
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -5
  %278 = bitcast %"class.sh::TIntermNode"** %277 to i64*
  %279 = load i64, i64* %278, align 8
  %280 = bitcast %"class.sh::TIntermNode"** %276 to i64*
  store i64 %279, i64* %280, align 8
  %281 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -6
  %282 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -6
  %283 = bitcast %"class.sh::TIntermNode"** %282 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = bitcast %"class.sh::TIntermNode"** %281 to i64*
  store i64 %284, i64* %285, align 8
  %286 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -7
  %287 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -7
  %288 = bitcast %"class.sh::TIntermNode"** %287 to i64*
  %289 = load i64, i64* %288, align 8
  %290 = bitcast %"class.sh::TIntermNode"** %286 to i64*
  store i64 %289, i64* %290, align 8
  %291 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %254, i64 -8
  %292 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 -8
  %293 = bitcast %"class.sh::TIntermNode"** %292 to i64*
  %294 = load i64, i64* %293, align 8
  %295 = bitcast %"class.sh::TIntermNode"** %291 to i64*
  store i64 %294, i64* %295, align 8
  %296 = icmp eq %"class.sh::TIntermNode"** %292, %171
  br i1 %296, label %297, label %253, !llvm.loop !42

; <label>:297:                                    ; preds = %249, %253, %226
  %298 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %179
  br label %299

; <label>:299:                                    ; preds = %297, %164
  %300 = phi %"class.sh::TIntermNode"** [ %165, %164 ], [ %298, %297 ]
  %301 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %302 = icmp eq %"class.sh::TIntermNode"** %301, %1
  br i1 %302, label %480, label %303

; <label>:303:                                    ; preds = %299
  %304 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %301, i64 -1
  %305 = ptrtoint %"class.sh::TIntermNode"** %304 to i64
  %306 = sub i64 %305, %4
  %307 = lshr i64 %306, 3
  %308 = add nuw nsw i64 %307, 2
  %309 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %301, i64 -1
  %310 = ptrtoint %"class.sh::TIntermNode"** %309 to i64
  %311 = sub i64 %310, %4
  %312 = lshr i64 %311, 3
  %313 = add nuw nsw i64 %312, 1
  %314 = icmp ult i64 %313, 4
  br i1 %314, label %408, label %315

; <label>:315:                                    ; preds = %303
  %316 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %301, i64 -1
  %317 = ptrtoint %"class.sh::TIntermNode"** %316 to i64
  %318 = sub i64 %317, %4
  %319 = lshr i64 %318, 3
  %320 = add nuw nsw i64 %319, 2
  %321 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %320
  %322 = add nuw nsw i64 %319, 1
  %323 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %322
  %324 = icmp ult %"class.sh::TIntermNode"** %170, %323
  %325 = icmp ugt %"class.sh::TIntermNode"** %321, %1
  %326 = and i1 %324, %325
  br i1 %326, label %408, label %327

; <label>:327:                                    ; preds = %315
  %328 = and i64 %313, 4611686018427387900
  %329 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 %328
  %330 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %328
  %331 = add nsw i64 %328, -4
  %332 = lshr exact i64 %331, 2
  %333 = add nuw nsw i64 %332, 1
  %334 = and i64 %333, 3
  %335 = icmp ult i64 %331, 12
  br i1 %335, label %387, label %336

; <label>:336:                                    ; preds = %327
  %337 = sub nsw i64 %333, %334
  br label %338

; <label>:338:                                    ; preds = %338, %336
  %339 = phi i64 [ 0, %336 ], [ %384, %338 ]
  %340 = phi i64 [ %337, %336 ], [ %385, %338 ]
  %341 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 %339
  %342 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %339
  %343 = bitcast %"class.sh::TIntermNode"** %342 to <2 x i64>*
  %344 = load <2 x i64>, <2 x i64>* %343, align 8, !alias.scope !43
  %345 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %342, i64 2
  %346 = bitcast %"class.sh::TIntermNode"** %345 to <2 x i64>*
  %347 = load <2 x i64>, <2 x i64>* %346, align 8, !alias.scope !43
  %348 = bitcast %"class.sh::TIntermNode"** %341 to <2 x i64>*
  store <2 x i64> %344, <2 x i64>* %348, align 8, !alias.scope !46, !noalias !43
  %349 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %341, i64 2
  %350 = bitcast %"class.sh::TIntermNode"** %349 to <2 x i64>*
  store <2 x i64> %347, <2 x i64>* %350, align 8, !alias.scope !46, !noalias !43
  %351 = or i64 %339, 4
  %352 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 %351
  %353 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %351
  %354 = bitcast %"class.sh::TIntermNode"** %353 to <2 x i64>*
  %355 = load <2 x i64>, <2 x i64>* %354, align 8, !alias.scope !43
  %356 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %353, i64 2
  %357 = bitcast %"class.sh::TIntermNode"** %356 to <2 x i64>*
  %358 = load <2 x i64>, <2 x i64>* %357, align 8, !alias.scope !43
  %359 = bitcast %"class.sh::TIntermNode"** %352 to <2 x i64>*
  store <2 x i64> %355, <2 x i64>* %359, align 8, !alias.scope !46, !noalias !43
  %360 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %352, i64 2
  %361 = bitcast %"class.sh::TIntermNode"** %360 to <2 x i64>*
  store <2 x i64> %358, <2 x i64>* %361, align 8, !alias.scope !46, !noalias !43
  %362 = or i64 %339, 8
  %363 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 %362
  %364 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %362
  %365 = bitcast %"class.sh::TIntermNode"** %364 to <2 x i64>*
  %366 = load <2 x i64>, <2 x i64>* %365, align 8, !alias.scope !43
  %367 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %364, i64 2
  %368 = bitcast %"class.sh::TIntermNode"** %367 to <2 x i64>*
  %369 = load <2 x i64>, <2 x i64>* %368, align 8, !alias.scope !43
  %370 = bitcast %"class.sh::TIntermNode"** %363 to <2 x i64>*
  store <2 x i64> %366, <2 x i64>* %370, align 8, !alias.scope !46, !noalias !43
  %371 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %363, i64 2
  %372 = bitcast %"class.sh::TIntermNode"** %371 to <2 x i64>*
  store <2 x i64> %369, <2 x i64>* %372, align 8, !alias.scope !46, !noalias !43
  %373 = or i64 %339, 12
  %374 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 %373
  %375 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %373
  %376 = bitcast %"class.sh::TIntermNode"** %375 to <2 x i64>*
  %377 = load <2 x i64>, <2 x i64>* %376, align 8, !alias.scope !43
  %378 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %375, i64 2
  %379 = bitcast %"class.sh::TIntermNode"** %378 to <2 x i64>*
  %380 = load <2 x i64>, <2 x i64>* %379, align 8, !alias.scope !43
  %381 = bitcast %"class.sh::TIntermNode"** %374 to <2 x i64>*
  store <2 x i64> %377, <2 x i64>* %381, align 8, !alias.scope !46, !noalias !43
  %382 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %374, i64 2
  %383 = bitcast %"class.sh::TIntermNode"** %382 to <2 x i64>*
  store <2 x i64> %380, <2 x i64>* %383, align 8, !alias.scope !46, !noalias !43
  %384 = add i64 %339, 16
  %385 = add i64 %340, -4
  %386 = icmp eq i64 %385, 0
  br i1 %386, label %387, label %338, !llvm.loop !48

; <label>:387:                                    ; preds = %338, %327
  %388 = phi i64 [ 0, %327 ], [ %384, %338 ]
  %389 = icmp eq i64 %334, 0
  br i1 %389, label %406, label %390

; <label>:390:                                    ; preds = %387, %390
  %391 = phi i64 [ %403, %390 ], [ %388, %387 ]
  %392 = phi i64 [ %404, %390 ], [ %334, %387 ]
  %393 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %170, i64 %391
  %394 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %391
  %395 = bitcast %"class.sh::TIntermNode"** %394 to <2 x i64>*
  %396 = load <2 x i64>, <2 x i64>* %395, align 8, !alias.scope !43
  %397 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %394, i64 2
  %398 = bitcast %"class.sh::TIntermNode"** %397 to <2 x i64>*
  %399 = load <2 x i64>, <2 x i64>* %398, align 8, !alias.scope !43
  %400 = bitcast %"class.sh::TIntermNode"** %393 to <2 x i64>*
  store <2 x i64> %396, <2 x i64>* %400, align 8, !alias.scope !46, !noalias !43
  %401 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %393, i64 2
  %402 = bitcast %"class.sh::TIntermNode"** %401 to <2 x i64>*
  store <2 x i64> %399, <2 x i64>* %402, align 8, !alias.scope !46, !noalias !43
  %403 = add i64 %391, 4
  %404 = add i64 %392, -1
  %405 = icmp eq i64 %404, 0
  br i1 %405, label %406, label %390, !llvm.loop !49

; <label>:406:                                    ; preds = %390, %387
  %407 = icmp eq i64 %313, %328
  br i1 %407, label %478, label %408

; <label>:408:                                    ; preds = %406, %315, %303
  %409 = phi %"class.sh::TIntermNode"** [ %170, %315 ], [ %170, %303 ], [ %329, %406 ]
  %410 = phi %"class.sh::TIntermNode"** [ %1, %315 ], [ %1, %303 ], [ %330, %406 ]
  %411 = ptrtoint %"class.sh::TIntermNode"** %410 to i64
  %412 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %301, i64 -1
  %413 = ptrtoint %"class.sh::TIntermNode"** %412 to i64
  %414 = sub i64 %413, %411
  %415 = lshr i64 %414, 3
  %416 = add nuw nsw i64 %415, 1
  %417 = and i64 %416, 7
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %430, label %419

; <label>:419:                                    ; preds = %408, %419
  %420 = phi %"class.sh::TIntermNode"** [ %427, %419 ], [ %409, %408 ]
  %421 = phi %"class.sh::TIntermNode"** [ %426, %419 ], [ %410, %408 ]
  %422 = phi i64 [ %428, %419 ], [ %417, %408 ]
  %423 = bitcast %"class.sh::TIntermNode"** %420 to i64*
  %424 = bitcast %"class.sh::TIntermNode"** %421 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %423, align 8
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %421, i64 1
  %427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %420, i64 1
  %428 = add i64 %422, -1
  %429 = icmp eq i64 %428, 0
  br i1 %429, label %430, label %419, !llvm.loop !50

; <label>:430:                                    ; preds = %419, %408
  %431 = phi %"class.sh::TIntermNode"** [ %409, %408 ], [ %427, %419 ]
  %432 = phi %"class.sh::TIntermNode"** [ %410, %408 ], [ %426, %419 ]
  %433 = icmp ult i64 %414, 56
  br i1 %433, label %478, label %434

; <label>:434:                                    ; preds = %430, %434
  %435 = phi %"class.sh::TIntermNode"** [ %476, %434 ], [ %431, %430 ]
  %436 = phi %"class.sh::TIntermNode"** [ %475, %434 ], [ %432, %430 ]
  %437 = bitcast %"class.sh::TIntermNode"** %435 to i64*
  %438 = bitcast %"class.sh::TIntermNode"** %436 to i64*
  %439 = load i64, i64* %438, align 8
  store i64 %439, i64* %437, align 8
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 1
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 1
  %442 = bitcast %"class.sh::TIntermNode"** %441 to i64*
  %443 = bitcast %"class.sh::TIntermNode"** %440 to i64*
  %444 = load i64, i64* %443, align 8
  store i64 %444, i64* %442, align 8
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 2
  %446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 2
  %447 = bitcast %"class.sh::TIntermNode"** %446 to i64*
  %448 = bitcast %"class.sh::TIntermNode"** %445 to i64*
  %449 = load i64, i64* %448, align 8
  store i64 %449, i64* %447, align 8
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 3
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 3
  %452 = bitcast %"class.sh::TIntermNode"** %451 to i64*
  %453 = bitcast %"class.sh::TIntermNode"** %450 to i64*
  %454 = load i64, i64* %453, align 8
  store i64 %454, i64* %452, align 8
  %455 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 4
  %456 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 4
  %457 = bitcast %"class.sh::TIntermNode"** %456 to i64*
  %458 = bitcast %"class.sh::TIntermNode"** %455 to i64*
  %459 = load i64, i64* %458, align 8
  store i64 %459, i64* %457, align 8
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 5
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 5
  %462 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  %463 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  %464 = load i64, i64* %463, align 8
  store i64 %464, i64* %462, align 8
  %465 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 6
  %466 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 6
  %467 = bitcast %"class.sh::TIntermNode"** %466 to i64*
  %468 = bitcast %"class.sh::TIntermNode"** %465 to i64*
  %469 = load i64, i64* %468, align 8
  store i64 %469, i64* %467, align 8
  %470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 7
  %471 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 7
  %472 = bitcast %"class.sh::TIntermNode"** %471 to i64*
  %473 = bitcast %"class.sh::TIntermNode"** %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %472, align 8
  %475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %436, i64 8
  %476 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 8
  %477 = icmp eq %"class.sh::TIntermNode"** %475, %301
  br i1 %477, label %478, label %434, !llvm.loop !51

; <label>:478:                                    ; preds = %430, %434, %406
  %479 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %308
  br label %480

; <label>:480:                                    ; preds = %478, %299
  %481 = phi %"class.sh::TIntermNode"** [ %170, %299 ], [ %479, %478 ]
  %482 = ptrtoint %"class.sh::TIntermNode"** %300 to i64
  %483 = ptrtoint %"class.sh::TIntermNode"** %481 to i64
  store i64 %482, i64* %104, align 8
  store i64 %483, i64* %103, align 8
  store i64 %166, i64* %113, align 8
  ret %"class.sh::TIntermNode"** %165

; <label>:484:                                    ; preds = %16, %97
  ret %"class.sh::TIntermNode"** %1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::TIntermNode"*, align 8
  %4 = bitcast %"class.sh::TIntermNode"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #18
  %5 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1, i64 0, i32 0
  store %"class.sh::TIntermNode"* %5, %"class.sh::TIntermNode"** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %7 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %10 = icmp ult %"class.sh::TIntermNode"** %7, %9
  br i1 %10, label %11, label %16

; <label>:11:                                     ; preds = %2
  %12 = ptrtoint %"class.sh::TIntermTyped"* %1 to i64
  %13 = bitcast %"class.sh::TIntermNode"** %7 to i64*
  store i64 %12, i64* %13, align 8
  %14 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %6, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %14, i64 1
  store %"class.sh::TIntermNode"** %15, %"class.sh::TIntermNode"*** %6, align 8
  br label %18

; <label>:16:                                     ; preds = %2
  %17 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %0, i64 0, i32 2, i32 0
  call void @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.16"* nonnull %17, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %3) #18
  br label %18

; <label>:18:                                     ; preds = %11, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #18
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh14TIntermTernary13getChildCountEv(%"class.sh::TIntermTernary"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh14TIntermTernary12getChildNodeEm(%"class.sh::TIntermTernary"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  switch i64 %1, label %7 [
    i64 0, label %3
    i64 1, label %5
  ]

; <label>:3:                                      ; preds = %2
  %4 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  br label %9

; <label>:5:                                      ; preds = %2
  %6 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  br label %9

; <label>:7:                                      ; preds = %2
  %8 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  br label %9

; <label>:9:                                      ; preds = %7, %5, %3
  %10 = phi %"class.sh::TIntermTyped"** [ %4, %3 ], [ %6, %5 ], [ %8, %7 ]
  %11 = bitcast %"class.sh::TIntermTyped"** %10 to %"class.sh::TIntermNode"**
  %12 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %11, align 8
  ret %"class.sh::TIntermNode"* %12
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh14TIntermTernary16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermTernary"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %18, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  %10 = bitcast %"class.sh::TIntermTyped"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  %15 = bitcast %"class.sh::TIntermTyped"** %14 to %"class.sh::TIntermNode"**
  %16 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %15, align 8
  %17 = icmp eq %"class.sh::TIntermNode"* %16, %1
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %13, %8, %3
  %19 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ], [ %15, %13 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %19, align 8
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi i1 [ false, %13 ], [ true, %18 ]
  ret i1 %21
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh13TIntermIfElse13getChildCountEv(%"class.sh::TIntermIfElse"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  %3 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %2, align 8
  %4 = icmp eq %"class.sh::TIntermBlock"* %3, null
  %5 = select i1 %4, i64 1, i64 2
  %6 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  %7 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %6, align 8
  %8 = icmp ne %"class.sh::TIntermBlock"* %7, null
  %9 = zext i1 %8 to i64
  %10 = add nuw nsw i64 %5, %9
  ret i64 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh13TIntermIfElse12getChildNodeEm(%"class.sh::TIntermIfElse"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %8

; <label>:4:                                      ; preds = %2
  %5 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 1
  %6 = bitcast %"class.sh::TIntermTyped"** %5 to %"class.sh::TIntermNode"**
  %7 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %6, align 8
  br label %20

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  %10 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %9, align 8
  %11 = icmp ne %"class.sh::TIntermBlock"* %10, null
  %12 = icmp eq i64 %1, 1
  %13 = and i1 %12, %11
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %8
  %15 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %10, i64 0, i32 0
  br label %20

; <label>:16:                                     ; preds = %8
  %17 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  %18 = bitcast %"class.sh::TIntermBlock"** %17 to %"class.sh::TIntermNode"**
  %19 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, align 8
  br label %20

; <label>:20:                                     ; preds = %16, %14, %4
  %21 = phi %"class.sh::TIntermNode"* [ %7, %4 ], [ %15, %14 ], [ %19, %16 ]
  ret %"class.sh::TIntermNode"* %21
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13TIntermIfElse16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermIfElse"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %18, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  %10 = bitcast %"class.sh::TIntermBlock"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %18, label %13

; <label>:13:                                     ; preds = %8
  %14 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  %15 = bitcast %"class.sh::TIntermBlock"** %14 to %"class.sh::TIntermNode"**
  %16 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %15, align 8
  %17 = icmp eq %"class.sh::TIntermNode"* %16, %1
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %13, %8, %3
  %19 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ], [ %15, %13 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %19, align 8
  br label %20

; <label>:20:                                     ; preds = %18, %13
  %21 = phi i1 [ false, %13 ], [ true, %18 ]
  ret i1 %21
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh13TIntermSwitch13getChildCountEv(%"class.sh::TIntermSwitch"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh13TIntermSwitch12getChildNodeEm(%"class.sh::TIntermSwitch"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = icmp eq i64 %1, 0
  %4 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  %7 = bitcast %"class.sh::TIntermBlock"** %6 to %"class.sh::TIntermNode"**
  %8 = select i1 %3, %"class.sh::TIntermNode"** %5, %"class.sh::TIntermNode"** %7
  %9 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %8, align 8
  ret %"class.sh::TIntermNode"* %9
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh13TIntermSwitch16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermSwitch"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %13, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  %10 = bitcast %"class.sh::TIntermBlock"** %9 to %"class.sh::TIntermNode"**
  %11 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"* %11, %1
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %8, %3
  %14 = phi %"class.sh::TIntermNode"** [ %5, %3 ], [ %10, %8 ]
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %14, align 8
  br label %15

; <label>:15:                                     ; preds = %13, %8
  %16 = phi i1 [ false, %8 ], [ true, %13 ]
  ret i1 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2sh11TIntermCase13getChildCountEv(%"class.sh::TIntermCase"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 1
  %3 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %2, align 8
  %4 = icmp ne %"class.sh::TIntermTyped"* %3, null
  %5 = zext i1 %4 to i64
  ret i64 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TIntermNode"* @_ZNK2sh11TIntermCase12getChildNodeEm(%"class.sh::TIntermCase"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  ret %"class.sh::TIntermNode"* %5
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh11TIntermCase16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermCase"* nocapture, %"class.sh::TIntermNode"* readnone, %"class.sh::TIntermNode"*) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermCase", %"class.sh::TIntermCase"* %0, i64 0, i32 1
  %5 = bitcast %"class.sh::TIntermTyped"** %4 to %"class.sh::TIntermNode"**
  %6 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %5, align 8
  %7 = icmp eq %"class.sh::TIntermNode"* %6, %1
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %3
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %5, align 8
  br label %9

; <label>:9:                                      ; preds = %3, %8
  %10 = phi i1 [ true, %8 ], [ false, %3 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermTypedC2ERKS0_(%"class.sh::TIntermTyped"* nocapture, %"class.sh::TIntermTyped"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %0, i64 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %1, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 4 %9, i64 16, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2sh12TIntermTyped16hasConstantValueEv(%"class.sh::TIntermTyped"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TConstantUnion"* @_ZNK2sh12TIntermTyped16getConstantValueEv(%"class.sh::TIntermTyped"* nocapture readnone) unnamed_addr #3 align 2 {
  ret %"class.sh::TConstantUnion"* null
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh20TIntermConstantUnionC2ERKS0_(%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermConstantUnion"* dereferenceable(160)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1, i64 0, i32 1
  %13 = bitcast %"class.sh::TConstantUnion"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 1
  %16 = bitcast %"class.sh::TConstantUnion"** %15 to i64*
  store i64 %14, i64* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh24TIntermFunctionPrototypeC2EPKNS_9TFunctionE(%"class.sh::TIntermFunctionPrototype"* nocapture, %"class.sh::TFunction"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = bitcast i32* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 16, i1 false) #18
  %5 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh24TIntermFunctionPrototypeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %0, i64 0, i32 1
  store %"class.sh::TFunction"* %1, %"class.sh::TFunction"** %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(128) %"class.sh::TType"* @_ZNK2sh24TIntermFunctionPrototype7getTypeEv(%"class.sh::TIntermFunctionPrototype"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %0, i64 0, i32 1
  %3 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %2, align 8
  %4 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %3, i64 0, i32 4
  %5 = load %"class.sh::TType"*, %"class.sh::TType"** %4, align 8
  ret %"class.sh::TType"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh16TIntermAggregateC2ERKS0_(%"class.sh::TIntermAggregate"*, %"class.sh::TIntermAggregate"* dereferenceable(208)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::TIntermNode"*, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %6 = bitcast i32* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = bitcast %"struct.sh::TSourceLoc"* %8 to i8*
  %10 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* nonnull align 4 %10, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %11, %"class.sh::TType"* nonnull dereferenceable(128) %12) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh15TIntermOperatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %17 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2
  %18 = bitcast %"class.sh::TVector.15"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #18
  %19 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 3
  %20 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 3
  %21 = load i8, i8* %20, align 8, !range !33
  store i8 %21, i8* %19, align 8
  %22 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 4
  %23 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 4
  %24 = load i8, i8* %23, align 1, !range !33
  store i8 %24, i8* %22, align 1
  %25 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %26 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 5
  %27 = bitcast %"class.sh::TFunction"** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.sh::TFunction"** %25 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %31 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %33 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %32, align 8
  %34 = icmp eq %"class.sh::TIntermNode"** %31, %33
  br i1 %34, label %40, label %35

; <label>:35:                                     ; preds = %2
  %36 = bitcast %"class.sh::TIntermNode"** %3 to i8*
  %37 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %39 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %17, i64 0, i32 0
  br label %41

; <label>:40:                                     ; preds = %64, %2
  ret void

; <label>:41:                                     ; preds = %35, %64
  %42 = phi %"class.sh::TIntermNode"** [ %31, %35 ], [ %65, %64 ]
  %43 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %42, align 8
  %44 = bitcast %"class.sh::TIntermNode"* %43 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %45 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %44, align 8
  %46 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %45, i64 4
  %47 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %46, align 8
  %48 = call %"class.sh::TIntermTyped"* %47(%"class.sh::TIntermNode"* %43) #18
  %49 = bitcast %"class.sh::TIntermTyped"* %48 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %50 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %49, align 8
  %51 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %50, i64 26
  %52 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %51, align 8
  %53 = call %"class.sh::TIntermTyped"* %52(%"class.sh::TIntermTyped"* %48) #18
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #18
  %54 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %53, i64 0, i32 0
  store %"class.sh::TIntermNode"* %54, %"class.sh::TIntermNode"** %3, align 8
  %55 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 8
  %56 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %38, align 8
  %57 = icmp ult %"class.sh::TIntermNode"** %55, %56
  br i1 %57, label %58, label %63

; <label>:58:                                     ; preds = %41
  %59 = ptrtoint %"class.sh::TIntermTyped"* %53 to i64
  %60 = bitcast %"class.sh::TIntermNode"** %55 to i64*
  store i64 %59, i64* %60, align 8
  %61 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 8
  %62 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %61, i64 1
  store %"class.sh::TIntermNode"** %62, %"class.sh::TIntermNode"*** %37, align 8
  br label %64

; <label>:63:                                     ; preds = %41
  call void @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.16"* nonnull %39, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %3) #18
  br label %64

; <label>:64:                                     ; preds = %58, %63
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #18
  %65 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %42, i64 1
  %66 = icmp eq %"class.sh::TIntermNode"** %65, %33
  br i1 %66, label %40, label %41
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermAggregate"* @_ZNK2sh16TIntermAggregate11shallowCopyEv(%"class.sh::TIntermAggregate"*) local_unnamed_addr #0 align 2 {
  %2 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %2, i64 24) #18
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #18
  %4 = bitcast i8* %3 to %"class.std::__1::vector.16"*
  %5 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)***
  %6 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %6, i64 33
  %8 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %7, align 8
  %9 = tail call %"class.sh::TVector.15"* %8(%"class.sh::TIntermAggregate"* %0) #18
  %10 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %10, align 8
  %12 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*** %5, align 8
  %13 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %12, i64 33
  %14 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %13, align 8
  %15 = tail call %"class.sh::TVector.15"* %14(%"class.sh::TIntermAggregate"* %0) #18
  %16 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %15, i64 0, i32 0, i32 0, i32 1
  %17 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %16, align 8
  %18 = tail call %"class.sh::TIntermNode"** @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6insertINS_11__wrap_iterIPKS3_EEEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISD_E9referenceEEE5valueENS8_IPS3_EEE4typeESB_SD_SD_(%"class.std::__1::vector.16"* %4, %"class.sh::TIntermNode"** null, %"class.sh::TIntermNode"** %11, %"class.sh::TIntermNode"** %17)
  %19 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %20 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %19, i64 208) #18
  %21 = bitcast i8* %20 to %"class.sh::TIntermAggregate"*
  %22 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 5
  %23 = bitcast %"class.sh::TFunction"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds i8, i8* %20, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 16, i1 false) #18
  %29 = bitcast i8* %20 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %30 = getelementptr inbounds i8, i8* %20, i64 24
  %31 = bitcast i8* %30 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %31, %"class.sh::TType"* nonnull dereferenceable(128) %25) #18
  %32 = getelementptr inbounds i8, i8* %20, i64 152
  %33 = bitcast i8* %32 to i32*
  store i32 %27, i32* %33, align 8
  %34 = getelementptr inbounds i8, i8* %20, i64 160
  %35 = bitcast i8* %34 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %36 = getelementptr inbounds i8, i8* %20, i64 168
  %37 = getelementptr inbounds i8, i8* %20, i64 200
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 26, i1 false) #18
  %38 = bitcast i8* %37 to i64*
  store i64 %24, i64* %38, align 8
  %39 = icmp eq i8* %3, null
  br i1 %39, label %56, label %40

; <label>:40:                                     ; preds = %1
  %41 = bitcast i8* %36 to i64*
  %42 = bitcast i8* %3 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %41, align 8
  store i64 0, i64* %42, align 8
  %44 = getelementptr inbounds i8, i8* %20, i64 176
  %45 = getelementptr inbounds i8, i8* %3, i64 8
  %46 = bitcast i8* %44 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast i8* %45 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %46, align 8
  store i64 %47, i64* %48, align 8
  %50 = getelementptr inbounds i8, i8* %20, i64 184
  %51 = getelementptr inbounds i8, i8* %3, i64 16
  %52 = bitcast i8* %50 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast i8* %51 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %52, align 8
  store i64 %53, i64* %54, align 8
  br label %56

; <label>:56:                                     ; preds = %1, %40
  tail call void @_ZN2sh16TIntermAggregate24setPrecisionAndQualifierEv(%"class.sh::TIntermAggregate"* nonnull %21) #18
  %57 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %58 = bitcast %"struct.sh::TSourceLoc"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 4 %58, i64 16, i1 false) #18
  ret %"class.sh::TIntermAggregate"* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermSwizzleC2ERKS0_(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermSwizzle"* dereferenceable(192)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh14TIntermSwizzleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2
  %13 = bitcast %"class.sh::TVector.23"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #18
  %14 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 1
  %15 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %14, align 8
  %16 = bitcast %"class.sh::TIntermTyped"* %15 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %17, i64 26
  %19 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %18, align 8
  %20 = tail call %"class.sh::TIntermTyped"* %19(%"class.sh::TIntermTyped"* %15) #18
  %21 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %20, %"class.sh::TIntermTyped"** %21, align 8
  %22 = icmp eq %"class.sh::TIntermSwizzle"* %0, %1
  br i1 %22, label %29, label %23

; <label>:23:                                     ; preds = %2
  %24 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %12, i64 0, i32 0
  %25 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %28 = load i32*, i32** %27, align 8
  tail call void @_ZNSt3__16vectorIi14pool_allocatorIiEE6assignIPiEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.24"* nonnull %24, i32* %26, i32* %28) #18
  br label %29

; <label>:29:                                     ; preds = %2, %23
  %30 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %1, i64 0, i32 3
  %31 = load i8, i8* %30, align 8, !range !33
  %32 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 3
  store i8 %31, i8* %32, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermBinaryC2ERKS0_(%"class.sh::TIntermBinary"*, %"class.sh::TIntermBinary"* dereferenceable(184)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh15TIntermOperatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %12, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermBinaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 4
  %17 = load i8, i8* %16, align 8, !range !33
  store i8 %17, i8* %15, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 2
  %19 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %18, align 8
  %20 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %21 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %21, i64 26
  %23 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %22, align 8
  %24 = tail call %"class.sh::TIntermTyped"* %23(%"class.sh::TIntermTyped"* %19) #18
  %25 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %1, i64 0, i32 3
  %26 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %25, align 8
  %27 = bitcast %"class.sh::TIntermTyped"* %26 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %28 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %28, i64 26
  %30 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %29, align 8
  %31 = tail call %"class.sh::TIntermTyped"* %30(%"class.sh::TIntermTyped"* %26) #18
  %32 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %24, %"class.sh::TIntermTyped"** %32, align 8
  %33 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %31, %"class.sh::TIntermTyped"** %33, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermUnaryC2ERKS0_(%"class.sh::TIntermUnary"*, %"class.sh::TIntermUnary"* dereferenceable(184)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh15TIntermOperatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %12, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermUnaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 2
  %17 = load i8, i8* %16, align 8, !range !33
  store i8 %17, i8* %15, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 3
  %19 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 3
  %20 = bitcast %"class.sh::TFunction"** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.sh::TFunction"** %18 to i64*
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %1, i64 0, i32 1
  %24 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %23, align 8
  %25 = bitcast %"class.sh::TIntermTyped"* %24 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %26 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %26, i64 26
  %28 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %27, align 8
  %29 = tail call %"class.sh::TIntermTyped"* %28(%"class.sh::TIntermTyped"* %24) #18
  %30 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %29, %"class.sh::TIntermTyped"** %30, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermTernaryC2ERKS0_(%"class.sh::TIntermTernary"*, %"class.sh::TIntermTernary"* dereferenceable(176)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %5 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"struct.sh::TSourceLoc"* %7 to i8*
  %9 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 4 %9, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %11) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh14TIntermTernaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 1
  %13 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %12, align 8
  %14 = bitcast %"class.sh::TIntermTyped"* %13 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %15 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %15, i64 26
  %17 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %16, align 8
  %18 = tail call %"class.sh::TIntermTyped"* %17(%"class.sh::TIntermTyped"* %13) #18
  %19 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 2
  %20 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %19, align 8
  %21 = bitcast %"class.sh::TIntermTyped"* %20 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %22 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %22, i64 26
  %24 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %23, align 8
  %25 = tail call %"class.sh::TIntermTyped"* %24(%"class.sh::TIntermTyped"* %20) #18
  %26 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %1, i64 0, i32 3
  %27 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %28 = bitcast %"class.sh::TIntermTyped"* %27 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %29 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %29, i64 26
  %31 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %30, align 8
  %32 = tail call %"class.sh::TIntermTyped"* %31(%"class.sh::TIntermTyped"* %27) #18
  %33 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %18, %"class.sh::TIntermTyped"** %33, align 8
  %34 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %25, %"class.sh::TIntermTyped"** %34, align 8
  %35 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %32, %"class.sh::TIntermTyped"** %35, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh15TIntermOperator12isAssignmentEv(%"class.sh::TIntermOperator"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = tail call zeroext i1 @_Z12IsAssignment9TOperator(i32 %3) #18
  ret i1 %4
}

declare zeroext i1 @_Z12IsAssignment9TOperator(i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh15TIntermOperator16isMultiplicationEv(%"class.sh::TIntermOperator"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -15
  %5 = icmp ult i32 %4, 21
  br i1 %5, label %6, label %11

; <label>:6:                                      ; preds = %1
  %7 = trunc i32 %4 to i21
  %8 = lshr i21 -65535, %7
  %9 = and i21 %8, 1
  %10 = icmp ne i21 %9, 0
  ret i1 %10

; <label>:11:                                     ; preds = %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN2sh13TIntermBinary23GetMulOpBasedOnOperandsERKNS_5TTypeES3_(%"class.sh::TType"* nocapture readonly dereferenceable(128), %"class.sh::TType"* nocapture readonly dereferenceable(128)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 6
  %4 = load i8, i8* %3, align 4
  %5 = icmp ugt i8 %4, 1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp ugt i8 %7, 1
  %9 = and i1 %5, %8
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 6
  %11 = load i8, i8* %10, align 4
  %12 = icmp ugt i8 %11, 1
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 7
  %14 = load i8, i8* %13, align 1
  %15 = icmp ugt i8 %14, 1
  %16 = and i1 %12, %15
  br i1 %9, label %17, label %24

; <label>:17:                                     ; preds = %2
  %18 = xor i1 %12, true
  %19 = or i1 %15, %18
  %20 = select i1 %16, i32 35, i32 34
  br i1 %19, label %34, label %21

; <label>:21:                                     ; preds = %17
  %22 = icmp eq i8 %14, 1
  %23 = select i1 %22, i32 33, i32 34
  ret i32 %23

; <label>:24:                                     ; preds = %2
  %25 = icmp eq i8 %7, 1
  %26 = and i1 %5, %25
  br i1 %16, label %27, label %29

; <label>:27:                                     ; preds = %24
  %28 = select i1 %26, i32 32, i32 34
  br label %34

; <label>:29:                                     ; preds = %24
  %30 = icmp eq i8 %14, 1
  %31 = and i1 %12, %30
  %32 = xor i1 %26, %31
  %33 = select i1 %32, i32 31, i32 15
  br label %34

; <label>:34:                                     ; preds = %17, %29, %27
  %35 = phi i32 [ %20, %17 ], [ %28, %27 ], [ %33, %29 ]
  ret i32 %35
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN2sh13TIntermBinary29GetMulAssignOpBasedOnOperandsERKNS_5TTypeES3_(%"class.sh::TType"* nocapture readonly dereferenceable(128), %"class.sh::TType"* nocapture readonly dereferenceable(128)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 6
  %4 = load i8, i8* %3, align 4
  %5 = icmp ugt i8 %4, 1
  %6 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7
  %7 = load i8, i8* %6, align 1
  %8 = icmp ugt i8 %7, 1
  %9 = and i1 %5, %8
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 6
  %11 = load i8, i8* %10, align 4
  %12 = icmp ugt i8 %11, 1
  %13 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1, i64 0, i32 7
  %14 = load i8, i8* %13, align 1
  %15 = icmp ugt i8 %14, 1
  %16 = and i1 %12, %15
  br i1 %9, label %17, label %19

; <label>:17:                                     ; preds = %2
  %18 = select i1 %16, i32 145, i32 144
  br label %27

; <label>:19:                                     ; preds = %2
  br i1 %16, label %27, label %20

; <label>:20:                                     ; preds = %19
  %21 = icmp eq i8 %7, 1
  %22 = and i1 %5, %21
  %23 = icmp eq i8 %14, 1
  %24 = and i1 %12, %23
  %25 = xor i1 %22, %24
  %26 = select i1 %25, i32 143, i32 141
  br label %27

; <label>:27:                                     ; preds = %20, %19, %17
  %28 = phi i32 [ %18, %17 ], [ 142, %19 ], [ %26, %20 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermUnary7promoteEv(%"class.sh::TIntermUnary"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = alloca %"class.sh::TType", align 8
  %4 = alloca %"class.sh::TType", align 8
  %5 = alloca %"class.sh::TType", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = alloca %"class.sh::TType", align 8
  %8 = alloca %"class.sh::TType", align 8
  %9 = alloca %"class.sh::TType", align 8
  %10 = alloca %"class.sh::TType", align 8
  %11 = alloca %"class.sh::TType", align 8
  %12 = alloca %"class.sh::TType", align 8
  %13 = alloca %"class.sh::TType", align 8
  %14 = alloca %"class.sh::TType", align 8
  %15 = alloca %"class.sh::TType", align 8
  %16 = alloca %"class.sh::TType", align 8
  %17 = alloca %"class.sh::TType", align 8
  %18 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 12
  br i1 %20, label %21, label %25

; <label>:21:                                     ; preds = %1
  %22 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %22) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 2, i32 0, i32 2, i8 zeroext 1, i8 zeroext 1) #18
  %23 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %24 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %23, %"class.sh::TType"* nonnull dereferenceable(128) %2) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %22) #18
  br label %156

; <label>:25:                                     ; preds = %1
  %26 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  %27 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %28 = bitcast %"class.sh::TIntermTyped"* %27 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %29 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, i64 31
  %31 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, align 8
  %32 = tail call dereferenceable(128) %"class.sh::TType"* %31(%"class.sh::TIntermTyped"* %27) #18
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 2
  %36 = select i1 %35, i32 2, i32 0
  %37 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %38 = bitcast %"class.sh::TIntermTyped"* %37 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %39 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %38, align 8
  %40 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %39, i64 31
  %41 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %40, align 8
  %42 = tail call dereferenceable(128) %"class.sh::TType"* %41(%"class.sh::TIntermTyped"* %37) #18
  %43 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %42, i64 0, i32 6
  %44 = load i8, i8* %43, align 4
  %45 = load i32, i32* %18, align 8
  switch i32 %45, label %146 [
    i32 87, label %46
    i32 88, label %50
    i32 89, label %54
    i32 90, label %54
    i32 93, label %58
    i32 94, label %58
    i32 95, label %58
    i32 99, label %58
    i32 100, label %58
    i32 96, label %62
    i32 97, label %62
    i32 98, label %66
    i32 101, label %70
    i32 102, label %70
    i32 119, label %74
    i32 120, label %74
    i32 103, label %78
    i32 117, label %78
    i32 116, label %90
    i32 86, label %118
    i32 85, label %118
    i32 124, label %122
    i32 125, label %134
    i32 126, label %138
    i32 127, label %142
  ]

; <label>:46:                                     ; preds = %25
  %47 = bitcast %"class.sh::TType"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %47) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %3, i32 2, i32 3, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %48 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %49 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %48, %"class.sh::TType"* nonnull dereferenceable(128) %3) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %47) #18
  br label %156

; <label>:50:                                     ; preds = %25
  %51 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %51) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %4, i32 3, i32 3, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %52 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %53 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %52, %"class.sh::TType"* nonnull dereferenceable(128) %4) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %51) #18
  br label %156

; <label>:54:                                     ; preds = %25, %25
  %55 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %55) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 3, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %56 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %57 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %56, %"class.sh::TType"* nonnull dereferenceable(128) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %55) #18
  br label %156

; <label>:58:                                     ; preds = %25, %25, %25, %25, %25
  %59 = bitcast %"class.sh::TType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %59) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %6, i32 3, i32 3, i32 %36, i8 zeroext 1, i8 zeroext 1) #18
  %60 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %61 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %60, %"class.sh::TType"* nonnull dereferenceable(128) %6) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %59) #18
  br label %156

; <label>:62:                                     ; preds = %25, %25
  %63 = bitcast %"class.sh::TType"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %63) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %7, i32 1, i32 3, i32 %36, i8 zeroext 2, i8 zeroext 1) #18
  %64 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %65 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %64, %"class.sh::TType"* nonnull dereferenceable(128) %7) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %63) #18
  br label %156

; <label>:66:                                     ; preds = %25
  %67 = bitcast %"class.sh::TType"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %67) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %8, i32 1, i32 2, i32 %36, i8 zeroext 2, i8 zeroext 1) #18
  %68 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %69 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %68, %"class.sh::TType"* nonnull dereferenceable(128) %8) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %67) #18
  br label %156

; <label>:70:                                     ; preds = %25, %25
  %71 = bitcast %"class.sh::TType"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %71) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %9, i32 1, i32 2, i32 %36, i8 zeroext 4, i8 zeroext 1) #18
  %72 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %73 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %72, %"class.sh::TType"* nonnull dereferenceable(128) %9) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %71) #18
  br label %156

; <label>:74:                                     ; preds = %25, %25
  %75 = bitcast %"class.sh::TType"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %75) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %10, i32 4, i32 0, i32 %36, i8 zeroext 1, i8 zeroext 1) #18
  %76 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %77 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %76, %"class.sh::TType"* nonnull dereferenceable(128) %10) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %75) #18
  br label %156

; <label>:78:                                     ; preds = %25, %25
  %79 = bitcast %"class.sh::TType"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %79) #18
  %80 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %81 = bitcast %"class.sh::TIntermTyped"* %80 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %82 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %81, align 8
  %83 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %82, i64 31
  %84 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %83, align 8
  %85 = tail call dereferenceable(128) %"class.sh::TType"* %84(%"class.sh::TIntermTyped"* %80) #18
  %86 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %85, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %11, i32 1, i32 %87, i32 %36, i8 zeroext 1, i8 zeroext 1) #18
  %88 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %89 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %88, %"class.sh::TType"* nonnull dereferenceable(128) %11) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %79) #18
  br label %156

; <label>:90:                                     ; preds = %25
  %91 = bitcast %"class.sh::TType"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %91) #18
  %92 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %93 = bitcast %"class.sh::TIntermTyped"* %92 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %94 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %93, align 8
  %95 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %94, i64 31
  %96 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %95, align 8
  %97 = tail call dereferenceable(128) %"class.sh::TType"* %96(%"class.sh::TIntermTyped"* %92) #18
  %98 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %97, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %101 = bitcast %"class.sh::TIntermTyped"* %100 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %102 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %101, align 8
  %103 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %102, i64 31
  %104 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %103, align 8
  %105 = tail call dereferenceable(128) %"class.sh::TType"* %104(%"class.sh::TIntermTyped"* %100) #18
  %106 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %105, i64 0, i32 7
  %107 = load i8, i8* %106, align 1
  %108 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %109 = bitcast %"class.sh::TIntermTyped"* %108 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %110 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %109, align 8
  %111 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %110, i64 31
  %112 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %111, align 8
  %113 = tail call dereferenceable(128) %"class.sh::TType"* %112(%"class.sh::TIntermTyped"* %108) #18
  %114 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %113, i64 0, i32 6
  %115 = load i8, i8* %114, align 4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %12, i32 1, i32 %99, i32 %36, i8 zeroext %107, i8 zeroext %115) #18
  %116 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %117 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %116, %"class.sh::TType"* nonnull dereferenceable(128) %12) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %91) #18
  br label %156

; <label>:118:                                    ; preds = %25, %25
  %119 = bitcast %"class.sh::TType"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %119) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %13, i32 4, i32 0, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %120 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %121 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %120, %"class.sh::TType"* nonnull dereferenceable(128) %13) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %119) #18
  br label %156

; <label>:122:                                    ; preds = %25
  %123 = bitcast %"class.sh::TType"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %123) #18
  %124 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %125 = bitcast %"class.sh::TIntermTyped"* %124 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %126 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %125, align 8
  %127 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %126, i64 31
  %128 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %127, align 8
  %129 = tail call dereferenceable(128) %"class.sh::TType"* %128(%"class.sh::TIntermTyped"* %124) #18
  %130 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %129, i64 0, i32 0
  %131 = load i32, i32* %130, align 8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %14, i32 %131, i32 3, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %132 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %133 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %132, %"class.sh::TType"* nonnull dereferenceable(128) %14) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %123) #18
  br label %156

; <label>:134:                                    ; preds = %25
  %135 = bitcast %"class.sh::TType"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %135) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %15, i32 2, i32 1, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %136 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %137 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %136, %"class.sh::TType"* nonnull dereferenceable(128) %15) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %135) #18
  br label %156

; <label>:138:                                    ; preds = %25
  %139 = bitcast %"class.sh::TType"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %139) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %16, i32 2, i32 1, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %140 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %141 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %140, %"class.sh::TType"* nonnull dereferenceable(128) %16) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %139) #18
  br label %156

; <label>:142:                                    ; preds = %25
  %143 = bitcast %"class.sh::TType"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %143) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %17, i32 2, i32 1, i32 %36, i8 zeroext %44, i8 zeroext 1) #18
  %144 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %145 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %144, %"class.sh::TType"* nonnull dereferenceable(128) %17) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %143) #18
  br label %156

; <label>:146:                                    ; preds = %25
  %147 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %26, align 8
  %148 = bitcast %"class.sh::TIntermTyped"* %147 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %149 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %148, align 8
  %150 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %149, i64 31
  %151 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %150, align 8
  %152 = tail call dereferenceable(128) %"class.sh::TType"* %151(%"class.sh::TIntermTyped"* %147) #18
  %153 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  %154 = tail call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %153, %"class.sh::TType"* nonnull dereferenceable(128) %152) #18
  %155 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 %36, i32* %155, align 8
  br label %156

; <label>:156:                                    ; preds = %46, %50, %54, %58, %62, %66, %70, %74, %78, %90, %118, %122, %134, %138, %142, %146, %21
  ret void
}

declare void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"*, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermSwizzleC2EPNS_12TIntermTypedERKNS_7TVectorIiEE(%"class.sh::TIntermSwizzle"*, %"class.sh::TIntermTyped"*, %"class.sh::TVector.23"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TType", align 8
  %5 = alloca %"class.sh::TType", align 8
  %6 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 0, i32 0, i8 zeroext 1, i8 zeroext 1) #18
  %7 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 1
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh14TIntermSwizzleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %11, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2
  %13 = bitcast %"class.sh::TVector.23"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 24, i1 false) #18
  %14 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %2, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.sh::TVector.23"* %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 2
  %21 = icmp eq i64 %19, 0
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %3
  %23 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  br label %84

; <label>:24:                                     ; preds = %3
  %25 = icmp ugt i64 %20, 4611686018427387903
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %24
  %27 = bitcast %"class.sh::TVector.23"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %27) #12
  unreachable

; <label>:28:                                     ; preds = %24
  %29 = call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %30 = call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* nonnull %29, i64 %19) #18
  %31 = bitcast i8* %30 to i32*
  %32 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %33 = bitcast i32** %32 to i8**
  store i8* %30, i8** %33, align 8
  %34 = bitcast %"class.sh::TVector.23"* %12 to i8**
  store i8* %30, i8** %34, align 8
  %35 = getelementptr inbounds i32, i32* %31, i64 %20
  %36 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %35, i32** %36, align 8
  %37 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %2, i64 0, i32 0, i32 0, i32 0
  %38 = load i32*, i32** %37, align 8
  %39 = load i32*, i32** %14, align 8
  %40 = icmp eq i32* %38, %39
  br i1 %40, label %84, label %41

; <label>:41:                                     ; preds = %28
  %42 = ptrtoint i32* %38 to i64
  %43 = getelementptr i32, i32* %39, i64 -1
  %44 = ptrtoint i32* %43 to i64
  %45 = sub i64 %44, %42
  %46 = lshr i64 %45, 2
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %60, label %50

; <label>:50:                                     ; preds = %41, %50
  %51 = phi i32* [ %57, %50 ], [ %31, %41 ]
  %52 = phi i32* [ %55, %50 ], [ %38, %41 ]
  %53 = phi i64 [ %58, %50 ], [ %48, %41 ]
  %54 = load i32, i32* %52, align 4
  store i32 %54, i32* %51, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 1
  %56 = load i32*, i32** %32, align 8
  %57 = getelementptr inbounds i32, i32* %56, i64 1
  store i32* %57, i32** %32, align 8
  %58 = add i64 %53, -1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %50, !llvm.loop !52

; <label>:60:                                     ; preds = %50, %41
  %61 = phi i32* [ %31, %41 ], [ %57, %50 ]
  %62 = phi i32* [ %38, %41 ], [ %55, %50 ]
  %63 = icmp ult i64 %45, 12
  br i1 %63, label %84, label %64

; <label>:64:                                     ; preds = %60, %64
  %65 = phi i32* [ %82, %64 ], [ %61, %60 ]
  %66 = phi i32* [ %80, %64 ], [ %62, %60 ]
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %65, align 4
  %68 = getelementptr inbounds i32, i32* %66, i64 1
  %69 = load i32*, i32** %32, align 8
  %70 = getelementptr inbounds i32, i32* %69, i64 1
  store i32* %70, i32** %32, align 8
  %71 = load i32, i32* %68, align 4
  store i32 %71, i32* %70, align 4
  %72 = getelementptr inbounds i32, i32* %66, i64 2
  %73 = load i32*, i32** %32, align 8
  %74 = getelementptr inbounds i32, i32* %73, i64 1
  store i32* %74, i32** %32, align 8
  %75 = load i32, i32* %72, align 4
  store i32 %75, i32* %74, align 4
  %76 = getelementptr inbounds i32, i32* %66, i64 3
  %77 = load i32*, i32** %32, align 8
  %78 = getelementptr inbounds i32, i32* %77, i64 1
  store i32* %78, i32** %32, align 8
  %79 = load i32, i32* %76, align 4
  store i32 %79, i32* %78, align 4
  %80 = getelementptr inbounds i32, i32* %66, i64 4
  %81 = load i32*, i32** %32, align 8
  %82 = getelementptr inbounds i32, i32* %81, i64 1
  store i32* %82, i32** %32, align 8
  %83 = icmp eq i32* %80, %39
  br i1 %83, label %84, label %64

; <label>:84:                                     ; preds = %60, %64, %22, %28
  %85 = phi i32** [ %23, %22 ], [ %32, %28 ], [ %32, %64 ], [ %32, %60 ]
  %86 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 3
  store i8 0, i8* %86, align 8
  %87 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  %88 = bitcast %"class.sh::TIntermTyped"* %87 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %89 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %88, align 8
  %90 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %89, i64 31
  %91 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %90, align 8
  %92 = call dereferenceable(128) %"class.sh::TType"* %91(%"class.sh::TIntermTyped"* %87) #18
  %93 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %92, i64 0, i32 2
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 2
  %96 = select i1 %95, i32 2, i32 0
  %97 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0
  %98 = bitcast i32** %85 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.std::__1::vector.24"* %97 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = sub i64 %99, %101
  %103 = lshr exact i64 %102, 2
  %104 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %104) #18
  %105 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  %106 = bitcast %"class.sh::TIntermTyped"* %105 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %107 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %106, align 8
  %108 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %107, i64 31
  %109 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %108, align 8
  %110 = call dereferenceable(128) %"class.sh::TType"* %109(%"class.sh::TIntermTyped"* %105) #18
  %111 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %110, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %11, align 8
  %114 = bitcast %"class.sh::TIntermTyped"* %113 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %115 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %114, align 8
  %116 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %115, i64 31
  %117 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %116, align 8
  %118 = call dereferenceable(128) %"class.sh::TType"* %117(%"class.sh::TIntermTyped"* %113) #18
  %119 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %118, i64 0, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = trunc i64 %103 to i8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %4, i32 %112, i32 %120, i32 %96, i8 zeroext %121, i8 zeroext 1) #18
  %122 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %4) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %104) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermSwizzle7promoteEv(%"class.sh::TIntermSwizzle"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  %4 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %5 = bitcast %"class.sh::TIntermTyped"* %4 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, i64 31
  %8 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call dereferenceable(128) %"class.sh::TType"* %8(%"class.sh::TIntermTyped"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %9, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 2
  %13 = select i1 %12, i32 2, i32 0
  %14 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0
  %15 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.std::__1::vector.24"* %14 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = lshr exact i64 %20, 2
  %22 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %22) #18
  %23 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %24 = bitcast %"class.sh::TIntermTyped"* %23 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %25, i64 31
  %27 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %26, align 8
  %28 = tail call dereferenceable(128) %"class.sh::TType"* %27(%"class.sh::TIntermTyped"* %23) #18
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %32 = bitcast %"class.sh::TIntermTyped"* %31 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %33 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, i64 31
  %35 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %34, align 8
  %36 = tail call dereferenceable(128) %"class.sh::TType"* %35(%"class.sh::TIntermTyped"* %31) #18
  %37 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %36, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = trunc i64 %21 to i8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 %30, i32 %38, i32 %13, i8 zeroext %39, i8 zeroext 1) #18
  %40 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 1
  %41 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %40, %"class.sh::TType"* nonnull dereferenceable(128) %2) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %22) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh12TIntermUnaryC2E9TOperatorPNS_12TIntermTypedEPKNS_9TFunctionE(%"class.sh::TIntermUnary"*, i32, %"class.sh::TIntermTyped"*, %"class.sh::TFunction"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.sh::TType", align 8
  %6 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 0, i32 0, i8 zeroext 1, i8 zeroext 1) #18
  %7 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 1
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #18
  %11 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 1
  store i32 %1, i32* %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermUnaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %2, %"class.sh::TIntermTyped"** %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 2
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 3
  store %"class.sh::TFunction"* %3, %"class.sh::TFunction"** %14, align 8
  call void @_ZN2sh12TIntermUnary7promoteEv(%"class.sh::TIntermUnary"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermBinaryC2E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i32, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #0 align 2 {
  %5 = alloca %"class.sh::TType", align 8
  %6 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 1, i32 0, i32 0, i8 zeroext 1, i8 zeroext 1) #18
  %7 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 16, i1 false) #18
  %9 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %10, %"class.sh::TType"* nonnull dereferenceable(128) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #18
  %11 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  store i32 %1, i32* %11, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermBinaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %2, %"class.sh::TIntermTyped"** %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %3, %"class.sh::TIntermTyped"** %13, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 4
  store i8 0, i8* %14, align 8
  call void @_ZN2sh13TIntermBinary7promoteEv(%"class.sh::TIntermBinary"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermBinary7promoteEv(%"class.sh::TIntermBinary"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = alloca %"class.sh::TType", align 8
  %4 = alloca %"class.sh::TType", align 8
  %5 = alloca %"class.sh::TType", align 8
  %6 = alloca %"class.sh::TType", align 8
  %7 = alloca %"class.sh::TType", align 8
  %8 = alloca %"class.sh::TType", align 8
  %9 = alloca %"class.sh::TType", align 8
  %10 = alloca %"class.sh::TType", align 8
  %11 = alloca %"class.sh::TType", align 8
  %12 = alloca %"class.sh::TType", align 8
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 30
  br i1 %15, label %16, label %26

; <label>:16:                                     ; preds = %1
  %17 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %18 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %17, align 8
  %19 = bitcast %"class.sh::TIntermTyped"* %18 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %20, i64 31
  %22 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %21, align 8
  %23 = tail call dereferenceable(128) %"class.sh::TType"* %22(%"class.sh::TIntermTyped"* %18) #18
  %24 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  %25 = tail call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %24, %"class.sh::TType"* nonnull dereferenceable(128) %23) #18
  br label %385

; <label>:26:                                     ; preds = %1
  %27 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %28 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %29 = bitcast %"class.sh::TIntermTyped"* %28 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, i64 31
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %31, align 8
  %33 = tail call dereferenceable(128) %"class.sh::TType"* %32(%"class.sh::TIntermTyped"* %28) #18
  %34 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  %35 = tail call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %33) #18
  %36 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %37 = bitcast %"class.sh::TIntermTyped"* %36 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %38 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %37, align 8
  %39 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %38, i64 31
  %40 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %39, align 8
  %41 = tail call dereferenceable(128) %"class.sh::TType"* %40(%"class.sh::TIntermTyped"* %36) #18
  %42 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %41, i64 0, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 2
  br i1 %44, label %45, label %56

; <label>:45:                                     ; preds = %26
  %46 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %47 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %46, align 8
  %48 = bitcast %"class.sh::TIntermTyped"* %47 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %49 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %48, align 8
  %50 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %49, i64 31
  %51 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %50, align 8
  %52 = tail call dereferenceable(128) %"class.sh::TType"* %51(%"class.sh::TIntermTyped"* %47) #18
  %53 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %52, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 2
  br i1 %55, label %58, label %56

; <label>:56:                                     ; preds = %45, %26
  %57 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 0, i32* %57, align 8
  br label %58

; <label>:58:                                     ; preds = %45, %56
  %59 = phi i32 [ 0, %56 ], [ 2, %45 ]
  %60 = load i32, i32* %13, align 8
  switch i32 %60, label %222 [
    i32 44, label %61
    i32 45, label %61
    i32 46, label %152
    i32 47, label %187
  ]

; <label>:61:                                     ; preds = %58, %58
  %62 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %63 = bitcast %"class.sh::TIntermTyped"* %62 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %64 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %63, align 8
  %65 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %64, i64 31
  %66 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %65, align 8
  %67 = tail call dereferenceable(128) %"class.sh::TType"* %66(%"class.sh::TIntermTyped"* %62) #18
  %68 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %67, i64 0, i32 8
  %69 = load %"class.sh::TVector"*, %"class.sh::TVector"** %68, align 8
  %70 = icmp eq %"class.sh::TVector"* %69, null
  br i1 %70, label %78, label %71

; <label>:71:                                     ; preds = %61
  %72 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %69, i64 0, i32 0, i32 0, i32 0
  %73 = load i32*, i32** %72, align 8
  %74 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %69, i64 0, i32 0, i32 0, i32 1
  %75 = load i32*, i32** %74, align 8
  %76 = icmp eq i32* %73, %75
  br i1 %76, label %78, label %77

; <label>:77:                                     ; preds = %71
  tail call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nonnull %34) #18
  br label %385

; <label>:78:                                     ; preds = %71, %61
  %79 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %80 = bitcast %"class.sh::TIntermTyped"* %79 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %81 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %80, align 8
  %82 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %81, i64 31
  %83 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %82, align 8
  %84 = tail call dereferenceable(128) %"class.sh::TType"* %83(%"class.sh::TIntermTyped"* %79) #18
  %85 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %84, i64 0, i32 6
  %86 = load i8, i8* %85, align 4
  %87 = icmp ugt i8 %86, 1
  %88 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %84, i64 0, i32 7
  %89 = load i8, i8* %88, align 1
  %90 = icmp ugt i8 %89, 1
  %91 = and i1 %87, %90
  br i1 %91, label %92, label %119

; <label>:92:                                     ; preds = %78
  %93 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %93) #18
  %94 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %95 = bitcast %"class.sh::TIntermTyped"* %94 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %96 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %95, align 8
  %97 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %96, i64 31
  %98 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %97, align 8
  %99 = tail call dereferenceable(128) %"class.sh::TType"* %98(%"class.sh::TIntermTyped"* %94) #18
  %100 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %99, i64 0, i32 0
  %101 = load i32, i32* %100, align 8
  %102 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %103 = bitcast %"class.sh::TIntermTyped"* %102 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %104 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %103, align 8
  %105 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %104, i64 31
  %106 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %105, align 8
  %107 = tail call dereferenceable(128) %"class.sh::TType"* %106(%"class.sh::TIntermTyped"* %102) #18
  %108 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %107, i64 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %111 = bitcast %"class.sh::TIntermTyped"* %110 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %112 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %111, align 8
  %113 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %112, i64 31
  %114 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %113, align 8
  %115 = tail call dereferenceable(128) %"class.sh::TType"* %114(%"class.sh::TIntermTyped"* %110) #18
  %116 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %115, i64 0, i32 7
  %117 = load i8, i8* %116, align 1
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %2, i32 %101, i32 %109, i32 %59, i8 zeroext %117, i8 zeroext 1) #18
  %118 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %2) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %93) #18
  br label %385

; <label>:119:                                    ; preds = %78
  %120 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %121 = bitcast %"class.sh::TIntermTyped"* %120 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %122 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %121, align 8
  %123 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %122, i64 31
  %124 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %123, align 8
  %125 = tail call dereferenceable(128) %"class.sh::TType"* %124(%"class.sh::TIntermTyped"* %120) #18
  %126 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %125, i64 0, i32 6
  %127 = load i8, i8* %126, align 4
  %128 = icmp ugt i8 %127, 1
  %129 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %125, i64 0, i32 7
  %130 = load i8, i8* %129, align 1
  %131 = icmp eq i8 %130, 1
  %132 = and i1 %128, %131
  br i1 %132, label %133, label %385

; <label>:133:                                    ; preds = %119
  %134 = bitcast %"class.sh::TType"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %134) #18
  %135 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %136 = bitcast %"class.sh::TIntermTyped"* %135 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %137 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %136, align 8
  %138 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %137, i64 31
  %139 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %138, align 8
  %140 = tail call dereferenceable(128) %"class.sh::TType"* %139(%"class.sh::TIntermTyped"* %135) #18
  %141 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %140, i64 0, i32 0
  %142 = load i32, i32* %141, align 8
  %143 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %144 = bitcast %"class.sh::TIntermTyped"* %143 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %145 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %144, align 8
  %146 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %145, i64 31
  %147 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %146, align 8
  %148 = tail call dereferenceable(128) %"class.sh::TType"* %147(%"class.sh::TIntermTyped"* %143) #18
  %149 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %148, i64 0, i32 1
  %150 = load i32, i32* %149, align 4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %3, i32 %142, i32 %150, i32 %59, i8 zeroext 1, i8 zeroext 1) #18
  %151 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %3) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %134) #18
  br label %385

; <label>:152:                                    ; preds = %58
  %153 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %154 = bitcast %"class.sh::TIntermTyped"* %153 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %155 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %154, align 8
  %156 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %155, i64 31
  %157 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %156, align 8
  %158 = tail call dereferenceable(128) %"class.sh::TType"* %157(%"class.sh::TIntermTyped"* %153) #18
  %159 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %158, i64 0, i32 10
  %160 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %159, align 8
  %161 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %160, i64 0, i32 1, i32 0
  %162 = load %"class.sh::TVector.1"*, %"class.sh::TVector.1"** %161, align 8
  %163 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %164 = bitcast %"class.sh::TIntermTyped"** %163 to %"class.sh::TIntermNode"**
  %165 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, align 8
  %166 = bitcast %"class.sh::TIntermNode"* %165 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %167 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %166, align 8
  %168 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %167, i64 5
  %169 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %168, align 8
  %170 = tail call %"class.sh::TIntermConstantUnion"* %169(%"class.sh::TIntermNode"* %165) #18
  %171 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %170, i64 0, i32 1
  %172 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %171, align 8
  %173 = icmp eq %"class.sh::TConstantUnion"* %172, null
  br i1 %173, label %177, label %174

; <label>:174:                                    ; preds = %152
  %175 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %172) #18
  %176 = sext i32 %175 to i64
  br label %177

; <label>:177:                                    ; preds = %152, %174
  %178 = phi i64 [ %176, %174 ], [ 0, %152 ]
  %179 = getelementptr inbounds %"class.sh::TVector.1", %"class.sh::TVector.1"* %162, i64 0, i32 0, i32 0, i32 0
  %180 = load %"class.sh::TField"**, %"class.sh::TField"*** %179, align 8
  %181 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %180, i64 %178
  %182 = load %"class.sh::TField"*, %"class.sh::TField"** %181, align 8
  %183 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %182, i64 0, i32 0
  %184 = load %"class.sh::TType"*, %"class.sh::TType"** %183, align 8
  %185 = tail call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %184) #18
  %186 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 %59, i32* %186, align 8
  br label %385

; <label>:187:                                    ; preds = %58
  %188 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %189 = bitcast %"class.sh::TIntermTyped"* %188 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %190 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %189, align 8
  %191 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %190, i64 31
  %192 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %191, align 8
  %193 = tail call dereferenceable(128) %"class.sh::TType"* %192(%"class.sh::TIntermTyped"* %188) #18
  %194 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %193, i64 0, i32 9
  %195 = load %"class.sh::TInterfaceBlock"*, %"class.sh::TInterfaceBlock"** %194, align 8
  %196 = getelementptr inbounds %"class.sh::TInterfaceBlock", %"class.sh::TInterfaceBlock"* %195, i64 0, i32 1, i32 0
  %197 = load %"class.sh::TVector.1"*, %"class.sh::TVector.1"** %196, align 8
  %198 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %199 = bitcast %"class.sh::TIntermTyped"** %198 to %"class.sh::TIntermNode"**
  %200 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %199, align 8
  %201 = bitcast %"class.sh::TIntermNode"* %200 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %202 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %201, align 8
  %203 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %202, i64 5
  %204 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %203, align 8
  %205 = tail call %"class.sh::TIntermConstantUnion"* %204(%"class.sh::TIntermNode"* %200) #18
  %206 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %205, i64 0, i32 1
  %207 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %206, align 8
  %208 = icmp eq %"class.sh::TConstantUnion"* %207, null
  br i1 %208, label %212, label %209

; <label>:209:                                    ; preds = %187
  %210 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %207) #18
  %211 = sext i32 %210 to i64
  br label %212

; <label>:212:                                    ; preds = %187, %209
  %213 = phi i64 [ %211, %209 ], [ 0, %187 ]
  %214 = getelementptr inbounds %"class.sh::TVector.1", %"class.sh::TVector.1"* %197, i64 0, i32 0, i32 0, i32 0
  %215 = load %"class.sh::TField"**, %"class.sh::TField"*** %214, align 8
  %216 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %215, i64 %213
  %217 = load %"class.sh::TField"*, %"class.sh::TField"** %216, align 8
  %218 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %217, i64 0, i32 0
  %219 = load %"class.sh::TType"*, %"class.sh::TType"** %218, align 8
  %220 = tail call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %219) #18
  %221 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i32 %59, i32* %221, align 8
  br label %385

; <label>:222:                                    ; preds = %58
  %223 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %224 = bitcast %"class.sh::TIntermTyped"* %223 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %225 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %224, align 8
  %226 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %225, i64 31
  %227 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %226, align 8
  %228 = tail call dereferenceable(128) %"class.sh::TType"* %227(%"class.sh::TIntermTyped"* %223) #18
  %229 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %228, i64 0, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %232 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %231, align 8
  %233 = bitcast %"class.sh::TIntermTyped"* %232 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %234 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %233, align 8
  %235 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %234, i64 31
  %236 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %235, align 8
  %237 = tail call dereferenceable(128) %"class.sh::TType"* %236(%"class.sh::TIntermTyped"* %232) #18
  %238 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %237, i64 0, i32 1
  %239 = load i32, i32* %238, align 4
  %240 = icmp sgt i32 %230, %239
  %241 = select i1 %240, i32 %230, i32 %239
  %242 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  store i32 %241, i32* %242, align 4
  %243 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %244 = bitcast %"class.sh::TIntermTyped"* %243 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %245 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %244, align 8
  %246 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %245, i64 31
  %247 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %246, align 8
  %248 = tail call dereferenceable(128) %"class.sh::TType"* %247(%"class.sh::TIntermTyped"* %243) #18
  %249 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %248, i64 0, i32 6
  %250 = load i8, i8* %249, align 4
  %251 = zext i8 %250 to i32
  %252 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %231, align 8
  %253 = bitcast %"class.sh::TIntermTyped"* %252 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %254 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %253, align 8
  %255 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %254, i64 31
  %256 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %255, align 8
  %257 = tail call dereferenceable(128) %"class.sh::TType"* %256(%"class.sh::TIntermTyped"* %252) #18
  %258 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %257, i64 0, i32 6
  %259 = load i8, i8* %258, align 4
  %260 = zext i8 %259 to i32
  %261 = icmp ult i32 %251, %260
  %262 = select i1 %261, i32 %260, i32 %251
  %263 = icmp eq i32 %262, 1
  br i1 %263, label %264, label %272

; <label>:264:                                    ; preds = %222
  %265 = load i32, i32* %13, align 8
  switch i32 %265, label %385 [
    i32 18, label %266
    i32 19, label %266
    i32 20, label %266
    i32 21, label %266
    i32 22, label %266
    i32 23, label %266
    i32 38, label %269
    i32 37, label %269
    i32 36, label %269
  ]

; <label>:266:                                    ; preds = %264, %264, %264, %264, %264, %264
  %267 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %267) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %4, i32 4, i32 0, i32 %59, i8 zeroext 1, i8 zeroext 1) #18
  %268 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %4) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %267) #18
  br label %385

; <label>:269:                                    ; preds = %264, %264, %264
  %270 = bitcast %"class.sh::TType"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %270) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %5, i32 4, i32 0, i32 %59, i8 zeroext 1, i8 zeroext 1) #18
  %271 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %5) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %270) #18
  br label %385

; <label>:272:                                    ; preds = %222
  %273 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %274 = bitcast %"class.sh::TIntermTyped"* %273 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %275 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %274, align 8
  %276 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %275, i64 31
  %277 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %276, align 8
  %278 = tail call dereferenceable(128) %"class.sh::TType"* %277(%"class.sh::TIntermTyped"* %273) #18
  %279 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %278, i64 0, i32 0
  %280 = load i32, i32* %279, align 8
  %281 = load i32, i32* %13, align 8
  switch i32 %281, label %385 [
    i32 23, label %382
    i32 34, label %282
    i32 33, label %315
    i32 35, label %326
    i32 31, label %345
    i32 32, label %349
    i32 22, label %382
    i32 21, label %382
    i32 20, label %382
    i32 19, label %382
    i32 18, label %382
    i32 152, label %360
    i32 151, label %360
    i32 13, label %360
    i32 14, label %360
    i32 16, label %360
    i32 17, label %360
    i32 39, label %360
    i32 40, label %360
    i32 41, label %360
    i32 42, label %360
    i32 43, label %360
    i32 139, label %360
    i32 140, label %360
    i32 146, label %360
    i32 147, label %360
    i32 148, label %360
    i32 149, label %360
    i32 150, label %360
  ]

; <label>:282:                                    ; preds = %272
  %283 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %231, align 8
  %284 = bitcast %"class.sh::TIntermTyped"* %283 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %285 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %284, align 8
  %286 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %285, i64 31
  %287 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %286, align 8
  %288 = tail call dereferenceable(128) %"class.sh::TType"* %287(%"class.sh::TIntermTyped"* %283) #18
  %289 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %288, i64 0, i32 6
  %290 = load i8, i8* %289, align 4
  %291 = icmp ugt i8 %290, 1
  %292 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %288, i64 0, i32 7
  %293 = load i8, i8* %292, align 1
  %294 = icmp ugt i8 %293, 1
  %295 = and i1 %291, %294
  br i1 %295, label %296, label %385

; <label>:296:                                    ; preds = %282
  %297 = bitcast %"class.sh::TType"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %297) #18
  %298 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %231, align 8
  %299 = bitcast %"class.sh::TIntermTyped"* %298 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %300 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %299, align 8
  %301 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %300, i64 31
  %302 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %301, align 8
  %303 = tail call dereferenceable(128) %"class.sh::TType"* %302(%"class.sh::TIntermTyped"* %298) #18
  %304 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %303, i64 0, i32 6
  %305 = load i8, i8* %304, align 4
  %306 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %231, align 8
  %307 = bitcast %"class.sh::TIntermTyped"* %306 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %308 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %307, align 8
  %309 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %308, i64 31
  %310 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %309, align 8
  %311 = tail call dereferenceable(128) %"class.sh::TType"* %310(%"class.sh::TIntermTyped"* %306) #18
  %312 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %311, i64 0, i32 7
  %313 = load i8, i8* %312, align 1
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %6, i32 %280, i32 %241, i32 %59, i8 zeroext %305, i8 zeroext %313) #18
  %314 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %6) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %297) #18
  br label %385

; <label>:315:                                    ; preds = %272
  %316 = bitcast %"class.sh::TType"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %316) #18
  %317 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %318 = bitcast %"class.sh::TIntermTyped"* %317 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %319 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %318, align 8
  %320 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %319, i64 31
  %321 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %320, align 8
  %322 = tail call dereferenceable(128) %"class.sh::TType"* %321(%"class.sh::TIntermTyped"* %317) #18
  %323 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %322, i64 0, i32 7
  %324 = load i8, i8* %323, align 1
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %7, i32 %280, i32 %241, i32 %59, i8 zeroext %324, i8 zeroext 1) #18
  %325 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %7) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %316) #18
  br label %385

; <label>:326:                                    ; preds = %272
  %327 = bitcast %"class.sh::TType"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %327) #18
  %328 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %231, align 8
  %329 = bitcast %"class.sh::TIntermTyped"* %328 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %330 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %329, align 8
  %331 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %330, i64 31
  %332 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %331, align 8
  %333 = tail call dereferenceable(128) %"class.sh::TType"* %332(%"class.sh::TIntermTyped"* %328) #18
  %334 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %333, i64 0, i32 6
  %335 = load i8, i8* %334, align 4
  %336 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %337 = bitcast %"class.sh::TIntermTyped"* %336 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %338 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %337, align 8
  %339 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %338, i64 31
  %340 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %339, align 8
  %341 = tail call dereferenceable(128) %"class.sh::TType"* %340(%"class.sh::TIntermTyped"* %336) #18
  %342 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %341, i64 0, i32 7
  %343 = load i8, i8* %342, align 1
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %8, i32 %280, i32 %241, i32 %59, i8 zeroext %335, i8 zeroext %343) #18
  %344 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %8) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %327) #18
  br label %385

; <label>:345:                                    ; preds = %272
  %346 = bitcast %"class.sh::TType"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %346) #18
  %347 = trunc i32 %262 to i8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %9, i32 %280, i32 %241, i32 %59, i8 zeroext %347, i8 zeroext 1) #18
  %348 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %9) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %346) #18
  br label %385

; <label>:349:                                    ; preds = %272
  %350 = bitcast %"class.sh::TType"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %350) #18
  %351 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %231, align 8
  %352 = bitcast %"class.sh::TIntermTyped"* %351 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %353 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %352, align 8
  %354 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %353, i64 31
  %355 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %354, align 8
  %356 = tail call dereferenceable(128) %"class.sh::TType"* %355(%"class.sh::TIntermTyped"* %351) #18
  %357 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %356, i64 0, i32 6
  %358 = load i8, i8* %357, align 4
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %10, i32 %280, i32 %241, i32 %59, i8 zeroext %358, i8 zeroext 1) #18
  %359 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %10) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %350) #18
  br label %385

; <label>:360:                                    ; preds = %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272
  %361 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %27, align 8
  %362 = bitcast %"class.sh::TIntermTyped"* %361 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %363 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %362, align 8
  %364 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %363, i64 31
  %365 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %364, align 8
  %366 = tail call dereferenceable(128) %"class.sh::TType"* %365(%"class.sh::TIntermTyped"* %361) #18
  %367 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %366, i64 0, i32 7
  %368 = load i8, i8* %367, align 1
  %369 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %231, align 8
  %370 = bitcast %"class.sh::TIntermTyped"* %369 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %371 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %370, align 8
  %372 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %371, i64 31
  %373 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %372, align 8
  %374 = tail call dereferenceable(128) %"class.sh::TType"* %373(%"class.sh::TIntermTyped"* %369) #18
  %375 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %374, i64 0, i32 7
  %376 = load i8, i8* %375, align 1
  %377 = icmp ult i8 %368, %376
  %378 = select i1 %377, i8 %376, i8 %368
  %379 = bitcast %"class.sh::TType"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %379) #18
  %380 = trunc i32 %262 to i8
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %11, i32 %280, i32 %241, i32 %59, i8 zeroext %380, i8 zeroext %378) #18
  %381 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %11) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %379) #18
  br label %385

; <label>:382:                                    ; preds = %272, %272, %272, %272, %272, %272
  %383 = bitcast %"class.sh::TType"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %383) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %12, i32 4, i32 0, i32 %59, i8 zeroext 1, i8 zeroext 1) #18
  %384 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %34, %"class.sh::TType"* nonnull dereferenceable(128) %12) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %383) #18
  br label %385

; <label>:385:                                    ; preds = %177, %212, %92, %119, %133, %77, %315, %326, %345, %349, %360, %382, %296, %282, %272, %266, %269, %264, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermBinary"* @_ZN2sh13TIntermBinary11CreateCommaEPNS_12TIntermTypedES2_i(%"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TType", align 8
  %5 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %6 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %5, i64 184) #18
  %7 = bitcast i8* %6 to %"class.sh::TIntermBinary"*
  %8 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #18
  call void @_ZN2sh5TTypeC1ENS_10TBasicTypeENS_10TPrecisionENS_10TQualifierEhh(%"class.sh::TType"* nonnull %4, i32 1, i32 0, i32 0, i8 zeroext 1, i8 zeroext 1) #18
  %9 = getelementptr inbounds i8, i8* %6, i64 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false) #18
  %10 = bitcast i8* %6 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 24
  %12 = bitcast i8* %11 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %12, %"class.sh::TType"* nonnull dereferenceable(128) %4) #18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #18
  %13 = getelementptr inbounds i8, i8* %6, i64 152
  %14 = bitcast i8* %13 to i32*
  store i32 30, i32* %14, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermBinaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %15 = getelementptr inbounds i8, i8* %6, i64 160
  %16 = bitcast i8* %15 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %0, %"class.sh::TIntermTyped"** %16, align 8
  %17 = getelementptr inbounds i8, i8* %6, i64 168
  %18 = bitcast i8* %17 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %18, align 8
  %19 = getelementptr inbounds i8, i8* %6, i64 176
  store i8 0, i8* %19, align 8
  call void @_ZN2sh13TIntermBinary7promoteEv(%"class.sh::TIntermBinary"* %7) #18
  %20 = icmp sgt i32 %2, 299
  br i1 %20, label %40, label %21

; <label>:21:                                     ; preds = %3
  %22 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %23 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %23, i64 31
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %24, align 8
  %26 = call dereferenceable(128) %"class.sh::TType"* %25(%"class.sh::TIntermTyped"* %0) #18
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %26, i64 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %30, label %40

; <label>:30:                                     ; preds = %21
  %31 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %32, i64 31
  %34 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %33, align 8
  %35 = call dereferenceable(128) %"class.sh::TType"* %34(%"class.sh::TIntermTyped"* %1) #18
  %36 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %35, i64 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 2
  %39 = select i1 %38, i32 2, i32 0
  br label %40

; <label>:40:                                     ; preds = %3, %21, %30
  %41 = phi i32 [ %39, %30 ], [ 0, %21 ], [ 0, %3 ]
  %42 = getelementptr inbounds i8, i8* %6, i64 32
  %43 = bitcast i8* %42 to i32*
  store i32 %41, i32* %43, align 8
  ret %"class.sh::TIntermBinary"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh13TIntermBinary17GetCommaQualifierEiPKNS_12TIntermTypedES3_(i32, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 align 2 {
  %4 = icmp sgt i32 %0, 299
  br i1 %4, label %24, label %5

; <label>:5:                                      ; preds = %3
  %6 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, i64 31
  %9 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %8, align 8
  %10 = tail call dereferenceable(128) %"class.sh::TType"* %9(%"class.sh::TIntermTyped"* %1) #18
  %11 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 2
  br i1 %13, label %14, label %24

; <label>:14:                                     ; preds = %5
  %15 = bitcast %"class.sh::TIntermTyped"* %2 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %16 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %15, align 8
  %17 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %16, i64 31
  %18 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %17, align 8
  %19 = tail call dereferenceable(128) %"class.sh::TType"* %18(%"class.sh::TIntermTyped"* %2) #18
  %20 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %19, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 2
  %23 = select i1 %22, i32 2, i32 0
  ret i32 %23

; <label>:24:                                     ; preds = %3, %5
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh27TIntermInvariantDeclarationC2EPNS_13TIntermSymbolERKNS_10TSourceLocE(%"class.sh::TIntermInvariantDeclaration"* nocapture, %"class.sh::TIntermSymbol"*, %"struct.sh::TSourceLoc"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermInvariantDeclaration", %"class.sh::TIntermInvariantDeclaration"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.sh::TIntermInvariantDeclaration", %"class.sh::TIntermInvariantDeclaration"* %0, i64 0, i32 0, i32 1, i32 0
  %6 = bitcast i32* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh27TIntermInvariantDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermInvariantDeclaration", %"class.sh::TIntermInvariantDeclaration"* %0, i64 0, i32 1
  store %"class.sh::TIntermSymbol"* %1, %"class.sh::TIntermSymbol"** %7, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermInvariantDeclaration", %"class.sh::TIntermInvariantDeclaration"* %0, i64 0, i32 0, i32 1
  %9 = bitcast %"struct.sh::TSourceLoc"* %8 to i8*
  %10 = bitcast %"struct.sh::TSourceLoc"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* nonnull align 4 %10, i64 16, i1 false) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermTernaryC2EPNS_12TIntermTypedES2_S2_(%"class.sh::TIntermTernary"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #0 align 2 {
  %5 = bitcast %"class.sh::TIntermTyped"* %2 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, i64 31
  %8 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call dereferenceable(128) %"class.sh::TType"* %8(%"class.sh::TIntermTyped"* %2) #18
  %10 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = bitcast i32* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 16, i1 false) #18
  %12 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %13, %"class.sh::TType"* nonnull dereferenceable(128) %9) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh14TIntermTernaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %14, align 8
  %15 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  store %"class.sh::TIntermTyped"* %2, %"class.sh::TIntermTyped"** %15, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %3, %"class.sh::TIntermTyped"** %16, align 8
  %17 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %18 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, i64 31
  %20 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %19, align 8
  %21 = tail call dereferenceable(128) %"class.sh::TType"* %20(%"class.sh::TIntermTyped"* %1) #18
  %22 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %21, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %42

; <label>:25:                                     ; preds = %4
  %26 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %27 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %26, i64 31
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %27, align 8
  %29 = tail call dereferenceable(128) %"class.sh::TType"* %28(%"class.sh::TIntermTyped"* nonnull %2) #18
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 2
  br i1 %32, label %33, label %42

; <label>:33:                                     ; preds = %25
  %34 = bitcast %"class.sh::TIntermTyped"* %3 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %35 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %34, align 8
  %36 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %35, i64 31
  %37 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %36, align 8
  %38 = tail call dereferenceable(128) %"class.sh::TType"* %37(%"class.sh::TIntermTyped"* %3) #18
  %39 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %38, i64 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 2
  br i1 %41, label %43, label %42

; <label>:42:                                     ; preds = %33, %25, %4
  br label %43

; <label>:43:                                     ; preds = %33, %42
  %44 = phi i32 [ 0, %42 ], [ 2, %33 ]
  %45 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 1, i32 2
  store i32 %44, i32* %45, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2sh14TIntermTernary18DetermineQualifierEPNS_12TIntermTypedES2_S2_(%"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.sh::TIntermTyped"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(128) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %0) #18
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 2
  br i1 %11, label %12, label %30

; <label>:12:                                     ; preds = %3
  %13 = bitcast %"class.sh::TIntermTyped"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %14 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %14, i64 31
  %16 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %15, align 8
  %17 = tail call dereferenceable(128) %"class.sh::TType"* %16(%"class.sh::TIntermTyped"* %1) #18
  %18 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %17, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %21, label %30

; <label>:21:                                     ; preds = %12
  %22 = bitcast %"class.sh::TIntermTyped"* %2 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %23 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %22, align 8
  %24 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %23, i64 31
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %24, align 8
  %26 = tail call dereferenceable(128) %"class.sh::TType"* %25(%"class.sh::TIntermTyped"* %2) #18
  %27 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %26, i64 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %31, label %30

; <label>:30:                                     ; preds = %21, %12, %3
  br label %31

; <label>:31:                                     ; preds = %21, %30
  %32 = phi i32 [ 0, %30 ], [ 2, %21 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TIntermLoopC2ENS_9TLoopTypeEPNS_11TIntermNodeEPNS_12TIntermTypedES5_PNS_12TIntermBlockE(%"class.sh::TIntermLoop"* nocapture, i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 0, i32 1, i32 0
  %9 = bitcast i32* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh11TIntermLoopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 1
  store i32 %1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 2
  store %"class.sh::TIntermNode"* %2, %"class.sh::TIntermNode"** %11, align 8
  %12 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 3
  store %"class.sh::TIntermTyped"* %3, %"class.sh::TIntermTyped"** %12, align 8
  %13 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 4
  store %"class.sh::TIntermTyped"* %4, %"class.sh::TIntermTyped"** %13, align 8
  %14 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %0, i64 0, i32 5
  store %"class.sh::TIntermBlock"* %5, %"class.sh::TIntermBlock"** %14, align 8
  %15 = icmp eq %"class.sh::TIntermNode"* %2, null
  br i1 %15, label %41, label %16

; <label>:16:                                     ; preds = %6
  %17 = bitcast %"class.sh::TIntermNode"* %2 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %18 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %17, align 8
  %19 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %18, i64 11
  %20 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %19, align 8
  %21 = tail call %"class.sh::TIntermDeclaration"* %20(%"class.sh::TIntermNode"* nonnull %2) #18
  %22 = icmp eq %"class.sh::TIntermDeclaration"* %21, null
  br i1 %22, label %41, label %23

; <label>:23:                                     ; preds = %16
  %24 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %11, align 8
  %25 = bitcast %"class.sh::TIntermNode"* %24 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %26 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %26, i64 11
  %28 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %27, align 8
  %29 = tail call %"class.sh::TIntermDeclaration"* %28(%"class.sh::TIntermNode"* %24) #18
  %30 = bitcast %"class.sh::TIntermDeclaration"* %29 to %"class.sh::TVector.15"* (%"class.sh::TIntermDeclaration"*)***
  %31 = load %"class.sh::TVector.15"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermDeclaration"*)*** %30, align 8
  %32 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermDeclaration"*)** %31, i64 26
  %33 = load %"class.sh::TVector.15"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermDeclaration"*)** %32, align 8
  %34 = tail call %"class.sh::TVector.15"* %33(%"class.sh::TIntermDeclaration"* %29) #18
  %35 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %35, align 8
  %37 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %34, i64 0, i32 0, i32 0, i32 1
  %38 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %37, align 8
  %39 = icmp eq %"class.sh::TIntermNode"** %36, %38
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %23
  store %"class.sh::TIntermNode"* null, %"class.sh::TIntermNode"** %11, align 8
  br label %41

; <label>:41:                                     ; preds = %16, %6, %40, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermIfElseC2EPNS_12TIntermTypedEPNS_12TIntermBlockES4_(%"class.sh::TIntermIfElse"* nocapture, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 0, i32 1, i32 0
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh13TIntermIfElseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %8, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 2
  store %"class.sh::TIntermBlock"* %2, %"class.sh::TIntermBlock"** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermIfElse", %"class.sh::TIntermIfElse"* %0, i64 0, i32 3
  store %"class.sh::TIntermBlock"* %3, %"class.sh::TIntermBlock"** %10, align 8
  %11 = icmp eq %"class.sh::TIntermBlock"* %3, null
  br i1 %11, label %24, label %12

; <label>:12:                                     ; preds = %4
  %13 = bitcast %"class.sh::TIntermBlock"* %3 to %"class.sh::TVector.15"* (%"class.sh::TIntermBlock"*)***
  %14 = load %"class.sh::TVector.15"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermBlock"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermBlock"*)** %14, i64 26
  %16 = load %"class.sh::TVector.15"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermBlock"*)** %15, align 8
  %17 = tail call %"class.sh::TVector.15"* %16(%"class.sh::TIntermBlock"* nonnull %3) #18
  %18 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %17, i64 0, i32 0, i32 0, i32 1
  %21 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %20, align 8
  %22 = icmp eq %"class.sh::TIntermNode"** %19, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %12
  store %"class.sh::TIntermBlock"* null, %"class.sh::TIntermBlock"** %10, align 8
  br label %24

; <label>:24:                                     ; preds = %4, %23, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermSwitchC2EPNS_12TIntermTypedEPNS_12TIntermBlockE(%"class.sh::TIntermSwitch"* nocapture, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 0, i32 1, i32 0
  %6 = bitcast i32* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh13TIntermSwitchE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 1
  store %"class.sh::TIntermTyped"* %1, %"class.sh::TIntermTyped"** %7, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  store %"class.sh::TIntermBlock"* %2, %"class.sh::TIntermBlock"** %8, align 8
  ret void
}

; Function Attrs: norecurse nounwind ssp uwtable
define hidden void @_ZN2sh13TIntermSwitch16setStatementListEPNS_12TIntermBlockE(%"class.sh::TIntermSwitch"* nocapture, %"class.sh::TIntermBlock"*) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwitch", %"class.sh::TIntermSwitch"* %0, i64 0, i32 2
  store %"class.sh::TIntermBlock"* %1, %"class.sh::TIntermBlock"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh14TIntermTernary4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermTernary"* readonly, %"class.sh::TDiagnostics"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 1
  %4 = bitcast %"class.sh::TIntermTyped"** %3 to %"class.sh::TIntermNode"**
  %5 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  %6 = bitcast %"class.sh::TIntermNode"* %5 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %7 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %7, i64 5
  %9 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %8, align 8
  %10 = tail call %"class.sh::TIntermConstantUnion"* %9(%"class.sh::TIntermNode"* %5) #18
  %11 = icmp eq %"class.sh::TIntermConstantUnion"* %10, null
  br i1 %11, label %30, label %12

; <label>:12:                                     ; preds = %2
  %13 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %4, align 8
  %14 = bitcast %"class.sh::TIntermNode"* %13 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %15 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %15, i64 5
  %17 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %16, align 8
  %18 = tail call %"class.sh::TIntermConstantUnion"* %17(%"class.sh::TIntermNode"* %13) #18
  %19 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %18, i64 0, i32 1
  %20 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %19, align 8
  %21 = icmp eq %"class.sh::TConstantUnion"* %20, null
  br i1 %21, label %27, label %22

; <label>:22:                                     ; preds = %12
  %23 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* nonnull %20) #18
  br i1 %23, label %24, label %27

; <label>:24:                                     ; preds = %22
  %25 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 2
  %26 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %25, align 8
  br label %32

; <label>:27:                                     ; preds = %12, %22
  %28 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 3
  %29 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %28, align 8
  br label %32

; <label>:30:                                     ; preds = %2
  %31 = getelementptr inbounds %"class.sh::TIntermTernary", %"class.sh::TIntermTernary"* %0, i64 0, i32 0, i32 0
  br label %32

; <label>:32:                                     ; preds = %30, %27, %24
  %33 = phi %"class.sh::TIntermTyped"* [ %26, %24 ], [ %29, %27 ], [ %31, %30 ]
  ret %"class.sh::TIntermTyped"* %33
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh14TIntermSwizzle19hasDuplicateOffsetsEv(%"class.sh::TIntermSwizzle"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = alloca [4 x i32], align 16
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8, !range !33
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %26

; <label>:6:                                      ; preds = %1
  %7 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 16, i1 false)
  %8 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = icmp eq i32* %9, %11
  br i1 %12, label %24, label %15

; <label>:13:                                     ; preds = %15
  %14 = icmp eq i32* %23, %11
  br i1 %14, label %24, label %15

; <label>:15:                                     ; preds = %6, %13
  %16 = phi i32* [ %23, %13 ], [ %9, %6 ]
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = icmp slt i32 %20, 1
  %23 = getelementptr inbounds i32, i32* %16, i64 1
  br i1 %22, label %13, label %24

; <label>:24:                                     ; preds = %15, %13, %6
  %25 = phi i1 [ false, %6 ], [ false, %13 ], [ true, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #18
  br label %26

; <label>:26:                                     ; preds = %1, %24
  %27 = phi i1 [ %25, %24 ], [ true, %1 ]
  ret i1 %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #2

; Function Attrs: norecurse nounwind ssp uwtable
define hidden void @_ZN2sh14TIntermSwizzle28setHasFoldedDuplicateOffsetsEb(%"class.sh::TIntermSwizzle"* nocapture, i1 zeroext) local_unnamed_addr #6 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 3
  store i8 %3, i8* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2sh14TIntermSwizzle12offsetsMatchEi(%"class.sh::TIntermSwizzle"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %5 = bitcast i32** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.24"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = icmp eq i64 %9, 4
  br i1 %10, label %11, label %15

; <label>:11:                                     ; preds = %2
  %12 = inttoptr i64 %8 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, %1
  br label %15

; <label>:15:                                     ; preds = %11, %2
  %16 = phi i1 [ false, %2 ], [ %14, %11 ]
  ret i1 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh14TIntermSwizzle18writeOffsetsAsXYZWEPNS_13TInfoSinkBaseE(%"class.sh::TIntermSwizzle"* nocapture readonly, %"class.sh::TInfoSinkBase"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  br i1 %7, label %10, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %1, i64 0, i32 0
  br label %11

; <label>:10:                                     ; preds = %22, %2
  ret void

; <label>:11:                                     ; preds = %8, %22
  %12 = phi i32* [ %4, %8 ], [ %23, %22 ]
  %13 = load i32, i32* %12, align 4
  switch i32 %13, label %22 [
    i32 0, label %14
    i32 1, label %16
    i32 2, label %18
    i32 3, label %20
  ]

; <label>:14:                                     ; preds = %11
  %15 = tail call dereferenceable(24) %"class.std::__1::basic_string.33"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.33"* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #18
  br label %22

; <label>:16:                                     ; preds = %11
  %17 = tail call dereferenceable(24) %"class.std::__1::basic_string.33"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.33"* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #18
  br label %22

; <label>:18:                                     ; preds = %11
  %19 = tail call dereferenceable(24) %"class.std::__1::basic_string.33"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.33"* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #18
  br label %22

; <label>:20:                                     ; preds = %11
  %21 = tail call dereferenceable(24) %"class.std::__1::basic_string.33"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.33"* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #18
  br label %22

; <label>:22:                                     ; preds = %11, %20, %18, %16, %14
  %23 = getelementptr inbounds i32, i32* %12, i64 1
  %24 = icmp eq i32* %23, %6
  br i1 %24, label %10, label %11
}

declare void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK2sh20TIntermConstantUnion16hasConstantValueEv(%"class.sh::TIntermConstantUnion"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZNK2sh20TIntermConstantUnion16getConstantValueEv(%"class.sh::TIntermConstantUnion"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 1
  %3 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %2, align 8
  ret %"class.sh::TConstantUnion"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion12FoldIndexingERKNS_5TTypeEPKNS_14TConstantUnionEi(%"class.sh::TType"* dereferenceable(128), %"class.sh::TConstantUnion"* readnone, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TType", align 8
  %5 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 8
  %6 = load %"class.sh::TVector"*, %"class.sh::TVector"** %5, align 8
  %7 = icmp eq %"class.sh::TVector"* %6, null
  br i1 %7, label %20, label %8

; <label>:8:                                      ; preds = %3
  %9 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  %12 = load i32*, i32** %11, align 8
  %13 = icmp eq i32* %10, %12
  br i1 %13, label %20, label %14

; <label>:14:                                     ; preds = %8
  %15 = bitcast %"class.sh::TType"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %15) #18
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %4, %"class.sh::TType"* nonnull dereferenceable(128) %0) #18
  call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nonnull %4) #18
  %16 = call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %4) #18
  %17 = sext i32 %2 to i64
  %18 = mul i64 %16, %17
  %19 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %18
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %15) #18
  br label %38

; <label>:20:                                     ; preds = %8, %3
  %21 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 6
  %22 = load i8, i8* %21, align 4
  %23 = icmp ugt i8 %22, 1
  br i1 %23, label %24, label %38

; <label>:24:                                     ; preds = %20
  %25 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %0, i64 0, i32 7
  %26 = load i8, i8* %25, align 1
  %27 = icmp ugt i8 %26, 1
  br i1 %27, label %28, label %33

; <label>:28:                                     ; preds = %24
  %29 = zext i8 %26 to i32
  %30 = mul nsw i32 %29, %2
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %31
  br label %38

; <label>:33:                                     ; preds = %24
  %34 = icmp eq i8 %26, 1
  br i1 %34, label %35, label %38

; <label>:35:                                     ; preds = %33
  %36 = sext i32 %2 to i64
  %37 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %36
  br label %38

; <label>:38:                                     ; preds = %20, %33, %35, %28, %14
  %39 = phi %"class.sh::TConstantUnion"* [ %19, %14 ], [ %32, %28 ], [ %37, %35 ], [ null, %33 ], [ null, %20 ]
  ret %"class.sh::TConstantUnion"* %39
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh14TIntermSwizzle4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermSwizzle"*, %"class.sh::TDiagnostics"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::TType", align 8
  %4 = alloca [4 x i32], align 16
  %5 = alloca %"class.sh::TVector.23", align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 1
  %7 = bitcast %"class.sh::TIntermTyped"** %6 to %"class.sh::TIntermNode"**
  %8 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %7, align 8
  %9 = bitcast %"class.sh::TIntermNode"* %8 to %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)***
  %10 = load %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)** %10, i64 12
  %12 = load %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSwizzle"* (%"class.sh::TIntermNode"*)** %11, align 8
  %13 = tail call %"class.sh::TIntermSwizzle"* %12(%"class.sh::TIntermNode"* %8) #18
  %14 = icmp eq %"class.sh::TIntermSwizzle"* %13, null
  br i1 %14, label %102, label %15

; <label>:15:                                     ; preds = %2
  %16 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 3
  %17 = load i8, i8* %16, align 8, !range !33
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %39

; <label>:19:                                     ; preds = %15
  %20 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 16, i1 false) #18
  %21 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 2, i32 0, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 2, i32 0, i32 0, i32 1
  %24 = load i32*, i32** %23, align 8
  %25 = icmp eq i32* %22, %24
  br i1 %25, label %37, label %28

; <label>:26:                                     ; preds = %28
  %27 = icmp eq i32* %36, %24
  br i1 %27, label %37, label %28

; <label>:28:                                     ; preds = %19, %26
  %29 = phi i32* [ %36, %26 ], [ %22, %19 ]
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %32, align 4
  %35 = icmp slt i32 %33, 1
  %36 = getelementptr inbounds i32, i32* %29, i64 1
  br i1 %35, label %26, label %37

; <label>:37:                                     ; preds = %28, %26, %19
  %38 = phi i8 [ 0, %19 ], [ 1, %28 ], [ 0, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #18
  br label %39

; <label>:39:                                     ; preds = %15, %37
  %40 = phi i8 [ %38, %37 ], [ 1, %15 ]
  %41 = bitcast %"class.sh::TVector.23"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 24, i1 false) #18
  %42 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %45 = load i32*, i32** %44, align 8
  %46 = icmp eq i32* %43, %45
  br i1 %46, label %52, label %47

; <label>:47:                                     ; preds = %39
  %48 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 2, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %5, i64 0, i32 0, i32 0, i32 1
  %50 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %51 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %5, i64 0, i32 0
  br label %82

; <label>:52:                                     ; preds = %96, %39
  %53 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 2
  %54 = icmp eq %"class.sh::TVector.23"* %53, %5
  br i1 %54, label %55, label %57

; <label>:55:                                     ; preds = %52
  %56 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %5, i64 0, i32 0, i32 0, i32 0
  br label %63

; <label>:57:                                     ; preds = %52
  %58 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %53, i64 0, i32 0
  %59 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %5, i64 0, i32 0, i32 0, i32 0
  %60 = load i32*, i32** %59, align 8
  %61 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %5, i64 0, i32 0, i32 0, i32 1
  %62 = load i32*, i32** %61, align 8
  call void @_ZNSt3__16vectorIi14pool_allocatorIiEE6assignIPiEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.24"* nonnull %58, i32* %60, i32* %62) #18
  br label %63

; <label>:63:                                     ; preds = %55, %57
  %64 = phi i32** [ %56, %55 ], [ %59, %57 ]
  %65 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0
  %66 = bitcast %"class.sh::TIntermSwizzle"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %67 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %66, align 8
  %68 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %67, i64 31
  %69 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %68, align 8
  %70 = call dereferenceable(128) %"class.sh::TType"* %69(%"class.sh::TIntermExpression"* %65) #18
  %71 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 0, i32 1
  %72 = call dereferenceable(128) %"class.sh::TType"* @_ZN2sh5TTypeaSERKS0_(%"class.sh::TType"* nonnull %71, %"class.sh::TType"* nonnull dereferenceable(128) %70) #18
  %73 = and i8 %40, 1
  store i8 %73, i8* %16, align 8
  %74 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %13, i64 0, i32 0, i32 0
  %75 = load i32*, i32** %64, align 8
  %76 = icmp eq i32* %75, null
  br i1 %76, label %81, label %77

; <label>:77:                                     ; preds = %63
  %78 = ptrtoint i32* %75 to i64
  %79 = getelementptr inbounds %"class.sh::TVector.23", %"class.sh::TVector.23"* %5, i64 0, i32 0, i32 0, i32 1
  %80 = bitcast i32** %79 to i64*
  store i64 %78, i64* %80, align 8
  br label %81

; <label>:81:                                     ; preds = %63, %77
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #18
  br label %221

; <label>:82:                                     ; preds = %99, %47
  %83 = phi i32* [ null, %47 ], [ %101, %99 ]
  %84 = phi i32* [ null, %47 ], [ %100, %99 ]
  %85 = phi i32* [ %43, %47 ], [ %97, %99 ]
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = load i32*, i32** %48, align 8
  %89 = getelementptr inbounds i32, i32* %88, i64 %87
  %90 = icmp eq i32* %84, %83
  br i1 %90, label %95, label %91

; <label>:91:                                     ; preds = %82
  %92 = load i32, i32* %89, align 4
  store i32 %92, i32* %84, align 4
  %93 = load i32*, i32** %49, align 8
  %94 = getelementptr inbounds i32, i32* %93, i64 1
  store i32* %94, i32** %49, align 8
  br label %96

; <label>:95:                                     ; preds = %82
  call void @_ZNSt3__16vectorIi14pool_allocatorIiEE21__push_back_slow_pathIRKiEEvOT_(%"class.std::__1::vector.24"* nonnull %51, i32* nonnull dereferenceable(4) %89) #18
  br label %96

; <label>:96:                                     ; preds = %91, %95
  %97 = getelementptr inbounds i32, i32* %85, i64 1
  %98 = icmp eq i32* %97, %45
  br i1 %98, label %52, label %99

; <label>:99:                                     ; preds = %96
  %100 = load i32*, i32** %49, align 8
  %101 = load i32*, i32** %50, align 8
  br label %82

; <label>:102:                                    ; preds = %2
  %103 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %7, align 8
  %104 = bitcast %"class.sh::TIntermNode"* %103 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %105 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %104, align 8
  %106 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %105, i64 5
  %107 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %106, align 8
  %108 = tail call %"class.sh::TIntermConstantUnion"* %107(%"class.sh::TIntermNode"* %103) #18
  %109 = icmp eq %"class.sh::TIntermConstantUnion"* %108, null
  br i1 %109, label %110, label %112

; <label>:110:                                    ; preds = %102
  %111 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0
  br label %221

; <label>:112:                                    ; preds = %102
  %113 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0
  %114 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %115 = bitcast i32** %114 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = bitcast %"class.std::__1::vector.24"* %113 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = sub i64 %116, %118
  %120 = ashr exact i64 %119, 2
  %121 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %120, i64 8)
  %122 = extractvalue { i64, i1 } %121, 1
  %123 = extractvalue { i64, i1 } %121, 0
  %124 = select i1 %122, i64 -1, i64 %123
  %125 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %126 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %125, i64 %124) #18
  %127 = bitcast i8* %126 to %"class.sh::TConstantUnion"*
  %128 = icmp eq i64 %119, 0
  br i1 %128, label %135, label %129

; <label>:129:                                    ; preds = %112
  %130 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %127, i64 %120
  br label %131

; <label>:131:                                    ; preds = %131, %129
  %132 = phi %"class.sh::TConstantUnion"* [ %127, %129 ], [ %133, %131 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %132) #18
  %133 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %132, i64 1
  %134 = icmp eq %"class.sh::TConstantUnion"* %133, %130
  br i1 %134, label %135, label %131

; <label>:135:                                    ; preds = %131, %112
  %136 = load i64, i64* %115, align 8
  %137 = load i64, i64* %117, align 8
  %138 = icmp eq i64 %136, %137
  br i1 %138, label %144, label %139

; <label>:139:                                    ; preds = %135
  %140 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %108, i64 0, i32 0
  %141 = bitcast %"class.sh::TIntermConstantUnion"* %108 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %142 = bitcast %"class.sh::TIntermConstantUnion"* %108 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)***
  %143 = bitcast %"class.sh::TType"* %3 to i8*
  br label %162

; <label>:144:                                    ; preds = %209, %135
  %145 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0
  %146 = call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %147 = call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %146, i64 160) #18
  %148 = bitcast %"class.sh::TIntermSwizzle"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %149 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %148, align 8
  %150 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %149, i64 31
  %151 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %150, align 8
  %152 = call dereferenceable(128) %"class.sh::TType"* %151(%"class.sh::TIntermTyped"* %145) #18
  %153 = getelementptr inbounds i8, i8* %147, i64 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %153, i8 0, i64 16, i1 false) #18
  %154 = bitcast i8* %147 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %154, align 8
  %155 = getelementptr inbounds i8, i8* %147, i64 24
  %156 = bitcast i8* %155 to %"class.sh::TType"*
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %156, %"class.sh::TType"* nonnull dereferenceable(128) %152) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %154, align 8
  %157 = getelementptr inbounds i8, i8* %147, i64 152
  %158 = bitcast i8* %157 to i8**
  store i8* %126, i8** %158, align 8
  %159 = bitcast i8* %147 to %"class.sh::TIntermTyped"*
  %160 = getelementptr inbounds %"class.sh::TIntermSwizzle", %"class.sh::TIntermSwizzle"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %161 = bitcast %"struct.sh::TSourceLoc"* %160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %153, i8* nonnull align 4 %161, i64 16, i1 false) #18
  br label %221

; <label>:162:                                    ; preds = %139, %209
  %163 = phi i64 [ 0, %139 ], [ %215, %209 ]
  %164 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %141, align 8
  %165 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %164, i64 31
  %166 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %165, align 8
  %167 = call dereferenceable(128) %"class.sh::TType"* %166(%"class.sh::TIntermExpression"* nonnull %140) #18
  %168 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*** %142, align 8
  %169 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %168, i64 29
  %170 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %169, align 8
  %171 = call %"class.sh::TConstantUnion"* %170(%"class.sh::TIntermConstantUnion"* nonnull %108) #18
  %172 = load i64, i64* %115, align 8
  %173 = load i64, i64* %117, align 8
  %174 = sub i64 %172, %173
  %175 = ashr exact i64 %174, 2
  %176 = icmp ugt i64 %175, %163
  br i1 %176, label %179, label %177

; <label>:177:                                    ; preds = %162
  %178 = bitcast %"class.std::__1::vector.24"* %113 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* nonnull %178) #12
  unreachable

; <label>:179:                                    ; preds = %162
  %180 = inttoptr i64 %173 to i32*
  %181 = getelementptr inbounds i32, i32* %180, i64 %163
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %167, i64 0, i32 8
  %184 = load %"class.sh::TVector"*, %"class.sh::TVector"** %183, align 8
  %185 = icmp eq %"class.sh::TVector"* %184, null
  br i1 %185, label %197, label %186

; <label>:186:                                    ; preds = %179
  %187 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %184, i64 0, i32 0, i32 0, i32 0
  %188 = load i32*, i32** %187, align 8
  %189 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %184, i64 0, i32 0, i32 0, i32 1
  %190 = load i32*, i32** %189, align 8
  %191 = icmp eq i32* %188, %190
  br i1 %191, label %197, label %192

; <label>:192:                                    ; preds = %186
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %143) #18
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %3, %"class.sh::TType"* nonnull dereferenceable(128) %167) #18
  call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nonnull %3) #18
  %193 = call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %3) #18
  %194 = sext i32 %182 to i64
  %195 = mul i64 %193, %194
  %196 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %171, i64 %195
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %143) #18
  br label %209

; <label>:197:                                    ; preds = %186, %179
  %198 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %167, i64 0, i32 7
  %199 = load i8, i8* %198, align 1
  %200 = icmp ugt i8 %199, 1
  br i1 %200, label %201, label %206

; <label>:201:                                    ; preds = %197
  %202 = zext i8 %199 to i32
  %203 = mul nsw i32 %182, %202
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %171, i64 %204
  br label %209

; <label>:206:                                    ; preds = %197
  %207 = sext i32 %182 to i64
  %208 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %171, i64 %207
  br label %209

; <label>:209:                                    ; preds = %192, %201, %206
  %210 = phi %"class.sh::TConstantUnion"* [ %196, %192 ], [ %205, %201 ], [ %208, %206 ]
  %211 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %127, i64 %163
  %212 = bitcast %"class.sh::TConstantUnion"* %210 to i64*
  %213 = bitcast %"class.sh::TConstantUnion"* %211 to i64*
  %214 = load i64, i64* %212, align 4
  store i64 %214, i64* %213, align 4
  %215 = add nuw i64 %163, 1
  %216 = load i64, i64* %115, align 8
  %217 = load i64, i64* %117, align 8
  %218 = sub i64 %216, %217
  %219 = ashr exact i64 %218, 2
  %220 = icmp ult i64 %215, %219
  br i1 %220, label %162, label %144

; <label>:221:                                    ; preds = %110, %144, %81
  %222 = phi %"class.sh::TIntermTyped"* [ %74, %81 ], [ %111, %110 ], [ %159, %144 ]
  ret %"class.sh::TIntermTyped"* %222
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh13TIntermBinary4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermBinary"*, %"class.sh::TDiagnostics"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %4 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %5 = bitcast %"class.sh::TIntermTyped"* %4 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %6 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %6, i64 29
  %8 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %7, align 8
  %9 = tail call %"class.sh::TConstantUnion"* %8(%"class.sh::TIntermTyped"* %4) #18
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  switch i32 %11, label %136 [
    i32 30, label %12
    i32 44, label %24
    i32 46, label %24
    i32 45, label %134
    i32 47, label %134
    i32 138, label %134
  ]

; <label>:12:                                     ; preds = %2
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %14 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %13, align 8
  %15 = bitcast %"class.sh::TIntermTyped"* %14 to i1 (%"class.sh::TIntermTyped"*)***
  %16 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %16, i64 30
  %18 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %17, align 8
  %19 = tail call zeroext i1 %18(%"class.sh::TIntermTyped"* %14) #18
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %12
  %21 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %188

; <label>:22:                                     ; preds = %12
  %23 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  br label %188

; <label>:24:                                     ; preds = %2, %2
  %25 = icmp eq %"class.sh::TConstantUnion"* %9, null
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %24
  %27 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %188

; <label>:28:                                     ; preds = %24
  %29 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %9) #18
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %32 = bitcast %"class.sh::TIntermTyped"** %31 to %"class.sh::TIntermNode"**
  %33 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %32, align 8
  %34 = bitcast %"class.sh::TIntermNode"* %33 to %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)***
  %35 = load %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*** %34, align 8
  %36 = getelementptr inbounds %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)** %35, i64 7
  %37 = load %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)** %36, align 8
  %38 = tail call %"class.sh::TIntermAggregate"* %37(%"class.sh::TIntermNode"* %33) #18
  %39 = icmp eq %"class.sh::TIntermAggregate"* %38, null
  br i1 %39, label %91, label %40

; <label>:40:                                     ; preds = %28
  %41 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %38, i64 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 136
  br i1 %43, label %44, label %91

; <label>:44:                                     ; preds = %40
  %45 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %38, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.sh::TIntermAggregate"* %38 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %47 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %46, align 8
  %48 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %47, i64 31
  %49 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %48, align 8
  %50 = tail call dereferenceable(128) %"class.sh::TType"* %49(%"class.sh::TIntermTyped"* nonnull %45) #18
  %51 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %50, i64 0, i32 8
  %52 = load %"class.sh::TVector"*, %"class.sh::TVector"** %51, align 8
  %53 = icmp eq %"class.sh::TVector"* %52, null
  br i1 %53, label %91, label %54

; <label>:54:                                     ; preds = %44
  %55 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %52, i64 0, i32 0, i32 0, i32 0
  %56 = load i32*, i32** %55, align 8
  %57 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %52, i64 0, i32 0, i32 0, i32 1
  %58 = load i32*, i32** %57, align 8
  %59 = icmp eq i32* %56, %58
  br i1 %59, label %91, label %60

; <label>:60:                                     ; preds = %54
  %61 = bitcast %"class.sh::TIntermAggregate"* %38 to i1 (%"class.sh::TIntermAggregate"*)***
  %62 = load i1 (%"class.sh::TIntermAggregate"*)**, i1 (%"class.sh::TIntermAggregate"*)*** %61, align 8
  %63 = getelementptr inbounds i1 (%"class.sh::TIntermAggregate"*)*, i1 (%"class.sh::TIntermAggregate"*)** %62, i64 30
  %64 = load i1 (%"class.sh::TIntermAggregate"*)*, i1 (%"class.sh::TIntermAggregate"*)** %63, align 8
  %65 = tail call zeroext i1 %64(%"class.sh::TIntermAggregate"* nonnull %38) #18
  br i1 %65, label %91, label %66

; <label>:66:                                     ; preds = %60
  %67 = bitcast %"class.sh::TIntermAggregate"* %38 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)***
  %68 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*** %67, align 8
  %69 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %68, i64 32
  %70 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %69, align 8
  %71 = tail call %"class.sh::TVector.15"* %70(%"class.sh::TIntermAggregate"* nonnull %38) #18
  %72 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %71, i64 0, i32 0, i32 0, i32 1
  %73 = bitcast %"class.sh::TIntermNode"*** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %"class.sh::TVector.15"* %71 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %74, %76
  %78 = ashr exact i64 %77, 3
  %79 = icmp ugt i64 %78, %30
  br i1 %79, label %82, label %80

; <label>:80:                                     ; preds = %66
  %81 = bitcast %"class.sh::TVector.15"* %71 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %81) #12
  unreachable

; <label>:82:                                     ; preds = %66
  %83 = inttoptr i64 %76 to %"class.sh::TIntermNode"**
  %84 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %83, i64 %30
  %85 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %84, align 8
  %86 = bitcast %"class.sh::TIntermNode"* %85 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %87 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %86, align 8
  %88 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %87, i64 4
  %89 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %88, align 8
  %90 = tail call %"class.sh::TIntermTyped"* %89(%"class.sh::TIntermNode"* %85) #18
  br label %188

; <label>:91:                                     ; preds = %54, %44, %28, %60, %40
  %92 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %32, align 8
  %93 = bitcast %"class.sh::TIntermNode"* %92 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %94 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %93, align 8
  %95 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %94, i64 5
  %96 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %95, align 8
  %97 = tail call %"class.sh::TIntermConstantUnion"* %96(%"class.sh::TIntermNode"* %92) #18
  %98 = icmp eq %"class.sh::TIntermConstantUnion"* %97, null
  br i1 %98, label %99, label %107

; <label>:99:                                     ; preds = %91
  %100 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0
  %101 = bitcast %"class.sh::TIntermBinary"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %102 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %101, align 8
  %103 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %102, i64 31
  %104 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %103, align 8
  %105 = tail call dereferenceable(128) %"class.sh::TType"* %104(%"class.sh::TIntermExpression"* %100) #18
  %106 = tail call zeroext i1 @_ZNK2sh5TType27canReplaceWithConstantUnionEv(%"class.sh::TType"* nonnull %105) #18
  br i1 %106, label %107, label %132

; <label>:107:                                    ; preds = %91, %99
  %108 = bitcast %"class.sh::TIntermBinary"* %0 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)***
  %109 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)*** %108, align 8
  %110 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)** %109, i64 29
  %111 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermBinary"*)** %110, align 8
  %112 = tail call %"class.sh::TConstantUnion"* %111(%"class.sh::TIntermBinary"* nonnull %0) #18
  %113 = icmp eq %"class.sh::TConstantUnion"* %112, null
  %114 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %113, label %188, label %115

; <label>:115:                                    ; preds = %107
  %116 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %117 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %116, i64 160) #18
  %118 = bitcast %"class.sh::TIntermBinary"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %119 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %118, align 8
  %120 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %119, i64 31
  %121 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %120, align 8
  %122 = tail call dereferenceable(128) %"class.sh::TType"* %121(%"class.sh::TIntermTyped"* %114) #18
  %123 = getelementptr inbounds i8, i8* %117, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %123, i8 0, i64 16, i1 false) #18
  %124 = bitcast i8* %117 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %124, align 8
  %125 = getelementptr inbounds i8, i8* %117, i64 24
  %126 = bitcast i8* %125 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %126, %"class.sh::TType"* nonnull dereferenceable(128) %122) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %124, align 8
  %127 = getelementptr inbounds i8, i8* %117, i64 152
  %128 = bitcast i8* %127 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* %112, %"class.sh::TConstantUnion"** %128, align 8
  %129 = bitcast i8* %117 to %"class.sh::TIntermTyped"*
  %130 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %131 = bitcast %"struct.sh::TSourceLoc"* %130 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %123, i8* nonnull align 4 %131, i64 16, i1 false) #18
  br label %188

; <label>:132:                                    ; preds = %99
  %133 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %188

; <label>:134:                                    ; preds = %2, %2, %2
  %135 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %188

; <label>:136:                                    ; preds = %2
  %137 = icmp eq %"class.sh::TConstantUnion"* %9, null
  br i1 %137, label %138, label %140

; <label>:138:                                    ; preds = %136
  %139 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %188

; <label>:140:                                    ; preds = %136
  %141 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %142 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %141, align 8
  %143 = bitcast %"class.sh::TIntermTyped"* %142 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %144 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %143, align 8
  %145 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %144, i64 29
  %146 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %145, align 8
  %147 = tail call %"class.sh::TConstantUnion"* %146(%"class.sh::TIntermTyped"* %142) #18
  %148 = icmp eq %"class.sh::TConstantUnion"* %147, null
  br i1 %148, label %149, label %151

; <label>:149:                                    ; preds = %140
  %150 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %188

; <label>:151:                                    ; preds = %140
  %152 = load i32, i32* %10, align 8
  %153 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %141, align 8
  %154 = bitcast %"class.sh::TIntermTyped"* %153 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %155 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %154, align 8
  %156 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %155, i64 31
  %157 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %156, align 8
  %158 = tail call dereferenceable(128) %"class.sh::TType"* %157(%"class.sh::TIntermTyped"* %153) #18
  %159 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %3, align 8
  %160 = bitcast %"class.sh::TIntermTyped"* %159 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %161 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %160, align 8
  %162 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %161, i64 31
  %163 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %162, align 8
  %164 = tail call dereferenceable(128) %"class.sh::TType"* %163(%"class.sh::TIntermTyped"* %159) #18
  %165 = bitcast %"class.sh::TIntermTyped"** %141 to %"class.sh::TIntermNode"**
  %166 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, align 8
  %167 = getelementptr inbounds %"class.sh::TIntermNode", %"class.sh::TIntermNode"* %166, i64 0, i32 1
  %168 = tail call %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion10FoldBinaryE9TOperatorPKNS_14TConstantUnionERKNS_5TTypeES4_S7_PNS_12TDiagnosticsERKNS_10TSourceLocE(i32 %152, %"class.sh::TConstantUnion"* nonnull %147, %"class.sh::TType"* nonnull dereferenceable(128) %158, %"class.sh::TConstantUnion"* nonnull %9, %"class.sh::TType"* nonnull dereferenceable(128) %164, %"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %167)
  %169 = icmp eq %"class.sh::TConstantUnion"* %168, null
  %170 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %169, label %188, label %171

; <label>:171:                                    ; preds = %151
  %172 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %173 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %172, i64 160) #18
  %174 = bitcast %"class.sh::TIntermBinary"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %175 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %174, align 8
  %176 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %175, i64 31
  %177 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %176, align 8
  %178 = tail call dereferenceable(128) %"class.sh::TType"* %177(%"class.sh::TIntermTyped"* %170) #18
  %179 = getelementptr inbounds i8, i8* %173, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %179, i8 0, i64 16, i1 false) #18
  %180 = bitcast i8* %173 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %180, align 8
  %181 = getelementptr inbounds i8, i8* %173, i64 24
  %182 = bitcast i8* %181 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %182, %"class.sh::TType"* nonnull dereferenceable(128) %178) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %180, align 8
  %183 = getelementptr inbounds i8, i8* %173, i64 152
  %184 = bitcast i8* %183 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* %168, %"class.sh::TConstantUnion"** %184, align 8
  %185 = bitcast i8* %173 to %"class.sh::TIntermTyped"*
  %186 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %187 = bitcast %"struct.sh::TSourceLoc"* %186 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %179, i8* nonnull align 4 %187, i64 16, i1 false) #18
  br label %188

; <label>:188:                                    ; preds = %149, %151, %171, %82, %132, %107, %115, %138, %134, %26, %22, %20
  %189 = phi %"class.sh::TIntermTyped"* [ %139, %138 ], [ %135, %134 ], [ %27, %26 ], [ %21, %20 ], [ %23, %22 ], [ %133, %132 ], [ %90, %82 ], [ %129, %115 ], [ %114, %107 ], [ %150, %149 ], [ %185, %171 ], [ %170, %151 ]
  ret %"class.sh::TIntermTyped"* %189
}

declare i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh5TType27canReplaceWithConstantUnionEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion10FoldBinaryE9TOperatorPKNS_14TConstantUnionERKNS_5TTypeES4_S7_PNS_12TDiagnosticsERKNS_10TSourceLocE(i32, %"class.sh::TConstantUnion"*, %"class.sh::TType"* dereferenceable(128), %"class.sh::TConstantUnion"*, %"class.sh::TType"* dereferenceable(128), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %8 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %2) #18
  %9 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %4) #18
  %10 = icmp eq i64 %9, 1
  %11 = icmp ugt i64 %8, 1
  %12 = and i1 %11, %10
  br i1 %12, label %13, label %106

; <label>:13:                                     ; preds = %7
  %14 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %8, i64 8) #18
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  %17 = select i1 %15, i64 -1, i64 %16
  %18 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %19 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %18, i64 %17) #18
  %20 = bitcast i8* %19 to %"class.sh::TConstantUnion"*
  %21 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %8
  br label %22

; <label>:22:                                     ; preds = %22, %13
  %23 = phi %"class.sh::TConstantUnion"* [ %20, %13 ], [ %24, %22 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %23) #18
  %24 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 1
  %25 = icmp eq %"class.sh::TConstantUnion"* %24, %21
  br i1 %25, label %26, label %22

; <label>:26:                                     ; preds = %22
  %27 = bitcast %"class.sh::TConstantUnion"* %3 to i64*
  %28 = icmp ult i64 %8, 4
  br i1 %28, label %94, label %29

; <label>:29:                                     ; preds = %26
  %30 = add i64 %8, -1
  %31 = icmp ugt i64 %30, 4294967295
  %32 = trunc i64 %30 to i32
  %33 = icmp eq i32 %32, -1
  %34 = or i1 %33, %31
  br i1 %34, label %94, label %35

; <label>:35:                                     ; preds = %29
  %36 = bitcast %"class.sh::TConstantUnion"* %3 to i8*
  %37 = getelementptr i8, i8* %36, i64 1
  %38 = shl i64 %8, 3
  %39 = getelementptr i8, i8* %19, i64 %38
  %40 = bitcast %"class.sh::TConstantUnion"* %3 to i8*
  %41 = icmp ugt i8* %39, %40
  %42 = icmp ult i8* %19, %37
  %43 = and i1 %41, %42
  br i1 %43, label %94, label %44

; <label>:44:                                     ; preds = %35
  %45 = and i64 %8, -4
  %46 = trunc i64 %45 to i32
  %47 = add i64 %45, -4
  %48 = lshr exact i64 %47, 2
  %49 = add nuw nsw i64 %48, 1
  %50 = and i64 %49, 1
  %51 = icmp eq i64 %47, 0
  br i1 %51, label %79, label %52

; <label>:52:                                     ; preds = %44
  %53 = sub nsw i64 %49, %50
  %54 = load i64, i64* %27, align 4, !alias.scope !53, !noalias !56
  %55 = insertelement <2 x i64> undef, i64 %54, i32 0
  %56 = shufflevector <2 x i64> %55, <2 x i64> undef, <2 x i32> zeroinitializer
  %57 = insertelement <2 x i64> undef, i64 %54, i32 0
  %58 = shufflevector <2 x i64> %57, <2 x i64> undef, <2 x i32> zeroinitializer
  %59 = load i64, i64* %27, align 4, !alias.scope !53, !noalias !56
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = shufflevector <2 x i64> %60, <2 x i64> undef, <2 x i32> zeroinitializer
  %62 = insertelement <2 x i64> undef, i64 %59, i32 0
  %63 = shufflevector <2 x i64> %62, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %64

; <label>:64:                                     ; preds = %64, %52
  %65 = phi i64 [ 0, %52 ], [ %76, %64 ]
  %66 = phi i64 [ %53, %52 ], [ %77, %64 ]
  %67 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %65
  %68 = bitcast %"class.sh::TConstantUnion"* %67 to <2 x i64>*
  store <2 x i64> %56, <2 x i64>* %68, align 4, !alias.scope !56
  %69 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %67, i64 2
  %70 = bitcast %"class.sh::TConstantUnion"* %69 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %70, align 4, !alias.scope !56
  %71 = or i64 %65, 4
  %72 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %71
  %73 = bitcast %"class.sh::TConstantUnion"* %72 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %73, align 4, !alias.scope !56
  %74 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %72, i64 2
  %75 = bitcast %"class.sh::TConstantUnion"* %74 to <2 x i64>*
  store <2 x i64> %63, <2 x i64>* %75, align 4, !alias.scope !56
  %76 = add i64 %65, 8
  %77 = add i64 %66, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %64, !llvm.loop !58

; <label>:79:                                     ; preds = %64, %44
  %80 = phi i64 [ 0, %44 ], [ %76, %64 ]
  %81 = icmp eq i64 %50, 0
  br i1 %81, label %92, label %82

; <label>:82:                                     ; preds = %79
  %83 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %80
  %84 = load i64, i64* %27, align 4, !alias.scope !53, !noalias !56
  %85 = insertelement <2 x i64> undef, i64 %84, i32 0
  %86 = shufflevector <2 x i64> %85, <2 x i64> undef, <2 x i32> zeroinitializer
  %87 = insertelement <2 x i64> undef, i64 %84, i32 0
  %88 = shufflevector <2 x i64> %87, <2 x i64> undef, <2 x i32> zeroinitializer
  %89 = bitcast %"class.sh::TConstantUnion"* %83 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %89, align 4, !alias.scope !56
  %90 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %83, i64 2
  %91 = bitcast %"class.sh::TConstantUnion"* %90 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %91, align 4, !alias.scope !56
  br label %92

; <label>:92:                                     ; preds = %79, %82
  %93 = icmp eq i64 %8, %45
  br i1 %93, label %209, label %94

; <label>:94:                                     ; preds = %92, %35, %29, %26
  %95 = phi i64 [ 0, %35 ], [ 0, %29 ], [ 0, %26 ], [ %45, %92 ]
  %96 = phi i32 [ 0, %35 ], [ 0, %29 ], [ 0, %26 ], [ %46, %92 ]
  br label %97

; <label>:97:                                     ; preds = %94, %97
  %98 = phi i64 [ %104, %97 ], [ %95, %94 ]
  %99 = phi i32 [ %103, %97 ], [ %96, %94 ]
  %100 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %20, i64 %98
  %101 = bitcast %"class.sh::TConstantUnion"* %100 to i64*
  %102 = load i64, i64* %27, align 4
  store i64 %102, i64* %101, align 4
  %103 = add i32 %99, 1
  %104 = zext i32 %103 to i64
  %105 = icmp ugt i64 %8, %104
  br i1 %105, label %97, label %209, !llvm.loop !59

; <label>:106:                                    ; preds = %7
  %107 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %4) #18
  %108 = icmp ugt i64 %107, 1
  %109 = icmp eq i64 %8, 1
  %110 = and i1 %109, %108
  br i1 %110, label %111, label %209

; <label>:111:                                    ; preds = %106
  %112 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %4) #18
  %113 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %112, i64 8) #18
  %114 = extractvalue { i64, i1 } %113, 1
  %115 = extractvalue { i64, i1 } %113, 0
  %116 = select i1 %114, i64 -1, i64 %115
  %117 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %118 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %117, i64 %116) #18
  %119 = bitcast i8* %118 to %"class.sh::TConstantUnion"*
  %120 = icmp eq i64 %112, 0
  br i1 %120, label %207, label %121

; <label>:121:                                    ; preds = %111
  %122 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %112
  br label %123

; <label>:123:                                    ; preds = %123, %121
  %124 = phi %"class.sh::TConstantUnion"* [ %119, %121 ], [ %125, %123 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %124) #18
  %125 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %124, i64 1
  %126 = icmp eq %"class.sh::TConstantUnion"* %125, %122
  br i1 %126, label %127, label %123

; <label>:127:                                    ; preds = %123
  %128 = bitcast %"class.sh::TConstantUnion"* %1 to i64*
  %129 = icmp ult i64 %112, 4
  br i1 %129, label %195, label %130

; <label>:130:                                    ; preds = %127
  %131 = add i64 %112, -1
  %132 = icmp ugt i64 %131, 4294967295
  %133 = trunc i64 %131 to i32
  %134 = icmp eq i32 %133, -1
  %135 = or i1 %134, %132
  br i1 %135, label %195, label %136

; <label>:136:                                    ; preds = %130
  %137 = bitcast %"class.sh::TConstantUnion"* %1 to i8*
  %138 = getelementptr i8, i8* %137, i64 1
  %139 = shl i64 %112, 3
  %140 = getelementptr i8, i8* %118, i64 %139
  %141 = bitcast %"class.sh::TConstantUnion"* %1 to i8*
  %142 = icmp ugt i8* %140, %141
  %143 = icmp ult i8* %118, %138
  %144 = and i1 %142, %143
  br i1 %144, label %195, label %145

; <label>:145:                                    ; preds = %136
  %146 = and i64 %112, -4
  %147 = trunc i64 %146 to i32
  %148 = add i64 %146, -4
  %149 = lshr exact i64 %148, 2
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 1
  %152 = icmp eq i64 %148, 0
  br i1 %152, label %180, label %153

; <label>:153:                                    ; preds = %145
  %154 = sub nsw i64 %150, %151
  %155 = load i64, i64* %128, align 4, !alias.scope !60, !noalias !63
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = shufflevector <2 x i64> %156, <2 x i64> undef, <2 x i32> zeroinitializer
  %158 = insertelement <2 x i64> undef, i64 %155, i32 0
  %159 = shufflevector <2 x i64> %158, <2 x i64> undef, <2 x i32> zeroinitializer
  %160 = load i64, i64* %128, align 4, !alias.scope !60, !noalias !63
  %161 = insertelement <2 x i64> undef, i64 %160, i32 0
  %162 = shufflevector <2 x i64> %161, <2 x i64> undef, <2 x i32> zeroinitializer
  %163 = insertelement <2 x i64> undef, i64 %160, i32 0
  %164 = shufflevector <2 x i64> %163, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %165

; <label>:165:                                    ; preds = %165, %153
  %166 = phi i64 [ 0, %153 ], [ %177, %165 ]
  %167 = phi i64 [ %154, %153 ], [ %178, %165 ]
  %168 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %166
  %169 = bitcast %"class.sh::TConstantUnion"* %168 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %169, align 4, !alias.scope !63
  %170 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %168, i64 2
  %171 = bitcast %"class.sh::TConstantUnion"* %170 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %171, align 4, !alias.scope !63
  %172 = or i64 %166, 4
  %173 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %172
  %174 = bitcast %"class.sh::TConstantUnion"* %173 to <2 x i64>*
  store <2 x i64> %162, <2 x i64>* %174, align 4, !alias.scope !63
  %175 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %173, i64 2
  %176 = bitcast %"class.sh::TConstantUnion"* %175 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %176, align 4, !alias.scope !63
  %177 = add i64 %166, 8
  %178 = add i64 %167, -2
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %165, !llvm.loop !65

; <label>:180:                                    ; preds = %165, %145
  %181 = phi i64 [ 0, %145 ], [ %177, %165 ]
  %182 = icmp eq i64 %151, 0
  br i1 %182, label %193, label %183

; <label>:183:                                    ; preds = %180
  %184 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %181
  %185 = load i64, i64* %128, align 4, !alias.scope !60, !noalias !63
  %186 = insertelement <2 x i64> undef, i64 %185, i32 0
  %187 = shufflevector <2 x i64> %186, <2 x i64> undef, <2 x i32> zeroinitializer
  %188 = insertelement <2 x i64> undef, i64 %185, i32 0
  %189 = shufflevector <2 x i64> %188, <2 x i64> undef, <2 x i32> zeroinitializer
  %190 = bitcast %"class.sh::TConstantUnion"* %184 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %190, align 4, !alias.scope !63
  %191 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %184, i64 2
  %192 = bitcast %"class.sh::TConstantUnion"* %191 to <2 x i64>*
  store <2 x i64> %189, <2 x i64>* %192, align 4, !alias.scope !63
  br label %193

; <label>:193:                                    ; preds = %180, %183
  %194 = icmp eq i64 %112, %146
  br i1 %194, label %207, label %195

; <label>:195:                                    ; preds = %193, %136, %130, %127
  %196 = phi i64 [ 0, %136 ], [ 0, %130 ], [ 0, %127 ], [ %146, %193 ]
  %197 = phi i32 [ 0, %136 ], [ 0, %130 ], [ 0, %127 ], [ %147, %193 ]
  br label %198

; <label>:198:                                    ; preds = %195, %198
  %199 = phi i64 [ %205, %198 ], [ %196, %195 ]
  %200 = phi i32 [ %204, %198 ], [ %197, %195 ]
  %201 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %119, i64 %199
  %202 = bitcast %"class.sh::TConstantUnion"* %201 to i64*
  %203 = load i64, i64* %128, align 4
  store i64 %203, i64* %202, align 4
  %204 = add i32 %200, 1
  %205 = zext i32 %204 to i64
  %206 = icmp ugt i64 %112, %205
  br i1 %206, label %198, label %207, !llvm.loop !66

; <label>:207:                                    ; preds = %198, %193, %111
  %208 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %4) #18
  br label %209

; <label>:209:                                    ; preds = %97, %92, %106, %207
  %210 = phi i64 [ %208, %207 ], [ %8, %106 ], [ %8, %92 ], [ %8, %97 ]
  %211 = phi %"class.sh::TConstantUnion"* [ %3, %207 ], [ %3, %106 ], [ %20, %92 ], [ %20, %97 ]
  %212 = phi %"class.sh::TConstantUnion"* [ %119, %207 ], [ %1, %106 ], [ %1, %92 ], [ %1, %97 ]
  switch i32 %0, label %813 [
    i32 13, label %213
    i32 14, label %238
    i32 15, label %263
    i32 31, label %263
    i32 34, label %263
    i32 35, label %288
    i32 16, label %353
    i32 17, label %353
    i32 33, label %465
    i32 32, label %508
    i32 38, label %552
    i32 36, label %577
    i32 37, label %602
    i32 41, label %629
    i32 42, label %654
    i32 43, label %679
    i32 39, label %704
    i32 40, label %729
    i32 20, label %754
    i32 21, label %762
    i32 22, label %770
    i32 23, label %779
    i32 18, label %788
    i32 19, label %788
  ]

; <label>:213:                                    ; preds = %209
  %214 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %215 = extractvalue { i64, i1 } %214, 1
  %216 = extractvalue { i64, i1 } %214, 0
  %217 = select i1 %215, i64 -1, i64 %216
  %218 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %219 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %218, i64 %217) #18
  %220 = bitcast i8* %219 to %"class.sh::TConstantUnion"*
  %221 = icmp eq i64 %210, 0
  br i1 %221, label %813, label %222

; <label>:222:                                    ; preds = %213
  %223 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %220, i64 %210
  br label %224

; <label>:224:                                    ; preds = %224, %222
  %225 = phi %"class.sh::TConstantUnion"* [ %220, %222 ], [ %226, %224 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %225) #18
  %226 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %225, i64 1
  %227 = icmp eq %"class.sh::TConstantUnion"* %226, %223
  br i1 %227, label %228, label %224

; <label>:228:                                    ; preds = %224
  br i1 %221, label %813, label %229

; <label>:229:                                    ; preds = %228, %229
  %230 = phi i64 [ %236, %229 ], [ 0, %228 ]
  %231 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %230
  %232 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %230
  %233 = tail call i64 @_ZN2sh14TConstantUnion3addERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %231, %"class.sh::TConstantUnion"* dereferenceable(8) %232, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6) #18
  %234 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %220, i64 %230
  %235 = bitcast %"class.sh::TConstantUnion"* %234 to i64*
  store i64 %233, i64* %235, align 4
  %236 = add nuw i64 %230, 1
  %237 = icmp eq i64 %236, %210
  br i1 %237, label %813, label %229

; <label>:238:                                    ; preds = %209
  %239 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %240 = extractvalue { i64, i1 } %239, 1
  %241 = extractvalue { i64, i1 } %239, 0
  %242 = select i1 %240, i64 -1, i64 %241
  %243 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %244 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %243, i64 %242) #18
  %245 = bitcast i8* %244 to %"class.sh::TConstantUnion"*
  %246 = icmp eq i64 %210, 0
  br i1 %246, label %813, label %247

; <label>:247:                                    ; preds = %238
  %248 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %245, i64 %210
  br label %249

; <label>:249:                                    ; preds = %249, %247
  %250 = phi %"class.sh::TConstantUnion"* [ %245, %247 ], [ %251, %249 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %250) #18
  %251 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %250, i64 1
  %252 = icmp eq %"class.sh::TConstantUnion"* %251, %248
  br i1 %252, label %253, label %249

; <label>:253:                                    ; preds = %249
  br i1 %246, label %813, label %254

; <label>:254:                                    ; preds = %253, %254
  %255 = phi i64 [ %261, %254 ], [ 0, %253 ]
  %256 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %255
  %257 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %255
  %258 = tail call i64 @_ZN2sh14TConstantUnion3subERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %256, %"class.sh::TConstantUnion"* dereferenceable(8) %257, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6) #18
  %259 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %245, i64 %255
  %260 = bitcast %"class.sh::TConstantUnion"* %259 to i64*
  store i64 %258, i64* %260, align 4
  %261 = add nuw i64 %255, 1
  %262 = icmp eq i64 %261, %210
  br i1 %262, label %813, label %254

; <label>:263:                                    ; preds = %209, %209, %209
  %264 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %265 = extractvalue { i64, i1 } %264, 1
  %266 = extractvalue { i64, i1 } %264, 0
  %267 = select i1 %265, i64 -1, i64 %266
  %268 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %269 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %268, i64 %267) #18
  %270 = bitcast i8* %269 to %"class.sh::TConstantUnion"*
  %271 = icmp eq i64 %210, 0
  br i1 %271, label %813, label %272

; <label>:272:                                    ; preds = %263
  %273 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %270, i64 %210
  br label %274

; <label>:274:                                    ; preds = %274, %272
  %275 = phi %"class.sh::TConstantUnion"* [ %270, %272 ], [ %276, %274 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %275) #18
  %276 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %275, i64 1
  %277 = icmp eq %"class.sh::TConstantUnion"* %276, %273
  br i1 %277, label %278, label %274

; <label>:278:                                    ; preds = %274
  br i1 %271, label %813, label %279

; <label>:279:                                    ; preds = %278, %279
  %280 = phi i64 [ %286, %279 ], [ 0, %278 ]
  %281 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %280
  %282 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %280
  %283 = tail call i64 @_ZN2sh14TConstantUnion3mulERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %281, %"class.sh::TConstantUnion"* dereferenceable(8) %282, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6) #18
  %284 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %270, i64 %280
  %285 = bitcast %"class.sh::TConstantUnion"* %284 to i64*
  store i64 %283, i64* %285, align 4
  %286 = add nuw i64 %280, 1
  %287 = icmp eq i64 %286, %210
  br i1 %287, label %813, label %279

; <label>:288:                                    ; preds = %209
  %289 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 6
  %290 = load i8, i8* %289, align 4
  %291 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 7
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 6
  %295 = load i8, i8* %294, align 4
  %296 = zext i8 %295 to i32
  %297 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 7
  %298 = load i8, i8* %297, align 1
  %299 = mul nuw nsw i32 %296, %293
  %300 = shl nuw nsw i32 %299, 3
  %301 = zext i32 %300 to i64
  %302 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %303 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %302, i64 %301) #18
  %304 = bitcast i8* %303 to %"class.sh::TConstantUnion"*
  %305 = icmp eq i32 %299, 0
  br i1 %305, label %313, label %306

; <label>:306:                                    ; preds = %288
  %307 = zext i32 %299 to i64
  %308 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %304, i64 %307
  br label %309

; <label>:309:                                    ; preds = %309, %306
  %310 = phi %"class.sh::TConstantUnion"* [ %304, %306 ], [ %311, %309 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %310) #18
  %311 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %310, i64 1
  %312 = icmp eq %"class.sh::TConstantUnion"* %311, %308
  br i1 %312, label %313, label %309

; <label>:313:                                    ; preds = %309, %288
  %314 = icmp eq i8 %292, 0
  br i1 %314, label %813, label %315

; <label>:315:                                    ; preds = %313
  %316 = icmp eq i8 %295, 0
  %317 = icmp eq i8 %290, 0
  %318 = zext i8 %292 to i64
  %319 = zext i8 %298 to i64
  %320 = zext i8 %295 to i64
  %321 = zext i8 %290 to i64
  br label %322

; <label>:322:                                    ; preds = %324, %315
  %323 = phi i64 [ 0, %315 ], [ %325, %324 ]
  br i1 %316, label %324, label %327

; <label>:324:                                    ; preds = %336, %322
  %325 = add nuw nsw i64 %323, 1
  %326 = icmp eq i64 %325, %318
  br i1 %326, label %813, label %322

; <label>:327:                                    ; preds = %322, %336
  %328 = phi i64 [ %337, %336 ], [ 0, %322 ]
  %329 = mul nuw nsw i64 %328, %318
  %330 = add nuw nsw i64 %329, %323
  %331 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %304, i64 %330
  %332 = bitcast %"class.sh::TConstantUnion"* %331 to float*
  store float 0.000000e+00, float* %332, align 4
  %333 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %304, i64 %330, i32 1
  store i32 1, i32* %333, align 4
  br i1 %317, label %336, label %334

; <label>:334:                                    ; preds = %327
  %335 = mul nuw nsw i64 %328, %319
  br label %339

; <label>:336:                                    ; preds = %339, %327
  %337 = add nuw nsw i64 %328, 1
  %338 = icmp eq i64 %337, %320
  br i1 %338, label %324, label %327

; <label>:339:                                    ; preds = %339, %334
  %340 = phi i64 [ 0, %334 ], [ %351, %339 ]
  %341 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %331) #18
  %342 = mul nuw nsw i64 %340, %318
  %343 = add nuw nsw i64 %342, %323
  %344 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %343
  %345 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %344) #18
  %346 = add nuw nsw i64 %340, %335
  %347 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %346
  %348 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %347) #18
  %349 = fmul float %345, %348
  %350 = fadd float %341, %349
  store float %350, float* %332, align 4
  store i32 1, i32* %333, align 4
  %351 = add nuw nsw i64 %340, 1
  %352 = icmp eq i64 %351, %321
  br i1 %352, label %336, label %339

; <label>:353:                                    ; preds = %209, %209
  %354 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %355 = extractvalue { i64, i1 } %354, 1
  %356 = extractvalue { i64, i1 } %354, 0
  %357 = select i1 %355, i64 -1, i64 %356
  %358 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %359 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %358, i64 %357) #18
  %360 = bitcast i8* %359 to %"class.sh::TConstantUnion"*
  %361 = icmp eq i64 %210, 0
  br i1 %361, label %813, label %362

; <label>:362:                                    ; preds = %353
  %363 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %210
  br label %364

; <label>:364:                                    ; preds = %364, %362
  %365 = phi %"class.sh::TConstantUnion"* [ %360, %362 ], [ %366, %364 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %365) #18
  %366 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %365, i64 1
  %367 = icmp eq %"class.sh::TConstantUnion"* %366, %363
  br i1 %367, label %368, label %364

; <label>:368:                                    ; preds = %364
  br i1 %361, label %813, label %369

; <label>:369:                                    ; preds = %368
  %370 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 0
  %371 = icmp eq i32 %0, 16
  br label %372

; <label>:372:                                    ; preds = %369, %460
  %373 = phi i64 [ 0, %369 ], [ %463, %460 ]
  %374 = load i32, i32* %370, align 8
  switch i32 %374, label %813 [
    i32 1, label %375
    i32 2, label %417
    i32 3, label %444
  ]

; <label>:375:                                    ; preds = %372
  %376 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %373
  %377 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %376) #18
  %378 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %373
  %379 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %378) #18
  %380 = fcmp oeq float %379, 0.000000e+00
  br i1 %380, label %381, label %394

; <label>:381:                                    ; preds = %375
  %382 = fcmp oeq float %377, 0.000000e+00
  br i1 %382, label %383, label %386

; <label>:383:                                    ; preds = %381
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %384 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373
  %385 = bitcast %"class.sh::TConstantUnion"* %384 to float*
  store float 0x7FF8000000000000, float* %385, align 4
  br label %460

; <label>:386:                                    ; preds = %381
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %387 = bitcast float %377 to i32
  %388 = bitcast float %379 to i32
  %389 = xor i32 %388, %387
  %390 = icmp slt i32 %389, 0
  %391 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373
  %392 = select i1 %390, float 0xFFF0000000000000, float 0x7FF0000000000000
  %393 = bitcast %"class.sh::TConstantUnion"* %391 to float*
  store float %392, float* %393, align 4
  br label %460

; <label>:394:                                    ; preds = %375
  %395 = bitcast float %377 to i32
  %396 = and i32 %395, 2147483647
  %397 = icmp eq i32 %396, 2139095040
  br i1 %397, label %398, label %407

; <label>:398:                                    ; preds = %394
  %399 = bitcast float %379 to i32
  %400 = and i32 %399, 2147483647
  %401 = icmp eq i32 %400, 2139095040
  br i1 %401, label %404, label %402

; <label>:402:                                    ; preds = %398
  %403 = fdiv float %377, %379
  br label %413

; <label>:404:                                    ; preds = %398
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %405 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373
  %406 = bitcast %"class.sh::TConstantUnion"* %405 to float*
  store float 0x7FF8000000000000, float* %406, align 4
  br label %460

; <label>:407:                                    ; preds = %394
  %408 = fdiv float %377, %379
  %409 = bitcast float %408 to i32
  %410 = and i32 %409, 2147483647
  %411 = icmp eq i32 %410, 2139095040
  br i1 %411, label %412, label %413

; <label>:412:                                    ; preds = %407
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  br label %413

; <label>:413:                                    ; preds = %402, %412, %407
  %414 = phi float [ %403, %402 ], [ %408, %412 ], [ %408, %407 ]
  %415 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373
  %416 = bitcast %"class.sh::TConstantUnion"* %415 to float*
  store float %414, float* %416, align 4
  br label %460

; <label>:417:                                    ; preds = %372
  %418 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %373
  %419 = tail call zeroext i1 @_ZNK2sh14TConstantUnioneqEi(%"class.sh::TConstantUnion"* %418, i32 0) #18
  br i1 %419, label %420, label %422

; <label>:420:                                    ; preds = %417
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %421 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373, i32 0, i32 0
  store i32 2147483647, i32* %421, align 4
  br label %460

; <label>:422:                                    ; preds = %417
  %423 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %373
  %424 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %423) #18
  %425 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %418) #18
  br i1 %371, label %426, label %436

; <label>:426:                                    ; preds = %422
  %427 = icmp eq i32 %424, -2147483648
  %428 = icmp eq i32 %425, -1
  %429 = and i1 %427, %428
  %430 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373
  br i1 %429, label %431, label %433

; <label>:431:                                    ; preds = %426
  %432 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %430, i64 0, i32 0, i32 0
  store i32 2147483647, i32* %432, align 4
  br label %460

; <label>:433:                                    ; preds = %426
  %434 = sdiv i32 %424, %425
  %435 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %430, i64 0, i32 0, i32 0
  store i32 %434, i32* %435, align 4
  br label %460

; <label>:436:                                    ; preds = %422
  %437 = or i32 %425, %424
  %438 = icmp slt i32 %437, 0
  br i1 %438, label %439, label %441

; <label>:439:                                    ; preds = %436
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)) #18
  %440 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373, i32 0, i32 0
  store i32 0, i32* %440, align 4
  br label %460

; <label>:441:                                    ; preds = %436
  %442 = srem i32 %424, %425
  %443 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373, i32 0, i32 0
  store i32 %442, i32* %443, align 4
  br label %460

; <label>:444:                                    ; preds = %372
  %445 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %373
  %446 = tail call zeroext i1 @_ZNK2sh14TConstantUnioneqEi(%"class.sh::TConstantUnion"* %445, i32 0) #18
  br i1 %446, label %447, label %449

; <label>:447:                                    ; preds = %444
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #18
  %448 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373, i32 0, i32 0
  store i32 -1, i32* %448, align 4
  br label %460

; <label>:449:                                    ; preds = %444
  %450 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373
  %451 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %373
  %452 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %451) #18
  %453 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %445) #18
  br i1 %371, label %454, label %457

; <label>:454:                                    ; preds = %449
  %455 = udiv i32 %452, %453
  %456 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %450, i64 0, i32 0, i32 0
  store i32 %455, i32* %456, align 4
  br label %460

; <label>:457:                                    ; preds = %449
  %458 = urem i32 %452, %453
  %459 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %450, i64 0, i32 0, i32 0
  store i32 %458, i32* %459, align 4
  br label %460

; <label>:460:                                    ; preds = %433, %431, %441, %439, %386, %383, %413, %404, %420, %454, %457, %447
  %461 = phi i32 [ 2, %433 ], [ 2, %431 ], [ 2, %441 ], [ 2, %439 ], [ 1, %386 ], [ 1, %383 ], [ 1, %413 ], [ 1, %404 ], [ 2, %420 ], [ 3, %454 ], [ 3, %457 ], [ 3, %447 ]
  %462 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %360, i64 %373, i32 1
  store i32 %461, i32* %462, align 4
  %463 = add nuw i64 %373, 1
  %464 = icmp ult i64 %463, %210
  br i1 %464, label %372, label %813

; <label>:465:                                    ; preds = %209
  %466 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 6
  %467 = load i8, i8* %466, align 4
  %468 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %2, i64 0, i32 7
  %469 = load i8, i8* %468, align 1
  %470 = zext i8 %469 to i64
  %471 = shl nuw nsw i64 %470, 3
  %472 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %473 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %472, i64 %471) #18
  %474 = bitcast i8* %473 to %"class.sh::TConstantUnion"*
  %475 = icmp eq i8 %469, 0
  br i1 %475, label %813, label %476

; <label>:476:                                    ; preds = %465
  %477 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %474, i64 %470
  br label %478

; <label>:478:                                    ; preds = %478, %476
  %479 = phi %"class.sh::TConstantUnion"* [ %474, %476 ], [ %480, %478 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %479) #18
  %480 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %479, i64 1
  %481 = icmp eq %"class.sh::TConstantUnion"* %480, %477
  br i1 %481, label %482, label %478

; <label>:482:                                    ; preds = %478
  br i1 %475, label %813, label %483

; <label>:483:                                    ; preds = %482
  %484 = icmp eq i8 %467, 0
  %485 = zext i8 %469 to i64
  %486 = zext i8 %467 to i64
  br label %487

; <label>:487:                                    ; preds = %492, %483
  %488 = phi i64 [ 0, %483 ], [ %493, %492 ]
  %489 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %474, i64 %488
  %490 = bitcast %"class.sh::TConstantUnion"* %489 to float*
  store float 0.000000e+00, float* %490, align 4
  %491 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %474, i64 %488, i32 1
  store i32 1, i32* %491, align 4
  br i1 %484, label %492, label %495

; <label>:492:                                    ; preds = %495, %487
  %493 = add nuw nsw i64 %488, 1
  %494 = icmp eq i64 %493, %485
  br i1 %494, label %813, label %487

; <label>:495:                                    ; preds = %487, %495
  %496 = phi i64 [ %506, %495 ], [ 0, %487 ]
  %497 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %489) #18
  %498 = mul nuw nsw i64 %496, %485
  %499 = add nuw nsw i64 %498, %488
  %500 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %499
  %501 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %500) #18
  %502 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %496
  %503 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %502) #18
  %504 = fmul float %501, %503
  %505 = fadd float %497, %504
  store float %505, float* %490, align 4
  store i32 1, i32* %491, align 4
  %506 = add nuw nsw i64 %496, 1
  %507 = icmp eq i64 %506, %486
  br i1 %507, label %492, label %495

; <label>:508:                                    ; preds = %209
  %509 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 6
  %510 = load i8, i8* %509, align 4
  %511 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %4, i64 0, i32 7
  %512 = load i8, i8* %511, align 1
  %513 = zext i8 %510 to i64
  %514 = shl nuw nsw i64 %513, 3
  %515 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %516 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %515, i64 %514) #18
  %517 = bitcast i8* %516 to %"class.sh::TConstantUnion"*
  %518 = icmp eq i8 %510, 0
  br i1 %518, label %813, label %519

; <label>:519:                                    ; preds = %508
  %520 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %517, i64 %513
  br label %521

; <label>:521:                                    ; preds = %521, %519
  %522 = phi %"class.sh::TConstantUnion"* [ %517, %519 ], [ %523, %521 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %522) #18
  %523 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %522, i64 1
  %524 = icmp eq %"class.sh::TConstantUnion"* %523, %520
  br i1 %524, label %525, label %521

; <label>:525:                                    ; preds = %521
  br i1 %518, label %813, label %526

; <label>:526:                                    ; preds = %525
  %527 = icmp eq i8 %512, 0
  %528 = zext i8 %512 to i64
  %529 = zext i8 %510 to i64
  br label %530

; <label>:530:                                    ; preds = %537, %526
  %531 = phi i64 [ 0, %526 ], [ %538, %537 ]
  %532 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %517, i64 %531
  %533 = bitcast %"class.sh::TConstantUnion"* %532 to float*
  store float 0.000000e+00, float* %533, align 4
  %534 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %517, i64 %531, i32 1
  store i32 1, i32* %534, align 4
  br i1 %527, label %537, label %535

; <label>:535:                                    ; preds = %530
  %536 = mul nuw nsw i64 %531, %528
  br label %540

; <label>:537:                                    ; preds = %540, %530
  %538 = add nuw nsw i64 %531, 1
  %539 = icmp eq i64 %538, %529
  br i1 %539, label %813, label %530

; <label>:540:                                    ; preds = %540, %535
  %541 = phi i64 [ 0, %535 ], [ %550, %540 ]
  %542 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %532) #18
  %543 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %541
  %544 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %543) #18
  %545 = add nuw nsw i64 %541, %536
  %546 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %545
  %547 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %546) #18
  %548 = fmul float %544, %547
  %549 = fadd float %542, %548
  store float %549, float* %533, align 4
  store i32 1, i32* %534, align 4
  %550 = add nuw nsw i64 %541, 1
  %551 = icmp eq i64 %550, %528
  br i1 %551, label %537, label %540

; <label>:552:                                    ; preds = %209
  %553 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %554 = extractvalue { i64, i1 } %553, 1
  %555 = extractvalue { i64, i1 } %553, 0
  %556 = select i1 %554, i64 -1, i64 %555
  %557 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %558 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %557, i64 %556) #18
  %559 = bitcast i8* %558 to %"class.sh::TConstantUnion"*
  %560 = icmp eq i64 %210, 0
  br i1 %560, label %813, label %561

; <label>:561:                                    ; preds = %552
  %562 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %559, i64 %210
  br label %563

; <label>:563:                                    ; preds = %563, %561
  %564 = phi %"class.sh::TConstantUnion"* [ %559, %561 ], [ %565, %563 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %564) #18
  %565 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %564, i64 1
  %566 = icmp eq %"class.sh::TConstantUnion"* %565, %562
  br i1 %566, label %567, label %563

; <label>:567:                                    ; preds = %563
  br i1 %560, label %813, label %568

; <label>:568:                                    ; preds = %567, %568
  %569 = phi i64 [ %575, %568 ], [ 0, %567 ]
  %570 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %569
  %571 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %569
  %572 = tail call i64 @_ZNK2sh14TConstantUnionaaERKS0_(%"class.sh::TConstantUnion"* %570, %"class.sh::TConstantUnion"* dereferenceable(8) %571) #18
  %573 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %559, i64 %569
  %574 = bitcast %"class.sh::TConstantUnion"* %573 to i64*
  store i64 %572, i64* %574, align 4
  %575 = add nuw i64 %569, 1
  %576 = icmp eq i64 %575, %210
  br i1 %576, label %813, label %568

; <label>:577:                                    ; preds = %209
  %578 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %579 = extractvalue { i64, i1 } %578, 1
  %580 = extractvalue { i64, i1 } %578, 0
  %581 = select i1 %579, i64 -1, i64 %580
  %582 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %583 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %582, i64 %581) #18
  %584 = bitcast i8* %583 to %"class.sh::TConstantUnion"*
  %585 = icmp eq i64 %210, 0
  br i1 %585, label %813, label %586

; <label>:586:                                    ; preds = %577
  %587 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %584, i64 %210
  br label %588

; <label>:588:                                    ; preds = %588, %586
  %589 = phi %"class.sh::TConstantUnion"* [ %584, %586 ], [ %590, %588 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %589) #18
  %590 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %589, i64 1
  %591 = icmp eq %"class.sh::TConstantUnion"* %590, %587
  br i1 %591, label %592, label %588

; <label>:592:                                    ; preds = %588
  br i1 %585, label %813, label %593

; <label>:593:                                    ; preds = %592, %593
  %594 = phi i64 [ %600, %593 ], [ 0, %592 ]
  %595 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %594
  %596 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %594
  %597 = tail call i64 @_ZNK2sh14TConstantUnionooERKS0_(%"class.sh::TConstantUnion"* %595, %"class.sh::TConstantUnion"* dereferenceable(8) %596) #18
  %598 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %584, i64 %594
  %599 = bitcast %"class.sh::TConstantUnion"* %598 to i64*
  store i64 %597, i64* %599, align 4
  %600 = add nuw i64 %594, 1
  %601 = icmp eq i64 %600, %210
  br i1 %601, label %813, label %593

; <label>:602:                                    ; preds = %209
  %603 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %604 = extractvalue { i64, i1 } %603, 1
  %605 = extractvalue { i64, i1 } %603, 0
  %606 = select i1 %604, i64 -1, i64 %605
  %607 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %608 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %607, i64 %606) #18
  %609 = bitcast i8* %608 to %"class.sh::TConstantUnion"*
  %610 = icmp eq i64 %210, 0
  br i1 %610, label %813, label %611

; <label>:611:                                    ; preds = %602
  %612 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %609, i64 %210
  br label %613

; <label>:613:                                    ; preds = %613, %611
  %614 = phi %"class.sh::TConstantUnion"* [ %609, %611 ], [ %615, %613 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %614) #18
  %615 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %614, i64 1
  %616 = icmp eq %"class.sh::TConstantUnion"* %615, %612
  br i1 %616, label %617, label %613

; <label>:617:                                    ; preds = %613
  br i1 %610, label %813, label %618

; <label>:618:                                    ; preds = %617, %618
  %619 = phi i64 [ %627, %618 ], [ 0, %617 ]
  %620 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %609, i64 %619
  %621 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %619
  %622 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %619
  %623 = tail call zeroext i1 @_ZNK2sh14TConstantUnionneERKS0_(%"class.sh::TConstantUnion"* %621, %"class.sh::TConstantUnion"* dereferenceable(8) %622) #18
  %624 = zext i1 %623 to i8
  %625 = bitcast %"class.sh::TConstantUnion"* %620 to i8*
  store i8 %624, i8* %625, align 4
  %626 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %609, i64 %619, i32 1
  store i32 4, i32* %626, align 4
  %627 = add nuw i64 %619, 1
  %628 = icmp eq i64 %627, %210
  br i1 %628, label %813, label %618

; <label>:629:                                    ; preds = %209
  %630 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %631 = extractvalue { i64, i1 } %630, 1
  %632 = extractvalue { i64, i1 } %630, 0
  %633 = select i1 %631, i64 -1, i64 %632
  %634 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %635 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %634, i64 %633) #18
  %636 = bitcast i8* %635 to %"class.sh::TConstantUnion"*
  %637 = icmp eq i64 %210, 0
  br i1 %637, label %813, label %638

; <label>:638:                                    ; preds = %629
  %639 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %636, i64 %210
  br label %640

; <label>:640:                                    ; preds = %640, %638
  %641 = phi %"class.sh::TConstantUnion"* [ %636, %638 ], [ %642, %640 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %641) #18
  %642 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %641, i64 1
  %643 = icmp eq %"class.sh::TConstantUnion"* %642, %639
  br i1 %643, label %644, label %640

; <label>:644:                                    ; preds = %640
  br i1 %637, label %813, label %645

; <label>:645:                                    ; preds = %644, %645
  %646 = phi i64 [ %652, %645 ], [ 0, %644 ]
  %647 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %646
  %648 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %646
  %649 = tail call i64 @_ZNK2sh14TConstantUnionanERKS0_(%"class.sh::TConstantUnion"* %647, %"class.sh::TConstantUnion"* dereferenceable(8) %648) #18
  %650 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %636, i64 %646
  %651 = bitcast %"class.sh::TConstantUnion"* %650 to i64*
  store i64 %649, i64* %651, align 4
  %652 = add nuw i64 %646, 1
  %653 = icmp eq i64 %652, %210
  br i1 %653, label %813, label %645

; <label>:654:                                    ; preds = %209
  %655 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %656 = extractvalue { i64, i1 } %655, 1
  %657 = extractvalue { i64, i1 } %655, 0
  %658 = select i1 %656, i64 -1, i64 %657
  %659 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %660 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %659, i64 %658) #18
  %661 = bitcast i8* %660 to %"class.sh::TConstantUnion"*
  %662 = icmp eq i64 %210, 0
  br i1 %662, label %813, label %663

; <label>:663:                                    ; preds = %654
  %664 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %661, i64 %210
  br label %665

; <label>:665:                                    ; preds = %665, %663
  %666 = phi %"class.sh::TConstantUnion"* [ %661, %663 ], [ %667, %665 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %666) #18
  %667 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %666, i64 1
  %668 = icmp eq %"class.sh::TConstantUnion"* %667, %664
  br i1 %668, label %669, label %665

; <label>:669:                                    ; preds = %665
  br i1 %662, label %813, label %670

; <label>:670:                                    ; preds = %669, %670
  %671 = phi i64 [ %677, %670 ], [ 0, %669 ]
  %672 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %671
  %673 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %671
  %674 = tail call i64 @_ZNK2sh14TConstantUnioneoERKS0_(%"class.sh::TConstantUnion"* %672, %"class.sh::TConstantUnion"* dereferenceable(8) %673) #18
  %675 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %661, i64 %671
  %676 = bitcast %"class.sh::TConstantUnion"* %675 to i64*
  store i64 %674, i64* %676, align 4
  %677 = add nuw i64 %671, 1
  %678 = icmp eq i64 %677, %210
  br i1 %678, label %813, label %670

; <label>:679:                                    ; preds = %209
  %680 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %681 = extractvalue { i64, i1 } %680, 1
  %682 = extractvalue { i64, i1 } %680, 0
  %683 = select i1 %681, i64 -1, i64 %682
  %684 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %685 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %684, i64 %683) #18
  %686 = bitcast i8* %685 to %"class.sh::TConstantUnion"*
  %687 = icmp eq i64 %210, 0
  br i1 %687, label %813, label %688

; <label>:688:                                    ; preds = %679
  %689 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %686, i64 %210
  br label %690

; <label>:690:                                    ; preds = %690, %688
  %691 = phi %"class.sh::TConstantUnion"* [ %686, %688 ], [ %692, %690 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %691) #18
  %692 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %691, i64 1
  %693 = icmp eq %"class.sh::TConstantUnion"* %692, %689
  br i1 %693, label %694, label %690

; <label>:694:                                    ; preds = %690
  br i1 %687, label %813, label %695

; <label>:695:                                    ; preds = %694, %695
  %696 = phi i64 [ %702, %695 ], [ 0, %694 ]
  %697 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %696
  %698 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %696
  %699 = tail call i64 @_ZNK2sh14TConstantUnionorERKS0_(%"class.sh::TConstantUnion"* %697, %"class.sh::TConstantUnion"* dereferenceable(8) %698) #18
  %700 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %686, i64 %696
  %701 = bitcast %"class.sh::TConstantUnion"* %700 to i64*
  store i64 %699, i64* %701, align 4
  %702 = add nuw i64 %696, 1
  %703 = icmp eq i64 %702, %210
  br i1 %703, label %813, label %695

; <label>:704:                                    ; preds = %209
  %705 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %706 = extractvalue { i64, i1 } %705, 1
  %707 = extractvalue { i64, i1 } %705, 0
  %708 = select i1 %706, i64 -1, i64 %707
  %709 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %710 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %709, i64 %708) #18
  %711 = bitcast i8* %710 to %"class.sh::TConstantUnion"*
  %712 = icmp eq i64 %210, 0
  br i1 %712, label %813, label %713

; <label>:713:                                    ; preds = %704
  %714 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %711, i64 %210
  br label %715

; <label>:715:                                    ; preds = %715, %713
  %716 = phi %"class.sh::TConstantUnion"* [ %711, %713 ], [ %717, %715 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %716) #18
  %717 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %716, i64 1
  %718 = icmp eq %"class.sh::TConstantUnion"* %717, %714
  br i1 %718, label %719, label %715

; <label>:719:                                    ; preds = %715
  br i1 %712, label %813, label %720

; <label>:720:                                    ; preds = %719, %720
  %721 = phi i64 [ %727, %720 ], [ 0, %719 ]
  %722 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %721
  %723 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %721
  %724 = tail call i64 @_ZN2sh14TConstantUnion6lshiftERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %722, %"class.sh::TConstantUnion"* dereferenceable(8) %723, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6) #18
  %725 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %711, i64 %721
  %726 = bitcast %"class.sh::TConstantUnion"* %725 to i64*
  store i64 %724, i64* %726, align 4
  %727 = add nuw i64 %721, 1
  %728 = icmp eq i64 %727, %210
  br i1 %728, label %813, label %720

; <label>:729:                                    ; preds = %209
  %730 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %210, i64 8)
  %731 = extractvalue { i64, i1 } %730, 1
  %732 = extractvalue { i64, i1 } %730, 0
  %733 = select i1 %731, i64 -1, i64 %732
  %734 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %735 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %734, i64 %733) #18
  %736 = bitcast i8* %735 to %"class.sh::TConstantUnion"*
  %737 = icmp eq i64 %210, 0
  br i1 %737, label %813, label %738

; <label>:738:                                    ; preds = %729
  %739 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %736, i64 %210
  br label %740

; <label>:740:                                    ; preds = %740, %738
  %741 = phi %"class.sh::TConstantUnion"* [ %736, %738 ], [ %742, %740 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %741) #18
  %742 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %741, i64 1
  %743 = icmp eq %"class.sh::TConstantUnion"* %742, %739
  br i1 %743, label %744, label %740

; <label>:744:                                    ; preds = %740
  br i1 %737, label %813, label %745

; <label>:745:                                    ; preds = %744, %745
  %746 = phi i64 [ %752, %745 ], [ 0, %744 ]
  %747 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %746
  %748 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %746
  %749 = tail call i64 @_ZN2sh14TConstantUnion6rshiftERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8) %747, %"class.sh::TConstantUnion"* dereferenceable(8) %748, %"class.sh::TDiagnostics"* %5, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %6) #18
  %750 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %736, i64 %746
  %751 = bitcast %"class.sh::TConstantUnion"* %750 to i64*
  store i64 %749, i64* %751, align 4
  %752 = add nuw i64 %746, 1
  %753 = icmp eq i64 %752, %210
  br i1 %753, label %813, label %745

; <label>:754:                                    ; preds = %209
  %755 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %756 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %755, i64 8) #18
  %757 = bitcast i8* %756 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %757) #18
  %758 = tail call zeroext i1 @_ZNK2sh14TConstantUnionltERKS0_(%"class.sh::TConstantUnion"* %212, %"class.sh::TConstantUnion"* dereferenceable(8) %211) #18
  %759 = zext i1 %758 to i8
  store i8 %759, i8* %756, align 4
  %760 = getelementptr inbounds i8, i8* %756, i64 4
  %761 = bitcast i8* %760 to i32*
  store i32 4, i32* %761, align 4
  br label %813

; <label>:762:                                    ; preds = %209
  %763 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %764 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %763, i64 8) #18
  %765 = bitcast i8* %764 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %765) #18
  %766 = tail call zeroext i1 @_ZNK2sh14TConstantUniongtERKS0_(%"class.sh::TConstantUnion"* %212, %"class.sh::TConstantUnion"* dereferenceable(8) %211) #18
  %767 = zext i1 %766 to i8
  store i8 %767, i8* %764, align 4
  %768 = getelementptr inbounds i8, i8* %764, i64 4
  %769 = bitcast i8* %768 to i32*
  store i32 4, i32* %769, align 4
  br label %813

; <label>:770:                                    ; preds = %209
  %771 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %772 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %771, i64 8) #18
  %773 = bitcast i8* %772 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %773) #18
  %774 = tail call zeroext i1 @_ZNK2sh14TConstantUniongtERKS0_(%"class.sh::TConstantUnion"* %212, %"class.sh::TConstantUnion"* dereferenceable(8) %211) #18
  %775 = xor i1 %774, true
  %776 = zext i1 %775 to i8
  store i8 %776, i8* %772, align 4
  %777 = getelementptr inbounds i8, i8* %772, i64 4
  %778 = bitcast i8* %777 to i32*
  store i32 4, i32* %778, align 4
  br label %813

; <label>:779:                                    ; preds = %209
  %780 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %781 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %780, i64 8) #18
  %782 = bitcast i8* %781 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %782) #18
  %783 = tail call zeroext i1 @_ZNK2sh14TConstantUnionltERKS0_(%"class.sh::TConstantUnion"* %212, %"class.sh::TConstantUnion"* dereferenceable(8) %211) #18
  %784 = xor i1 %783, true
  %785 = zext i1 %784 to i8
  store i8 %785, i8* %781, align 4
  %786 = getelementptr inbounds i8, i8* %781, i64 4
  %787 = bitcast i8* %786 to i32*
  store i32 4, i32* %787, align 4
  br label %813

; <label>:788:                                    ; preds = %209, %209
  %789 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %790 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %789, i64 8) #18
  %791 = bitcast i8* %790 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %791) #18
  %792 = icmp eq i64 %210, 0
  br i1 %792, label %801, label %795

; <label>:793:                                    ; preds = %795
  %794 = icmp ult i64 %800, %210
  br i1 %794, label %795, label %801

; <label>:795:                                    ; preds = %788, %793
  %796 = phi i64 [ %800, %793 ], [ 0, %788 ]
  %797 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 %796
  %798 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %211, i64 %796
  %799 = tail call zeroext i1 @_ZNK2sh14TConstantUnionneERKS0_(%"class.sh::TConstantUnion"* %797, %"class.sh::TConstantUnion"* dereferenceable(8) %798) #18
  %800 = add nuw i64 %796, 1
  br i1 %799, label %801, label %793

; <label>:801:                                    ; preds = %793, %795, %788
  %802 = phi i1 [ true, %788 ], [ false, %795 ], [ true, %793 ]
  %803 = icmp eq i32 %0, 18
  br i1 %803, label %804, label %808

; <label>:804:                                    ; preds = %801
  %805 = zext i1 %802 to i8
  store i8 %805, i8* %790, align 4
  %806 = getelementptr inbounds i8, i8* %790, i64 4
  %807 = bitcast i8* %806 to i32*
  store i32 4, i32* %807, align 4
  br label %813

; <label>:808:                                    ; preds = %801
  %809 = xor i1 %802, true
  %810 = zext i1 %809 to i8
  store i8 %810, i8* %790, align 4
  %811 = getelementptr inbounds i8, i8* %790, i64 4
  %812 = bitcast i8* %811 to i32*
  store i32 4, i32* %812, align 4
  br label %813

; <label>:813:                                    ; preds = %745, %720, %695, %670, %645, %618, %593, %568, %537, %492, %372, %460, %324, %279, %254, %229, %729, %704, %679, %654, %629, %602, %577, %552, %508, %465, %353, %263, %238, %213, %228, %253, %278, %313, %368, %482, %525, %567, %592, %617, %644, %669, %694, %719, %744, %754, %762, %770, %779, %808, %804, %209
  %814 = phi %"class.sh::TConstantUnion"* [ null, %209 ], [ %782, %779 ], [ %773, %770 ], [ %765, %762 ], [ %757, %754 ], [ %791, %808 ], [ %791, %804 ], [ %220, %228 ], [ %245, %253 ], [ %270, %278 ], [ %304, %313 ], [ %360, %368 ], [ %474, %482 ], [ %517, %525 ], [ %559, %567 ], [ %584, %592 ], [ %609, %617 ], [ %636, %644 ], [ %661, %669 ], [ %686, %694 ], [ %711, %719 ], [ %736, %744 ], [ %220, %213 ], [ %245, %238 ], [ %270, %263 ], [ %360, %353 ], [ %474, %465 ], [ %517, %508 ], [ %559, %552 ], [ %584, %577 ], [ %609, %602 ], [ %636, %629 ], [ %661, %654 ], [ %686, %679 ], [ %711, %704 ], [ %736, %729 ], [ %220, %229 ], [ %245, %254 ], [ %270, %279 ], [ %304, %324 ], [ null, %372 ], [ %360, %460 ], [ %474, %492 ], [ %517, %537 ], [ %559, %568 ], [ %584, %593 ], [ %609, %618 ], [ %636, %645 ], [ %661, %670 ], [ %686, %695 ], [ %711, %720 ], [ %736, %745 ]
  ret %"class.sh::TConstantUnion"* %814
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2sh13TIntermBinary16hasConstantValueEv(%"class.sh::TIntermBinary"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %20 [
    i32 44, label %4
    i32 46, label %4
  ]

; <label>:4:                                      ; preds = %1, %1
  %5 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %6 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %5, align 8
  %7 = bitcast %"class.sh::TIntermTyped"* %6 to i1 (%"class.sh::TIntermTyped"*)***
  %8 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %8, i64 28
  %10 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.sh::TIntermTyped"* %6) #18
  br i1 %11, label %12, label %20

; <label>:12:                                     ; preds = %4
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %14 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %13, align 8
  %15 = bitcast %"class.sh::TIntermTyped"* %14 to i1 (%"class.sh::TIntermTyped"*)***
  %16 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %16, i64 28
  %18 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %17, align 8
  %19 = tail call zeroext i1 %18(%"class.sh::TIntermTyped"* %14) #18
  br i1 %19, label %21, label %20

; <label>:20:                                     ; preds = %1, %4, %12
  br label %21

; <label>:21:                                     ; preds = %12, %20
  %22 = phi i1 [ false, %20 ], [ true, %12 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZNK2sh13TIntermBinary16getConstantValueEv(%"class.sh::TIntermBinary"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.sh::TType", align 8
  %3 = bitcast %"class.sh::TIntermBinary"* %0 to i1 (%"class.sh::TIntermBinary"*)***
  %4 = load i1 (%"class.sh::TIntermBinary"*)**, i1 (%"class.sh::TIntermBinary"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.sh::TIntermBinary"*)*, i1 (%"class.sh::TIntermBinary"*)** %4, i64 28
  %6 = load i1 (%"class.sh::TIntermBinary"*)*, i1 (%"class.sh::TIntermBinary"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.sh::TIntermBinary"* %0) #18
  br i1 %7, label %8, label %91

; <label>:8:                                      ; preds = %1
  %9 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %10 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %9, align 8
  %11 = bitcast %"class.sh::TIntermTyped"* %10 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %12 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %12, i64 29
  %14 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %13, align 8
  %15 = tail call %"class.sh::TConstantUnion"* %14(%"class.sh::TIntermTyped"* %10) #18
  %16 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %17 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %16, align 8
  %18 = bitcast %"class.sh::TIntermTyped"* %17 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %19 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %19, i64 29
  %21 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %20, align 8
  %22 = tail call %"class.sh::TConstantUnion"* %21(%"class.sh::TIntermTyped"* %17) #18
  %23 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %22) #18
  %24 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 44
  %27 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %9, align 8
  %28 = bitcast %"class.sh::TIntermTyped"* %27 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %29 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %28, align 8
  %30 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %29, i64 31
  %31 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, align 8
  %32 = tail call dereferenceable(128) %"class.sh::TType"* %31(%"class.sh::TIntermTyped"* %27) #18
  br i1 %26, label %33, label %67

; <label>:33:                                     ; preds = %8
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 8
  %35 = load %"class.sh::TVector"*, %"class.sh::TVector"** %34, align 8
  %36 = icmp eq %"class.sh::TVector"* %35, null
  br i1 %36, label %49, label %37

; <label>:37:                                     ; preds = %33
  %38 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %35, i64 0, i32 0, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %35, i64 0, i32 0, i32 0, i32 1
  %41 = load i32*, i32** %40, align 8
  %42 = icmp eq i32* %39, %41
  br i1 %42, label %49, label %43

; <label>:43:                                     ; preds = %37
  %44 = bitcast %"class.sh::TType"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %44) #18
  call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %2, %"class.sh::TType"* nonnull dereferenceable(128) %32) #18
  call void @_ZN2sh5TType18toArrayElementTypeEv(%"class.sh::TType"* nonnull %2) #18
  %45 = call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %2) #18
  %46 = sext i32 %23 to i64
  %47 = mul i64 %45, %46
  %48 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %15, i64 %47
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %44) #18
  br label %91

; <label>:49:                                     ; preds = %37, %33
  %50 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 6
  %51 = load i8, i8* %50, align 4
  %52 = icmp ugt i8 %51, 1
  br i1 %52, label %53, label %91

; <label>:53:                                     ; preds = %49
  %54 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 7
  %55 = load i8, i8* %54, align 1
  %56 = icmp ugt i8 %55, 1
  br i1 %56, label %57, label %62

; <label>:57:                                     ; preds = %53
  %58 = zext i8 %55 to i32
  %59 = mul nsw i32 %23, %58
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %15, i64 %60
  br label %91

; <label>:62:                                     ; preds = %53
  %63 = icmp eq i8 %55, 1
  br i1 %63, label %64, label %91

; <label>:64:                                     ; preds = %62
  %65 = sext i32 %23 to i64
  %66 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %15, i64 %65
  br label %91

; <label>:67:                                     ; preds = %8
  %68 = icmp sgt i32 %23, 0
  br i1 %68, label %69, label %76

; <label>:69:                                     ; preds = %67
  %70 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %32, i64 0, i32 10
  %71 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %70, align 8
  %72 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %71, i64 0, i32 1, i32 0
  %73 = load %"class.sh::TVector.1"*, %"class.sh::TVector.1"** %72, align 8
  %74 = getelementptr inbounds %"class.sh::TVector.1", %"class.sh::TVector.1"* %73, i64 0, i32 0, i32 0, i32 0
  %75 = zext i32 %23 to i64
  br label %79

; <label>:76:                                     ; preds = %79, %67
  %77 = phi i64 [ 0, %67 ], [ %88, %79 ]
  %78 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %15, i64 %77
  br label %91

; <label>:79:                                     ; preds = %79, %69
  %80 = phi i64 [ 0, %69 ], [ %89, %79 ]
  %81 = phi i64 [ 0, %69 ], [ %88, %79 ]
  %82 = load %"class.sh::TField"**, %"class.sh::TField"*** %74, align 8
  %83 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %82, i64 %80
  %84 = load %"class.sh::TField"*, %"class.sh::TField"** %83, align 8
  %85 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %84, i64 0, i32 0
  %86 = load %"class.sh::TType"*, %"class.sh::TType"** %85, align 8
  %87 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %86) #18
  %88 = add i64 %87, %81
  %89 = add nuw nsw i64 %80, 1
  %90 = icmp eq i64 %89, %75
  br i1 %90, label %76, label %79

; <label>:91:                                     ; preds = %64, %62, %57, %49, %43, %76, %1
  %92 = phi %"class.sh::TConstantUnion"* [ null, %1 ], [ %78, %76 ], [ %48, %43 ], [ %61, %57 ], [ %66, %64 ], [ null, %62 ], [ null, %49 ]
  ret %"class.sh::TConstantUnion"* %92
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull dereferenceable(16) %"class.sh::ImmutableString"* @_ZNK2sh13TIntermBinary23getIndexStructFieldNameEv(%"class.sh::TIntermBinary"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %3 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %2, align 8
  %4 = bitcast %"class.sh::TIntermTyped"* %3 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %5 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %5, i64 31
  %7 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %6, align 8
  %8 = tail call dereferenceable(128) %"class.sh::TType"* %7(%"class.sh::TIntermTyped"* %3) #18
  %9 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %8, i64 0, i32 10
  %10 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %12 = bitcast %"class.sh::TIntermTyped"** %11 to %"class.sh::TIntermNode"**
  %13 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %12, align 8
  %14 = bitcast %"class.sh::TIntermNode"* %13 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %15 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %15, i64 5
  %17 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %16, align 8
  %18 = tail call %"class.sh::TIntermConstantUnion"* %17(%"class.sh::TIntermNode"* %13) #18
  %19 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %18, i64 0, i32 1
  %20 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %19, align 8
  %21 = icmp eq %"class.sh::TConstantUnion"* %20, null
  br i1 %21, label %25, label %22

; <label>:22:                                     ; preds = %1
  %23 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* nonnull %20) #18
  %24 = sext i32 %23 to i64
  br label %25

; <label>:25:                                     ; preds = %1, %22
  %26 = phi i64 [ %24, %22 ], [ 0, %1 ]
  %27 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %10, i64 0, i32 1, i32 0
  %28 = load %"class.sh::TVector.1"*, %"class.sh::TVector.1"** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TVector.1", %"class.sh::TVector.1"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.sh::TField"**, %"class.sh::TField"*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TField"*, %"class.sh::TField"** %30, i64 %26
  %32 = load %"class.sh::TField"*, %"class.sh::TField"** %31, align 8
  %33 = getelementptr inbounds %"class.sh::TField", %"class.sh::TField"* %32, i64 0, i32 1
  ret %"class.sh::ImmutableString"* %33
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh12TIntermUnary4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermUnary"*, %"class.sh::TDiagnostics"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 12
  %6 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 1
  br i1 %5, label %7, label %45

; <label>:7:                                      ; preds = %2
  %8 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %9 = bitcast %"class.sh::TIntermTyped"* %8 to i1 (%"class.sh::TIntermTyped"*)***
  %10 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %10, i64 30
  %12 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.sh::TIntermTyped"* %8) #18
  br i1 %13, label %22, label %14

; <label>:14:                                     ; preds = %7
  %15 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %16 = bitcast %"class.sh::TIntermTyped"* %15 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %17 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %17, i64 31
  %19 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %18, align 8
  %20 = tail call dereferenceable(128) %"class.sh::TType"* %19(%"class.sh::TIntermTyped"* %15) #18
  %21 = tail call zeroext i1 @_ZNK2sh5TType14isUnsizedArrayEv(%"class.sh::TType"* nonnull %20) #18
  br i1 %21, label %22, label %24

; <label>:22:                                     ; preds = %14, %7
  %23 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %85

; <label>:24:                                     ; preds = %14
  %25 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %26 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %25, i64 8) #18
  %27 = bitcast i8* %26 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %27) #18
  %28 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %29 = bitcast %"class.sh::TIntermTyped"* %28 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %30 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %29, align 8
  %31 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %30, i64 31
  %32 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %31, align 8
  %33 = tail call dereferenceable(128) %"class.sh::TType"* %32(%"class.sh::TIntermTyped"* %28) #18
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %33, i64 0, i32 8
  %35 = bitcast %"class.sh::TVector"** %34 to %"class.std::__1::vector"**
  %36 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %35, align 8
  %37 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %36, i64 0, i32 0, i32 1
  %38 = load i32*, i32** %37, align 8
  %39 = getelementptr inbounds i32, i32* %38, i64 -1
  %40 = load i32, i32* %39, align 4
  %41 = bitcast i8* %26 to i32*
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %26, i64 4
  %43 = bitcast i8* %42 to i32*
  store i32 2, i32* %43, align 4
  %44 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %66

; <label>:45:                                     ; preds = %2
  %46 = bitcast %"class.sh::TIntermTyped"** %6 to %"class.sh::TIntermNode"**
  %47 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, align 8
  %48 = bitcast %"class.sh::TIntermNode"* %47 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %49 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %48, align 8
  %50 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %49, i64 5
  %51 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %50, align 8
  %52 = tail call %"class.sh::TIntermConstantUnion"* %51(%"class.sh::TIntermNode"* %47) #18
  %53 = icmp eq %"class.sh::TIntermConstantUnion"* %52, null
  br i1 %53, label %60, label %54

; <label>:54:                                     ; preds = %45
  %55 = load i32, i32* %3, align 8
  switch i32 %55, label %58 [
    i32 119, label %56
    i32 120, label %56
    i32 103, label %56
    i32 116, label %56
    i32 117, label %56
    i32 118, label %56
    i32 93, label %56
    i32 96, label %56
    i32 94, label %56
    i32 97, label %56
    i32 95, label %56
    i32 98, label %56
    i32 99, label %56
    i32 100, label %56
    i32 101, label %56
    i32 102, label %56
  ]

; <label>:56:                                     ; preds = %54, %54, %54, %54, %54, %54, %54, %54, %54, %54, %54, %54, %54, %54, %54, %54
  %57 = tail call %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion25foldUnaryNonComponentWiseE9TOperator(%"class.sh::TIntermConstantUnion"* nonnull %52, i32 %55)
  br label %62

; <label>:58:                                     ; preds = %54
  %59 = tail call %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion22foldUnaryComponentWiseE9TOperatorPNS_12TDiagnosticsE(%"class.sh::TIntermConstantUnion"* nonnull %52, i32 %55, %"class.sh::TDiagnostics"* %1)
  br label %62

; <label>:60:                                     ; preds = %45
  %61 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0
  br label %85

; <label>:62:                                     ; preds = %58, %56
  %63 = phi %"class.sh::TConstantUnion"* [ %57, %56 ], [ %59, %58 ]
  %64 = icmp eq %"class.sh::TConstantUnion"* %63, null
  %65 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %64, label %85, label %66

; <label>:66:                                     ; preds = %24, %62
  %67 = phi %"class.sh::TIntermTyped"* [ %44, %24 ], [ %65, %62 ]
  %68 = phi %"class.sh::TConstantUnion"* [ %27, %24 ], [ %63, %62 ]
  %69 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %70 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %69, i64 160) #18
  %71 = bitcast %"class.sh::TIntermTyped"* %67 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %72 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %71, align 8
  %73 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %72, i64 31
  %74 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %73, align 8
  %75 = tail call dereferenceable(128) %"class.sh::TType"* %74(%"class.sh::TIntermTyped"* %67) #18
  %76 = getelementptr inbounds i8, i8* %70, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %76, i8 0, i64 16, i1 false) #18
  %77 = bitcast i8* %70 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %78 = getelementptr inbounds i8, i8* %70, i64 24
  %79 = bitcast i8* %78 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %79, %"class.sh::TType"* nonnull dereferenceable(128) %75) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %77, align 8
  %80 = getelementptr inbounds i8, i8* %70, i64 152
  %81 = bitcast i8* %80 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* %68, %"class.sh::TConstantUnion"** %81, align 8
  %82 = bitcast i8* %70 to %"class.sh::TIntermTyped"*
  %83 = getelementptr inbounds %"class.sh::TIntermUnary", %"class.sh::TIntermUnary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %84 = bitcast %"struct.sh::TSourceLoc"* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %76, i8* nonnull align 4 %84, i64 16, i1 false) #18
  br label %85

; <label>:85:                                     ; preds = %60, %62, %66, %22
  %86 = phi %"class.sh::TIntermTyped"* [ %23, %22 ], [ %82, %66 ], [ %61, %60 ], [ %65, %62 ]
  ret %"class.sh::TIntermTyped"* %86
}

declare zeroext i1 @_ZNK2sh5TType14isUnsizedArrayEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion25foldUnaryNonComponentWiseE9TOperator(%"class.sh::TIntermConstantUnion"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.angle::Matrix", align 8
  %4 = alloca %"class.angle::Matrix", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = alloca %"class.angle::Matrix", align 8
  %7 = alloca %"class.angle::Matrix", align 8
  %8 = bitcast %"class.sh::TIntermConstantUnion"* %0 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)***
  %9 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %9, i64 29
  %11 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %10, align 8
  %12 = tail call %"class.sh::TConstantUnion"* %11(%"class.sh::TIntermConstantUnion"* %0) #18
  %13 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0
  %14 = bitcast %"class.sh::TIntermConstantUnion"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %15 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %15, i64 31
  %17 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %16, align 8
  %18 = tail call dereferenceable(128) %"class.sh::TType"* %17(%"class.sh::TIntermExpression"* %13) #18
  %19 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %18) #18
  switch i32 %1, label %596 [
    i32 119, label %20
    i32 120, label %35
    i32 103, label %50
    i32 116, label %70
    i32 117, label %120
    i32 118, label %145
    i32 93, label %188
    i32 96, label %216
    i32 94, label %245
    i32 97, label %273
    i32 95, label %294
    i32 98, label %375
    i32 99, label %394
    i32 100, label %446
    i32 101, label %498
    i32 102, label %539
  ]

; <label>:20:                                     ; preds = %2
  %21 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %22 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %21, i64 8) #18
  %23 = bitcast i8* %22 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %23) #18
  store i8 0, i8* %22, align 4
  %24 = getelementptr inbounds i8, i8* %22, i64 4
  %25 = bitcast i8* %24 to i32*
  store i32 4, i32* %25, align 4
  %26 = icmp eq i64 %19, 0
  br i1 %26, label %596, label %29

; <label>:27:                                     ; preds = %29
  %28 = icmp ult i64 %33, %19
  br i1 %28, label %29, label %596

; <label>:29:                                     ; preds = %20, %27
  %30 = phi i64 [ %33, %27 ], [ 0, %20 ]
  %31 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 %30
  %32 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %31) #18
  %33 = add nuw i64 %30, 1
  br i1 %32, label %34, label %27

; <label>:34:                                     ; preds = %29
  store i8 1, i8* %22, align 4
  store i32 4, i32* %25, align 4
  br label %596

; <label>:35:                                     ; preds = %2
  %36 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %37 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %36, i64 8) #18
  %38 = bitcast i8* %37 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %38) #18
  store i8 1, i8* %37, align 4
  %39 = getelementptr inbounds i8, i8* %37, i64 4
  %40 = bitcast i8* %39 to i32*
  store i32 4, i32* %40, align 4
  %41 = icmp eq i64 %19, 0
  br i1 %41, label %596, label %44

; <label>:42:                                     ; preds = %44
  %43 = icmp ult i64 %48, %19
  br i1 %43, label %44, label %596

; <label>:44:                                     ; preds = %35, %42
  %45 = phi i64 [ %48, %42 ], [ 0, %35 ]
  %46 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 %45
  %47 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %46) #18
  %48 = add nuw i64 %45, 1
  br i1 %47, label %42, label %49

; <label>:49:                                     ; preds = %44
  store i8 0, i8* %37, align 4
  store i32 4, i32* %40, align 4
  br label %596

; <label>:50:                                     ; preds = %2
  %51 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %52 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %51, i64 8) #18
  %53 = bitcast i8* %52 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %53) #18
  %54 = icmp eq i64 %19, 0
  br i1 %54, label %64, label %55

; <label>:55:                                     ; preds = %50, %55
  %56 = phi float [ %61, %55 ], [ 0.000000e+00, %50 ]
  %57 = phi i64 [ %62, %55 ], [ 0, %50 ]
  %58 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 %57
  %59 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %58) #18
  %60 = fmul float %59, %59
  %61 = fadd float %56, %60
  %62 = add nuw i64 %57, 1
  %63 = icmp eq i64 %62, %19
  br i1 %63, label %64, label %55

; <label>:64:                                     ; preds = %55, %50
  %65 = phi float [ 0.000000e+00, %50 ], [ %61, %55 ]
  %66 = tail call float @sqrtf(float %65) #18
  %67 = bitcast i8* %52 to float*
  store float %66, float* %67, align 4
  %68 = getelementptr inbounds i8, i8* %52, i64 4
  %69 = bitcast i8* %68 to i32*
  store i32 1, i32* %69, align 4
  br label %596

; <label>:70:                                     ; preds = %2
  %71 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 8)
  %72 = extractvalue { i64, i1 } %71, 1
  %73 = extractvalue { i64, i1 } %71, 0
  %74 = select i1 %72, i64 -1, i64 %73
  %75 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %76 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %75, i64 %74) #18
  %77 = bitcast i8* %76 to %"class.sh::TConstantUnion"*
  %78 = icmp eq i64 %19, 0
  br i1 %78, label %85, label %79

; <label>:79:                                     ; preds = %70
  %80 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %77, i64 %19
  br label %81

; <label>:81:                                     ; preds = %81, %79
  %82 = phi %"class.sh::TConstantUnion"* [ %77, %79 ], [ %83, %81 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %82) #18
  %83 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %82, i64 1
  %84 = icmp eq %"class.sh::TConstantUnion"* %83, %80
  br i1 %84, label %85, label %81

; <label>:85:                                     ; preds = %81, %70
  %86 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %86) #18
  %87 = bitcast %"class.angle::Matrix"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %87) #18
  %88 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %89 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %88, i64 31
  %90 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %89, align 8
  %91 = tail call dereferenceable(128) %"class.sh::TType"* %90(%"class.sh::TIntermExpression"* %13) #18
  %92 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %91, i64 0, i32 7
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %96 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %95, i64 31
  %97 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %96, align 8
  %98 = tail call dereferenceable(128) %"class.sh::TType"* %97(%"class.sh::TIntermExpression"* %13) #18
  %99 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %98, i64 0, i32 6
  %100 = load i8, i8* %99, align 4
  %101 = zext i8 %100 to i32
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %4, %"class.sh::TConstantUnion"* %12, i32 %94, i32 %101)
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* nonnull sret %3, %"class.angle::Matrix"* nonnull %4)
  %102 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 0
  %103 = load float*, float** %102, align 8
  %104 = icmp eq float* %103, null
  br i1 %104, label %110, label %105

; <label>:105:                                    ; preds = %85
  %106 = ptrtoint float* %103 to i64
  %107 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 1
  %108 = bitcast float** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = bitcast float* %103 to i8*
  call void @_ZdlPv(i8* %109) #20
  br label %110

; <label>:110:                                    ; preds = %85, %105
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %87) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* nonnull dereferenceable(32) %3, %"class.sh::TConstantUnion"* %77)
  %111 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  %112 = load float*, float** %111, align 8
  %113 = icmp eq float* %112, null
  br i1 %113, label %119, label %114

; <label>:114:                                    ; preds = %110
  %115 = ptrtoint float* %112 to i64
  %116 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %117 = bitcast float** %116 to i64*
  store i64 %115, i64* %117, align 8
  %118 = bitcast float* %112 to i8*
  call void @_ZdlPv(i8* %118) #20
  br label %119

; <label>:119:                                    ; preds = %110, %114
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %86) #18
  br label %596

; <label>:120:                                    ; preds = %2
  %121 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %122 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %121, i64 31
  %123 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %122, align 8
  %124 = tail call dereferenceable(128) %"class.sh::TType"* %123(%"class.sh::TIntermExpression"* %13) #18
  %125 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %124, i64 0, i32 6
  %126 = load i8, i8* %125, align 4
  %127 = zext i8 %126 to i32
  %128 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %129 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %128, i64 8) #18
  %130 = bitcast i8* %129 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %130) #18
  %131 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %131) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEj(%"class.angle::Matrix"* nonnull sret %5, %"class.sh::TConstantUnion"* %12, i32 %127)
  %132 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %5)
  %133 = bitcast i8* %129 to float*
  store float %132, float* %133, align 4
  %134 = getelementptr inbounds i8, i8* %129, i64 4
  %135 = bitcast i8* %134 to i32*
  store i32 1, i32* %135, align 4
  %136 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  %137 = load float*, float** %136, align 8
  %138 = icmp eq float* %137, null
  br i1 %138, label %144, label %139

; <label>:139:                                    ; preds = %120
  %140 = ptrtoint float* %137 to i64
  %141 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %142 = bitcast float** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast float* %137 to i8*
  call void @_ZdlPv(i8* %143) #20
  br label %144

; <label>:144:                                    ; preds = %120, %139
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %131) #18
  br label %596

; <label>:145:                                    ; preds = %2
  %146 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %14, align 8
  %147 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %146, i64 31
  %148 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %147, align 8
  %149 = tail call dereferenceable(128) %"class.sh::TType"* %148(%"class.sh::TIntermExpression"* %13) #18
  %150 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %149, i64 0, i32 6
  %151 = load i8, i8* %150, align 4
  %152 = zext i8 %151 to i32
  %153 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 8)
  %154 = extractvalue { i64, i1 } %153, 1
  %155 = extractvalue { i64, i1 } %153, 0
  %156 = select i1 %154, i64 -1, i64 %155
  %157 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %158 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %157, i64 %156) #18
  %159 = bitcast i8* %158 to %"class.sh::TConstantUnion"*
  %160 = icmp eq i64 %19, 0
  br i1 %160, label %167, label %161

; <label>:161:                                    ; preds = %145
  %162 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %159, i64 %19
  br label %163

; <label>:163:                                    ; preds = %163, %161
  %164 = phi %"class.sh::TConstantUnion"* [ %159, %161 ], [ %165, %163 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %164) #18
  %165 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %164, i64 1
  %166 = icmp eq %"class.sh::TConstantUnion"* %165, %162
  br i1 %166, label %167, label %163

; <label>:167:                                    ; preds = %163, %145
  %168 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %168) #18
  %169 = bitcast %"class.angle::Matrix"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEj(%"class.angle::Matrix"* nonnull sret %7, %"class.sh::TConstantUnion"* %12, i32 %152)
  call void @_ZNK5angle6MatrixIfE7inverseEv(%"class.angle::Matrix"* nonnull sret %6, %"class.angle::Matrix"* nonnull %7)
  %170 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 0
  %171 = load float*, float** %170, align 8
  %172 = icmp eq float* %171, null
  br i1 %172, label %178, label %173

; <label>:173:                                    ; preds = %167
  %174 = ptrtoint float* %171 to i64
  %175 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 1
  %176 = bitcast float** %175 to i64*
  store i64 %174, i64* %176, align 8
  %177 = bitcast float* %171 to i8*
  call void @_ZdlPv(i8* %177) #20
  br label %178

; <label>:178:                                    ; preds = %167, %173
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* nonnull dereferenceable(32) %6, %"class.sh::TConstantUnion"* %159)
  %179 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 0
  %180 = load float*, float** %179, align 8
  %181 = icmp eq float* %180, null
  br i1 %181, label %187, label %182

; <label>:182:                                    ; preds = %178
  %183 = ptrtoint float* %180 to i64
  %184 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %185 = bitcast float** %184 to i64*
  store i64 %183, i64* %185, align 8
  %186 = bitcast float* %180 to i8*
  call void @_ZdlPv(i8* %186) #20
  br label %187

; <label>:187:                                    ; preds = %178, %182
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %168) #18
  br label %596

; <label>:188:                                    ; preds = %2
  %189 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %190 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %189, i64 8) #18
  %191 = bitcast i8* %190 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %191) #18
  %192 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %193 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %194 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %193) #18
  %195 = fcmp ogt float %192, -1.000000e+00
  %196 = fcmp ogt float %192, 1.000000e+00
  %197 = select i1 %196, float 1.000000e+00, float %192
  %198 = fmul float %197, 3.276700e+04
  %199 = select i1 %195, float %198, float -3.276700e+04
  %200 = tail call float @llvm.round.f32(float %199) #18
  %201 = fptosi float %200 to i16
  %202 = fcmp ogt float %194, -1.000000e+00
  %203 = fcmp ogt float %194, 1.000000e+00
  %204 = select i1 %203, float 1.000000e+00, float %194
  %205 = fmul float %204, 3.276700e+04
  %206 = select i1 %202, float %205, float -3.276700e+04
  %207 = tail call float @llvm.round.f32(float %206) #18
  %208 = fptosi float %207 to i16
  %209 = zext i16 %208 to i32
  %210 = shl nuw i32 %209, 16
  %211 = zext i16 %201 to i32
  %212 = or i32 %210, %211
  %213 = bitcast i8* %190 to i32*
  store i32 %212, i32* %213, align 4
  %214 = getelementptr inbounds i8, i8* %190, i64 4
  %215 = bitcast i8* %214 to i32*
  store i32 3, i32* %215, align 4
  br label %596

; <label>:216:                                    ; preds = %2
  %217 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %218 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %217, i64 16) #18
  %219 = bitcast i8* %218 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %219) #18
  %220 = getelementptr inbounds i8, i8* %218, i64 8
  %221 = bitcast i8* %220 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %221) #18
  %222 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %223 = trunc i32 %222 to i16
  %224 = lshr i32 %222, 16
  %225 = trunc i32 %224 to i16
  %226 = sitofp i16 %223 to float
  %227 = fdiv float %226, 3.276700e+04
  %228 = fcmp ogt float %227, -1.000000e+00
  %229 = fcmp ogt float %227, 1.000000e+00
  %230 = select i1 %229, float 1.000000e+00, float %227
  %231 = select i1 %228, float %230, float -1.000000e+00
  %232 = sitofp i16 %225 to float
  %233 = fdiv float %232, 3.276700e+04
  %234 = fcmp ogt float %233, -1.000000e+00
  %235 = fcmp ogt float %233, 1.000000e+00
  %236 = select i1 %235, float 1.000000e+00, float %233
  %237 = select i1 %234, float %236, float -1.000000e+00
  %238 = bitcast i8* %218 to float*
  store float %231, float* %238, align 4
  %239 = getelementptr inbounds i8, i8* %218, i64 4
  %240 = bitcast i8* %239 to i32*
  store i32 1, i32* %240, align 4
  %241 = getelementptr inbounds i8, i8* %218, i64 8
  %242 = bitcast i8* %241 to float*
  store float %237, float* %242, align 4
  %243 = getelementptr inbounds i8, i8* %218, i64 12
  %244 = bitcast i8* %243 to i32*
  store i32 1, i32* %244, align 4
  br label %596

; <label>:245:                                    ; preds = %2
  %246 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %247 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %246, i64 8) #18
  %248 = bitcast i8* %247 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %248) #18
  %249 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %250 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %251 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %250) #18
  %252 = fcmp ogt float %249, 0.000000e+00
  %253 = fcmp ogt float %249, 1.000000e+00
  %254 = select i1 %253, float 1.000000e+00, float %249
  %255 = fmul float %254, 6.553500e+04
  %256 = select i1 %252, float %255, float 0.000000e+00
  %257 = tail call float @llvm.round.f32(float %256) #18
  %258 = fptoui float %257 to i16
  %259 = fcmp ogt float %251, 0.000000e+00
  %260 = fcmp ogt float %251, 1.000000e+00
  %261 = select i1 %260, float 1.000000e+00, float %251
  %262 = fmul float %261, 6.553500e+04
  %263 = select i1 %259, float %262, float 0.000000e+00
  %264 = tail call float @llvm.round.f32(float %263) #18
  %265 = fptoui float %264 to i16
  %266 = zext i16 %265 to i32
  %267 = shl nuw i32 %266, 16
  %268 = zext i16 %258 to i32
  %269 = or i32 %267, %268
  %270 = bitcast i8* %247 to i32*
  store i32 %269, i32* %270, align 4
  %271 = getelementptr inbounds i8, i8* %247, i64 4
  %272 = bitcast i8* %271 to i32*
  store i32 3, i32* %272, align 4
  br label %596

; <label>:273:                                    ; preds = %2
  %274 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %275 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %274, i64 16) #18
  %276 = bitcast i8* %275 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %276) #18
  %277 = getelementptr inbounds i8, i8* %275, i64 8
  %278 = bitcast i8* %277 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %278) #18
  %279 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %280 = trunc i32 %279 to i16
  %281 = lshr i32 %279, 16
  %282 = trunc i32 %281 to i16
  %283 = uitofp i16 %280 to float
  %284 = fdiv float %283, 6.553500e+04
  %285 = uitofp i16 %282 to float
  %286 = fdiv float %285, 6.553500e+04
  %287 = bitcast i8* %275 to float*
  store float %284, float* %287, align 4
  %288 = getelementptr inbounds i8, i8* %275, i64 4
  %289 = bitcast i8* %288 to i32*
  store i32 1, i32* %289, align 4
  %290 = getelementptr inbounds i8, i8* %275, i64 8
  %291 = bitcast i8* %290 to float*
  store float %286, float* %291, align 4
  %292 = getelementptr inbounds i8, i8* %275, i64 12
  %293 = bitcast i8* %292 to i32*
  store i32 1, i32* %293, align 4
  br label %596

; <label>:294:                                    ; preds = %2
  %295 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %296 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %295, i64 8) #18
  %297 = bitcast i8* %296 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %297) #18
  %298 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %299 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %300 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %299) #18
  %301 = bitcast float %298 to i32
  %302 = lshr i32 %301, 16
  %303 = and i32 %302, 32768
  %304 = and i32 %301, 2147483647
  %305 = icmp ugt i32 %304, 1207955455
  br i1 %305, label %306, label %308

; <label>:306:                                    ; preds = %294
  %307 = or i32 %302, 32767
  br label %333

; <label>:308:                                    ; preds = %294
  %309 = icmp ult i32 %304, 947912704
  br i1 %309, label %310, label %326

; <label>:310:                                    ; preds = %308
  %311 = lshr i32 %304, 23
  %312 = sub nsw i32 113, %311
  %313 = icmp slt i32 %312, 24
  br i1 %313, label %314, label %318

; <label>:314:                                    ; preds = %310
  %315 = and i32 %301, 8388607
  %316 = or i32 %315, 8388608
  %317 = lshr i32 %316, %312
  br label %318

; <label>:318:                                    ; preds = %314, %310
  %319 = phi i32 [ %317, %314 ], [ 0, %310 ]
  %320 = add i32 %319, 4095
  %321 = lshr i32 %319, 13
  %322 = and i32 %321, 1
  %323 = add i32 %320, %322
  %324 = lshr i32 %323, 13
  %325 = or i32 %324, %303
  br label %333

; <label>:326:                                    ; preds = %308
  %327 = add i32 %301, 134221823
  %328 = lshr i32 %301, 13
  %329 = and i32 %328, 1
  %330 = add i32 %327, %329
  %331 = lshr i32 %330, 13
  %332 = or i32 %331, %303
  br label %333

; <label>:333:                                    ; preds = %326, %318, %306
  %334 = phi i32 [ %307, %306 ], [ %325, %318 ], [ %332, %326 ]
  %335 = bitcast float %300 to i32
  %336 = lshr i32 %335, 16
  %337 = and i32 %336, 32768
  %338 = and i32 %335, 2147483647
  %339 = icmp ugt i32 %338, 1207955455
  br i1 %339, label %340, label %342

; <label>:340:                                    ; preds = %333
  %341 = or i32 %336, 32767
  br label %367

; <label>:342:                                    ; preds = %333
  %343 = icmp ult i32 %338, 947912704
  br i1 %343, label %344, label %360

; <label>:344:                                    ; preds = %342
  %345 = lshr i32 %338, 23
  %346 = sub nsw i32 113, %345
  %347 = icmp slt i32 %346, 24
  br i1 %347, label %348, label %352

; <label>:348:                                    ; preds = %344
  %349 = and i32 %335, 8388607
  %350 = or i32 %349, 8388608
  %351 = lshr i32 %350, %346
  br label %352

; <label>:352:                                    ; preds = %348, %344
  %353 = phi i32 [ %351, %348 ], [ 0, %344 ]
  %354 = add i32 %353, 4095
  %355 = lshr i32 %353, 13
  %356 = and i32 %355, 1
  %357 = add i32 %354, %356
  %358 = lshr i32 %357, 13
  %359 = or i32 %358, %337
  br label %367

; <label>:360:                                    ; preds = %342
  %361 = add i32 %335, 134221823
  %362 = lshr i32 %335, 13
  %363 = and i32 %362, 1
  %364 = add i32 %361, %363
  %365 = lshr i32 %364, 13
  %366 = or i32 %365, %337
  br label %367

; <label>:367:                                    ; preds = %340, %352, %360
  %368 = phi i32 [ %341, %340 ], [ %359, %352 ], [ %366, %360 ]
  %369 = shl i32 %368, 16
  %370 = and i32 %334, 65535
  %371 = or i32 %369, %370
  %372 = bitcast i8* %296 to i32*
  store i32 %371, i32* %372, align 4
  %373 = getelementptr inbounds i8, i8* %296, i64 4
  %374 = bitcast i8* %373 to i32*
  store i32 3, i32* %374, align 4
  br label %596

; <label>:375:                                    ; preds = %2
  %376 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %377 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %376, i64 16) #18
  %378 = bitcast i8* %377 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %378) #18
  %379 = getelementptr inbounds i8, i8* %377, i64 8
  %380 = bitcast i8* %379 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %380) #18
  %381 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %382 = trunc i32 %381 to i16
  %383 = lshr i32 %381, 16
  %384 = trunc i32 %383 to i16
  %385 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %382) #18
  %386 = tail call float @_ZN2gl16float16ToFloat32Et(i16 zeroext %384) #18
  %387 = bitcast i8* %377 to float*
  store float %385, float* %387, align 4
  %388 = getelementptr inbounds i8, i8* %377, i64 4
  %389 = bitcast i8* %388 to i32*
  store i32 1, i32* %389, align 4
  %390 = getelementptr inbounds i8, i8* %377, i64 8
  %391 = bitcast i8* %390 to float*
  store float %386, float* %391, align 4
  %392 = getelementptr inbounds i8, i8* %377, i64 12
  %393 = bitcast i8* %392 to i32*
  store i32 1, i32* %393, align 4
  br label %596

; <label>:394:                                    ; preds = %2
  %395 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %396 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %395, i64 8) #18
  %397 = bitcast i8* %396 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %397) #18
  %398 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %399 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %400 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %399) #18
  %401 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 2
  %402 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %401) #18
  %403 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 3
  %404 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %403) #18
  %405 = fcmp ogt float %398, 0.000000e+00
  %406 = fcmp ogt float %398, 1.000000e+00
  %407 = select i1 %406, float 1.000000e+00, float %398
  %408 = fmul float %407, 2.550000e+02
  %409 = select i1 %405, float %408, float 0.000000e+00
  %410 = tail call float @llvm.round.f32(float %409) #18
  %411 = fptoui float %410 to i8
  %412 = fcmp ogt float %400, 0.000000e+00
  %413 = fcmp ogt float %400, 1.000000e+00
  %414 = select i1 %413, float 1.000000e+00, float %400
  %415 = fmul float %414, 2.550000e+02
  %416 = select i1 %412, float %415, float 0.000000e+00
  %417 = tail call float @llvm.round.f32(float %416) #18
  %418 = fptoui float %417 to i8
  %419 = fcmp ogt float %402, 0.000000e+00
  %420 = fcmp ogt float %402, 1.000000e+00
  %421 = select i1 %420, float 1.000000e+00, float %402
  %422 = fmul float %421, 2.550000e+02
  %423 = select i1 %419, float %422, float 0.000000e+00
  %424 = tail call float @llvm.round.f32(float %423) #18
  %425 = fptoui float %424 to i8
  %426 = fcmp ogt float %404, 0.000000e+00
  %427 = fcmp ogt float %404, 1.000000e+00
  %428 = select i1 %427, float 1.000000e+00, float %404
  %429 = fmul float %428, 2.550000e+02
  %430 = select i1 %426, float %429, float 0.000000e+00
  %431 = tail call float @llvm.round.f32(float %430) #18
  %432 = fptoui float %431 to i8
  %433 = zext i8 %411 to i32
  %434 = zext i8 %418 to i32
  %435 = shl nuw nsw i32 %434, 8
  %436 = or i32 %435, %433
  %437 = zext i8 %425 to i32
  %438 = shl nuw nsw i32 %437, 16
  %439 = or i32 %436, %438
  %440 = zext i8 %432 to i32
  %441 = shl nuw i32 %440, 24
  %442 = or i32 %439, %441
  %443 = bitcast i8* %396 to i32*
  store i32 %442, i32* %443, align 4
  %444 = getelementptr inbounds i8, i8* %396, i64 4
  %445 = bitcast i8* %444 to i32*
  store i32 3, i32* %445, align 4
  br label %596

; <label>:446:                                    ; preds = %2
  %447 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %448 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %447, i64 8) #18
  %449 = bitcast i8* %448 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %449) #18
  %450 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %12) #18
  %451 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 1
  %452 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %451) #18
  %453 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 2
  %454 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %453) #18
  %455 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %12, i64 3
  %456 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %455) #18
  %457 = fcmp ogt float %450, -1.000000e+00
  %458 = fcmp ogt float %450, 1.000000e+00
  %459 = select i1 %458, float 1.000000e+00, float %450
  %460 = fmul float %459, 1.270000e+02
  %461 = select i1 %457, float %460, float -1.270000e+02
  %462 = tail call float @llvm.round.f32(float %461) #18
  %463 = fptosi float %462 to i8
  %464 = fcmp ogt float %452, -1.000000e+00
  %465 = fcmp ogt float %452, 1.000000e+00
  %466 = select i1 %465, float 1.000000e+00, float %452
  %467 = fmul float %466, 1.270000e+02
  %468 = select i1 %464, float %467, float -1.270000e+02
  %469 = tail call float @llvm.round.f32(float %468) #18
  %470 = fptosi float %469 to i8
  %471 = fcmp ogt float %454, -1.000000e+00
  %472 = fcmp ogt float %454, 1.000000e+00
  %473 = select i1 %472, float 1.000000e+00, float %454
  %474 = fmul float %473, 1.270000e+02
  %475 = select i1 %471, float %474, float -1.270000e+02
  %476 = tail call float @llvm.round.f32(float %475) #18
  %477 = fptosi float %476 to i8
  %478 = fcmp ogt float %456, -1.000000e+00
  %479 = fcmp ogt float %456, 1.000000e+00
  %480 = select i1 %479, float 1.000000e+00, float %456
  %481 = fmul float %480, 1.270000e+02
  %482 = select i1 %478, float %481, float -1.270000e+02
  %483 = tail call float @llvm.round.f32(float %482) #18
  %484 = fptosi float %483 to i8
  %485 = zext i8 %463 to i32
  %486 = zext i8 %470 to i32
  %487 = shl nuw nsw i32 %486, 8
  %488 = or i32 %487, %485
  %489 = zext i8 %477 to i32
  %490 = shl nuw nsw i32 %489, 16
  %491 = or i32 %488, %490
  %492 = zext i8 %484 to i32
  %493 = shl nuw i32 %492, 24
  %494 = or i32 %491, %493
  %495 = bitcast i8* %448 to i32*
  store i32 %494, i32* %495, align 4
  %496 = getelementptr inbounds i8, i8* %448, i64 4
  %497 = bitcast i8* %496 to i32*
  store i32 3, i32* %497, align 4
  br label %596

; <label>:498:                                    ; preds = %2
  %499 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %500 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %499, i64 32) #18
  %501 = bitcast i8* %500 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %501) #18
  %502 = getelementptr inbounds i8, i8* %500, i64 8
  %503 = bitcast i8* %502 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %503) #18
  %504 = getelementptr inbounds i8, i8* %500, i64 16
  %505 = bitcast i8* %504 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %505) #18
  %506 = getelementptr inbounds i8, i8* %500, i64 24
  %507 = bitcast i8* %506 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %507) #18
  %508 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %509 = trunc i32 %508 to i8
  %510 = uitofp i8 %509 to float
  %511 = fdiv float %510, 2.550000e+02
  %512 = lshr i32 %508, 8
  %513 = trunc i32 %512 to i8
  %514 = uitofp i8 %513 to float
  %515 = fdiv float %514, 2.550000e+02
  %516 = lshr i32 %508, 16
  %517 = trunc i32 %516 to i8
  %518 = uitofp i8 %517 to float
  %519 = fdiv float %518, 2.550000e+02
  %520 = lshr i32 %508, 24
  %521 = trunc i32 %520 to i8
  %522 = uitofp i8 %521 to float
  %523 = fdiv float %522, 2.550000e+02
  %524 = bitcast i8* %500 to float*
  store float %511, float* %524, align 4
  %525 = getelementptr inbounds i8, i8* %500, i64 4
  %526 = bitcast i8* %525 to i32*
  store i32 1, i32* %526, align 4
  %527 = getelementptr inbounds i8, i8* %500, i64 8
  %528 = bitcast i8* %527 to float*
  store float %515, float* %528, align 4
  %529 = getelementptr inbounds i8, i8* %500, i64 12
  %530 = bitcast i8* %529 to i32*
  store i32 1, i32* %530, align 4
  %531 = getelementptr inbounds i8, i8* %500, i64 16
  %532 = bitcast i8* %531 to float*
  store float %519, float* %532, align 4
  %533 = getelementptr inbounds i8, i8* %500, i64 20
  %534 = bitcast i8* %533 to i32*
  store i32 1, i32* %534, align 4
  %535 = getelementptr inbounds i8, i8* %500, i64 24
  %536 = bitcast i8* %535 to float*
  store float %523, float* %536, align 4
  %537 = getelementptr inbounds i8, i8* %500, i64 28
  %538 = bitcast i8* %537 to i32*
  store i32 1, i32* %538, align 4
  br label %596

; <label>:539:                                    ; preds = %2
  %540 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %541 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %540, i64 32) #18
  %542 = bitcast i8* %541 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %542) #18
  %543 = getelementptr inbounds i8, i8* %541, i64 8
  %544 = bitcast i8* %543 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %544) #18
  %545 = getelementptr inbounds i8, i8* %541, i64 16
  %546 = bitcast i8* %545 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %546) #18
  %547 = getelementptr inbounds i8, i8* %541, i64 24
  %548 = bitcast i8* %547 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* nonnull %548) #18
  %549 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %12) #18
  %550 = trunc i32 %549 to i8
  %551 = sitofp i8 %550 to float
  %552 = fdiv float %551, 1.270000e+02
  %553 = fcmp ogt float %552, -1.000000e+00
  %554 = fcmp ogt float %552, 1.000000e+00
  %555 = select i1 %554, float 1.000000e+00, float %552
  %556 = select i1 %553, float %555, float -1.000000e+00
  %557 = lshr i32 %549, 8
  %558 = trunc i32 %557 to i8
  %559 = sitofp i8 %558 to float
  %560 = fdiv float %559, 1.270000e+02
  %561 = fcmp ogt float %560, -1.000000e+00
  %562 = fcmp ogt float %560, 1.000000e+00
  %563 = select i1 %562, float 1.000000e+00, float %560
  %564 = select i1 %561, float %563, float -1.000000e+00
  %565 = lshr i32 %549, 16
  %566 = trunc i32 %565 to i8
  %567 = sitofp i8 %566 to float
  %568 = fdiv float %567, 1.270000e+02
  %569 = fcmp ogt float %568, -1.000000e+00
  %570 = fcmp ogt float %568, 1.000000e+00
  %571 = select i1 %570, float 1.000000e+00, float %568
  %572 = select i1 %569, float %571, float -1.000000e+00
  %573 = lshr i32 %549, 24
  %574 = trunc i32 %573 to i8
  %575 = sitofp i8 %574 to float
  %576 = fdiv float %575, 1.270000e+02
  %577 = fcmp ogt float %576, -1.000000e+00
  %578 = fcmp ogt float %576, 1.000000e+00
  %579 = select i1 %578, float 1.000000e+00, float %576
  %580 = select i1 %577, float %579, float -1.000000e+00
  %581 = bitcast i8* %541 to float*
  store float %556, float* %581, align 4
  %582 = getelementptr inbounds i8, i8* %541, i64 4
  %583 = bitcast i8* %582 to i32*
  store i32 1, i32* %583, align 4
  %584 = getelementptr inbounds i8, i8* %541, i64 8
  %585 = bitcast i8* %584 to float*
  store float %564, float* %585, align 4
  %586 = getelementptr inbounds i8, i8* %541, i64 12
  %587 = bitcast i8* %586 to i32*
  store i32 1, i32* %587, align 4
  %588 = getelementptr inbounds i8, i8* %541, i64 16
  %589 = bitcast i8* %588 to float*
  store float %572, float* %589, align 4
  %590 = getelementptr inbounds i8, i8* %541, i64 20
  %591 = bitcast i8* %590 to i32*
  store i32 1, i32* %591, align 4
  %592 = getelementptr inbounds i8, i8* %541, i64 24
  %593 = bitcast i8* %592 to float*
  store float %580, float* %593, align 4
  %594 = getelementptr inbounds i8, i8* %541, i64 28
  %595 = bitcast i8* %594 to i32*
  store i32 1, i32* %595, align 4
  br label %596

; <label>:596:                                    ; preds = %42, %27, %20, %35, %49, %34, %2, %539, %498, %446, %394, %375, %367, %273, %245, %216, %188, %187, %144, %119, %64
  %597 = phi %"class.sh::TConstantUnion"* [ null, %2 ], [ %542, %539 ], [ %501, %498 ], [ %449, %446 ], [ %397, %394 ], [ %378, %375 ], [ %297, %367 ], [ %276, %273 ], [ %248, %245 ], [ %219, %216 ], [ %191, %188 ], [ %159, %187 ], [ %130, %144 ], [ %77, %119 ], [ %53, %64 ], [ %23, %34 ], [ %38, %49 ], [ %23, %20 ], [ %38, %35 ], [ %23, %27 ], [ %38, %42 ]
  ret %"class.sh::TConstantUnion"* %597
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion22foldUnaryComponentWiseE9TOperatorPNS_12TDiagnosticsE(%"class.sh::TIntermConstantUnion"*, i32, %"class.sh::TDiagnostics"*) local_unnamed_addr #0 align 2 {
  %4 = alloca float, align 4
  %5 = bitcast %"class.sh::TIntermConstantUnion"* %0 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)***
  %6 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %6, i64 29
  %8 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %7, align 8
  %9 = tail call %"class.sh::TConstantUnion"* %8(%"class.sh::TIntermConstantUnion"* %0) #18
  %10 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0
  %11 = bitcast %"class.sh::TIntermConstantUnion"* %0 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %12 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %13 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %12, i64 31
  %14 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %13, align 8
  %15 = tail call dereferenceable(128) %"class.sh::TType"* %14(%"class.sh::TIntermExpression"* %10) #18
  %16 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %15) #18
  %17 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %16, i64 8)
  %18 = extractvalue { i64, i1 } %17, 1
  %19 = extractvalue { i64, i1 } %17, 0
  %20 = select i1 %18, i64 -1, i64 %19
  %21 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %22 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %21, i64 %20) #18
  %23 = bitcast i8* %22 to %"class.sh::TConstantUnion"*
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %828, label %25

; <label>:25:                                     ; preds = %3
  %26 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %16
  br label %27

; <label>:27:                                     ; preds = %27, %25
  %28 = phi %"class.sh::TConstantUnion"* [ %23, %25 ], [ %29, %27 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %28) #18
  %29 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %28, i64 1
  %30 = icmp eq %"class.sh::TConstantUnion"* %29, %26
  br i1 %30, label %31, label %27

; <label>:31:                                     ; preds = %27
  br i1 %24, label %828, label %32

; <label>:32:                                     ; preds = %31
  %33 = bitcast float* %4 to i8*
  %34 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  br label %35

; <label>:35:                                     ; preds = %32, %825
  %36 = phi i64 [ 0, %32 ], [ %826, %825 ]
  switch i32 %1, label %828 [
    i32 4, label %37
    i32 5, label %75
    i32 6, label %98
    i32 7, label %114
    i32 48, label %133
    i32 49, label %140
    i32 50, label %147
    i32 51, label %154
    i32 52, label %161
    i32 53, label %168
    i32 54, label %200
    i32 55, label %232
    i32 56, label %239
    i32 57, label %246
    i32 58, label %253
    i32 59, label %260
    i32 60, label %267
    i32 61, label %298
    i32 69, label %330
    i32 70, label %352
    i32 71, label %379
    i32 72, label %386
    i32 73, label %393
    i32 74, label %400
    i32 75, label %417
    i32 76, label %424
    i32 85, label %432
    i32 86, label %444
    i32 87, label %453
    i32 88, label %458
    i32 89, label %463
    i32 90, label %467
    i32 63, label %471
    i32 64, label %478
    i32 65, label %509
    i32 66, label %516
    i32 67, label %549
    i32 68, label %580
    i32 121, label %613
    i32 107, label %621
    i32 124, label %662
    i32 125, label %756
    i32 126, label %774
    i32 127, label %794
    i32 111, label %821
    i32 112, label %821
    i32 113, label %821
  ]

; <label>:37:                                     ; preds = %35
  %38 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %39 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %38, i64 31
  %40 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %39, align 8
  %41 = tail call dereferenceable(128) %"class.sh::TType"* %40(%"class.sh::TIntermExpression"* %10) #18
  %42 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %41, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  switch i32 %43, label %828 [
    i32 1, label %44
    i32 2, label %51
    i32 3, label %63
  ]

; <label>:44:                                     ; preds = %37
  %45 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %46 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %47 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %46) #18
  %48 = fsub float -0.000000e+00, %47
  %49 = bitcast %"class.sh::TConstantUnion"* %45 to float*
  store float %48, float* %49, align 4
  %50 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %50, align 4
  br label %825

; <label>:51:                                     ; preds = %37
  %52 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %53 = tail call zeroext i1 @_ZNK2sh14TConstantUnioneqEi(%"class.sh::TConstantUnion"* %52, i32 -2147483648) #18
  %54 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  br i1 %53, label %55, label %58

; <label>:55:                                     ; preds = %51
  %56 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %54, i64 0, i32 0, i32 0
  store i32 -2147483648, i32* %56, align 4
  %57 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %57, align 4
  br label %825

; <label>:58:                                     ; preds = %51
  %59 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %52) #18
  %60 = sub nsw i32 0, %59
  %61 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %54, i64 0, i32 0, i32 0
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %62, align 4
  br label %825

; <label>:63:                                     ; preds = %37
  %64 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %65 = tail call zeroext i1 @_ZNK2sh14TConstantUnioneqEj(%"class.sh::TConstantUnion"* %64, i32 -2147483648) #18
  %66 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  br i1 %65, label %67, label %70

; <label>:67:                                     ; preds = %63
  %68 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %66, i64 0, i32 0, i32 0
  store i32 -2147483648, i32* %68, align 4
  %69 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %69, align 4
  br label %825

; <label>:70:                                     ; preds = %63
  %71 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %64) #18
  %72 = sub nsw i32 0, %71
  %73 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %66, i64 0, i32 0, i32 0
  store i32 %72, i32* %73, align 4
  %74 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %74, align 4
  br label %825

; <label>:75:                                     ; preds = %35
  %76 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %77 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %76, i64 31
  %78 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %77, align 8
  %79 = tail call dereferenceable(128) %"class.sh::TType"* %78(%"class.sh::TIntermExpression"* %10) #18
  %80 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %79, i64 0, i32 0
  %81 = load i32, i32* %80, align 8
  switch i32 %81, label %828 [
    i32 1, label %82
    i32 2, label %88
    i32 3, label %93
  ]

; <label>:82:                                     ; preds = %75
  %83 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %84 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %85 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %84) #18
  %86 = bitcast %"class.sh::TConstantUnion"* %83 to float*
  store float %85, float* %86, align 4
  %87 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %87, align 4
  br label %825

; <label>:88:                                     ; preds = %75
  %89 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %90 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %89) #18
  %91 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %90, i32* %91, align 4
  %92 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %92, align 4
  br label %825

; <label>:93:                                     ; preds = %75
  %94 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %95 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %94) #18
  %96 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %97, align 4
  br label %825

; <label>:98:                                     ; preds = %35
  %99 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %100 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %99, i64 31
  %101 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %100, align 8
  %102 = tail call dereferenceable(128) %"class.sh::TType"* %101(%"class.sh::TIntermExpression"* %10) #18
  %103 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %102, i64 0, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = icmp eq i32 %104, 4
  br i1 %105, label %106, label %828

; <label>:106:                                    ; preds = %98
  %107 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %108 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %109 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %108) #18
  %110 = xor i1 %109, true
  %111 = zext i1 %110 to i8
  %112 = bitcast %"class.sh::TConstantUnion"* %107 to i8*
  store i8 %111, i8* %112, align 4
  %113 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %113, align 4
  br label %825

; <label>:114:                                    ; preds = %35
  %115 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %116 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %115, i64 31
  %117 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %116, align 8
  %118 = tail call dereferenceable(128) %"class.sh::TType"* %117(%"class.sh::TIntermExpression"* %10) #18
  %119 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %118, i64 0, i32 0
  %120 = load i32, i32* %119, align 8
  switch i32 %120, label %828 [
    i32 2, label %121
    i32 3, label %127
  ]

; <label>:121:                                    ; preds = %114
  %122 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %123 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %122) #18
  %124 = xor i32 %123, -1
  %125 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %124, i32* %125, align 4
  %126 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %126, align 4
  br label %825

; <label>:127:                                    ; preds = %114
  %128 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %129 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %128) #18
  %130 = xor i32 %129, -1
  %131 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %130, i32* %131, align 4
  %132 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %132, align 4
  br label %825

; <label>:133:                                    ; preds = %35
  %134 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %135 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %136 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %135) #18
  %137 = fmul float %136, 0x3F91DF46A0000000
  %138 = bitcast %"class.sh::TConstantUnion"* %134 to float*
  store float %137, float* %138, align 4
  %139 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %139, align 4
  br label %825

; <label>:140:                                    ; preds = %35
  %141 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %142 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %143 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %142) #18
  %144 = fmul float %143, 0x404CA5DC00000000
  %145 = bitcast %"class.sh::TConstantUnion"* %141 to float*
  store float %144, float* %145, align 4
  %146 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %146, align 4
  br label %825

; <label>:147:                                    ; preds = %35
  %148 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %149 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %150 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %148) #18
  %151 = tail call float @sinf(float %150) #18
  %152 = bitcast %"class.sh::TConstantUnion"* %149 to float*
  store float %151, float* %152, align 4
  %153 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %153, align 4
  br label %825

; <label>:154:                                    ; preds = %35
  %155 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %156 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %157 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %155) #18
  %158 = tail call float @cosf(float %157) #18
  %159 = bitcast %"class.sh::TConstantUnion"* %156 to float*
  store float %158, float* %159, align 4
  %160 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %160, align 4
  br label %825

; <label>:161:                                    ; preds = %35
  %162 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %163 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %164 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %162) #18
  %165 = tail call float @tanf(float %164) #18
  %166 = bitcast %"class.sh::TConstantUnion"* %163 to float*
  store float %165, float* %166, align 4
  %167 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %167, align 4
  br label %825

; <label>:168:                                    ; preds = %35
  %169 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %170 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %169) #18
  %171 = tail call float @llvm.fabs.f32(float %170)
  %172 = fcmp ogt float %171, 1.000000e+00
  br i1 %172, label %173, label %194

; <label>:173:                                    ; preds = %168
  %174 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %175 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %174, i64 31
  %176 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %175, align 8
  %177 = tail call dereferenceable(128) %"class.sh::TType"* %176(%"class.sh::TIntermExpression"* %10) #18
  %178 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %177, i64 0, i32 0
  %179 = load i32, i32* %178, align 8
  %180 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %181 = tail call i8* @_Z17GetOperatorString9TOperator(i32 53) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %181) #18
  switch i32 %179, label %825 [
    i32 1, label %182
    i32 2, label %185
    i32 3, label %188
    i32 4, label %191
  ]

; <label>:182:                                    ; preds = %173
  %183 = bitcast %"class.sh::TConstantUnion"* %180 to float*
  store float 0.000000e+00, float* %183, align 4
  %184 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %184, align 4
  br label %825

; <label>:185:                                    ; preds = %173
  %186 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %180, i64 0, i32 0, i32 0
  store i32 0, i32* %186, align 4
  %187 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %187, align 4
  br label %825

; <label>:188:                                    ; preds = %173
  %189 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %180, i64 0, i32 0, i32 0
  store i32 0, i32* %189, align 4
  %190 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %190, align 4
  br label %825

; <label>:191:                                    ; preds = %173
  %192 = bitcast %"class.sh::TConstantUnion"* %180 to i8*
  store i8 0, i8* %192, align 4
  %193 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %193, align 4
  br label %825

; <label>:194:                                    ; preds = %168
  %195 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %196 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %169) #18
  %197 = tail call float @asinf(float %196) #18
  %198 = bitcast %"class.sh::TConstantUnion"* %195 to float*
  store float %197, float* %198, align 4
  %199 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %199, align 4
  br label %825

; <label>:200:                                    ; preds = %35
  %201 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %202 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %201) #18
  %203 = tail call float @llvm.fabs.f32(float %202)
  %204 = fcmp ogt float %203, 1.000000e+00
  br i1 %204, label %205, label %226

; <label>:205:                                    ; preds = %200
  %206 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %207 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %206, i64 31
  %208 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %207, align 8
  %209 = tail call dereferenceable(128) %"class.sh::TType"* %208(%"class.sh::TIntermExpression"* %10) #18
  %210 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %209, i64 0, i32 0
  %211 = load i32, i32* %210, align 8
  %212 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %213 = tail call i8* @_Z17GetOperatorString9TOperator(i32 54) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %213) #18
  switch i32 %211, label %825 [
    i32 1, label %214
    i32 2, label %217
    i32 3, label %220
    i32 4, label %223
  ]

; <label>:214:                                    ; preds = %205
  %215 = bitcast %"class.sh::TConstantUnion"* %212 to float*
  store float 0.000000e+00, float* %215, align 4
  %216 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %216, align 4
  br label %825

; <label>:217:                                    ; preds = %205
  %218 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 0, i32 0, i32 0
  store i32 0, i32* %218, align 4
  %219 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %219, align 4
  br label %825

; <label>:220:                                    ; preds = %205
  %221 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %212, i64 0, i32 0, i32 0
  store i32 0, i32* %221, align 4
  %222 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %222, align 4
  br label %825

; <label>:223:                                    ; preds = %205
  %224 = bitcast %"class.sh::TConstantUnion"* %212 to i8*
  store i8 0, i8* %224, align 4
  %225 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %225, align 4
  br label %825

; <label>:226:                                    ; preds = %200
  %227 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %228 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %201) #18
  %229 = tail call float @acosf(float %228) #18
  %230 = bitcast %"class.sh::TConstantUnion"* %227 to float*
  store float %229, float* %230, align 4
  %231 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %231, align 4
  br label %825

; <label>:232:                                    ; preds = %35
  %233 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %234 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %235 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %233) #18
  %236 = tail call float @atanf(float %235) #18
  %237 = bitcast %"class.sh::TConstantUnion"* %234 to float*
  store float %236, float* %237, align 4
  %238 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %238, align 4
  br label %825

; <label>:239:                                    ; preds = %35
  %240 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %241 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %242 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %240) #18
  %243 = tail call float @sinhf(float %242) #18
  %244 = bitcast %"class.sh::TConstantUnion"* %241 to float*
  store float %243, float* %244, align 4
  %245 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %245, align 4
  br label %825

; <label>:246:                                    ; preds = %35
  %247 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %248 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %249 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %247) #18
  %250 = tail call float @coshf(float %249) #18
  %251 = bitcast %"class.sh::TConstantUnion"* %248 to float*
  store float %250, float* %251, align 4
  %252 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %252, align 4
  br label %825

; <label>:253:                                    ; preds = %35
  %254 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %255 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %256 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %254) #18
  %257 = tail call float @tanhf(float %256) #18
  %258 = bitcast %"class.sh::TConstantUnion"* %255 to float*
  store float %257, float* %258, align 4
  %259 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %259, align 4
  br label %825

; <label>:260:                                    ; preds = %35
  %261 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %262 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %263 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %261) #18
  %264 = tail call float @asinhf(float %263) #18
  %265 = bitcast %"class.sh::TConstantUnion"* %262 to float*
  store float %264, float* %265, align 4
  %266 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %266, align 4
  br label %825

; <label>:267:                                    ; preds = %35
  %268 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %269 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %268) #18
  %270 = fcmp olt float %269, 1.000000e+00
  br i1 %270, label %271, label %292

; <label>:271:                                    ; preds = %267
  %272 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %273 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %272, i64 31
  %274 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %273, align 8
  %275 = tail call dereferenceable(128) %"class.sh::TType"* %274(%"class.sh::TIntermExpression"* %10) #18
  %276 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %275, i64 0, i32 0
  %277 = load i32, i32* %276, align 8
  %278 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %279 = tail call i8* @_Z17GetOperatorString9TOperator(i32 60) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %279) #18
  switch i32 %277, label %825 [
    i32 1, label %280
    i32 2, label %283
    i32 3, label %286
    i32 4, label %289
  ]

; <label>:280:                                    ; preds = %271
  %281 = bitcast %"class.sh::TConstantUnion"* %278 to float*
  store float 0.000000e+00, float* %281, align 4
  %282 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %282, align 4
  br label %825

; <label>:283:                                    ; preds = %271
  %284 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 0, i32 0, i32 0
  store i32 0, i32* %284, align 4
  %285 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %285, align 4
  br label %825

; <label>:286:                                    ; preds = %271
  %287 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 0, i32 0, i32 0
  store i32 0, i32* %287, align 4
  %288 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %288, align 4
  br label %825

; <label>:289:                                    ; preds = %271
  %290 = bitcast %"class.sh::TConstantUnion"* %278 to i8*
  store i8 0, i8* %290, align 4
  %291 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %291, align 4
  br label %825

; <label>:292:                                    ; preds = %267
  %293 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %294 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %268) #18
  %295 = tail call float @acoshf(float %294) #18
  %296 = bitcast %"class.sh::TConstantUnion"* %293 to float*
  store float %295, float* %296, align 4
  %297 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %297, align 4
  br label %825

; <label>:298:                                    ; preds = %35
  %299 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %300 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %299) #18
  %301 = tail call float @llvm.fabs.f32(float %300)
  %302 = fcmp ult float %301, 1.000000e+00
  br i1 %302, label %324, label %303

; <label>:303:                                    ; preds = %298
  %304 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %305 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %304, i64 31
  %306 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %305, align 8
  %307 = tail call dereferenceable(128) %"class.sh::TType"* %306(%"class.sh::TIntermExpression"* %10) #18
  %308 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %307, i64 0, i32 0
  %309 = load i32, i32* %308, align 8
  %310 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %311 = tail call i8* @_Z17GetOperatorString9TOperator(i32 61) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %311) #18
  switch i32 %309, label %825 [
    i32 1, label %312
    i32 2, label %315
    i32 3, label %318
    i32 4, label %321
  ]

; <label>:312:                                    ; preds = %303
  %313 = bitcast %"class.sh::TConstantUnion"* %310 to float*
  store float 0.000000e+00, float* %313, align 4
  %314 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %314, align 4
  br label %825

; <label>:315:                                    ; preds = %303
  %316 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %310, i64 0, i32 0, i32 0
  store i32 0, i32* %316, align 4
  %317 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %317, align 4
  br label %825

; <label>:318:                                    ; preds = %303
  %319 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %310, i64 0, i32 0, i32 0
  store i32 0, i32* %319, align 4
  %320 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %320, align 4
  br label %825

; <label>:321:                                    ; preds = %303
  %322 = bitcast %"class.sh::TConstantUnion"* %310 to i8*
  store i8 0, i8* %322, align 4
  %323 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %323, align 4
  br label %825

; <label>:324:                                    ; preds = %298
  %325 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %326 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %299) #18
  %327 = tail call float @atanhf(float %326) #18
  %328 = bitcast %"class.sh::TConstantUnion"* %325 to float*
  store float %327, float* %328, align 4
  %329 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %329, align 4
  br label %825

; <label>:330:                                    ; preds = %35
  %331 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %332 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %331, i64 31
  %333 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %332, align 8
  %334 = tail call dereferenceable(128) %"class.sh::TType"* %333(%"class.sh::TIntermExpression"* %10) #18
  %335 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %334, i64 0, i32 0
  %336 = load i32, i32* %335, align 8
  switch i32 %336, label %828 [
    i32 1, label %337
    i32 2, label %344
  ]

; <label>:337:                                    ; preds = %330
  %338 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %339 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %340 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %339) #18
  %341 = tail call float @llvm.fabs.f32(float %340)
  %342 = bitcast %"class.sh::TConstantUnion"* %338 to float*
  store float %341, float* %342, align 4
  %343 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %343, align 4
  br label %825

; <label>:344:                                    ; preds = %330
  %345 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %346 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %345) #18
  %347 = icmp slt i32 %346, 0
  %348 = sub nsw i32 0, %346
  %349 = select i1 %347, i32 %348, i32 %346
  %350 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %349, i32* %350, align 4
  %351 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %351, align 4
  br label %825

; <label>:352:                                    ; preds = %35
  %353 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %354 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %353, i64 31
  %355 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %354, align 8
  %356 = tail call dereferenceable(128) %"class.sh::TType"* %355(%"class.sh::TIntermExpression"* %10) #18
  %357 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %356, i64 0, i32 0
  %358 = load i32, i32* %357, align 8
  switch i32 %358, label %828 [
    i32 1, label %359
    i32 2, label %371
  ]

; <label>:359:                                    ; preds = %352
  %360 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %361 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %360) #18
  %362 = fcmp ogt float %361, 0.000000e+00
  br i1 %362, label %366, label %363

; <label>:363:                                    ; preds = %359
  %364 = fcmp olt float %361, 0.000000e+00
  br i1 %364, label %365, label %366

; <label>:365:                                    ; preds = %363
  br label %366

; <label>:366:                                    ; preds = %359, %363, %365
  %367 = phi float [ -1.000000e+00, %365 ], [ 0.000000e+00, %363 ], [ 1.000000e+00, %359 ]
  %368 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %369 = bitcast %"class.sh::TConstantUnion"* %368 to float*
  store float %367, float* %369, align 4
  %370 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %370, align 4
  br label %825

; <label>:371:                                    ; preds = %352
  %372 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %373 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %372) #18
  %374 = icmp sgt i32 %373, 0
  %375 = ashr i32 %373, 31
  %376 = select i1 %374, i32 1, i32 %375
  %377 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %376, i32* %377, align 4
  %378 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %378, align 4
  br label %825

; <label>:379:                                    ; preds = %35
  %380 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %381 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %382 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %380) #18
  %383 = tail call float @floorf(float %382) #18
  %384 = bitcast %"class.sh::TConstantUnion"* %381 to float*
  store float %383, float* %384, align 4
  %385 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %385, align 4
  br label %825

; <label>:386:                                    ; preds = %35
  %387 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %388 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %389 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %387) #18
  %390 = tail call float @truncf(float %389) #18
  %391 = bitcast %"class.sh::TConstantUnion"* %388 to float*
  store float %390, float* %391, align 4
  %392 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %392, align 4
  br label %825

; <label>:393:                                    ; preds = %35
  %394 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %395 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %396 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %394) #18
  %397 = tail call float @roundf(float %396) #18
  %398 = bitcast %"class.sh::TConstantUnion"* %395 to float*
  store float %397, float* %398, align 4
  %399 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %399, align 4
  br label %825

; <label>:400:                                    ; preds = %35
  %401 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %402 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %401) #18
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #18
  %403 = call float @modff(float %402, float* nonnull %4) #18
  %404 = tail call float @llvm.fabs.f32(float %403)
  %405 = fcmp oeq float %404, 5.000000e-01
  br i1 %405, label %406, label %410

; <label>:406:                                    ; preds = %400
  %407 = fmul float %402, 5.000000e-01
  %408 = tail call float @llvm.round.f32(float %407)
  %409 = fmul float %408, 2.000000e+00
  br label %412

; <label>:410:                                    ; preds = %400
  %411 = tail call float @llvm.round.f32(float %402)
  br label %412

; <label>:412:                                    ; preds = %410, %406
  %413 = phi float [ %411, %410 ], [ %409, %406 ]
  %414 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %415 = bitcast %"class.sh::TConstantUnion"* %414 to float*
  store float %413, float* %415, align 4
  %416 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %416, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #18
  br label %825

; <label>:417:                                    ; preds = %35
  %418 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %419 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %420 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %418) #18
  %421 = tail call float @ceilf(float %420) #18
  %422 = bitcast %"class.sh::TConstantUnion"* %419 to float*
  store float %421, float* %422, align 4
  %423 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %423, align 4
  br label %825

; <label>:424:                                    ; preds = %35
  %425 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %426 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %425) #18
  %427 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %428 = tail call float @llvm.floor.f32(float %426)
  %429 = fsub float %426, %428
  %430 = bitcast %"class.sh::TConstantUnion"* %427 to float*
  store float %429, float* %430, align 4
  %431 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %431, align 4
  br label %825

; <label>:432:                                    ; preds = %35
  %433 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %434 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %9) #18
  %435 = bitcast float %434 to i32
  %436 = and i32 %435, 2139095040
  %437 = icmp eq i32 %436, 2139095040
  %438 = and i32 %435, 8388607
  %439 = icmp ne i32 %438, 0
  %440 = and i1 %437, %439
  %441 = zext i1 %440 to i8
  %442 = bitcast %"class.sh::TConstantUnion"* %433 to i8*
  store i8 %441, i8* %442, align 4
  %443 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %443, align 4
  br label %825

; <label>:444:                                    ; preds = %35
  %445 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %446 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %9) #18
  %447 = bitcast float %446 to i32
  %448 = and i32 %447, 2147483647
  %449 = icmp eq i32 %448, 2139095040
  %450 = zext i1 %449 to i8
  %451 = bitcast %"class.sh::TConstantUnion"* %445 to i8*
  store i8 %450, i8* %451, align 4
  %452 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %452, align 4
  br label %825

; <label>:453:                                    ; preds = %35
  %454 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %455 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %9) #18
  %456 = bitcast %"class.sh::TConstantUnion"* %454 to float*
  store float %455, float* %456, align 4
  %457 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %457, align 4
  br label %825

; <label>:458:                                    ; preds = %35
  %459 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %460 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %9) #18
  %461 = bitcast %"class.sh::TConstantUnion"* %459 to float*
  store float %460, float* %461, align 4
  %462 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %462, align 4
  br label %825

; <label>:463:                                    ; preds = %35
  %464 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %9) #18
  %465 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %464, i32* %465, align 4
  %466 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %466, align 4
  br label %825

; <label>:467:                                    ; preds = %35
  %468 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %9) #18
  %469 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %468, i32* %469, align 4
  %470 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %470, align 4
  br label %825

; <label>:471:                                    ; preds = %35
  %472 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %473 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %474 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %472) #18
  %475 = tail call float @expf(float %474) #18
  %476 = bitcast %"class.sh::TConstantUnion"* %473 to float*
  store float %475, float* %476, align 4
  %477 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %477, align 4
  br label %825

; <label>:478:                                    ; preds = %35
  %479 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %480 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %479) #18
  %481 = fcmp ugt float %480, 0.000000e+00
  br i1 %481, label %503, label %482

; <label>:482:                                    ; preds = %478
  %483 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %484 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %483, i64 31
  %485 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %484, align 8
  %486 = tail call dereferenceable(128) %"class.sh::TType"* %485(%"class.sh::TIntermExpression"* %10) #18
  %487 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %486, i64 0, i32 0
  %488 = load i32, i32* %487, align 8
  %489 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %490 = tail call i8* @_Z17GetOperatorString9TOperator(i32 64) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %490) #18
  switch i32 %488, label %825 [
    i32 1, label %491
    i32 2, label %494
    i32 3, label %497
    i32 4, label %500
  ]

; <label>:491:                                    ; preds = %482
  %492 = bitcast %"class.sh::TConstantUnion"* %489 to float*
  store float 0.000000e+00, float* %492, align 4
  %493 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %493, align 4
  br label %825

; <label>:494:                                    ; preds = %482
  %495 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %489, i64 0, i32 0, i32 0
  store i32 0, i32* %495, align 4
  %496 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %496, align 4
  br label %825

; <label>:497:                                    ; preds = %482
  %498 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %489, i64 0, i32 0, i32 0
  store i32 0, i32* %498, align 4
  %499 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %499, align 4
  br label %825

; <label>:500:                                    ; preds = %482
  %501 = bitcast %"class.sh::TConstantUnion"* %489 to i8*
  store i8 0, i8* %501, align 4
  %502 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %502, align 4
  br label %825

; <label>:503:                                    ; preds = %478
  %504 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %505 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %479) #18
  %506 = tail call float @logf(float %505) #18
  %507 = bitcast %"class.sh::TConstantUnion"* %504 to float*
  store float %506, float* %507, align 4
  %508 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %508, align 4
  br label %825

; <label>:509:                                    ; preds = %35
  %510 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %511 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %512 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %510) #18
  %513 = tail call float @exp2f(float %512) #18
  %514 = bitcast %"class.sh::TConstantUnion"* %511 to float*
  store float %513, float* %514, align 4
  %515 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %515, align 4
  br label %825

; <label>:516:                                    ; preds = %35
  %517 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %518 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %517) #18
  %519 = fcmp ugt float %518, 0.000000e+00
  br i1 %519, label %541, label %520

; <label>:520:                                    ; preds = %516
  %521 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %522 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %521, i64 31
  %523 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %522, align 8
  %524 = tail call dereferenceable(128) %"class.sh::TType"* %523(%"class.sh::TIntermExpression"* %10) #18
  %525 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %524, i64 0, i32 0
  %526 = load i32, i32* %525, align 8
  %527 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %528 = tail call i8* @_Z17GetOperatorString9TOperator(i32 66) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %528) #18
  switch i32 %526, label %825 [
    i32 1, label %529
    i32 2, label %532
    i32 3, label %535
    i32 4, label %538
  ]

; <label>:529:                                    ; preds = %520
  %530 = bitcast %"class.sh::TConstantUnion"* %527 to float*
  store float 0.000000e+00, float* %530, align 4
  %531 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %531, align 4
  br label %825

; <label>:532:                                    ; preds = %520
  %533 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %527, i64 0, i32 0, i32 0
  store i32 0, i32* %533, align 4
  %534 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %534, align 4
  br label %825

; <label>:535:                                    ; preds = %520
  %536 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %527, i64 0, i32 0, i32 0
  store i32 0, i32* %536, align 4
  %537 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %537, align 4
  br label %825

; <label>:538:                                    ; preds = %520
  %539 = bitcast %"class.sh::TConstantUnion"* %527 to i8*
  store i8 0, i8* %539, align 4
  %540 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %540, align 4
  br label %825

; <label>:541:                                    ; preds = %516
  %542 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %543 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %517) #18
  %544 = tail call float @logf(float %543) #18
  %545 = bitcast %"class.sh::TConstantUnion"* %542 to float*
  store float %544, float* %545, align 4
  %546 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %546, align 4
  %547 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %542) #18
  %548 = fdiv float %547, 0x3FE62E4300000000
  store float %548, float* %545, align 4
  store i32 1, i32* %546, align 4
  br label %825

; <label>:549:                                    ; preds = %35
  %550 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %551 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %550) #18
  %552 = fcmp olt float %551, 0.000000e+00
  br i1 %552, label %553, label %574

; <label>:553:                                    ; preds = %549
  %554 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %555 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %554, i64 31
  %556 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %555, align 8
  %557 = tail call dereferenceable(128) %"class.sh::TType"* %556(%"class.sh::TIntermExpression"* %10) #18
  %558 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %557, i64 0, i32 0
  %559 = load i32, i32* %558, align 8
  %560 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %561 = tail call i8* @_Z17GetOperatorString9TOperator(i32 67) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %561) #18
  switch i32 %559, label %825 [
    i32 1, label %562
    i32 2, label %565
    i32 3, label %568
    i32 4, label %571
  ]

; <label>:562:                                    ; preds = %553
  %563 = bitcast %"class.sh::TConstantUnion"* %560 to float*
  store float 0.000000e+00, float* %563, align 4
  %564 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %564, align 4
  br label %825

; <label>:565:                                    ; preds = %553
  %566 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %560, i64 0, i32 0, i32 0
  store i32 0, i32* %566, align 4
  %567 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %567, align 4
  br label %825

; <label>:568:                                    ; preds = %553
  %569 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %560, i64 0, i32 0, i32 0
  store i32 0, i32* %569, align 4
  %570 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %570, align 4
  br label %825

; <label>:571:                                    ; preds = %553
  %572 = bitcast %"class.sh::TConstantUnion"* %560 to i8*
  store i8 0, i8* %572, align 4
  %573 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %573, align 4
  br label %825

; <label>:574:                                    ; preds = %549
  %575 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %576 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %550) #18
  %577 = tail call float @sqrtf(float %576) #18
  %578 = bitcast %"class.sh::TConstantUnion"* %575 to float*
  store float %577, float* %578, align 4
  %579 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %579, align 4
  br label %825

; <label>:580:                                    ; preds = %35
  %581 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %582 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %581) #18
  %583 = fcmp ugt float %582, 0.000000e+00
  br i1 %583, label %605, label %584

; <label>:584:                                    ; preds = %580
  %585 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %586 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %585, i64 31
  %587 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %586, align 8
  %588 = tail call dereferenceable(128) %"class.sh::TType"* %587(%"class.sh::TIntermExpression"* %10) #18
  %589 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %588, i64 0, i32 0
  %590 = load i32, i32* %589, align 8
  %591 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %592 = tail call i8* @_Z17GetOperatorString9TOperator(i32 68) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %592) #18
  switch i32 %590, label %825 [
    i32 1, label %593
    i32 2, label %596
    i32 3, label %599
    i32 4, label %602
  ]

; <label>:593:                                    ; preds = %584
  %594 = bitcast %"class.sh::TConstantUnion"* %591 to float*
  store float 0.000000e+00, float* %594, align 4
  %595 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %595, align 4
  br label %825

; <label>:596:                                    ; preds = %584
  %597 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %591, i64 0, i32 0, i32 0
  store i32 0, i32* %597, align 4
  %598 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %598, align 4
  br label %825

; <label>:599:                                    ; preds = %584
  %600 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %591, i64 0, i32 0, i32 0
  store i32 0, i32* %600, align 4
  %601 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %601, align 4
  br label %825

; <label>:602:                                    ; preds = %584
  %603 = bitcast %"class.sh::TConstantUnion"* %591 to i8*
  store i8 0, i8* %603, align 4
  %604 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %604, align 4
  br label %825

; <label>:605:                                    ; preds = %580
  %606 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %607 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %581) #18
  %608 = tail call float @sqrtf(float %607) #18
  %609 = bitcast %"class.sh::TConstantUnion"* %606 to float*
  store float %608, float* %609, align 4
  %610 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %610, align 4
  %611 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %606) #18
  %612 = fdiv float 1.000000e+00, %611
  store float %612, float* %609, align 4
  store i32 1, i32* %610, align 4
  br label %825

; <label>:613:                                    ; preds = %35
  %614 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %615 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %616 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %615) #18
  %617 = xor i1 %616, true
  %618 = zext i1 %617 to i8
  %619 = bitcast %"class.sh::TConstantUnion"* %614 to i8*
  store i8 %618, i8* %619, align 4
  %620 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %620, align 4
  br label %825

; <label>:621:                                    ; preds = %35
  %622 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  %623 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %622) #18
  br label %624

; <label>:624:                                    ; preds = %621, %624
  %625 = phi float [ %630, %624 ], [ 0.000000e+00, %621 ]
  %626 = phi i64 [ %631, %624 ], [ 0, %621 ]
  %627 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %626
  %628 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %627) #18
  %629 = fmul float %628, %628
  %630 = fadd float %625, %629
  %631 = add nuw i64 %626, 1
  %632 = icmp eq i64 %631, %16
  br i1 %632, label %633, label %624

; <label>:633:                                    ; preds = %624
  %634 = tail call float @sqrtf(float %630) #18
  %635 = fcmp une float %634, 0.000000e+00
  br i1 %635, label %636, label %641

; <label>:636:                                    ; preds = %633
  %637 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %638 = fdiv float %623, %634
  %639 = bitcast %"class.sh::TConstantUnion"* %637 to float*
  store float %638, float* %639, align 4
  %640 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %640, align 4
  br label %825

; <label>:641:                                    ; preds = %633
  %642 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %643 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %642, i64 31
  %644 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %643, align 8
  %645 = tail call dereferenceable(128) %"class.sh::TType"* %644(%"class.sh::TIntermExpression"* %10) #18
  %646 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %645, i64 0, i32 0
  %647 = load i32, i32* %646, align 8
  %648 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %649 = tail call i8* @_Z17GetOperatorString9TOperator(i32 107) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %2, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %34, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %649) #18
  switch i32 %647, label %825 [
    i32 1, label %650
    i32 2, label %653
    i32 3, label %656
    i32 4, label %659
  ]

; <label>:650:                                    ; preds = %641
  %651 = bitcast %"class.sh::TConstantUnion"* %648 to float*
  store float 0.000000e+00, float* %651, align 4
  %652 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %652, align 4
  br label %825

; <label>:653:                                    ; preds = %641
  %654 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %648, i64 0, i32 0, i32 0
  store i32 0, i32* %654, align 4
  %655 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %655, align 4
  br label %825

; <label>:656:                                    ; preds = %641
  %657 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %648, i64 0, i32 0, i32 0
  store i32 0, i32* %657, align 4
  %658 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 3, i32* %658, align 4
  br label %825

; <label>:659:                                    ; preds = %641
  %660 = bitcast %"class.sh::TConstantUnion"* %648 to i8*
  store i8 0, i8* %660, align 4
  %661 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 4, i32* %661, align 4
  br label %825

; <label>:662:                                    ; preds = %35
  %663 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %664 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %663, i64 31
  %665 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %664, align 8
  %666 = tail call dereferenceable(128) %"class.sh::TType"* %665(%"class.sh::TIntermExpression"* %10) #18
  %667 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %666, i64 0, i32 0
  %668 = load i32, i32* %667, align 8
  %669 = icmp eq i32 %668, 2
  %670 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  br i1 %669, label %671, label %673

; <label>:671:                                    ; preds = %662
  %672 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %670) #18
  br label %675

; <label>:673:                                    ; preds = %662
  %674 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %670) #18
  br label %675

; <label>:675:                                    ; preds = %671, %673
  %676 = phi i32 [ %672, %671 ], [ %674, %673 ]
  %677 = insertelement <2 x i32> undef, i32 %676, i32 0
  %678 = shufflevector <2 x i32> %677, <2 x i32> undef, <2 x i32> zeroinitializer
  %679 = lshr <2 x i32> %678, <i32 0, i32 1>
  %680 = and <2 x i32> %679, <i32 1, i32 1>
  %681 = shl <2 x i32> %680, <i32 31, i32 30>
  %682 = lshr <2 x i32> %678, <i32 2, i32 3>
  %683 = and <2 x i32> %682, <i32 1, i32 1>
  %684 = shl <2 x i32> %683, <i32 29, i32 28>
  %685 = or <2 x i32> %684, %681
  %686 = lshr <2 x i32> %678, <i32 4, i32 5>
  %687 = and <2 x i32> %686, <i32 1, i32 1>
  %688 = shl <2 x i32> %687, <i32 27, i32 26>
  %689 = or <2 x i32> %688, %685
  %690 = lshr <2 x i32> %678, <i32 6, i32 7>
  %691 = and <2 x i32> %690, <i32 1, i32 1>
  %692 = shl <2 x i32> %691, <i32 25, i32 24>
  %693 = or <2 x i32> %692, %689
  %694 = lshr <2 x i32> %678, <i32 8, i32 9>
  %695 = and <2 x i32> %694, <i32 1, i32 1>
  %696 = shl <2 x i32> %695, <i32 23, i32 22>
  %697 = or <2 x i32> %696, %693
  %698 = lshr <2 x i32> %678, <i32 10, i32 11>
  %699 = and <2 x i32> %698, <i32 1, i32 1>
  %700 = shl <2 x i32> %699, <i32 21, i32 20>
  %701 = or <2 x i32> %700, %697
  %702 = lshr <2 x i32> %678, <i32 12, i32 13>
  %703 = and <2 x i32> %702, <i32 1, i32 1>
  %704 = shl <2 x i32> %703, <i32 19, i32 18>
  %705 = or <2 x i32> %704, %701
  %706 = lshr <2 x i32> %678, <i32 14, i32 15>
  %707 = and <2 x i32> %706, <i32 1, i32 1>
  %708 = shl <2 x i32> %707, <i32 17, i32 16>
  %709 = or <2 x i32> %708, %705
  %710 = lshr <2 x i32> %678, <i32 16, i32 17>
  %711 = and <2 x i32> %710, <i32 1, i32 1>
  %712 = shl <2 x i32> %711, <i32 15, i32 14>
  %713 = or <2 x i32> %712, %709
  %714 = lshr <2 x i32> %678, <i32 18, i32 19>
  %715 = and <2 x i32> %714, <i32 1, i32 1>
  %716 = shl <2 x i32> %715, <i32 13, i32 12>
  %717 = or <2 x i32> %716, %713
  %718 = lshr <2 x i32> %678, <i32 20, i32 21>
  %719 = and <2 x i32> %718, <i32 1, i32 1>
  %720 = shl <2 x i32> %719, <i32 11, i32 10>
  %721 = or <2 x i32> %720, %717
  %722 = lshr <2 x i32> %678, <i32 22, i32 23>
  %723 = and <2 x i32> %722, <i32 1, i32 1>
  %724 = shl <2 x i32> %723, <i32 9, i32 8>
  %725 = or <2 x i32> %724, %721
  %726 = lshr <2 x i32> %678, <i32 24, i32 25>
  %727 = and <2 x i32> %726, <i32 1, i32 1>
  %728 = shl <2 x i32> %727, <i32 7, i32 6>
  %729 = or <2 x i32> %728, %725
  %730 = lshr <2 x i32> %678, <i32 26, i32 27>
  %731 = and <2 x i32> %730, <i32 1, i32 1>
  %732 = shl <2 x i32> %731, <i32 5, i32 4>
  %733 = or <2 x i32> %732, %729
  %734 = lshr <2 x i32> %678, <i32 28, i32 29>
  %735 = and <2 x i32> %734, <i32 1, i32 1>
  %736 = shl <2 x i32> %735, <i32 3, i32 2>
  %737 = or <2 x i32> %736, %733
  %738 = lshr <2 x i32> %678, <i32 30, i32 31>
  %739 = and <2 x i32> %738, <i32 1, i32 1>
  %740 = shl <2 x i32> %739, <i32 1, i32 0>
  %741 = or <2 x i32> %740, %737
  %742 = shufflevector <2 x i32> %741, <2 x i32> undef, <2 x i32> <i32 1, i32 undef>
  %743 = or <2 x i32> %741, %742
  %744 = extractelement <2 x i32> %743, i32 0
  %745 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %746 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %745, i64 31
  %747 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %746, align 8
  %748 = tail call dereferenceable(128) %"class.sh::TType"* %747(%"class.sh::TIntermExpression"* %10) #18
  %749 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %748, i64 0, i32 0
  %750 = load i32, i32* %749, align 8
  %751 = icmp eq i32 %750, 2
  %752 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %744, i32* %752, align 4
  %753 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  br i1 %751, label %754, label %755

; <label>:754:                                    ; preds = %675
  store i32 2, i32* %753, align 4
  br label %825

; <label>:755:                                    ; preds = %675
  store i32 3, i32* %753, align 4
  br label %825

; <label>:756:                                    ; preds = %35
  %757 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %758 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %757, i64 31
  %759 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %758, align 8
  %760 = tail call dereferenceable(128) %"class.sh::TType"* %759(%"class.sh::TIntermExpression"* %10) #18
  %761 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %760, i64 0, i32 0
  %762 = load i32, i32* %761, align 8
  %763 = icmp eq i32 %762, 2
  %764 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  br i1 %763, label %765, label %767

; <label>:765:                                    ; preds = %756
  %766 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %764) #18
  br label %769

; <label>:767:                                    ; preds = %756
  %768 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %764) #18
  br label %769

; <label>:769:                                    ; preds = %767, %765
  %770 = phi i32 [ %766, %765 ], [ %768, %767 ]
  %771 = tail call i32 @llvm.ctpop.i32(i32 %770) #18, !range !67
  %772 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %771, i32* %772, align 4
  %773 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %773, align 4
  br label %825

; <label>:774:                                    ; preds = %35
  %775 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %776 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %775, i64 31
  %777 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %776, align 8
  %778 = tail call dereferenceable(128) %"class.sh::TType"* %777(%"class.sh::TIntermExpression"* %10) #18
  %779 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %778, i64 0, i32 0
  %780 = load i32, i32* %779, align 8
  %781 = icmp eq i32 %780, 2
  %782 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  br i1 %781, label %783, label %785

; <label>:783:                                    ; preds = %774
  %784 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %782) #18
  br label %787

; <label>:785:                                    ; preds = %774
  %786 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %782) #18
  br label %787

; <label>:787:                                    ; preds = %785, %783
  %788 = phi i32 [ %784, %783 ], [ %786, %785 ]
  %789 = icmp eq i32 %788, 0
  %790 = tail call i32 @llvm.cttz.i32(i32 %788, i1 true) #18, !range !67
  %791 = select i1 %789, i32 -1, i32 %790
  %792 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %791, i32* %792, align 4
  %793 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %793, align 4
  br label %825

; <label>:794:                                    ; preds = %35
  %795 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %11, align 8
  %796 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %795, i64 31
  %797 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %796, align 8
  %798 = tail call dereferenceable(128) %"class.sh::TType"* %797(%"class.sh::TIntermExpression"* %10) #18
  %799 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %798, i64 0, i32 0
  %800 = load i32, i32* %799, align 8
  %801 = icmp eq i32 %800, 2
  %802 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %9, i64 %36
  br i1 %801, label %803, label %807

; <label>:803:                                    ; preds = %794
  %804 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %802) #18
  %805 = ashr i32 %804, 31
  %806 = xor i32 %805, %804
  br label %809

; <label>:807:                                    ; preds = %794
  %808 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %802) #18
  br label %809

; <label>:809:                                    ; preds = %807, %803
  %810 = phi i32 [ %806, %803 ], [ %808, %807 ]
  %811 = icmp eq i32 %810, 0
  br i1 %811, label %817, label %812

; <label>:812:                                    ; preds = %809
  %813 = zext i32 %810 to i64
  %814 = tail call i64 @llvm.ctlz.i64(i64 %813, i1 true) #18, !range !68
  %815 = trunc i64 %814 to i32
  %816 = xor i32 %815, 63
  br label %817

; <label>:817:                                    ; preds = %809, %812
  %818 = phi i32 [ %816, %812 ], [ -1, %809 ]
  %819 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 0, i32 0
  store i32 %818, i32* %819, align 4
  %820 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 2, i32* %820, align 4
  br label %825

; <label>:821:                                    ; preds = %35, %35, %35
  %822 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36
  %823 = bitcast %"class.sh::TConstantUnion"* %822 to float*
  store float 0.000000e+00, float* %823, align 4
  %824 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %23, i64 %36, i32 1
  store i32 1, i32* %824, align 4
  br label %825

; <label>:825:                                    ; preds = %659, %656, %653, %650, %641, %602, %599, %596, %593, %584, %571, %568, %565, %562, %553, %538, %535, %532, %529, %520, %500, %497, %494, %491, %482, %321, %318, %315, %312, %303, %289, %286, %283, %280, %271, %223, %220, %217, %214, %205, %191, %188, %185, %182, %173, %754, %755, %636, %106, %133, %140, %147, %154, %161, %232, %239, %246, %253, %260, %379, %386, %393, %412, %417, %424, %432, %444, %453, %458, %463, %467, %471, %509, %613, %769, %787, %817, %821, %67, %70, %55, %58, %44, %93, %88, %82, %127, %121, %194, %226, %292, %324, %344, %337, %371, %366, %503, %541, %574, %605
  %826 = add nuw i64 %36, 1
  %827 = icmp ult i64 %826, %16
  br i1 %827, label %35, label %828

; <label>:828:                                    ; preds = %825, %37, %75, %98, %114, %330, %352, %35, %3, %31
  %829 = phi %"class.sh::TConstantUnion"* [ %23, %31 ], [ %23, %3 ], [ null, %35 ], [ null, %352 ], [ null, %330 ], [ null, %114 ], [ null, %98 ], [ null, %75 ], [ null, %37 ], [ %23, %825 ]
  ret %"class.sh::TConstantUnion"* %829
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TIntermTyped"* @_ZN2sh16TIntermAggregate4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)***
  %4 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %4, i64 32
  %6 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %5, align 8
  %7 = tail call %"class.sh::TVector.15"* %6(%"class.sh::TIntermAggregate"* %0) #18
  %8 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %7, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"** %9, %11
  br i1 %12, label %27, label %13

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br label %17

; <label>:15:                                     ; preds = %17
  %16 = icmp eq %"class.sh::TIntermNode"** %26, %11
  br i1 %16, label %27, label %17

; <label>:17:                                     ; preds = %13, %15
  %18 = phi %"class.sh::TIntermNode"** [ %9, %13 ], [ %26, %15 ]
  %19 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, align 8
  %20 = bitcast %"class.sh::TIntermNode"* %19 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %21 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %21, i64 5
  %23 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %22, align 8
  %24 = tail call %"class.sh::TIntermConstantUnion"* %23(%"class.sh::TIntermNode"* %19) #18
  %25 = icmp eq %"class.sh::TIntermConstantUnion"* %24, null
  %26 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, i64 1
  br i1 %25, label %134, label %15

; <label>:27:                                     ; preds = %15, %2
  %28 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 8
  switch i32 %29, label %109 [
    i32 136, label %30
    i32 55, label %107
    i32 62, label %107
    i32 77, label %107
    i32 79, label %107
    i32 80, label %107
    i32 81, label %107
    i32 82, label %107
    i32 83, label %107
    i32 84, label %107
    i32 92, label %107
    i32 114, label %107
    i32 115, label %107
    i32 24, label %107
    i32 25, label %107
    i32 26, label %107
    i32 27, label %107
    i32 28, label %107
    i32 29, label %107
    i32 104, label %107
    i32 105, label %107
    i32 106, label %107
    i32 108, label %107
    i32 109, label %107
    i32 110, label %107
    i32 122, label %107
    i32 123, label %107
  ]

; <label>:30:                                     ; preds = %27
  %31 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 1
  %32 = tail call zeroext i1 @_ZNK2sh5TType27canReplaceWithConstantUnionEv(%"class.sh::TType"* nonnull %31) #18
  br i1 %32, label %33, label %109

; <label>:33:                                     ; preds = %30
  %34 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)***
  %35 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)*** %34, align 8
  %36 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)** %35, i64 29
  %37 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermAggregate"*)** %36, align 8
  %38 = tail call %"class.sh::TConstantUnion"* %37(%"class.sh::TIntermAggregate"* nonnull %0) #18
  %39 = icmp eq %"class.sh::TConstantUnion"* %38, null
  br i1 %39, label %109, label %40

; <label>:40:                                     ; preds = %33
  %41 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %31, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 3
  br i1 %43, label %46, label %44

; <label>:44:                                     ; preds = %40
  %45 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br label %115

; <label>:46:                                     ; preds = %40
  %47 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %31) #18
  %48 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %49 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %48, align 8
  %50 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %51 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %50, align 8
  %52 = icmp eq %"class.sh::TIntermNode"** %49, %51
  br i1 %52, label %53, label %55

; <label>:53:                                     ; preds = %46
  %54 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br label %115

; <label>:55:                                     ; preds = %46
  %56 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %57

; <label>:57:                                     ; preds = %55, %98
  %58 = phi i64 [ %47, %55 ], [ %104, %98 ]
  %59 = phi %"class.sh::TIntermNode"** [ %49, %55 ], [ %105, %98 ]
  %60 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, align 8
  %61 = bitcast %"class.sh::TIntermNode"* %60 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %62 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %61, align 8
  %63 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %62, i64 4
  %64 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %63, align 8
  %65 = tail call %"class.sh::TIntermTyped"* %64(%"class.sh::TIntermNode"* %60) #18
  %66 = bitcast %"class.sh::TIntermTyped"* %65 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %67 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %66, align 8
  %68 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %67, i64 31
  %69 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %68, align 8
  %70 = tail call dereferenceable(128) %"class.sh::TType"* %69(%"class.sh::TIntermTyped"* %65) #18
  %71 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %70, i64 0, i32 0
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %74, label %98

; <label>:74:                                     ; preds = %57
  %75 = bitcast %"class.sh::TIntermTyped"* %65 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)***
  %76 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*** %75, align 8
  %77 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %76, i64 29
  %78 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermTyped"*)** %77, align 8
  %79 = tail call %"class.sh::TConstantUnion"* %78(%"class.sh::TIntermTyped"* %65) #18
  %80 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %66, align 8
  %81 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %80, i64 31
  %82 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %81, align 8
  %83 = tail call dereferenceable(128) %"class.sh::TType"* %82(%"class.sh::TIntermTyped"* %65) #18
  %84 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %83) #18
  %85 = icmp ult i64 %58, %84
  %86 = select i1 %85, i64 %58, i64 %84
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %98, label %88

; <label>:88:                                     ; preds = %74, %95
  %89 = phi i64 [ %96, %95 ], [ 0, %74 ]
  %90 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %79, i64 %89
  %91 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %90) #18
  %92 = fcmp olt float %91, 0.000000e+00
  br i1 %92, label %93, label %95

; <label>:93:                                     ; preds = %88
  %94 = tail call i8* @_ZNK2sh5TType24getBuiltInTypeNameStringEv(%"class.sh::TType"* nonnull %31) #18
  tail call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %56, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i8* %94) #18
  br label %95

; <label>:95:                                     ; preds = %88, %93
  %96 = add nuw i64 %89, 1
  %97 = icmp ult i64 %96, %86
  br i1 %97, label %88, label %98

; <label>:98:                                     ; preds = %95, %74, %57
  %99 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %66, align 8
  %100 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %99, i64 31
  %101 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %100, align 8
  %102 = tail call dereferenceable(128) %"class.sh::TType"* %101(%"class.sh::TIntermTyped"* %65) #18
  %103 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %102) #18
  %104 = sub i64 %58, %103
  %105 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %59, i64 1
  %106 = icmp eq %"class.sh::TIntermNode"** %105, %51
  br i1 %106, label %111, label %57

; <label>:107:                                    ; preds = %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27
  %108 = tail call %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion20FoldAggregateBuiltInEPNS_16TIntermAggregateEPNS_12TDiagnosticsE(%"class.sh::TIntermAggregate"* nonnull %0, %"class.sh::TDiagnostics"* %1)
  br label %111

; <label>:109:                                    ; preds = %27, %33, %30
  %110 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br label %134

; <label>:111:                                    ; preds = %98, %107
  %112 = phi %"class.sh::TConstantUnion"* [ %108, %107 ], [ %38, %98 ]
  %113 = icmp eq %"class.sh::TConstantUnion"* %112, null
  %114 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  br i1 %113, label %134, label %115

; <label>:115:                                    ; preds = %53, %44, %111
  %116 = phi %"class.sh::TIntermTyped"* [ %45, %44 ], [ %114, %111 ], [ %54, %53 ]
  %117 = phi %"class.sh::TConstantUnion"* [ %38, %44 ], [ %112, %111 ], [ %38, %53 ]
  %118 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %119 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %118, i64 160) #18
  %120 = bitcast %"class.sh::TIntermTyped"* %116 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %121 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %120, align 8
  %122 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %121, i64 31
  %123 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %122, align 8
  %124 = tail call dereferenceable(128) %"class.sh::TType"* %123(%"class.sh::TIntermTyped"* %116) #18
  %125 = getelementptr inbounds i8, i8* %119, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 16, i1 false) #18
  %126 = bitcast i8* %119 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %126, align 8
  %127 = getelementptr inbounds i8, i8* %119, i64 24
  %128 = bitcast i8* %127 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %128, %"class.sh::TType"* nonnull dereferenceable(128) %124) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %126, align 8
  %129 = getelementptr inbounds i8, i8* %119, i64 152
  %130 = bitcast i8* %129 to %"class.sh::TConstantUnion"**
  store %"class.sh::TConstantUnion"* %117, %"class.sh::TConstantUnion"** %130, align 8
  %131 = bitcast i8* %119 to %"class.sh::TIntermTyped"*
  %132 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %133 = bitcast %"struct.sh::TSourceLoc"* %132 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %125, i8* nonnull align 4 %133, i64 16, i1 false) #18
  br label %134

; <label>:134:                                    ; preds = %17, %109, %115, %111
  %135 = phi %"class.sh::TIntermTyped"* [ %131, %115 ], [ %114, %111 ], [ %110, %109 ], [ %14, %17 ]
  ret %"class.sh::TIntermTyped"* %135
}

declare float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #1

declare void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16), i8*, i8*) local_unnamed_addr #1

declare i8* @_ZNK2sh5TType24getBuiltInTypeNameStringEv(%"class.sh::TType"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sh::TConstantUnion"* @_ZN2sh20TIntermConstantUnion20FoldAggregateBuiltInEPNS_16TIntermAggregateEPNS_12TDiagnosticsE(%"class.sh::TIntermAggregate"*, %"class.sh::TDiagnostics"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.sh::TSourceLoc", align 4
  %4 = alloca %"class.angle::Matrix", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = alloca %"class.angle::Matrix", align 8
  %7 = alloca %"class.angle::Matrix", align 8
  %8 = alloca %"class.angle::Matrix", align 8
  %9 = alloca %"class.angle::Matrix", align 8
  %10 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)***
  %13 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %13, i64 32
  %15 = load %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.15"* (%"class.sh::TIntermAggregate"*)** %14, align 8
  %16 = tail call %"class.sh::TVector.15"* %15(%"class.sh::TIntermAggregate"* %0) #18
  %17 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %16, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast %"class.sh::TIntermNode"*** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.sh::TVector.15"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = ashr exact i64 %22, 3
  %24 = trunc i64 %23 to i32
  %25 = and i64 %23, 4294967295
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %33, label %27

; <label>:27:                                     ; preds = %2
  %28 = shl nuw nsw i64 %25, 3
  %29 = tail call i8* @_Znwm(i64 %28) #20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 0, i64 %28, i1 false)
  %30 = bitcast i8* %29 to %"class.sh::TConstantUnion"**
  %31 = tail call i8* @_Znwm(i64 %28) #20
  %32 = bitcast i8* %31 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 0, i64 %28, i1 false)
  br label %33

; <label>:33:                                     ; preds = %27, %2
  %34 = phi i8* [ null, %2 ], [ %29, %27 ]
  %35 = phi %"class.sh::TConstantUnion"** [ null, %2 ], [ %30, %27 ]
  %36 = phi i8* [ null, %2 ], [ %31, %27 ]
  %37 = phi i64* [ null, %2 ], [ %32, %27 ]
  %38 = bitcast %"struct.sh::TSourceLoc"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #18
  %39 = icmp eq i32 %24, 0
  %40 = getelementptr inbounds %"class.sh::TVector.15", %"class.sh::TVector.15"* %16, i64 0, i32 0, i32 0, i32 0
  br i1 %39, label %43, label %41

; <label>:41:                                     ; preds = %33
  %42 = and i64 %23, 4294967295
  br label %65

; <label>:43:                                     ; preds = %89, %33
  %44 = phi i32 [ 0, %33 ], [ %90, %89 ]
  %45 = phi i64 [ 0, %33 ], [ %104, %89 ]
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %47 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, align 8
  %48 = bitcast %"class.sh::TIntermNode"* %47 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %49 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %48, align 8
  %50 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %49, i64 4
  %51 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %50, align 8
  %52 = tail call %"class.sh::TIntermTyped"* %51(%"class.sh::TIntermNode"* %47) #18
  %53 = bitcast %"class.sh::TIntermTyped"* %52 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %54 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %53, align 8
  %55 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %54, i64 31
  %56 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %55, align 8
  %57 = tail call dereferenceable(128) %"class.sh::TType"* %56(%"class.sh::TIntermTyped"* %52) #18
  %58 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %57, i64 0, i32 6
  %59 = load i8, i8* %58, align 4
  %60 = icmp ugt i8 %59, 1
  %61 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %57, i64 0, i32 7
  %62 = load i8, i8* %61, align 1
  %63 = icmp ugt i8 %62, 1
  %64 = and i1 %60, %63
  br i1 %64, label %221, label %107

; <label>:65:                                     ; preds = %89, %41
  %66 = phi i64 [ 0, %41 ], [ %105, %89 ]
  %67 = phi i64 [ 0, %41 ], [ %104, %89 ]
  %68 = phi i32 [ 0, %41 ], [ %90, %89 ]
  %69 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %70 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %69, i64 %66
  %71 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %70, align 8
  %72 = bitcast %"class.sh::TIntermNode"* %71 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %73 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %72, align 8
  %74 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %73, i64 5
  %75 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %74, align 8
  %76 = tail call %"class.sh::TIntermConstantUnion"* %75(%"class.sh::TIntermNode"* %71) #18
  %77 = icmp eq i64 %66, 0
  %78 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %76, i64 0, i32 0
  %79 = bitcast %"class.sh::TIntermConstantUnion"* %76 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  br i1 %77, label %80, label %89

; <label>:80:                                     ; preds = %65
  %81 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %79, align 8
  %82 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %81, i64 31
  %83 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %82, align 8
  %84 = tail call dereferenceable(128) %"class.sh::TType"* %83(%"class.sh::TIntermExpression"* %78) #18
  %85 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %84, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %76, i64 0, i32 0, i32 0, i32 0, i32 1
  %88 = bitcast %"struct.sh::TSourceLoc"* %87 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %38, i8* nonnull align 4 %88, i64 16, i1 false)
  br label %89

; <label>:89:                                     ; preds = %65, %80
  %90 = phi i32 [ %86, %80 ], [ %68, %65 ]
  %91 = bitcast %"class.sh::TIntermConstantUnion"* %76 to %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)***
  %92 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)**, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*** %91, align 8
  %93 = getelementptr inbounds %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %92, i64 29
  %94 = load %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)*, %"class.sh::TConstantUnion"* (%"class.sh::TIntermConstantUnion"*)** %93, align 8
  %95 = tail call %"class.sh::TConstantUnion"* %94(%"class.sh::TIntermConstantUnion"* %76) #18
  %96 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 %66
  store %"class.sh::TConstantUnion"* %95, %"class.sh::TConstantUnion"** %96, align 8
  %97 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %79, align 8
  %98 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %97, i64 31
  %99 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %98, align 8
  %100 = tail call dereferenceable(128) %"class.sh::TType"* %99(%"class.sh::TIntermExpression"* %78) #18
  %101 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %100) #18
  %102 = getelementptr inbounds i64, i64* %37, i64 %66
  store i64 %101, i64* %102, align 8
  %103 = icmp ugt i64 %101, %67
  %104 = select i1 %103, i64 %101, i64 %67
  %105 = add nuw nsw i64 %66, 1
  %106 = icmp eq i64 %105, %42
  br i1 %106, label %43, label %65

; <label>:107:                                    ; preds = %43
  %108 = load i32, i32* %10, align 8
  %109 = icmp ne i32 %108, 115
  %110 = icmp ne i32 %24, 0
  %111 = and i1 %109, %110
  br i1 %111, label %112, label %221

; <label>:112:                                    ; preds = %107
  %113 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8) #18
  %114 = extractvalue { i64, i1 } %113, 1
  %115 = extractvalue { i64, i1 } %113, 0
  %116 = select i1 %114, i64 -1, i64 %115
  %117 = icmp eq i64 %45, 0
  %118 = and i64 %23, 4294967295
  %119 = add i64 %45, -1
  %120 = shl i64 %45, 3
  %121 = add i64 %45, -4
  %122 = lshr i64 %121, 2
  %123 = add nuw nsw i64 %122, 1
  %124 = icmp ult i64 %45, 4
  %125 = icmp ugt i64 %119, 4294967295
  %126 = trunc i64 %119 to i32
  %127 = icmp eq i32 %126, -1
  %128 = or i1 %127, %125
  %129 = and i64 %45, -4
  %130 = trunc i64 %129 to i32
  %131 = and i64 %123, 1
  %132 = icmp eq i64 %122, 0
  %133 = sub nsw i64 %123, %131
  %134 = icmp eq i64 %131, 0
  %135 = icmp eq i64 %45, %129
  br label %136

; <label>:136:                                    ; preds = %218, %112
  %137 = phi i64 [ 0, %112 ], [ %219, %218 ]
  %138 = getelementptr inbounds i64, i64* %37, i64 %137
  %139 = load i64, i64* %138, align 8
  %140 = icmp eq i64 %139, %45
  br i1 %140, label %218, label %141

; <label>:141:                                    ; preds = %136
  %142 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 %137
  %143 = bitcast %"class.sh::TConstantUnion"** %142 to i64**
  %144 = load i64*, i64** %143, align 8
  %145 = bitcast i64* %144 to i8*
  %146 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %147 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %146, i64 %116) #18
  %148 = bitcast i8* %147 to %"class.sh::TConstantUnion"*
  br i1 %117, label %216, label %149

; <label>:149:                                    ; preds = %141
  %150 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %148, i64 %45
  br label %151

; <label>:151:                                    ; preds = %151, %149
  %152 = phi %"class.sh::TConstantUnion"* [ %148, %149 ], [ %153, %151 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %152) #18
  %153 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %152, i64 1
  %154 = icmp eq %"class.sh::TConstantUnion"* %153, %150
  br i1 %154, label %155, label %151

; <label>:155:                                    ; preds = %151
  %156 = or i1 %124, %128
  br i1 %156, label %204, label %157

; <label>:157:                                    ; preds = %155
  %158 = getelementptr i8, i8* %145, i64 1
  %159 = getelementptr i8, i8* %147, i64 %120
  %160 = bitcast i64* %144 to i8*
  %161 = icmp ugt i8* %159, %160
  %162 = icmp ult i8* %147, %158
  %163 = and i1 %161, %162
  br i1 %163, label %204, label %164

; <label>:164:                                    ; preds = %157
  br i1 %132, label %191, label %165

; <label>:165:                                    ; preds = %164
  %166 = load i64, i64* %144, align 4, !alias.scope !69, !noalias !72
  %167 = insertelement <2 x i64> undef, i64 %166, i32 0
  %168 = shufflevector <2 x i64> %167, <2 x i64> undef, <2 x i32> zeroinitializer
  %169 = insertelement <2 x i64> undef, i64 %166, i32 0
  %170 = shufflevector <2 x i64> %169, <2 x i64> undef, <2 x i32> zeroinitializer
  %171 = load i64, i64* %144, align 4, !alias.scope !69, !noalias !72
  %172 = insertelement <2 x i64> undef, i64 %171, i32 0
  %173 = shufflevector <2 x i64> %172, <2 x i64> undef, <2 x i32> zeroinitializer
  %174 = insertelement <2 x i64> undef, i64 %171, i32 0
  %175 = shufflevector <2 x i64> %174, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %176

; <label>:176:                                    ; preds = %176, %165
  %177 = phi i64 [ 0, %165 ], [ %188, %176 ]
  %178 = phi i64 [ %133, %165 ], [ %189, %176 ]
  %179 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %148, i64 %177
  %180 = bitcast %"class.sh::TConstantUnion"* %179 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %180, align 4, !alias.scope !72
  %181 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %179, i64 2
  %182 = bitcast %"class.sh::TConstantUnion"* %181 to <2 x i64>*
  store <2 x i64> %170, <2 x i64>* %182, align 4, !alias.scope !72
  %183 = or i64 %177, 4
  %184 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %148, i64 %183
  %185 = bitcast %"class.sh::TConstantUnion"* %184 to <2 x i64>*
  store <2 x i64> %173, <2 x i64>* %185, align 4, !alias.scope !72
  %186 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %184, i64 2
  %187 = bitcast %"class.sh::TConstantUnion"* %186 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %187, align 4, !alias.scope !72
  %188 = add i64 %177, 8
  %189 = add i64 %178, -2
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %176, !llvm.loop !74

; <label>:191:                                    ; preds = %176, %164
  %192 = phi i64 [ 0, %164 ], [ %188, %176 ]
  br i1 %134, label %203, label %193

; <label>:193:                                    ; preds = %191
  %194 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %148, i64 %192
  %195 = load i64, i64* %144, align 4, !alias.scope !69, !noalias !72
  %196 = insertelement <2 x i64> undef, i64 %195, i32 0
  %197 = shufflevector <2 x i64> %196, <2 x i64> undef, <2 x i32> zeroinitializer
  %198 = insertelement <2 x i64> undef, i64 %195, i32 0
  %199 = shufflevector <2 x i64> %198, <2 x i64> undef, <2 x i32> zeroinitializer
  %200 = bitcast %"class.sh::TConstantUnion"* %194 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %200, align 4, !alias.scope !72
  %201 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %194, i64 2
  %202 = bitcast %"class.sh::TConstantUnion"* %201 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %202, align 4, !alias.scope !72
  br label %203

; <label>:203:                                    ; preds = %191, %193
  br i1 %135, label %216, label %204

; <label>:204:                                    ; preds = %155, %203, %157
  %205 = phi i64 [ 0, %157 ], [ 0, %155 ], [ %129, %203 ]
  %206 = phi i32 [ 0, %157 ], [ 0, %155 ], [ %130, %203 ]
  br label %207

; <label>:207:                                    ; preds = %204, %207
  %208 = phi i64 [ %214, %207 ], [ %205, %204 ]
  %209 = phi i32 [ %213, %207 ], [ %206, %204 ]
  %210 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %148, i64 %208
  %211 = bitcast %"class.sh::TConstantUnion"* %210 to i64*
  %212 = load i64, i64* %144, align 4
  store i64 %212, i64* %211, align 4
  %213 = add i32 %209, 1
  %214 = zext i32 %213 to i64
  %215 = icmp ugt i64 %45, %214
  br i1 %215, label %207, label %216, !llvm.loop !75

; <label>:216:                                    ; preds = %207, %203, %141
  %217 = bitcast %"class.sh::TConstantUnion"** %142 to i8**
  store i8* %147, i8** %217, align 8
  br label %218

; <label>:218:                                    ; preds = %136, %216
  %219 = add nuw nsw i64 %137, 1
  %220 = icmp eq i64 %219, %118
  br i1 %220, label %221, label %136

; <label>:221:                                    ; preds = %218, %107, %43
  switch i32 %11, label %1791 [
    i32 55, label %222
    i32 62, label %271
    i32 77, label %339
    i32 79, label %374
    i32 80, label %431
    i32 83, label %488
    i32 26, label %521
    i32 27, label %574
    i32 28, label %627
    i32 29, label %680
    i32 24, label %733
    i32 25, label %795
    i32 104, label %856
    i32 105, label %907
    i32 106, label %931
    i32 109, label %984
    i32 114, label %1031
    i32 115, label %1110
    i32 81, label %1189
    i32 82, label %1279
    i32 84, label %1340
    i32 92, label %1402
    i32 108, label %1456
    i32 110, label %1502
    i32 122, label %1566
    i32 123, label %1677
  ]

; <label>:222:                                    ; preds = %221
  %223 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %224 = extractvalue { i64, i1 } %223, 1
  %225 = extractvalue { i64, i1 } %223, 0
  %226 = select i1 %224, i64 -1, i64 %225
  %227 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %228 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %227, i64 %226) #18
  %229 = bitcast i8* %228 to %"class.sh::TConstantUnion"*
  %230 = icmp eq i64 %45, 0
  br i1 %230, label %1791, label %231

; <label>:231:                                    ; preds = %222
  %232 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %229, i64 %45
  br label %233

; <label>:233:                                    ; preds = %233, %231
  %234 = phi %"class.sh::TConstantUnion"* [ %229, %231 ], [ %235, %233 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %234) #18
  %235 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %234, i64 1
  %236 = icmp eq %"class.sh::TConstantUnion"* %235, %232
  br i1 %236, label %237, label %233

; <label>:237:                                    ; preds = %233
  br i1 %230, label %1791, label %238

; <label>:238:                                    ; preds = %237
  %239 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %240

; <label>:240:                                    ; preds = %268, %238
  %241 = phi i64 [ 0, %238 ], [ %269, %268 ]
  %242 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %243 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %242, i64 %241
  %244 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %243) #18
  %245 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %239, align 8
  %246 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %245, i64 %241
  %247 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %246) #18
  %248 = fcmp oeq float %247, 0.000000e+00
  %249 = fcmp oeq float %244, 0.000000e+00
  %250 = and i1 %249, %248
  %251 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %229, i64 %241
  br i1 %250, label %252, label %262

; <label>:252:                                    ; preds = %240
  %253 = call i8* @_Z17GetOperatorString9TOperator(i32 55) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %253) #18
  switch i32 %44, label %268 [
    i32 1, label %254
    i32 2, label %256
    i32 3, label %258
    i32 4, label %260
  ]

; <label>:254:                                    ; preds = %252
  %255 = bitcast %"class.sh::TConstantUnion"* %251 to float*
  store float 0.000000e+00, float* %255, align 4
  br label %265

; <label>:256:                                    ; preds = %252
  %257 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %251, i64 0, i32 0, i32 0
  store i32 0, i32* %257, align 4
  br label %265

; <label>:258:                                    ; preds = %252
  %259 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %251, i64 0, i32 0, i32 0
  store i32 0, i32* %259, align 4
  br label %265

; <label>:260:                                    ; preds = %252
  %261 = bitcast %"class.sh::TConstantUnion"* %251 to i8*
  store i8 0, i8* %261, align 4
  br label %265

; <label>:262:                                    ; preds = %240
  %263 = call float @atan2f(float %244, float %247) #18
  %264 = bitcast %"class.sh::TConstantUnion"* %251 to float*
  store float %263, float* %264, align 4
  br label %265

; <label>:265:                                    ; preds = %262, %254, %256, %258, %260
  %266 = phi i32 [ 4, %260 ], [ 3, %258 ], [ 2, %256 ], [ 1, %254 ], [ 1, %262 ]
  %267 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %229, i64 %241, i32 1
  store i32 %266, i32* %267, align 4
  br label %268

; <label>:268:                                    ; preds = %265, %252
  %269 = add nuw i64 %241, 1
  %270 = icmp eq i64 %269, %45
  br i1 %270, label %1791, label %240

; <label>:271:                                    ; preds = %221
  %272 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %273 = extractvalue { i64, i1 } %272, 1
  %274 = extractvalue { i64, i1 } %272, 0
  %275 = select i1 %273, i64 -1, i64 %274
  %276 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %277 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %276, i64 %275) #18
  %278 = bitcast i8* %277 to %"class.sh::TConstantUnion"*
  %279 = icmp eq i64 %45, 0
  br i1 %279, label %1791, label %280

; <label>:280:                                    ; preds = %271
  %281 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %45
  br label %282

; <label>:282:                                    ; preds = %282, %280
  %283 = phi %"class.sh::TConstantUnion"* [ %278, %280 ], [ %284, %282 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %283) #18
  %284 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %283, i64 1
  %285 = icmp eq %"class.sh::TConstantUnion"* %284, %281
  br i1 %285, label %286, label %282

; <label>:286:                                    ; preds = %282
  br i1 %279, label %1791, label %287

; <label>:287:                                    ; preds = %286
  %288 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %289

; <label>:289:                                    ; preds = %336, %287
  %290 = phi i64 [ 0, %287 ], [ %337, %336 ]
  %291 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %292 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %291, i64 %290
  %293 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %292) #18
  %294 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %288, align 8
  %295 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %294, i64 %290
  %296 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %295) #18
  %297 = fcmp olt float %293, 0.000000e+00
  br i1 %297, label %298, label %313

; <label>:298:                                    ; preds = %289
  %299 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290
  %300 = call i8* @_Z17GetOperatorString9TOperator(i32 62) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %300) #18
  switch i32 %44, label %336 [
    i32 1, label %301
    i32 2, label %304
    i32 3, label %307
    i32 4, label %310
  ]

; <label>:301:                                    ; preds = %298
  %302 = bitcast %"class.sh::TConstantUnion"* %299 to float*
  store float 0.000000e+00, float* %302, align 4
  %303 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 1, i32* %303, align 4
  br label %336

; <label>:304:                                    ; preds = %298
  %305 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %299, i64 0, i32 0, i32 0
  store i32 0, i32* %305, align 4
  %306 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 2, i32* %306, align 4
  br label %336

; <label>:307:                                    ; preds = %298
  %308 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %299, i64 0, i32 0, i32 0
  store i32 0, i32* %308, align 4
  %309 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 3, i32* %309, align 4
  br label %336

; <label>:310:                                    ; preds = %298
  %311 = bitcast %"class.sh::TConstantUnion"* %299 to i8*
  store i8 0, i8* %311, align 4
  %312 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 4, i32* %312, align 4
  br label %336

; <label>:313:                                    ; preds = %289
  %314 = fcmp oeq float %293, 0.000000e+00
  %315 = fcmp ole float %296, 0.000000e+00
  %316 = and i1 %314, %315
  %317 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290
  br i1 %316, label %318, label %332

; <label>:318:                                    ; preds = %313
  %319 = call i8* @_Z17GetOperatorString9TOperator(i32 62) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %319) #18
  switch i32 %44, label %336 [
    i32 1, label %320
    i32 2, label %323
    i32 3, label %326
    i32 4, label %329
  ]

; <label>:320:                                    ; preds = %318
  %321 = bitcast %"class.sh::TConstantUnion"* %317 to float*
  store float 0.000000e+00, float* %321, align 4
  %322 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 1, i32* %322, align 4
  br label %336

; <label>:323:                                    ; preds = %318
  %324 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %317, i64 0, i32 0, i32 0
  store i32 0, i32* %324, align 4
  %325 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 2, i32* %325, align 4
  br label %336

; <label>:326:                                    ; preds = %318
  %327 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %317, i64 0, i32 0, i32 0
  store i32 0, i32* %327, align 4
  %328 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 3, i32* %328, align 4
  br label %336

; <label>:329:                                    ; preds = %318
  %330 = bitcast %"class.sh::TConstantUnion"* %317 to i8*
  store i8 0, i8* %330, align 4
  %331 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 4, i32* %331, align 4
  br label %336

; <label>:332:                                    ; preds = %313
  %333 = call float @powf(float %293, float %296) #18
  %334 = bitcast %"class.sh::TConstantUnion"* %317 to float*
  store float %333, float* %334, align 4
  %335 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %278, i64 %290, i32 1
  store i32 1, i32* %335, align 4
  br label %336

; <label>:336:                                    ; preds = %329, %326, %323, %320, %318, %310, %307, %304, %301, %298, %332
  %337 = add nuw i64 %290, 1
  %338 = icmp eq i64 %337, %45
  br i1 %338, label %1791, label %289

; <label>:339:                                    ; preds = %221
  %340 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %341 = extractvalue { i64, i1 } %340, 1
  %342 = extractvalue { i64, i1 } %340, 0
  %343 = select i1 %341, i64 -1, i64 %342
  %344 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %345 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %344, i64 %343) #18
  %346 = bitcast i8* %345 to %"class.sh::TConstantUnion"*
  %347 = icmp eq i64 %45, 0
  br i1 %347, label %1791, label %348

; <label>:348:                                    ; preds = %339
  %349 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %346, i64 %45
  br label %350

; <label>:350:                                    ; preds = %350, %348
  %351 = phi %"class.sh::TConstantUnion"* [ %346, %348 ], [ %352, %350 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %351) #18
  %352 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %351, i64 1
  %353 = icmp eq %"class.sh::TConstantUnion"* %352, %349
  br i1 %353, label %354, label %350

; <label>:354:                                    ; preds = %350
  br i1 %347, label %1791, label %355

; <label>:355:                                    ; preds = %354
  %356 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %357

; <label>:357:                                    ; preds = %357, %355
  %358 = phi i64 [ 0, %355 ], [ %372, %357 ]
  %359 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %360 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %359, i64 %358
  %361 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %360) #18
  %362 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %356, align 8
  %363 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %362, i64 %358
  %364 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %363) #18
  %365 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %346, i64 %358
  %366 = fdiv float %361, %364
  %367 = tail call float @llvm.floor.f32(float %366)
  %368 = fmul float %364, %367
  %369 = fsub float %361, %368
  %370 = bitcast %"class.sh::TConstantUnion"* %365 to float*
  store float %369, float* %370, align 4
  %371 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %346, i64 %358, i32 1
  store i32 1, i32* %371, align 4
  %372 = add nuw i64 %358, 1
  %373 = icmp eq i64 %372, %45
  br i1 %373, label %1791, label %357

; <label>:374:                                    ; preds = %221
  %375 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %376 = extractvalue { i64, i1 } %375, 1
  %377 = extractvalue { i64, i1 } %375, 0
  %378 = select i1 %376, i64 -1, i64 %377
  %379 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %380 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %379, i64 %378) #18
  %381 = bitcast i8* %380 to %"class.sh::TConstantUnion"*
  %382 = icmp eq i64 %45, 0
  br i1 %382, label %1791, label %383

; <label>:383:                                    ; preds = %374
  %384 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %381, i64 %45
  br label %385

; <label>:385:                                    ; preds = %385, %383
  %386 = phi %"class.sh::TConstantUnion"* [ %381, %383 ], [ %387, %385 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %386) #18
  %387 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %386, i64 1
  %388 = icmp eq %"class.sh::TConstantUnion"* %387, %384
  br i1 %388, label %389, label %385

; <label>:389:                                    ; preds = %385
  br i1 %382, label %1791, label %390

; <label>:390:                                    ; preds = %389
  %391 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %392

; <label>:392:                                    ; preds = %428, %390
  %393 = phi i64 [ 0, %390 ], [ %429, %428 ]
  switch i32 %44, label %428 [
    i32 1, label %394
    i32 2, label %405
    i32 3, label %415
  ]

; <label>:394:                                    ; preds = %392
  %395 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %381, i64 %393
  %396 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %397 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %396, i64 %393
  %398 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %397) #18
  %399 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %391, align 8
  %400 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %399, i64 %393
  %401 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %400) #18
  %402 = fcmp olt float %401, %398
  %403 = select i1 %402, float %401, float %398
  %404 = bitcast %"class.sh::TConstantUnion"* %395 to float*
  store float %403, float* %404, align 4
  br label %425

; <label>:405:                                    ; preds = %392
  %406 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %407 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %406, i64 %393
  %408 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %407) #18
  %409 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %391, align 8
  %410 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %409, i64 %393
  %411 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %410) #18
  %412 = icmp slt i32 %411, %408
  %413 = select i1 %412, i32 %411, i32 %408
  %414 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %381, i64 %393, i32 0, i32 0
  store i32 %413, i32* %414, align 4
  br label %425

; <label>:415:                                    ; preds = %392
  %416 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %417 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %416, i64 %393
  %418 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %417) #18
  %419 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %391, align 8
  %420 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %419, i64 %393
  %421 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %420) #18
  %422 = icmp ult i32 %421, %418
  %423 = select i1 %422, i32 %421, i32 %418
  %424 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %381, i64 %393, i32 0, i32 0
  store i32 %423, i32* %424, align 4
  br label %425

; <label>:425:                                    ; preds = %415, %405, %394
  %426 = phi i32 [ 1, %394 ], [ 2, %405 ], [ 3, %415 ]
  %427 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %381, i64 %393, i32 1
  store i32 %426, i32* %427, align 4
  br label %428

; <label>:428:                                    ; preds = %425, %392
  %429 = add nuw i64 %393, 1
  %430 = icmp eq i64 %429, %45
  br i1 %430, label %1791, label %392

; <label>:431:                                    ; preds = %221
  %432 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %433 = extractvalue { i64, i1 } %432, 1
  %434 = extractvalue { i64, i1 } %432, 0
  %435 = select i1 %433, i64 -1, i64 %434
  %436 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %437 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %436, i64 %435) #18
  %438 = bitcast i8* %437 to %"class.sh::TConstantUnion"*
  %439 = icmp eq i64 %45, 0
  br i1 %439, label %1791, label %440

; <label>:440:                                    ; preds = %431
  %441 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %438, i64 %45
  br label %442

; <label>:442:                                    ; preds = %442, %440
  %443 = phi %"class.sh::TConstantUnion"* [ %438, %440 ], [ %444, %442 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %443) #18
  %444 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %443, i64 1
  %445 = icmp eq %"class.sh::TConstantUnion"* %444, %441
  br i1 %445, label %446, label %442

; <label>:446:                                    ; preds = %442
  br i1 %439, label %1791, label %447

; <label>:447:                                    ; preds = %446
  %448 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %449

; <label>:449:                                    ; preds = %485, %447
  %450 = phi i64 [ 0, %447 ], [ %486, %485 ]
  switch i32 %44, label %485 [
    i32 1, label %451
    i32 2, label %462
    i32 3, label %472
  ]

; <label>:451:                                    ; preds = %449
  %452 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %438, i64 %450
  %453 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %454 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %453, i64 %450
  %455 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %454) #18
  %456 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %448, align 8
  %457 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %456, i64 %450
  %458 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %457) #18
  %459 = fcmp olt float %455, %458
  %460 = select i1 %459, float %458, float %455
  %461 = bitcast %"class.sh::TConstantUnion"* %452 to float*
  store float %460, float* %461, align 4
  br label %482

; <label>:462:                                    ; preds = %449
  %463 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %464 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %463, i64 %450
  %465 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %464) #18
  %466 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %448, align 8
  %467 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %466, i64 %450
  %468 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %467) #18
  %469 = icmp slt i32 %465, %468
  %470 = select i1 %469, i32 %468, i32 %465
  %471 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %438, i64 %450, i32 0, i32 0
  store i32 %470, i32* %471, align 4
  br label %482

; <label>:472:                                    ; preds = %449
  %473 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %474 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %473, i64 %450
  %475 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %474) #18
  %476 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %448, align 8
  %477 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %476, i64 %450
  %478 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %477) #18
  %479 = icmp ult i32 %475, %478
  %480 = select i1 %479, i32 %478, i32 %475
  %481 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %438, i64 %450, i32 0, i32 0
  store i32 %480, i32* %481, align 4
  br label %482

; <label>:482:                                    ; preds = %472, %462, %451
  %483 = phi i32 [ 1, %451 ], [ 2, %462 ], [ 3, %472 ]
  %484 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %438, i64 %450, i32 1
  store i32 %483, i32* %484, align 4
  br label %485

; <label>:485:                                    ; preds = %482, %449
  %486 = add nuw i64 %450, 1
  %487 = icmp eq i64 %486, %45
  br i1 %487, label %1791, label %449

; <label>:488:                                    ; preds = %221
  %489 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %490 = extractvalue { i64, i1 } %489, 1
  %491 = extractvalue { i64, i1 } %489, 0
  %492 = select i1 %490, i64 -1, i64 %491
  %493 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %494 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %493, i64 %492) #18
  %495 = bitcast i8* %494 to %"class.sh::TConstantUnion"*
  %496 = icmp eq i64 %45, 0
  br i1 %496, label %1791, label %497

; <label>:497:                                    ; preds = %488
  %498 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %495, i64 %45
  br label %499

; <label>:499:                                    ; preds = %499, %497
  %500 = phi %"class.sh::TConstantUnion"* [ %495, %497 ], [ %501, %499 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %500) #18
  %501 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %500, i64 1
  %502 = icmp eq %"class.sh::TConstantUnion"* %501, %498
  br i1 %502, label %503, label %499

; <label>:503:                                    ; preds = %499
  br i1 %496, label %1791, label %504

; <label>:504:                                    ; preds = %503
  %505 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %506

; <label>:506:                                    ; preds = %506, %504
  %507 = phi i64 [ 0, %504 ], [ %519, %506 ]
  %508 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %495, i64 %507
  %509 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %505, align 8
  %510 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %509, i64 %507
  %511 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %510) #18
  %512 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %513 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %512, i64 %507
  %514 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %513) #18
  %515 = fcmp olt float %511, %514
  %516 = select i1 %515, float 0.000000e+00, float 1.000000e+00
  %517 = bitcast %"class.sh::TConstantUnion"* %508 to float*
  store float %516, float* %517, align 4
  %518 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %495, i64 %507, i32 1
  store i32 1, i32* %518, align 4
  %519 = add nuw i64 %507, 1
  %520 = icmp eq i64 %519, %45
  br i1 %520, label %1791, label %506

; <label>:521:                                    ; preds = %221
  %522 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %523 = extractvalue { i64, i1 } %522, 1
  %524 = extractvalue { i64, i1 } %522, 0
  %525 = select i1 %523, i64 -1, i64 %524
  %526 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %527 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %526, i64 %525) #18
  %528 = bitcast i8* %527 to %"class.sh::TConstantUnion"*
  %529 = icmp eq i64 %45, 0
  br i1 %529, label %1791, label %530

; <label>:530:                                    ; preds = %521
  %531 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %528, i64 %45
  br label %532

; <label>:532:                                    ; preds = %532, %530
  %533 = phi %"class.sh::TConstantUnion"* [ %528, %530 ], [ %534, %532 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %533) #18
  %534 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %533, i64 1
  %535 = icmp eq %"class.sh::TConstantUnion"* %534, %531
  br i1 %535, label %536, label %532

; <label>:536:                                    ; preds = %532
  br i1 %529, label %1791, label %537

; <label>:537:                                    ; preds = %536
  %538 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %539

; <label>:539:                                    ; preds = %571, %537
  %540 = phi i64 [ 0, %537 ], [ %572, %571 ]
  switch i32 %44, label %571 [
    i32 1, label %541
    i32 2, label %549
    i32 3, label %557
  ]

; <label>:541:                                    ; preds = %539
  %542 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %543 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %542, i64 %540
  %544 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %543) #18
  %545 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %538, align 8
  %546 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %545, i64 %540
  %547 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %546) #18
  %548 = fcmp olt float %544, %547
  br label %565

; <label>:549:                                    ; preds = %539
  %550 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %551 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %550, i64 %540
  %552 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %551) #18
  %553 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %538, align 8
  %554 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %553, i64 %540
  %555 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %554) #18
  %556 = icmp slt i32 %552, %555
  br label %565

; <label>:557:                                    ; preds = %539
  %558 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %559 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %558, i64 %540
  %560 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %559) #18
  %561 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %538, align 8
  %562 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %561, i64 %540
  %563 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %562) #18
  %564 = icmp ult i32 %560, %563
  br label %565

; <label>:565:                                    ; preds = %557, %549, %541
  %566 = phi i1 [ %548, %541 ], [ %556, %549 ], [ %564, %557 ]
  %567 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %528, i64 %540
  %568 = zext i1 %566 to i8
  %569 = bitcast %"class.sh::TConstantUnion"* %567 to i8*
  store i8 %568, i8* %569, align 4
  %570 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %528, i64 %540, i32 1
  store i32 4, i32* %570, align 4
  br label %571

; <label>:571:                                    ; preds = %565, %539
  %572 = add nuw i64 %540, 1
  %573 = icmp eq i64 %572, %45
  br i1 %573, label %1791, label %539

; <label>:574:                                    ; preds = %221
  %575 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %576 = extractvalue { i64, i1 } %575, 1
  %577 = extractvalue { i64, i1 } %575, 0
  %578 = select i1 %576, i64 -1, i64 %577
  %579 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %580 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %579, i64 %578) #18
  %581 = bitcast i8* %580 to %"class.sh::TConstantUnion"*
  %582 = icmp eq i64 %45, 0
  br i1 %582, label %1791, label %583

; <label>:583:                                    ; preds = %574
  %584 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %581, i64 %45
  br label %585

; <label>:585:                                    ; preds = %585, %583
  %586 = phi %"class.sh::TConstantUnion"* [ %581, %583 ], [ %587, %585 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %586) #18
  %587 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %586, i64 1
  %588 = icmp eq %"class.sh::TConstantUnion"* %587, %584
  br i1 %588, label %589, label %585

; <label>:589:                                    ; preds = %585
  br i1 %582, label %1791, label %590

; <label>:590:                                    ; preds = %589
  %591 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %592

; <label>:592:                                    ; preds = %624, %590
  %593 = phi i64 [ 0, %590 ], [ %625, %624 ]
  switch i32 %44, label %624 [
    i32 1, label %594
    i32 2, label %602
    i32 3, label %610
  ]

; <label>:594:                                    ; preds = %592
  %595 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %596 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %595, i64 %593
  %597 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %596) #18
  %598 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %591, align 8
  %599 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %598, i64 %593
  %600 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %599) #18
  %601 = fcmp ole float %597, %600
  br label %618

; <label>:602:                                    ; preds = %592
  %603 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %604 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %603, i64 %593
  %605 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %604) #18
  %606 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %591, align 8
  %607 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %606, i64 %593
  %608 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %607) #18
  %609 = icmp sle i32 %605, %608
  br label %618

; <label>:610:                                    ; preds = %592
  %611 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %612 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %611, i64 %593
  %613 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %612) #18
  %614 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %591, align 8
  %615 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %614, i64 %593
  %616 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %615) #18
  %617 = icmp ule i32 %613, %616
  br label %618

; <label>:618:                                    ; preds = %610, %602, %594
  %619 = phi i1 [ %601, %594 ], [ %609, %602 ], [ %617, %610 ]
  %620 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %581, i64 %593
  %621 = zext i1 %619 to i8
  %622 = bitcast %"class.sh::TConstantUnion"* %620 to i8*
  store i8 %621, i8* %622, align 4
  %623 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %581, i64 %593, i32 1
  store i32 4, i32* %623, align 4
  br label %624

; <label>:624:                                    ; preds = %618, %592
  %625 = add nuw i64 %593, 1
  %626 = icmp eq i64 %625, %45
  br i1 %626, label %1791, label %592

; <label>:627:                                    ; preds = %221
  %628 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %629 = extractvalue { i64, i1 } %628, 1
  %630 = extractvalue { i64, i1 } %628, 0
  %631 = select i1 %629, i64 -1, i64 %630
  %632 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %633 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %632, i64 %631) #18
  %634 = bitcast i8* %633 to %"class.sh::TConstantUnion"*
  %635 = icmp eq i64 %45, 0
  br i1 %635, label %1791, label %636

; <label>:636:                                    ; preds = %627
  %637 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %634, i64 %45
  br label %638

; <label>:638:                                    ; preds = %638, %636
  %639 = phi %"class.sh::TConstantUnion"* [ %634, %636 ], [ %640, %638 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %639) #18
  %640 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %639, i64 1
  %641 = icmp eq %"class.sh::TConstantUnion"* %640, %637
  br i1 %641, label %642, label %638

; <label>:642:                                    ; preds = %638
  br i1 %635, label %1791, label %643

; <label>:643:                                    ; preds = %642
  %644 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %645

; <label>:645:                                    ; preds = %677, %643
  %646 = phi i64 [ 0, %643 ], [ %678, %677 ]
  switch i32 %44, label %677 [
    i32 1, label %647
    i32 2, label %655
    i32 3, label %663
  ]

; <label>:647:                                    ; preds = %645
  %648 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %649 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %648, i64 %646
  %650 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %649) #18
  %651 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %644, align 8
  %652 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %651, i64 %646
  %653 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %652) #18
  %654 = fcmp ogt float %650, %653
  br label %671

; <label>:655:                                    ; preds = %645
  %656 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %657 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %656, i64 %646
  %658 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %657) #18
  %659 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %644, align 8
  %660 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %659, i64 %646
  %661 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %660) #18
  %662 = icmp sgt i32 %658, %661
  br label %671

; <label>:663:                                    ; preds = %645
  %664 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %665 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %664, i64 %646
  %666 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %665) #18
  %667 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %644, align 8
  %668 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %667, i64 %646
  %669 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %668) #18
  %670 = icmp ugt i32 %666, %669
  br label %671

; <label>:671:                                    ; preds = %663, %655, %647
  %672 = phi i1 [ %654, %647 ], [ %662, %655 ], [ %670, %663 ]
  %673 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %634, i64 %646
  %674 = zext i1 %672 to i8
  %675 = bitcast %"class.sh::TConstantUnion"* %673 to i8*
  store i8 %674, i8* %675, align 4
  %676 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %634, i64 %646, i32 1
  store i32 4, i32* %676, align 4
  br label %677

; <label>:677:                                    ; preds = %671, %645
  %678 = add nuw i64 %646, 1
  %679 = icmp eq i64 %678, %45
  br i1 %679, label %1791, label %645

; <label>:680:                                    ; preds = %221
  %681 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %682 = extractvalue { i64, i1 } %681, 1
  %683 = extractvalue { i64, i1 } %681, 0
  %684 = select i1 %682, i64 -1, i64 %683
  %685 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %686 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %685, i64 %684) #18
  %687 = bitcast i8* %686 to %"class.sh::TConstantUnion"*
  %688 = icmp eq i64 %45, 0
  br i1 %688, label %1791, label %689

; <label>:689:                                    ; preds = %680
  %690 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %687, i64 %45
  br label %691

; <label>:691:                                    ; preds = %691, %689
  %692 = phi %"class.sh::TConstantUnion"* [ %687, %689 ], [ %693, %691 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %692) #18
  %693 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %692, i64 1
  %694 = icmp eq %"class.sh::TConstantUnion"* %693, %690
  br i1 %694, label %695, label %691

; <label>:695:                                    ; preds = %691
  br i1 %688, label %1791, label %696

; <label>:696:                                    ; preds = %695
  %697 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %698

; <label>:698:                                    ; preds = %730, %696
  %699 = phi i64 [ 0, %696 ], [ %731, %730 ]
  switch i32 %44, label %730 [
    i32 1, label %700
    i32 2, label %708
    i32 3, label %716
  ]

; <label>:700:                                    ; preds = %698
  %701 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %702 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %701, i64 %699
  %703 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %702) #18
  %704 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %697, align 8
  %705 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %704, i64 %699
  %706 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %705) #18
  %707 = fcmp oge float %703, %706
  br label %724

; <label>:708:                                    ; preds = %698
  %709 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %710 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %709, i64 %699
  %711 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %710) #18
  %712 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %697, align 8
  %713 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %712, i64 %699
  %714 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %713) #18
  %715 = icmp sge i32 %711, %714
  br label %724

; <label>:716:                                    ; preds = %698
  %717 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %718 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %717, i64 %699
  %719 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %718) #18
  %720 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %697, align 8
  %721 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %720, i64 %699
  %722 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %721) #18
  %723 = icmp uge i32 %719, %722
  br label %724

; <label>:724:                                    ; preds = %716, %708, %700
  %725 = phi i1 [ %707, %700 ], [ %715, %708 ], [ %723, %716 ]
  %726 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %687, i64 %699
  %727 = zext i1 %725 to i8
  %728 = bitcast %"class.sh::TConstantUnion"* %726 to i8*
  store i8 %727, i8* %728, align 4
  %729 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %687, i64 %699, i32 1
  store i32 4, i32* %729, align 4
  br label %730

; <label>:730:                                    ; preds = %724, %698
  %731 = add nuw i64 %699, 1
  %732 = icmp eq i64 %731, %45
  br i1 %732, label %1791, label %698

; <label>:733:                                    ; preds = %221
  %734 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %735 = extractvalue { i64, i1 } %734, 1
  %736 = extractvalue { i64, i1 } %734, 0
  %737 = select i1 %735, i64 -1, i64 %736
  %738 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %739 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %738, i64 %737) #18
  %740 = bitcast i8* %739 to %"class.sh::TConstantUnion"*
  %741 = icmp eq i64 %45, 0
  br i1 %741, label %1791, label %742

; <label>:742:                                    ; preds = %733
  %743 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %740, i64 %45
  br label %744

; <label>:744:                                    ; preds = %744, %742
  %745 = phi %"class.sh::TConstantUnion"* [ %740, %742 ], [ %746, %744 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %745) #18
  %746 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %745, i64 1
  %747 = icmp eq %"class.sh::TConstantUnion"* %746, %743
  br i1 %747, label %748, label %744

; <label>:748:                                    ; preds = %744
  br i1 %741, label %1791, label %749

; <label>:749:                                    ; preds = %748
  %750 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %751

; <label>:751:                                    ; preds = %792, %749
  %752 = phi i64 [ 0, %749 ], [ %793, %792 ]
  switch i32 %44, label %792 [
    i32 1, label %753
    i32 2, label %761
    i32 3, label %769
    i32 4, label %777
  ]

; <label>:753:                                    ; preds = %751
  %754 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %755 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %754, i64 %752
  %756 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %755) #18
  %757 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %750, align 8
  %758 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %757, i64 %752
  %759 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %758) #18
  %760 = fcmp oeq float %756, %759
  br label %786

; <label>:761:                                    ; preds = %751
  %762 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %763 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %762, i64 %752
  %764 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %763) #18
  %765 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %750, align 8
  %766 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %765, i64 %752
  %767 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %766) #18
  %768 = icmp eq i32 %764, %767
  br label %786

; <label>:769:                                    ; preds = %751
  %770 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %771 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %770, i64 %752
  %772 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %771) #18
  %773 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %750, align 8
  %774 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %773, i64 %752
  %775 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %774) #18
  %776 = icmp eq i32 %772, %775
  br label %786

; <label>:777:                                    ; preds = %751
  %778 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %779 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %778, i64 %752
  %780 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %779) #18
  %781 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %750, align 8
  %782 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %781, i64 %752
  %783 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %782) #18
  %784 = xor i1 %780, %783
  %785 = xor i1 %784, true
  br label %786

; <label>:786:                                    ; preds = %777, %769, %761, %753
  %787 = phi i1 [ %760, %753 ], [ %768, %761 ], [ %776, %769 ], [ %785, %777 ]
  %788 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %740, i64 %752
  %789 = zext i1 %787 to i8
  %790 = bitcast %"class.sh::TConstantUnion"* %788 to i8*
  store i8 %789, i8* %790, align 4
  %791 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %740, i64 %752, i32 1
  store i32 4, i32* %791, align 4
  br label %792

; <label>:792:                                    ; preds = %786, %751
  %793 = add nuw i64 %752, 1
  %794 = icmp eq i64 %793, %45
  br i1 %794, label %1791, label %751

; <label>:795:                                    ; preds = %221
  %796 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %797 = extractvalue { i64, i1 } %796, 1
  %798 = extractvalue { i64, i1 } %796, 0
  %799 = select i1 %797, i64 -1, i64 %798
  %800 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %801 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %800, i64 %799) #18
  %802 = bitcast i8* %801 to %"class.sh::TConstantUnion"*
  %803 = icmp eq i64 %45, 0
  br i1 %803, label %1791, label %804

; <label>:804:                                    ; preds = %795
  %805 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %802, i64 %45
  br label %806

; <label>:806:                                    ; preds = %806, %804
  %807 = phi %"class.sh::TConstantUnion"* [ %802, %804 ], [ %808, %806 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %807) #18
  %808 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %807, i64 1
  %809 = icmp eq %"class.sh::TConstantUnion"* %808, %805
  br i1 %809, label %810, label %806

; <label>:810:                                    ; preds = %806
  br i1 %803, label %1791, label %811

; <label>:811:                                    ; preds = %810
  %812 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %813

; <label>:813:                                    ; preds = %853, %811
  %814 = phi i64 [ 0, %811 ], [ %854, %853 ]
  switch i32 %44, label %853 [
    i32 1, label %815
    i32 2, label %823
    i32 3, label %831
    i32 4, label %839
  ]

; <label>:815:                                    ; preds = %813
  %816 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %817 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %816, i64 %814
  %818 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %817) #18
  %819 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %812, align 8
  %820 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %819, i64 %814
  %821 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %820) #18
  %822 = fcmp une float %818, %821
  br label %847

; <label>:823:                                    ; preds = %813
  %824 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %825 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %824, i64 %814
  %826 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %825) #18
  %827 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %812, align 8
  %828 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %827, i64 %814
  %829 = tail call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %828) #18
  %830 = icmp ne i32 %826, %829
  br label %847

; <label>:831:                                    ; preds = %813
  %832 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %833 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %832, i64 %814
  %834 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %833) #18
  %835 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %812, align 8
  %836 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %835, i64 %814
  %837 = tail call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %836) #18
  %838 = icmp ne i32 %834, %837
  br label %847

; <label>:839:                                    ; preds = %813
  %840 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %841 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %840, i64 %814
  %842 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %841) #18
  %843 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %812, align 8
  %844 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %843, i64 %814
  %845 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %844) #18
  %846 = xor i1 %842, %845
  br label %847

; <label>:847:                                    ; preds = %839, %831, %823, %815
  %848 = phi i1 [ %822, %815 ], [ %830, %823 ], [ %838, %831 ], [ %846, %839 ]
  %849 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %802, i64 %814
  %850 = zext i1 %848 to i8
  %851 = bitcast %"class.sh::TConstantUnion"* %849 to i8*
  store i8 %850, i8* %851, align 4
  %852 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %802, i64 %814, i32 1
  store i32 4, i32* %852, align 4
  br label %853

; <label>:853:                                    ; preds = %847, %813
  %854 = add nuw i64 %814, 1
  %855 = icmp eq i64 %854, %45
  br i1 %855, label %1791, label %813

; <label>:856:                                    ; preds = %221
  %857 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %858 = extractvalue { i64, i1 } %857, 1
  %859 = extractvalue { i64, i1 } %857, 0
  %860 = select i1 %858, i64 -1, i64 %859
  %861 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %862 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %861, i64 %860) #18
  %863 = bitcast i8* %862 to %"class.sh::TConstantUnion"*
  %864 = icmp eq i64 %45, 0
  br i1 %864, label %871, label %865

; <label>:865:                                    ; preds = %856
  %866 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %863, i64 %45
  br label %867

; <label>:867:                                    ; preds = %867, %865
  %868 = phi %"class.sh::TConstantUnion"* [ %863, %865 ], [ %869, %867 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %868) #18
  %869 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %868, i64 1
  %870 = icmp eq %"class.sh::TConstantUnion"* %869, %866
  br i1 %870, label %871, label %867

; <label>:871:                                    ; preds = %867, %856
  %872 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %873 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %872, i64 8) #18
  %874 = bitcast i8* %873 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %874) #18
  br i1 %864, label %887, label %875

; <label>:875:                                    ; preds = %871
  %876 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %893

; <label>:877:                                    ; preds = %893
  br i1 %864, label %887, label %878

; <label>:878:                                    ; preds = %877, %878
  %879 = phi float [ %884, %878 ], [ 0.000000e+00, %877 ]
  %880 = phi i64 [ %885, %878 ], [ 0, %877 ]
  %881 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %863, i64 %880
  %882 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %881) #18
  %883 = fmul float %882, %882
  %884 = fadd float %879, %883
  %885 = add nuw i64 %880, 1
  %886 = icmp eq i64 %885, %45
  br i1 %886, label %887, label %878

; <label>:887:                                    ; preds = %878, %871, %877
  %888 = phi float [ 0.000000e+00, %877 ], [ 0.000000e+00, %871 ], [ %884, %878 ]
  %889 = tail call float @sqrtf(float %888) #18
  %890 = bitcast i8* %873 to float*
  store float %889, float* %890, align 4
  %891 = getelementptr inbounds i8, i8* %873, i64 4
  %892 = bitcast i8* %891 to i32*
  store i32 1, i32* %892, align 4
  br label %1791

; <label>:893:                                    ; preds = %893, %875
  %894 = phi i64 [ 0, %875 ], [ %905, %893 ]
  %895 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %896 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %895, i64 %894
  %897 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %896) #18
  %898 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %876, align 8
  %899 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %898, i64 %894
  %900 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %899) #18
  %901 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %863, i64 %894
  %902 = fsub float %897, %900
  %903 = bitcast %"class.sh::TConstantUnion"* %901 to float*
  store float %902, float* %903, align 4
  %904 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %863, i64 %894, i32 1
  store i32 1, i32* %904, align 4
  %905 = add nuw i64 %894, 1
  %906 = icmp eq i64 %905, %45
  br i1 %906, label %877, label %893

; <label>:907:                                    ; preds = %221
  %908 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %909 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %908, i64 8) #18
  %910 = bitcast i8* %909 to %"class.sh::TConstantUnion"*
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %910) #18
  %911 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %912 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %913 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %912, align 8
  %914 = icmp eq i64 %45, 0
  br i1 %914, label %926, label %915

; <label>:915:                                    ; preds = %907, %915
  %916 = phi i64 [ %924, %915 ], [ 0, %907 ]
  %917 = phi float [ %923, %915 ], [ 0.000000e+00, %907 ]
  %918 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %911, i64 %916
  %919 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %918) #18
  %920 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %913, i64 %916
  %921 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %920) #18
  %922 = fmul float %919, %921
  %923 = fadd float %917, %922
  %924 = add nuw i64 %916, 1
  %925 = icmp eq i64 %924, %45
  br i1 %925, label %926, label %915

; <label>:926:                                    ; preds = %915, %907
  %927 = phi float [ 0.000000e+00, %907 ], [ %923, %915 ]
  %928 = bitcast i8* %909 to float*
  store float %927, float* %928, align 4
  %929 = getelementptr inbounds i8, i8* %909, i64 4
  %930 = bitcast i8* %929 to i32*
  store i32 1, i32* %930, align 4
  br label %1791

; <label>:931:                                    ; preds = %221
  %932 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %933 = extractvalue { i64, i1 } %932, 1
  %934 = extractvalue { i64, i1 } %932, 0
  %935 = select i1 %933, i64 -1, i64 %934
  %936 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %937 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %936, i64 %935) #18
  %938 = bitcast i8* %937 to %"class.sh::TConstantUnion"*
  %939 = icmp eq i64 %45, 0
  br i1 %939, label %946, label %940

; <label>:940:                                    ; preds = %931
  %941 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %938, i64 %45
  br label %942

; <label>:942:                                    ; preds = %942, %940
  %943 = phi %"class.sh::TConstantUnion"* [ %938, %940 ], [ %944, %942 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %943) #18
  %944 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %943, i64 1
  %945 = icmp eq %"class.sh::TConstantUnion"* %944, %941
  br i1 %945, label %946, label %942

; <label>:946:                                    ; preds = %942, %931
  %947 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %948 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %947) #18
  %949 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %950 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %949, i64 1
  %951 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %950) #18
  %952 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %953 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %952, i64 2
  %954 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %953) #18
  %955 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %956 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %955, align 8
  %957 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %956) #18
  %958 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %955, align 8
  %959 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %958, i64 1
  %960 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %959) #18
  %961 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %955, align 8
  %962 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %961, i64 2
  %963 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %962) #18
  %964 = fmul float %951, %963
  %965 = fmul float %954, %960
  %966 = fsub float %964, %965
  %967 = bitcast i8* %937 to float*
  store float %966, float* %967, align 4
  %968 = getelementptr inbounds i8, i8* %937, i64 4
  %969 = bitcast i8* %968 to i32*
  store i32 1, i32* %969, align 4
  %970 = getelementptr inbounds i8, i8* %937, i64 8
  %971 = fmul float %954, %957
  %972 = fmul float %948, %963
  %973 = fsub float %971, %972
  %974 = bitcast i8* %970 to float*
  store float %973, float* %974, align 4
  %975 = getelementptr inbounds i8, i8* %937, i64 12
  %976 = bitcast i8* %975 to i32*
  store i32 1, i32* %976, align 4
  %977 = getelementptr inbounds i8, i8* %937, i64 16
  %978 = fmul float %948, %960
  %979 = fmul float %951, %957
  %980 = fsub float %978, %979
  %981 = bitcast i8* %977 to float*
  store float %980, float* %981, align 4
  %982 = getelementptr inbounds i8, i8* %937, i64 20
  %983 = bitcast i8* %982 to i32*
  store i32 1, i32* %983, align 4
  br label %1791

; <label>:984:                                    ; preds = %221
  %985 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %986 = extractvalue { i64, i1 } %985, 1
  %987 = extractvalue { i64, i1 } %985, 0
  %988 = select i1 %986, i64 -1, i64 %987
  %989 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %990 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %989, i64 %988) #18
  %991 = bitcast i8* %990 to %"class.sh::TConstantUnion"*
  %992 = icmp eq i64 %45, 0
  br i1 %992, label %1791, label %993

; <label>:993:                                    ; preds = %984
  %994 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %991, i64 %45
  br label %995

; <label>:995:                                    ; preds = %995, %993
  %996 = phi %"class.sh::TConstantUnion"* [ %991, %993 ], [ %997, %995 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %996) #18
  %997 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %996, i64 1
  %998 = icmp eq %"class.sh::TConstantUnion"* %997, %994
  br i1 %998, label %999, label %995

; <label>:999:                                    ; preds = %995
  %1000 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1001 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1000, align 8
  %1002 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  br label %1003

; <label>:1003:                                   ; preds = %999, %1003
  %1004 = phi i64 [ %1012, %1003 ], [ 0, %999 ]
  %1005 = phi float [ %1011, %1003 ], [ 0.000000e+00, %999 ]
  %1006 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1001, i64 %1004
  %1007 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1006) #18
  %1008 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1002, i64 %1004
  %1009 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1008) #18
  %1010 = fmul float %1007, %1009
  %1011 = fadd float %1005, %1010
  %1012 = add nuw i64 %1004, 1
  %1013 = icmp eq i64 %1012, %45
  br i1 %1013, label %1014, label %1003

; <label>:1014:                                   ; preds = %1003
  %1015 = fmul float %1011, 2.000000e+00
  br i1 %992, label %1791, label %1016

; <label>:1016:                                   ; preds = %1014, %1016
  %1017 = phi i64 [ %1029, %1016 ], [ 0, %1014 ]
  %1018 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1019 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1018, i64 %1017
  %1020 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1019) #18
  %1021 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1000, align 8
  %1022 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1021, i64 %1017
  %1023 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1022) #18
  %1024 = fmul float %1015, %1023
  %1025 = fsub float %1020, %1024
  %1026 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %991, i64 %1017
  %1027 = bitcast %"class.sh::TConstantUnion"* %1026 to float*
  store float %1025, float* %1027, align 4
  %1028 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %991, i64 %1017, i32 1
  store i32 1, i32* %1028, align 4
  %1029 = add nuw i64 %1017, 1
  %1030 = icmp eq i64 %1029, %45
  br i1 %1030, label %1791, label %1016

; <label>:1031:                                   ; preds = %221
  %1032 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1033 = extractvalue { i64, i1 } %1032, 1
  %1034 = extractvalue { i64, i1 } %1032, 0
  %1035 = select i1 %1033, i64 -1, i64 %1034
  %1036 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1037 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1036, i64 %1035) #18
  %1038 = bitcast i8* %1037 to %"class.sh::TConstantUnion"*
  %1039 = icmp eq i64 %45, 0
  br i1 %1039, label %1046, label %1040

; <label>:1040:                                   ; preds = %1031
  %1041 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1038, i64 %45
  br label %1042

; <label>:1042:                                   ; preds = %1042, %1040
  %1043 = phi %"class.sh::TConstantUnion"* [ %1038, %1040 ], [ %1044, %1042 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1043) #18
  %1044 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1043, i64 1
  %1045 = icmp eq %"class.sh::TConstantUnion"* %1044, %1041
  br i1 %1045, label %1046, label %1042

; <label>:1046:                                   ; preds = %1042, %1031
  %1047 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %1048 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1047, align 8
  %1049 = bitcast %"class.sh::TIntermNode"* %1048 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1050 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1049, align 8
  %1051 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1050, i64 4
  %1052 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1051, align 8
  %1053 = tail call %"class.sh::TIntermTyped"* %1052(%"class.sh::TIntermNode"* %1048) #18
  %1054 = bitcast %"class.sh::TIntermTyped"* %1053 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1055 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1054, align 8
  %1056 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1055, i64 31
  %1057 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1056, align 8
  %1058 = tail call dereferenceable(128) %"class.sh::TType"* %1057(%"class.sh::TIntermTyped"* %1053) #18
  %1059 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1058, i64 0, i32 7
  %1060 = load i8, i8* %1059, align 1
  %1061 = zext i8 %1060 to i32
  %1062 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %1063 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1062, align 8
  %1064 = bitcast %"class.sh::TIntermNode"* %1063 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1065 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1064, align 8
  %1066 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1065, i64 4
  %1067 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1066, align 8
  %1068 = tail call %"class.sh::TIntermTyped"* %1067(%"class.sh::TIntermNode"* %1063) #18
  %1069 = bitcast %"class.sh::TIntermTyped"* %1068 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1070 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1069, align 8
  %1071 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1070, i64 31
  %1072 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1071, align 8
  %1073 = tail call dereferenceable(128) %"class.sh::TType"* %1072(%"class.sh::TIntermTyped"* %1068) #18
  %1074 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1073, i64 0, i32 6
  %1075 = load i8, i8* %1074, align 4
  %1076 = zext i8 %1075 to i32
  %1077 = bitcast %"class.angle::Matrix"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1077) #18
  %1078 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %4, %"class.sh::TConstantUnion"* %1078, i32 %1061, i32 %1076)
  %1079 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1079) #18
  %1080 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1081 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1080, align 8
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %5, %"class.sh::TConstantUnion"* %1081, i32 %1061, i32 %1076)
  %1082 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1082) #18
  call void @_ZNK5angle6MatrixIfE8compMultERKS1_(%"class.angle::Matrix"* nonnull sret %6, %"class.angle::Matrix"* nonnull %4, %"class.angle::Matrix"* nonnull dereferenceable(32) %5)
  call fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* nonnull dereferenceable(32) %6, %"class.sh::TConstantUnion"* %1038)
  %1083 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 0
  %1084 = load float*, float** %1083, align 8
  %1085 = icmp eq float* %1084, null
  br i1 %1085, label %1091, label %1086

; <label>:1086:                                   ; preds = %1046
  %1087 = ptrtoint float* %1084 to i64
  %1088 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %1089 = bitcast float** %1088 to i64*
  store i64 %1087, i64* %1089, align 8
  %1090 = bitcast float* %1084 to i8*
  call void @_ZdlPv(i8* %1090) #20
  br label %1091

; <label>:1091:                                   ; preds = %1046, %1086
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1082) #18
  %1092 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  %1093 = load float*, float** %1092, align 8
  %1094 = icmp eq float* %1093, null
  br i1 %1094, label %1100, label %1095

; <label>:1095:                                   ; preds = %1091
  %1096 = ptrtoint float* %1093 to i64
  %1097 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %1098 = bitcast float** %1097 to i64*
  store i64 %1096, i64* %1098, align 8
  %1099 = bitcast float* %1093 to i8*
  call void @_ZdlPv(i8* %1099) #20
  br label %1100

; <label>:1100:                                   ; preds = %1091, %1095
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1079) #18
  %1101 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 0
  %1102 = load float*, float** %1101, align 8
  %1103 = icmp eq float* %1102, null
  br i1 %1103, label %1109, label %1104

; <label>:1104:                                   ; preds = %1100
  %1105 = ptrtoint float* %1102 to i64
  %1106 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 1
  %1107 = bitcast float** %1106 to i64*
  store i64 %1105, i64* %1107, align 8
  %1108 = bitcast float* %1102 to i8*
  call void @_ZdlPv(i8* %1108) #20
  br label %1109

; <label>:1109:                                   ; preds = %1100, %1104
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1077) #18
  br label %1791

; <label>:1110:                                   ; preds = %221
  %1111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %1112 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1111, align 8
  %1113 = bitcast %"class.sh::TIntermNode"* %1112 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1114 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1113, align 8
  %1115 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1114, i64 4
  %1116 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1115, align 8
  %1117 = tail call %"class.sh::TIntermTyped"* %1116(%"class.sh::TIntermNode"* %1112) #18
  %1118 = bitcast %"class.sh::TIntermTyped"* %1117 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1119 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1118, align 8
  %1120 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1119, i64 31
  %1121 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1120, align 8
  %1122 = tail call dereferenceable(128) %"class.sh::TType"* %1121(%"class.sh::TIntermTyped"* %1117) #18
  %1123 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %1122) #18
  %1124 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %1125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1124, i64 1
  %1126 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1125, align 8
  %1127 = bitcast %"class.sh::TIntermNode"* %1126 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1128 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1127, align 8
  %1129 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1128, i64 4
  %1130 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1129, align 8
  %1131 = tail call %"class.sh::TIntermTyped"* %1130(%"class.sh::TIntermNode"* %1126) #18
  %1132 = bitcast %"class.sh::TIntermTyped"* %1131 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1133 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1132, align 8
  %1134 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1133, i64 31
  %1135 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1134, align 8
  %1136 = tail call dereferenceable(128) %"class.sh::TType"* %1135(%"class.sh::TIntermTyped"* %1131) #18
  %1137 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* nonnull %1136) #18
  %1138 = mul i64 %1137, %1123
  %1139 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1138, i64 8)
  %1140 = extractvalue { i64, i1 } %1139, 1
  %1141 = extractvalue { i64, i1 } %1139, 0
  %1142 = select i1 %1140, i64 -1, i64 %1141
  %1143 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1144 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1143, i64 %1142) #18
  %1145 = bitcast i8* %1144 to %"class.sh::TConstantUnion"*
  %1146 = icmp eq i64 %1138, 0
  br i1 %1146, label %1153, label %1147

; <label>:1147:                                   ; preds = %1110
  %1148 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1145, i64 %1138
  br label %1149

; <label>:1149:                                   ; preds = %1149, %1147
  %1150 = phi %"class.sh::TConstantUnion"* [ %1145, %1147 ], [ %1151, %1149 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1150) #18
  %1151 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1150, i64 1
  %1152 = icmp eq %"class.sh::TConstantUnion"* %1151, %1148
  br i1 %1152, label %1153, label %1149

; <label>:1153:                                   ; preds = %1149, %1110
  %1154 = bitcast %"class.angle::Matrix"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1154) #18
  %1155 = bitcast %"class.angle::Matrix"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1155) #18
  %1156 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1157 = trunc i64 %1123 to i32
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %8, %"class.sh::TConstantUnion"* %1156, i32 %1157, i32 1)
  %1158 = bitcast %"class.angle::Matrix"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1158) #18
  %1159 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1160 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1159, align 8
  %1161 = trunc i64 %1137 to i32
  call fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* nonnull sret %9, %"class.sh::TConstantUnion"* %1160, i32 1, i32 %1161)
  call void @_ZNK5angle6MatrixIfE12outerProductERKS1_(%"class.angle::Matrix"* nonnull sret %7, %"class.angle::Matrix"* nonnull %8, %"class.angle::Matrix"* nonnull dereferenceable(32) %9)
  %1162 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %9, i64 0, i32 0, i32 0, i32 0
  %1163 = load float*, float** %1162, align 8
  %1164 = icmp eq float* %1163, null
  br i1 %1164, label %1170, label %1165

; <label>:1165:                                   ; preds = %1153
  %1166 = ptrtoint float* %1163 to i64
  %1167 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %9, i64 0, i32 0, i32 0, i32 1
  %1168 = bitcast float** %1167 to i64*
  store i64 %1166, i64* %1168, align 8
  %1169 = bitcast float* %1163 to i8*
  call void @_ZdlPv(i8* %1169) #20
  br label %1170

; <label>:1170:                                   ; preds = %1153, %1165
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1158) #18
  %1171 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %8, i64 0, i32 0, i32 0, i32 0
  %1172 = load float*, float** %1171, align 8
  %1173 = icmp eq float* %1172, null
  br i1 %1173, label %1179, label %1174

; <label>:1174:                                   ; preds = %1170
  %1175 = ptrtoint float* %1172 to i64
  %1176 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %8, i64 0, i32 0, i32 0, i32 1
  %1177 = bitcast float** %1176 to i64*
  store i64 %1175, i64* %1177, align 8
  %1178 = bitcast float* %1172 to i8*
  call void @_ZdlPv(i8* %1178) #20
  br label %1179

; <label>:1179:                                   ; preds = %1170, %1174
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1155) #18
  call fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* nonnull dereferenceable(32) %7, %"class.sh::TConstantUnion"* %1145)
  %1180 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 0
  %1181 = load float*, float** %1180, align 8
  %1182 = icmp eq float* %1181, null
  br i1 %1182, label %1188, label %1183

; <label>:1183:                                   ; preds = %1179
  %1184 = ptrtoint float* %1181 to i64
  %1185 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 1
  %1186 = bitcast float** %1185 to i64*
  store i64 %1184, i64* %1186, align 8
  %1187 = bitcast float* %1181 to i8*
  call void @_ZdlPv(i8* %1187) #20
  br label %1188

; <label>:1188:                                   ; preds = %1179, %1183
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1154) #18
  br label %1791

; <label>:1189:                                   ; preds = %221
  %1190 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1191 = extractvalue { i64, i1 } %1190, 1
  %1192 = extractvalue { i64, i1 } %1190, 0
  %1193 = select i1 %1191, i64 -1, i64 %1192
  %1194 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1195 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1194, i64 %1193) #18
  %1196 = bitcast i8* %1195 to %"class.sh::TConstantUnion"*
  %1197 = icmp eq i64 %45, 0
  br i1 %1197, label %1791, label %1198

; <label>:1198:                                   ; preds = %1189
  %1199 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1196, i64 %45
  br label %1200

; <label>:1200:                                   ; preds = %1200, %1198
  %1201 = phi %"class.sh::TConstantUnion"* [ %1196, %1198 ], [ %1202, %1200 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1201) #18
  %1202 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1201, i64 1
  %1203 = icmp eq %"class.sh::TConstantUnion"* %1202, %1199
  br i1 %1203, label %1204, label %1200

; <label>:1204:                                   ; preds = %1200
  br i1 %1197, label %1791, label %1205

; <label>:1205:                                   ; preds = %1204
  %1206 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1207 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 2
  br label %1208

; <label>:1208:                                   ; preds = %1276, %1205
  %1209 = phi i64 [ 0, %1205 ], [ %1277, %1276 ]
  switch i32 %44, label %1276 [
    i32 1, label %1210
    i32 2, label %1231
    i32 3, label %1252
  ]

; <label>:1210:                                   ; preds = %1208
  %1211 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1212 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1211, i64 %1209
  %1213 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1212) #18
  %1214 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1206, align 8
  %1215 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1214, i64 %1209
  %1216 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1215) #18
  %1217 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1207, align 8
  %1218 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1217, i64 %1209
  %1219 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1218) #18
  %1220 = fcmp ogt float %1216, %1219
  %1221 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1196, i64 %1209
  br i1 %1220, label %1222, label %1225

; <label>:1222:                                   ; preds = %1210
  %1223 = call i8* @_Z17GetOperatorString9TOperator(i32 81) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1223) #18
  %1224 = bitcast %"class.sh::TConstantUnion"* %1221 to float*
  store float 0.000000e+00, float* %1224, align 4
  br label %1273

; <label>:1225:                                   ; preds = %1210
  %1226 = fcmp ogt float %1213, %1216
  %1227 = fcmp ogt float %1213, %1219
  %1228 = select i1 %1227, float %1219, float %1213
  %1229 = select i1 %1226, float %1228, float %1216
  %1230 = bitcast %"class.sh::TConstantUnion"* %1221 to float*
  store float %1229, float* %1230, align 4
  br label %1273

; <label>:1231:                                   ; preds = %1208
  %1232 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1233 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1232, i64 %1209
  %1234 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1233) #18
  %1235 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1206, align 8
  %1236 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1235, i64 %1209
  %1237 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1236) #18
  %1238 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1207, align 8
  %1239 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1238, i64 %1209
  %1240 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1239) #18
  %1241 = icmp sgt i32 %1237, %1240
  %1242 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1196, i64 %1209
  br i1 %1241, label %1243, label %1246

; <label>:1243:                                   ; preds = %1231
  %1244 = call i8* @_Z17GetOperatorString9TOperator(i32 81) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1244) #18
  %1245 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1242, i64 0, i32 0, i32 0
  store i32 0, i32* %1245, align 4
  br label %1273

; <label>:1246:                                   ; preds = %1231
  %1247 = icmp sgt i32 %1234, %1237
  %1248 = icmp sgt i32 %1234, %1240
  %1249 = select i1 %1248, i32 %1240, i32 %1234
  %1250 = select i1 %1247, i32 %1249, i32 %1237
  %1251 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1242, i64 0, i32 0, i32 0
  store i32 %1250, i32* %1251, align 4
  br label %1273

; <label>:1252:                                   ; preds = %1208
  %1253 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1254 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1253, i64 %1209
  %1255 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1254) #18
  %1256 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1206, align 8
  %1257 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1256, i64 %1209
  %1258 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1257) #18
  %1259 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1207, align 8
  %1260 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1259, i64 %1209
  %1261 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1260) #18
  %1262 = icmp ugt i32 %1258, %1261
  %1263 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1196, i64 %1209
  br i1 %1262, label %1264, label %1267

; <label>:1264:                                   ; preds = %1252
  %1265 = call i8* @_Z17GetOperatorString9TOperator(i32 81) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1265) #18
  %1266 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1263, i64 0, i32 0, i32 0
  store i32 0, i32* %1266, align 4
  br label %1273

; <label>:1267:                                   ; preds = %1252
  %1268 = icmp ugt i32 %1255, %1258
  %1269 = icmp ugt i32 %1255, %1261
  %1270 = select i1 %1269, i32 %1261, i32 %1255
  %1271 = select i1 %1268, i32 %1270, i32 %1258
  %1272 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1263, i64 0, i32 0, i32 0
  store i32 %1271, i32* %1272, align 4
  br label %1273

; <label>:1273:                                   ; preds = %1225, %1222, %1246, %1243, %1267, %1264
  %1274 = phi i32 [ 3, %1264 ], [ 3, %1267 ], [ 2, %1243 ], [ 2, %1246 ], [ 1, %1222 ], [ 1, %1225 ]
  %1275 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1196, i64 %1209, i32 1
  store i32 %1274, i32* %1275, align 4
  br label %1276

; <label>:1276:                                   ; preds = %1273, %1208
  %1277 = add nuw i64 %1209, 1
  %1278 = icmp eq i64 %1277, %45
  br i1 %1278, label %1791, label %1208

; <label>:1279:                                   ; preds = %221
  %1280 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1281 = extractvalue { i64, i1 } %1280, 1
  %1282 = extractvalue { i64, i1 } %1280, 0
  %1283 = select i1 %1281, i64 -1, i64 %1282
  %1284 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1285 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1284, i64 %1283) #18
  %1286 = bitcast i8* %1285 to %"class.sh::TConstantUnion"*
  %1287 = icmp eq i64 %45, 0
  br i1 %1287, label %1791, label %1288

; <label>:1288:                                   ; preds = %1279
  %1289 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1286, i64 %45
  br label %1290

; <label>:1290:                                   ; preds = %1290, %1288
  %1291 = phi %"class.sh::TConstantUnion"* [ %1286, %1288 ], [ %1292, %1290 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1291) #18
  %1292 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1291, i64 1
  %1293 = icmp eq %"class.sh::TConstantUnion"* %1292, %1289
  br i1 %1293, label %1294, label %1290

; <label>:1294:                                   ; preds = %1290
  br i1 %1287, label %1791, label %1295

; <label>:1295:                                   ; preds = %1294
  %1296 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1297 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 2
  br label %1298

; <label>:1298:                                   ; preds = %1333, %1295
  %1299 = phi i64 [ 0, %1295 ], [ %1338, %1333 ]
  %1300 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1301 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1300, i64 %1299
  %1302 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1301) #18
  %1303 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1296, align 8
  %1304 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1303, i64 %1299
  %1305 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1304) #18
  %1306 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %40, align 8
  %1307 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1306, i64 2
  %1308 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1307, align 8
  %1309 = bitcast %"class.sh::TIntermNode"* %1308 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %1310 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %1309, align 8
  %1311 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1310, i64 4
  %1312 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %1311, align 8
  %1313 = tail call %"class.sh::TIntermTyped"* %1312(%"class.sh::TIntermNode"* %1308) #18
  %1314 = bitcast %"class.sh::TIntermTyped"* %1313 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1315 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1314, align 8
  %1316 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1315, i64 31
  %1317 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1316, align 8
  %1318 = tail call dereferenceable(128) %"class.sh::TType"* %1317(%"class.sh::TIntermTyped"* %1313) #18
  %1319 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1318, i64 0, i32 0
  %1320 = load i32, i32* %1319, align 8
  %1321 = icmp eq i32 %1320, 1
  %1322 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1297, align 8
  %1323 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1322, i64 %1299
  br i1 %1321, label %1324, label %1330

; <label>:1324:                                   ; preds = %1298
  %1325 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1323) #18
  %1326 = fsub float 1.000000e+00, %1325
  %1327 = fmul float %1302, %1326
  %1328 = fmul float %1305, %1325
  %1329 = fadd float %1328, %1327
  br label %1333

; <label>:1330:                                   ; preds = %1298
  %1331 = tail call zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"* %1323) #18
  %1332 = select i1 %1331, float %1305, float %1302
  br label %1333

; <label>:1333:                                   ; preds = %1330, %1324
  %1334 = phi float [ %1332, %1330 ], [ %1329, %1324 ]
  %1335 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1286, i64 %1299
  %1336 = bitcast %"class.sh::TConstantUnion"* %1335 to float*
  store float %1334, float* %1336, align 4
  %1337 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1286, i64 %1299, i32 1
  store i32 1, i32* %1337, align 4
  %1338 = add nuw i64 %1299, 1
  %1339 = icmp eq i64 %1338, %45
  br i1 %1339, label %1791, label %1298

; <label>:1340:                                   ; preds = %221
  %1341 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1342 = extractvalue { i64, i1 } %1341, 1
  %1343 = extractvalue { i64, i1 } %1341, 0
  %1344 = select i1 %1342, i64 -1, i64 %1343
  %1345 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1346 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1345, i64 %1344) #18
  %1347 = bitcast i8* %1346 to %"class.sh::TConstantUnion"*
  %1348 = icmp eq i64 %45, 0
  br i1 %1348, label %1791, label %1349

; <label>:1349:                                   ; preds = %1340
  %1350 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1347, i64 %45
  br label %1351

; <label>:1351:                                   ; preds = %1351, %1349
  %1352 = phi %"class.sh::TConstantUnion"* [ %1347, %1349 ], [ %1353, %1351 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1352) #18
  %1353 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1352, i64 1
  %1354 = icmp eq %"class.sh::TConstantUnion"* %1353, %1350
  br i1 %1354, label %1355, label %1351

; <label>:1355:                                   ; preds = %1351
  br i1 %1348, label %1791, label %1356

; <label>:1356:                                   ; preds = %1355
  %1357 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1358 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 2
  br label %1359

; <label>:1359:                                   ; preds = %1399, %1356
  %1360 = phi i64 [ 0, %1356 ], [ %1400, %1399 ]
  %1361 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1362 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1361, i64 %1360
  %1363 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1362) #18
  %1364 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1357, align 8
  %1365 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1364, i64 %1360
  %1366 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1365) #18
  %1367 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1358, align 8
  %1368 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1367, i64 %1360
  %1369 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1368) #18
  %1370 = fcmp ult float %1363, %1366
  br i1 %1370, label %1382, label %1371

; <label>:1371:                                   ; preds = %1359
  %1372 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1347, i64 %1360
  %1373 = call i8* @_Z17GetOperatorString9TOperator(i32 84) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1373) #18
  switch i32 %44, label %1399 [
    i32 1, label %1374
    i32 2, label %1376
    i32 3, label %1378
    i32 4, label %1380
  ]

; <label>:1374:                                   ; preds = %1371
  %1375 = bitcast %"class.sh::TConstantUnion"* %1372 to float*
  store float 0.000000e+00, float* %1375, align 4
  br label %1396

; <label>:1376:                                   ; preds = %1371
  %1377 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1372, i64 0, i32 0, i32 0
  store i32 0, i32* %1377, align 4
  br label %1396

; <label>:1378:                                   ; preds = %1371
  %1379 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1372, i64 0, i32 0, i32 0
  store i32 0, i32* %1379, align 4
  br label %1396

; <label>:1380:                                   ; preds = %1371
  %1381 = bitcast %"class.sh::TConstantUnion"* %1372 to i8*
  store i8 0, i8* %1381, align 4
  br label %1396

; <label>:1382:                                   ; preds = %1359
  %1383 = fsub float %1369, %1363
  %1384 = fsub float %1366, %1363
  %1385 = fdiv float %1383, %1384
  %1386 = fcmp ogt float %1385, 0.000000e+00
  %1387 = fcmp ogt float %1385, 1.000000e+00
  %1388 = select i1 %1387, float 1.000000e+00, float %1385
  %1389 = select i1 %1386, float %1388, float 0.000000e+00
  %1390 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1347, i64 %1360
  %1391 = fmul float %1389, %1389
  %1392 = fmul float %1389, 2.000000e+00
  %1393 = fsub float 3.000000e+00, %1392
  %1394 = fmul float %1391, %1393
  %1395 = bitcast %"class.sh::TConstantUnion"* %1390 to float*
  store float %1394, float* %1395, align 4
  br label %1396

; <label>:1396:                                   ; preds = %1382, %1374, %1376, %1378, %1380
  %1397 = phi i32 [ 4, %1380 ], [ 3, %1378 ], [ 2, %1376 ], [ 1, %1374 ], [ 1, %1382 ]
  %1398 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1347, i64 %1360, i32 1
  store i32 %1397, i32* %1398, align 4
  br label %1399

; <label>:1399:                                   ; preds = %1396, %1371
  %1400 = add nuw i64 %1360, 1
  %1401 = icmp eq i64 %1400, %45
  br i1 %1401, label %1791, label %1359

; <label>:1402:                                   ; preds = %221
  %1403 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1404 = extractvalue { i64, i1 } %1403, 1
  %1405 = extractvalue { i64, i1 } %1403, 0
  %1406 = select i1 %1404, i64 -1, i64 %1405
  %1407 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1408 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1407, i64 %1406) #18
  %1409 = bitcast i8* %1408 to %"class.sh::TConstantUnion"*
  %1410 = icmp eq i64 %45, 0
  br i1 %1410, label %1791, label %1411

; <label>:1411:                                   ; preds = %1402
  %1412 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1409, i64 %45
  br label %1413

; <label>:1413:                                   ; preds = %1413, %1411
  %1414 = phi %"class.sh::TConstantUnion"* [ %1409, %1411 ], [ %1415, %1413 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1414) #18
  %1415 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1414, i64 1
  %1416 = icmp eq %"class.sh::TConstantUnion"* %1415, %1412
  br i1 %1416, label %1417, label %1413

; <label>:1417:                                   ; preds = %1413
  br i1 %1410, label %1791, label %1418

; <label>:1418:                                   ; preds = %1417
  %1419 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %1420

; <label>:1420:                                   ; preds = %1453, %1418
  %1421 = phi i64 [ 0, %1418 ], [ %1454, %1453 ]
  %1422 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1423 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1422, i64 %1421
  %1424 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1423) #18
  %1425 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1419, align 8
  %1426 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1425, i64 %1421
  %1427 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1426) #18
  %1428 = icmp sgt i32 %1427, 128
  %1429 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1409, i64 %1421
  br i1 %1428, label %1430, label %1440

; <label>:1430:                                   ; preds = %1420
  %1431 = call i8* @_Z17GetOperatorString9TOperator(i32 92) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1431) #18
  switch i32 %44, label %1453 [
    i32 1, label %1432
    i32 2, label %1434
    i32 3, label %1436
    i32 4, label %1438
  ]

; <label>:1432:                                   ; preds = %1430
  %1433 = bitcast %"class.sh::TConstantUnion"* %1429 to float*
  store float 0.000000e+00, float* %1433, align 4
  br label %1450

; <label>:1434:                                   ; preds = %1430
  %1435 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1429, i64 0, i32 0, i32 0
  store i32 0, i32* %1435, align 4
  br label %1450

; <label>:1436:                                   ; preds = %1430
  %1437 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1429, i64 0, i32 0, i32 0
  store i32 0, i32* %1437, align 4
  br label %1450

; <label>:1438:                                   ; preds = %1430
  %1439 = bitcast %"class.sh::TConstantUnion"* %1429 to i8*
  store i8 0, i8* %1439, align 4
  br label %1450

; <label>:1440:                                   ; preds = %1420
  %1441 = icmp slt i32 %1427, -126
  br i1 %1441, label %1447, label %1442

; <label>:1442:                                   ; preds = %1440
  %1443 = fpext float %1424 to double
  %1444 = call double @ldexp(double 1.000000e+00, i32 %1427) #18
  %1445 = fmul double %1444, %1443
  %1446 = fptrunc double %1445 to float
  br label %1447

; <label>:1447:                                   ; preds = %1440, %1442
  %1448 = phi float [ %1446, %1442 ], [ 0.000000e+00, %1440 ]
  %1449 = bitcast %"class.sh::TConstantUnion"* %1429 to float*
  store float %1448, float* %1449, align 4
  br label %1450

; <label>:1450:                                   ; preds = %1447, %1432, %1434, %1436, %1438
  %1451 = phi i32 [ 4, %1438 ], [ 3, %1436 ], [ 2, %1434 ], [ 1, %1432 ], [ 1, %1447 ]
  %1452 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1409, i64 %1421, i32 1
  store i32 %1451, i32* %1452, align 4
  br label %1453

; <label>:1453:                                   ; preds = %1450, %1430
  %1454 = add nuw i64 %1421, 1
  %1455 = icmp eq i64 %1454, %45
  br i1 %1455, label %1791, label %1420

; <label>:1456:                                   ; preds = %221
  %1457 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1458 = extractvalue { i64, i1 } %1457, 1
  %1459 = extractvalue { i64, i1 } %1457, 0
  %1460 = select i1 %1458, i64 -1, i64 %1459
  %1461 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1462 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1461, i64 %1460) #18
  %1463 = bitcast i8* %1462 to %"class.sh::TConstantUnion"*
  %1464 = icmp eq i64 %45, 0
  br i1 %1464, label %1791, label %1465

; <label>:1465:                                   ; preds = %1456
  %1466 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1463, i64 %45
  br label %1467

; <label>:1467:                                   ; preds = %1467, %1465
  %1468 = phi %"class.sh::TConstantUnion"* [ %1463, %1465 ], [ %1469, %1467 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1468) #18
  %1469 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1468, i64 1
  %1470 = icmp eq %"class.sh::TConstantUnion"* %1469, %1466
  br i1 %1470, label %1471, label %1467

; <label>:1471:                                   ; preds = %1467
  %1472 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 2
  %1473 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1472, align 8
  %1474 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1475 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1474, align 8
  br label %1476

; <label>:1476:                                   ; preds = %1471, %1476
  %1477 = phi i64 [ %1485, %1476 ], [ 0, %1471 ]
  %1478 = phi float [ %1484, %1476 ], [ 0.000000e+00, %1471 ]
  %1479 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1473, i64 %1477
  %1480 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1479) #18
  %1481 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1475, i64 %1477
  %1482 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1481) #18
  %1483 = fmul float %1480, %1482
  %1484 = fadd float %1478, %1483
  %1485 = add nuw i64 %1477, 1
  %1486 = icmp eq i64 %1485, %45
  br i1 %1486, label %1487, label %1476

; <label>:1487:                                   ; preds = %1476
  br i1 %1464, label %1791, label %1488

; <label>:1488:                                   ; preds = %1487
  %1489 = fcmp olt float %1484, 0.000000e+00
  br label %1490

; <label>:1490:                                   ; preds = %1490, %1488
  %1491 = phi i64 [ 0, %1488 ], [ %1500, %1490 ]
  %1492 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1463, i64 %1491
  %1493 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1494 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1493, i64 %1491
  %1495 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1494) #18
  %1496 = fsub float -0.000000e+00, %1495
  %1497 = select i1 %1489, float %1495, float %1496
  %1498 = bitcast %"class.sh::TConstantUnion"* %1492 to float*
  store float %1497, float* %1498, align 4
  %1499 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1463, i64 %1491, i32 1
  store i32 1, i32* %1499, align 4
  %1500 = add nuw i64 %1491, 1
  %1501 = icmp eq i64 %1500, %45
  br i1 %1501, label %1791, label %1490

; <label>:1502:                                   ; preds = %221
  %1503 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1504 = extractvalue { i64, i1 } %1503, 1
  %1505 = extractvalue { i64, i1 } %1503, 0
  %1506 = select i1 %1504, i64 -1, i64 %1505
  %1507 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1508 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1507, i64 %1506) #18
  %1509 = bitcast i8* %1508 to %"class.sh::TConstantUnion"*
  %1510 = icmp eq i64 %45, 0
  br i1 %1510, label %1791, label %1511

; <label>:1511:                                   ; preds = %1502
  %1512 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1509, i64 %45
  br label %1513

; <label>:1513:                                   ; preds = %1513, %1511
  %1514 = phi %"class.sh::TConstantUnion"* [ %1509, %1511 ], [ %1515, %1513 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1514) #18
  %1515 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1514, i64 1
  %1516 = icmp eq %"class.sh::TConstantUnion"* %1515, %1512
  br i1 %1516, label %1517, label %1513

; <label>:1517:                                   ; preds = %1513
  %1518 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1519 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1518, align 8
  %1520 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  br label %1521

; <label>:1521:                                   ; preds = %1517, %1521
  %1522 = phi i64 [ %1530, %1521 ], [ 0, %1517 ]
  %1523 = phi float [ %1529, %1521 ], [ 0.000000e+00, %1517 ]
  %1524 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1519, i64 %1522
  %1525 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1524) #18
  %1526 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1520, i64 %1522
  %1527 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1526) #18
  %1528 = fmul float %1525, %1527
  %1529 = fadd float %1523, %1528
  %1530 = add nuw i64 %1522, 1
  %1531 = icmp eq i64 %1530, %45
  br i1 %1531, label %1532, label %1521

; <label>:1532:                                   ; preds = %1521
  br i1 %1510, label %1791, label %1533

; <label>:1533:                                   ; preds = %1532
  %1534 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 2
  %1535 = fmul float %1529, %1529
  %1536 = fsub float 1.000000e+00, %1535
  br label %1537

; <label>:1537:                                   ; preds = %1560, %1533
  %1538 = phi i64 [ 0, %1533 ], [ %1564, %1560 ]
  %1539 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1534, align 8
  %1540 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1539, i64 %1538
  %1541 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1540) #18
  %1542 = fmul float %1541, %1541
  %1543 = fmul float %1536, %1542
  %1544 = fsub float 1.000000e+00, %1543
  %1545 = fcmp olt float %1544, 0.000000e+00
  %1546 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1509, i64 %1538
  br i1 %1545, label %1560, label %1547

; <label>:1547:                                   ; preds = %1537
  %1548 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1549 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1548, i64 %1538
  %1550 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1549) #18
  %1551 = fmul float %1541, %1550
  %1552 = fmul float %1529, %1541
  %1553 = tail call float @sqrtf(float %1544) #18
  %1554 = fadd float %1552, %1553
  %1555 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1518, align 8
  %1556 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1555, i64 %1538
  %1557 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %1556) #18
  %1558 = fmul float %1554, %1557
  %1559 = fsub float %1551, %1558
  br label %1560

; <label>:1560:                                   ; preds = %1537, %1547
  %1561 = phi float [ %1559, %1547 ], [ 0.000000e+00, %1537 ]
  %1562 = bitcast %"class.sh::TConstantUnion"* %1546 to float*
  store float %1561, float* %1562, align 4
  %1563 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1509, i64 %1538, i32 1
  store i32 1, i32* %1563, align 4
  %1564 = add nuw i64 %1538, 1
  %1565 = icmp eq i64 %1564, %45
  br i1 %1565, label %1791, label %1537

; <label>:1566:                                   ; preds = %221
  %1567 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1568 = extractvalue { i64, i1 } %1567, 1
  %1569 = extractvalue { i64, i1 } %1567, 0
  %1570 = select i1 %1568, i64 -1, i64 %1569
  %1571 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1572 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1571, i64 %1570) #18
  %1573 = bitcast i8* %1572 to %"class.sh::TConstantUnion"*
  %1574 = icmp eq i64 %45, 0
  br i1 %1574, label %1791, label %1575

; <label>:1575:                                   ; preds = %1566
  %1576 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %45
  br label %1577

; <label>:1577:                                   ; preds = %1577, %1575
  %1578 = phi %"class.sh::TConstantUnion"* [ %1573, %1575 ], [ %1579, %1577 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1578) #18
  %1579 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1578, i64 1
  %1580 = icmp eq %"class.sh::TConstantUnion"* %1579, %1576
  br i1 %1580, label %1581, label %1577

; <label>:1581:                                   ; preds = %1577
  br i1 %1574, label %1791, label %1582

; <label>:1582:                                   ; preds = %1581
  %1583 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  %1584 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 2
  %1585 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %1586 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  br label %1587

; <label>:1587:                                   ; preds = %1674, %1582
  %1588 = phi i64 [ 0, %1582 ], [ %1675, %1674 ]
  %1589 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1583, align 8
  %1590 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1589) #18
  %1591 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1584, align 8
  %1592 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1591) #18
  %1593 = icmp eq i32 %1592, 0
  br i1 %1593, label %1594, label %1606

; <label>:1594:                                   ; preds = %1587
  %1595 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1586, align 8
  %1596 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1595, i64 31
  %1597 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1596, align 8
  %1598 = call dereferenceable(128) %"class.sh::TType"* %1597(%"class.sh::TIntermTyped"* %1585) #18
  %1599 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1598, i64 0, i32 0
  %1600 = load i32, i32* %1599, align 8
  %1601 = icmp eq i32 %1600, 2
  %1602 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 0, i32 0
  store i32 0, i32* %1602, align 4
  %1603 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 1
  br i1 %1601, label %1604, label %1605

; <label>:1604:                                   ; preds = %1594
  store i32 2, i32* %1603, align 4
  br label %1674

; <label>:1605:                                   ; preds = %1594
  store i32 3, i32* %1603, align 4
  br label %1674

; <label>:1606:                                   ; preds = %1587
  %1607 = or i32 %1592, %1590
  %1608 = icmp slt i32 %1607, 0
  %1609 = icmp sgt i32 %1590, 31
  %1610 = or i1 %1609, %1608
  %1611 = icmp sgt i32 %1592, 32
  %1612 = or i1 %1611, %1610
  %1613 = add nsw i32 %1592, %1590
  %1614 = icmp sgt i32 %1613, 32
  %1615 = or i1 %1614, %1612
  br i1 %1615, label %1616, label %1637

; <label>:1616:                                   ; preds = %1606
  %1617 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1586, align 8
  %1618 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1617, i64 31
  %1619 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1618, align 8
  %1620 = call dereferenceable(128) %"class.sh::TType"* %1619(%"class.sh::TIntermTyped"* %1585) #18
  %1621 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1620, i64 0, i32 0
  %1622 = load i32, i32* %1621, align 8
  %1623 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588
  %1624 = call i8* @_Z17GetOperatorString9TOperator(i32 122) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1624) #18
  switch i32 %1622, label %1674 [
    i32 1, label %1625
    i32 2, label %1628
    i32 3, label %1631
    i32 4, label %1634
  ]

; <label>:1625:                                   ; preds = %1616
  %1626 = bitcast %"class.sh::TConstantUnion"* %1623 to float*
  store float 0.000000e+00, float* %1626, align 4
  %1627 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 1
  store i32 1, i32* %1627, align 4
  br label %1674

; <label>:1628:                                   ; preds = %1616
  %1629 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1623, i64 0, i32 0, i32 0
  store i32 0, i32* %1629, align 4
  %1630 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 1
  store i32 2, i32* %1630, align 4
  br label %1674

; <label>:1631:                                   ; preds = %1616
  %1632 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1623, i64 0, i32 0, i32 0
  store i32 0, i32* %1632, align 4
  %1633 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 1
  store i32 3, i32* %1633, align 4
  br label %1674

; <label>:1634:                                   ; preds = %1616
  %1635 = bitcast %"class.sh::TConstantUnion"* %1623 to i8*
  store i8 0, i8* %1635, align 4
  %1636 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 1
  store i32 4, i32* %1636, align 4
  br label %1674

; <label>:1637:                                   ; preds = %1606
  %1638 = add nsw i32 %1592, -1
  %1639 = shl i32 1, %1638
  %1640 = add i32 %1639, -1
  %1641 = or i32 %1640, %1639
  %1642 = shl i32 %1641, %1590
  %1643 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1586, align 8
  %1644 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1643, i64 31
  %1645 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1644, align 8
  %1646 = call dereferenceable(128) %"class.sh::TType"* %1645(%"class.sh::TIntermTyped"* %1585) #18
  %1647 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1646, i64 0, i32 0
  %1648 = load i32, i32* %1647, align 8
  %1649 = icmp eq i32 %1648, 2
  %1650 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1651 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1650, i64 %1588
  br i1 %1649, label %1652, label %1668

; <label>:1652:                                   ; preds = %1637
  %1653 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1651) #18
  %1654 = and i32 %1653, %1642
  %1655 = lshr i32 %1654, %1590
  %1656 = and i32 %1655, %1639
  %1657 = icmp eq i32 %1656, 0
  br i1 %1657, label %1664, label %1658

; <label>:1658:                                   ; preds = %1652
  %1659 = sub nsw i32 32, %1592
  %1660 = shl nsw i32 -1, %1659
  %1661 = xor i32 %1660, -1
  %1662 = shl i32 %1661, %1592
  %1663 = or i32 %1655, %1662
  br label %1664

; <label>:1664:                                   ; preds = %1652, %1658
  %1665 = phi i32 [ %1663, %1658 ], [ %1655, %1652 ]
  %1666 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 0, i32 0
  store i32 %1665, i32* %1666, align 4
  %1667 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 1
  store i32 2, i32* %1667, align 4
  br label %1674

; <label>:1668:                                   ; preds = %1637
  %1669 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1651) #18
  %1670 = and i32 %1669, %1642
  %1671 = lshr i32 %1670, %1590
  %1672 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 0, i32 0
  store i32 %1671, i32* %1672, align 4
  %1673 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1573, i64 %1588, i32 1
  store i32 3, i32* %1673, align 4
  br label %1674

; <label>:1674:                                   ; preds = %1634, %1631, %1628, %1625, %1616, %1664, %1668, %1604, %1605
  %1675 = add nuw i64 %1588, 1
  %1676 = icmp eq i64 %1675, %45
  br i1 %1676, label %1791, label %1587

; <label>:1677:                                   ; preds = %221
  %1678 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %45, i64 8)
  %1679 = extractvalue { i64, i1 } %1678, 1
  %1680 = extractvalue { i64, i1 } %1678, 0
  %1681 = select i1 %1679, i64 -1, i64 %1680
  %1682 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %1683 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %1682, i64 %1681) #18
  %1684 = bitcast i8* %1683 to %"class.sh::TConstantUnion"*
  %1685 = icmp eq i64 %45, 0
  br i1 %1685, label %1791, label %1686

; <label>:1686:                                   ; preds = %1677
  %1687 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1684, i64 %45
  br label %1688

; <label>:1688:                                   ; preds = %1688, %1686
  %1689 = phi %"class.sh::TConstantUnion"* [ %1684, %1686 ], [ %1690, %1688 ]
  tail call void @_ZN2sh14TConstantUnionC1Ev(%"class.sh::TConstantUnion"* %1689) #18
  %1690 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1689, i64 1
  %1691 = icmp eq %"class.sh::TConstantUnion"* %1690, %1687
  br i1 %1691, label %1692, label %1688

; <label>:1692:                                   ; preds = %1688
  br i1 %1685, label %1791, label %1693

; <label>:1693:                                   ; preds = %1692
  %1694 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 2
  %1695 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 3
  %1696 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0
  %1697 = bitcast %"class.sh::TIntermAggregate"* %0 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %1698 = getelementptr inbounds %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, i64 1
  br label %1699

; <label>:1699:                                   ; preds = %1788, %1693
  %1700 = phi i64 [ 0, %1693 ], [ %1789, %1788 ]
  %1701 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1694, align 8
  %1702 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1701) #18
  %1703 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1695, align 8
  %1704 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1703) #18
  %1705 = icmp eq i32 %1704, 0
  br i1 %1705, label %1706, label %1722

; <label>:1706:                                   ; preds = %1699
  %1707 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1697, align 8
  %1708 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1707, i64 31
  %1709 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1708, align 8
  %1710 = call dereferenceable(128) %"class.sh::TType"* %1709(%"class.sh::TIntermTyped"* %1696) #18
  %1711 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1710, i64 0, i32 0
  %1712 = load i32, i32* %1711, align 8
  %1713 = icmp eq i32 %1712, 2
  %1714 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1715 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1714, i64 %1700
  br i1 %1713, label %1716, label %1719

; <label>:1716:                                   ; preds = %1706
  %1717 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1715) #18
  %1718 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1684, i64 %1700, i32 0, i32 0
  store i32 %1717, i32* %1718, align 4
  br label %1785

; <label>:1719:                                   ; preds = %1706
  %1720 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1715) #18
  %1721 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1684, i64 %1700, i32 0, i32 0
  store i32 %1720, i32* %1721, align 4
  br label %1785

; <label>:1722:                                   ; preds = %1699
  %1723 = or i32 %1704, %1702
  %1724 = icmp slt i32 %1723, 0
  %1725 = icmp sgt i32 %1702, 31
  %1726 = or i1 %1725, %1724
  %1727 = icmp sgt i32 %1704, 32
  %1728 = or i1 %1727, %1726
  %1729 = add nsw i32 %1704, %1702
  %1730 = icmp sgt i32 %1729, 32
  %1731 = or i1 %1730, %1728
  br i1 %1731, label %1732, label %1749

; <label>:1732:                                   ; preds = %1722
  %1733 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1697, align 8
  %1734 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1733, i64 31
  %1735 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1734, align 8
  %1736 = call dereferenceable(128) %"class.sh::TType"* %1735(%"class.sh::TIntermTyped"* %1696) #18
  %1737 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1736, i64 0, i32 0
  %1738 = load i32, i32* %1737, align 8
  %1739 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1684, i64 %1700
  %1740 = call i8* @_Z17GetOperatorString9TOperator(i32 123) #18
  call void @_ZN2sh12TDiagnostics7warningERKNS_10TSourceLocEPKcS5_(%"class.sh::TDiagnostics"* %1, %"struct.sh::TSourceLoc"* nonnull dereferenceable(16) %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i64 0, i64 0), i8* %1740) #18
  switch i32 %1738, label %1788 [
    i32 1, label %1741
    i32 2, label %1743
    i32 3, label %1745
    i32 4, label %1747
  ]

; <label>:1741:                                   ; preds = %1732
  %1742 = bitcast %"class.sh::TConstantUnion"* %1739 to float*
  store float 0.000000e+00, float* %1742, align 4
  br label %1785

; <label>:1743:                                   ; preds = %1732
  %1744 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1739, i64 0, i32 0, i32 0
  store i32 0, i32* %1744, align 4
  br label %1785

; <label>:1745:                                   ; preds = %1732
  %1746 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1739, i64 0, i32 0, i32 0
  store i32 0, i32* %1746, align 4
  br label %1785

; <label>:1747:                                   ; preds = %1732
  %1748 = bitcast %"class.sh::TConstantUnion"* %1739 to i8*
  store i8 0, i8* %1748, align 4
  br label %1785

; <label>:1749:                                   ; preds = %1722
  %1750 = add nsw i32 %1704, -1
  %1751 = shl i32 1, %1750
  %1752 = add i32 %1751, -1
  %1753 = or i32 %1752, %1751
  %1754 = shl i32 %1753, %1702
  %1755 = xor i32 %1754, -1
  %1756 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %1697, align 8
  %1757 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1756, i64 31
  %1758 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1757, align 8
  %1759 = call dereferenceable(128) %"class.sh::TType"* %1758(%"class.sh::TIntermTyped"* %1696) #18
  %1760 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1759, i64 0, i32 0
  %1761 = load i32, i32* %1760, align 8
  %1762 = icmp eq i32 %1761, 2
  %1763 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %35, align 8
  %1764 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1763, i64 %1700
  br i1 %1762, label %1765, label %1775

; <label>:1765:                                   ; preds = %1749
  %1766 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1764) #18
  %1767 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1698, align 8
  %1768 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1767, i64 %1700
  %1769 = call i32 @_ZNK2sh14TConstantUnion9getIConstEv(%"class.sh::TConstantUnion"* %1768) #18
  %1770 = and i32 %1766, %1755
  %1771 = shl i32 %1769, %1702
  %1772 = and i32 %1771, %1754
  %1773 = or i32 %1772, %1770
  %1774 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1684, i64 %1700, i32 0, i32 0
  store i32 %1773, i32* %1774, align 4
  br label %1785

; <label>:1775:                                   ; preds = %1749
  %1776 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1764) #18
  %1777 = load %"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"** %1698, align 8
  %1778 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1777, i64 %1700
  %1779 = call i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"* %1778) #18
  %1780 = and i32 %1776, %1755
  %1781 = shl i32 %1779, %1702
  %1782 = and i32 %1781, %1754
  %1783 = or i32 %1782, %1780
  %1784 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1684, i64 %1700, i32 0, i32 0
  store i32 %1783, i32* %1784, align 4
  br label %1785

; <label>:1785:                                   ; preds = %1719, %1716, %1775, %1765, %1741, %1743, %1745, %1747
  %1786 = phi i32 [ 4, %1747 ], [ 3, %1745 ], [ 2, %1743 ], [ 1, %1741 ], [ 2, %1765 ], [ 3, %1775 ], [ 2, %1716 ], [ 3, %1719 ]
  %1787 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1684, i64 %1700, i32 1
  store i32 %1786, i32* %1787, align 4
  br label %1788

; <label>:1788:                                   ; preds = %1785, %1732
  %1789 = add nuw i64 %1700, 1
  %1790 = icmp eq i64 %1789, %45
  br i1 %1790, label %1791, label %1699

; <label>:1791:                                   ; preds = %1788, %1674, %1560, %1490, %1453, %1399, %1333, %1276, %1016, %853, %792, %730, %677, %624, %571, %506, %485, %428, %357, %336, %268, %1502, %984, %1677, %1566, %1456, %1402, %1340, %1279, %1189, %795, %733, %680, %627, %574, %521, %488, %431, %374, %339, %271, %222, %237, %286, %354, %389, %446, %503, %536, %589, %642, %695, %748, %810, %1014, %1204, %1294, %1355, %1417, %1487, %1532, %1581, %1692, %887, %926, %946, %1109, %1188, %221
  %1792 = phi %"class.sh::TConstantUnion"* [ null, %221 ], [ %1145, %1188 ], [ %1038, %1109 ], [ %938, %946 ], [ %910, %926 ], [ %874, %887 ], [ %229, %237 ], [ %278, %286 ], [ %346, %354 ], [ %381, %389 ], [ %438, %446 ], [ %495, %503 ], [ %528, %536 ], [ %581, %589 ], [ %634, %642 ], [ %687, %695 ], [ %740, %748 ], [ %802, %810 ], [ %991, %1014 ], [ %1196, %1204 ], [ %1286, %1294 ], [ %1347, %1355 ], [ %1409, %1417 ], [ %1463, %1487 ], [ %1509, %1532 ], [ %1573, %1581 ], [ %1684, %1692 ], [ %229, %222 ], [ %278, %271 ], [ %346, %339 ], [ %381, %374 ], [ %438, %431 ], [ %495, %488 ], [ %528, %521 ], [ %581, %574 ], [ %634, %627 ], [ %687, %680 ], [ %740, %733 ], [ %802, %795 ], [ %1196, %1189 ], [ %1286, %1279 ], [ %1347, %1340 ], [ %1409, %1402 ], [ %1463, %1456 ], [ %1573, %1566 ], [ %1684, %1677 ], [ %991, %984 ], [ %1509, %1502 ], [ %229, %268 ], [ %278, %336 ], [ %346, %357 ], [ %381, %428 ], [ %438, %485 ], [ %495, %506 ], [ %528, %571 ], [ %581, %624 ], [ %634, %677 ], [ %687, %730 ], [ %740, %792 ], [ %802, %853 ], [ %991, %1016 ], [ %1196, %1276 ], [ %1286, %1333 ], [ %1347, %1399 ], [ %1409, %1453 ], [ %1463, %1490 ], [ %1509, %1560 ], [ %1573, %1674 ], [ %1684, %1788 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #18
  %1793 = icmp eq i64* %37, null
  br i1 %1793, label %1795, label %1794

; <label>:1794:                                   ; preds = %1791
  call void @_ZdlPv(i8* %36) #20
  br label %1795

; <label>:1795:                                   ; preds = %1791, %1794
  %1796 = icmp eq %"class.sh::TConstantUnion"** %35, null
  br i1 %1796, label %1798, label %1797

; <label>:1797:                                   ; preds = %1795
  call void @_ZdlPv(i8* %34) #20
  br label %1798

; <label>:1798:                                   ; preds = %1795, %1797
  ret %"class.sh::TConstantUnion"* %1792
}

declare i64 @_ZN2sh14TConstantUnion3addERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare i64 @_ZN2sh14TConstantUnion3subERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare i64 @_ZN2sh14TConstantUnion3mulERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUnioneqEi(%"class.sh::TConstantUnion"*, i32) local_unnamed_addr #1

declare i32 @_ZNK2sh14TConstantUnion9getUConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnionaaERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnionooERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUnionneERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnionanERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnioneoERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZNK2sh14TConstantUnionorERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare i64 @_ZN2sh14TConstantUnion6lshiftERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare i64 @_ZN2sh14TConstantUnion6rshiftERKS0_S2_PNS_12TDiagnosticsERKNS_10TSourceLocE(%"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TConstantUnion"* dereferenceable(8), %"class.sh::TDiagnostics"*, %"struct.sh::TSourceLoc"* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUnionltERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUniongtERKS0_(%"class.sh::TConstantUnion"*, %"class.sh::TConstantUnion"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2sh14TConstantUnion9getBConstEv(%"class.sh::TConstantUnion"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEjj(%"class.angle::Matrix"* noalias sret, %"class.sh::TConstantUnion"*, i32, i32) unnamed_addr #0 {
  %5 = alloca %"class.std::__1::vector.41", align 8
  %6 = alloca float, align 4
  %7 = alloca %"class.angle::Matrix", align 8
  %8 = bitcast %"class.std::__1::vector.41"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #18
  %9 = mul i32 %3, %2
  %10 = zext i32 %9 to i64
  %11 = icmp eq i32 %9, 0
  br i1 %11, label %12, label %15

; <label>:12:                                     ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %5, i64 0, i32 0, i32 1
  %14 = bitcast float** %13 to i64*
  br label %25

; <label>:15:                                     ; preds = %4
  %16 = bitcast float* %6 to i8*
  %17 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %5, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  br label %72

; <label>:19:                                     ; preds = %83
  %20 = bitcast float** %17 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.std::__1::vector.41"* %5 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = inttoptr i64 %23 to float*
  br label %25

; <label>:25:                                     ; preds = %12, %19
  %26 = phi i64* [ %14, %12 ], [ %20, %19 ]
  %27 = phi float* [ null, %12 ], [ %24, %19 ]
  %28 = phi i64 [ 0, %12 ], [ %23, %19 ]
  %29 = phi i64 [ 0, %12 ], [ %21, %19 ]
  %30 = bitcast %"class.angle::Matrix"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 24, i1 false) #18
  %31 = sub i64 %29, %28
  %32 = ashr exact i64 %31, 2
  %33 = icmp eq i64 %31, 0
  br i1 %33, label %53, label %34

; <label>:34:                                     ; preds = %25
  %35 = icmp ugt i64 %32, 4611686018427387903
  br i1 %35, label %36, label %38

; <label>:36:                                     ; preds = %34
  %37 = bitcast %"class.angle::Matrix"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %37) #12
  unreachable

; <label>:38:                                     ; preds = %34
  %39 = call i8* @_Znwm(i64 %31) #20
  %40 = bitcast i8* %39 to float*
  %41 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 1
  %42 = bitcast float** %41 to i8**
  store i8* %39, i8** %42, align 8
  %43 = bitcast %"class.angle::Matrix"* %7 to i8**
  store i8* %39, i8** %43, align 8
  %44 = getelementptr inbounds float, float* %40, i64 %32
  %45 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %44, float** %45, align 8
  %46 = ptrtoint float* %27 to i64
  %47 = sub i64 %29, %46
  %48 = icmp sgt i64 %47, 0
  br i1 %48, label %49, label %53

; <label>:49:                                     ; preds = %38
  %50 = lshr exact i64 %47, 2
  %51 = bitcast float* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %39, i8* align 4 %51, i64 %47, i1 false) #18
  %52 = getelementptr inbounds float, float* %40, i64 %50
  store float* %52, float** %41, align 8
  br label %53

; <label>:53:                                     ; preds = %25, %38, %49
  %54 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 1
  store i32 %3, i32* %54, align 8
  %55 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 2
  store i32 %2, i32* %55, align 4
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* sret %0, %"class.angle::Matrix"* nonnull %7)
  %56 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 0
  %57 = load float*, float** %56, align 8
  %58 = icmp eq float* %57, null
  br i1 %58, label %64, label %59

; <label>:59:                                     ; preds = %53
  %60 = ptrtoint float* %57 to i64
  %61 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %7, i64 0, i32 0, i32 0, i32 1
  %62 = bitcast float** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast float* %57 to i8*
  call void @_ZdlPv(i8* %63) #20
  br label %64

; <label>:64:                                     ; preds = %53, %59
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #18
  %65 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %5, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = icmp eq float* %66, null
  br i1 %67, label %71, label %68

; <label>:68:                                     ; preds = %64
  %69 = ptrtoint float* %66 to i64
  store i64 %69, i64* %26, align 8
  %70 = bitcast float* %66 to i8*
  call void @_ZdlPv(i8* %70) #20
  br label %71

; <label>:71:                                     ; preds = %64, %68
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #18
  ret void

; <label>:72:                                     ; preds = %83, %15
  %73 = phi i64 [ 0, %15 ], [ %84, %83 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #18
  %74 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %73
  %75 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %74) #18
  store float %75, float* %6, align 4
  %76 = load float*, float** %17, align 8
  %77 = load float*, float** %18, align 8
  %78 = icmp ult float* %76, %77
  br i1 %78, label %79, label %82

; <label>:79:                                     ; preds = %72
  store float %75, float* %76, align 4
  %80 = load float*, float** %17, align 8
  %81 = getelementptr inbounds float, float* %80, i64 1
  store float* %81, float** %17, align 8
  br label %83

; <label>:82:                                     ; preds = %72
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_(%"class.std::__1::vector.41"* nonnull %5, float* nonnull dereferenceable(4) %6) #18
  br label %83

; <label>:83:                                     ; preds = %79, %82
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #18
  %84 = add nuw nsw i64 %73, 1
  %85 = icmp eq i64 %84, %10
  br i1 %85, label %19, label %72
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* noalias sret, %"class.angle::Matrix"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::vector.41", align 8
  %4 = bitcast %"class.std::__1::vector.41"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #18
  %5 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast float** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.angle::Matrix"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = ashr exact i64 %10, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #18
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %13, label %15

; <label>:13:                                     ; preds = %2
  %14 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %3, i64 0, i32 0, i32 1
  br label %63

; <label>:15:                                     ; preds = %2
  %16 = icmp ugt i64 %11, 4611686018427387903
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %15
  %18 = bitcast %"class.std::__1::vector.41"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %18) #12
  unreachable

; <label>:19:                                     ; preds = %15
  %20 = tail call i8* @_Znwm(i64 %10) #20
  %21 = bitcast i8* %20 to float*
  %22 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %3, i64 0, i32 0, i32 1
  %23 = bitcast float** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = bitcast %"class.std::__1::vector.41"* %3 to i8**
  store i8* %20, i8** %24, align 8
  %25 = getelementptr inbounds float, float* %21, i64 %11
  %26 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %25, float** %26, align 8
  %27 = add nsw i64 %11, -1
  %28 = and i64 %11, 3
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %39, label %30

; <label>:30:                                     ; preds = %19, %30
  %31 = phi float* [ %35, %30 ], [ %21, %19 ]
  %32 = phi i64 [ %36, %30 ], [ %11, %19 ]
  %33 = phi i64 [ %37, %30 ], [ %28, %19 ]
  store float 0.000000e+00, float* %31, align 4
  %34 = load float*, float** %22, align 8
  %35 = getelementptr inbounds float, float* %34, i64 1
  store float* %35, float** %22, align 8
  %36 = add i64 %32, -1
  %37 = add i64 %33, -1
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %30, !llvm.loop !76

; <label>:39:                                     ; preds = %30, %19
  %40 = phi float* [ undef, %19 ], [ %35, %30 ]
  %41 = phi float* [ %21, %19 ], [ %35, %30 ]
  %42 = phi i64 [ %11, %19 ], [ %36, %30 ]
  %43 = icmp ult i64 %27, 3
  br i1 %43, label %57, label %44

; <label>:44:                                     ; preds = %39, %44
  %45 = phi float* [ %54, %44 ], [ %41, %39 ]
  %46 = phi i64 [ %55, %44 ], [ %42, %39 ]
  store float 0.000000e+00, float* %45, align 4
  %47 = load float*, float** %22, align 8
  %48 = getelementptr inbounds float, float* %47, i64 1
  store float* %48, float** %22, align 8
  store float 0.000000e+00, float* %48, align 4
  %49 = load float*, float** %22, align 8
  %50 = getelementptr inbounds float, float* %49, i64 1
  store float* %50, float** %22, align 8
  store float 0.000000e+00, float* %50, align 4
  %51 = load float*, float** %22, align 8
  %52 = getelementptr inbounds float, float* %51, i64 1
  store float* %52, float** %22, align 8
  store float 0.000000e+00, float* %52, align 4
  %53 = load float*, float** %22, align 8
  %54 = getelementptr inbounds float, float* %53, i64 1
  store float* %54, float** %22, align 8
  %55 = add i64 %46, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %44

; <label>:57:                                     ; preds = %44, %39
  %58 = phi float* [ %40, %39 ], [ %54, %44 ]
  %59 = ptrtoint float* %58 to i64
  %60 = bitcast %"class.std::__1::vector.41"* %3 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = inttoptr i64 %61 to float*
  br label %63

; <label>:63:                                     ; preds = %13, %57
  %64 = phi float** [ %14, %13 ], [ %22, %57 ]
  %65 = phi float* [ null, %13 ], [ %62, %57 ]
  %66 = phi i64 [ 0, %13 ], [ %61, %57 ]
  %67 = phi i64 [ 0, %13 ], [ %59, %57 ]
  %68 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = bitcast %"class.angle::Matrix"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 24, i1 false) #18
  %73 = bitcast float** %64 to i64*
  %74 = sub i64 %67, %66
  %75 = ashr exact i64 %74, 2
  %76 = icmp eq i64 %74, 0
  br i1 %76, label %96, label %77

; <label>:77:                                     ; preds = %63
  %78 = icmp ugt i64 %75, 4611686018427387903
  br i1 %78, label %79, label %81

; <label>:79:                                     ; preds = %77
  %80 = bitcast %"class.angle::Matrix"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %80) #12
  unreachable

; <label>:81:                                     ; preds = %77
  %82 = tail call i8* @_Znwm(i64 %74) #20
  %83 = bitcast i8* %82 to float*
  %84 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %85 = bitcast float** %84 to i8**
  store i8* %82, i8** %85, align 8
  %86 = bitcast %"class.angle::Matrix"* %0 to i8**
  store i8* %82, i8** %86, align 8
  %87 = getelementptr inbounds float, float* %83, i64 %75
  %88 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %87, float** %88, align 8
  %89 = ptrtoint float* %65 to i64
  %90 = sub i64 %67, %89
  %91 = icmp sgt i64 %90, 0
  br i1 %91, label %92, label %96

; <label>:92:                                     ; preds = %81
  %93 = lshr exact i64 %90, 2
  %94 = bitcast float* %65 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %82, i8* align 4 %94, i64 %90, i1 false) #18
  %95 = getelementptr inbounds float, float* %83, i64 %93
  store float* %95, float** %84, align 8
  br label %96

; <label>:96:                                     ; preds = %63, %81, %92
  %97 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  store i32 %69, i32* %97, align 8
  %98 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  store i32 %71, i32* %98, align 4
  %99 = icmp eq float* %65, null
  br i1 %99, label %104, label %100

; <label>:100:                                    ; preds = %96
  %101 = ptrtoint float* %65 to i64
  store i64 %101, i64* %73, align 8
  %102 = bitcast float* %65 to i8*
  tail call void @_ZdlPv(i8* %102) #20
  %103 = load i32, i32* %68, align 4
  br label %104

; <label>:104:                                    ; preds = %96, %100
  %105 = phi i32 [ %69, %96 ], [ %103, %100 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #18
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %158, label %107

; <label>:107:                                    ; preds = %104
  %108 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %109 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %110 = load i32, i32* %70, align 8
  br label %111

; <label>:111:                                    ; preds = %107, %133
  %112 = phi i32 [ %105, %107 ], [ %134, %133 ]
  %113 = phi i32 [ %110, %107 ], [ %135, %133 ]
  %114 = phi i32 [ 0, %107 ], [ %136, %133 ]
  %115 = icmp eq i32 %113, 0
  br i1 %115, label %133, label %116

; <label>:116:                                    ; preds = %111
  %117 = zext i32 %114 to i64
  %118 = load float*, float** %108, align 8
  %119 = getelementptr inbounds float, float* %118, i64 %117
  %120 = bitcast float* %119 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = load i32, i32* %98, align 4
  %123 = mul i32 %122, %114
  %124 = zext i32 %123 to i64
  %125 = load float*, float** %109, align 8
  %126 = getelementptr inbounds float, float* %125, i64 %124
  %127 = bitcast float* %126 to i32*
  store i32 %121, i32* %127, align 4
  %128 = load i32, i32* %70, align 8
  %129 = icmp ugt i32 %128, 1
  br i1 %129, label %138, label %130

; <label>:130:                                    ; preds = %138, %116
  %131 = phi i32 [ %128, %116 ], [ %156, %138 ]
  %132 = load i32, i32* %68, align 4
  br label %133

; <label>:133:                                    ; preds = %130, %111
  %134 = phi i32 [ %132, %130 ], [ %112, %111 ]
  %135 = phi i32 [ %131, %130 ], [ 0, %111 ]
  %136 = add nuw i32 %114, 1
  %137 = icmp ult i32 %136, %134
  br i1 %137, label %111, label %158

; <label>:138:                                    ; preds = %116, %138
  %139 = phi i32 [ %155, %138 ], [ 1, %116 ]
  %140 = load i32, i32* %68, align 4
  %141 = mul i32 %140, %139
  %142 = add i32 %141, %114
  %143 = zext i32 %142 to i64
  %144 = load float*, float** %108, align 8
  %145 = getelementptr inbounds float, float* %144, i64 %143
  %146 = bitcast float* %145 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = load i32, i32* %98, align 4
  %149 = mul i32 %148, %114
  %150 = add i32 %149, %139
  %151 = zext i32 %150 to i64
  %152 = load float*, float** %109, align 8
  %153 = getelementptr inbounds float, float* %152, i64 %151
  %154 = bitcast float* %153 to i32*
  store i32 %147, i32* %154, align 4
  %155 = add nuw i32 %139, 1
  %156 = load i32, i32* %70, align 8
  %157 = icmp ult i32 %155, %156
  br i1 %157, label %138, label %130

; <label>:158:                                    ; preds = %133, %104
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_123SetUnionArrayFromMatrixERKN5angle6MatrixIfEEPNS_14TConstantUnionE(%"class.angle::Matrix"* dereferenceable(32), %"class.sh::TConstantUnion"* nocapture) unnamed_addr #0 {
  %3 = alloca %"class.angle::Matrix", align 8
  %4 = alloca %"class.std::__1::vector.41", align 8
  %5 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #18
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* nonnull sret %3, %"class.angle::Matrix"* nonnull %0)
  %6 = bitcast %"class.std::__1::vector.41"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #18, !alias.scope !77
  %7 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast float** %7 to i64*
  %9 = load i64, i64* %8, align 8, !noalias !77
  %10 = bitcast %"class.angle::Matrix"* %3 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !77
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp eq i64 %12, 0
  %15 = inttoptr i64 %11 to float*
  br i1 %14, label %16, label %18

; <label>:16:                                     ; preds = %2
  %17 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  br label %32

; <label>:18:                                     ; preds = %2
  %19 = icmp ugt i64 %13, 4611686018427387903
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %18
  %21 = bitcast %"class.std::__1::vector.41"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %21) #12
  unreachable

; <label>:22:                                     ; preds = %18
  %23 = call i8* @_Znwm(i64 %12) #20
  %24 = bitcast i8* %23 to float*
  %25 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %26 = bitcast float** %25 to i8**
  store i8* %23, i8** %26, align 8, !alias.scope !77
  %27 = bitcast %"class.std::__1::vector.41"* %4 to i8**
  store i8* %23, i8** %27, align 8, !alias.scope !77
  %28 = getelementptr inbounds float, float* %24, i64 %13
  %29 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %28, float** %29, align 8, !alias.scope !77
  %30 = icmp sgt i64 %12, 0
  %31 = ptrtoint i8* %23 to i64
  br i1 %30, label %37, label %32

; <label>:32:                                     ; preds = %16, %22
  %33 = phi float** [ %25, %22 ], [ %17, %16 ]
  %34 = phi i64 [ %31, %22 ], [ 0, %16 ]
  %35 = bitcast float** %33 to i64*
  %36 = inttoptr i64 %34 to float*
  br label %57

; <label>:37:                                     ; preds = %22
  %38 = lshr exact i64 %12, 2
  %39 = inttoptr i64 %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %23, i8* align 4 %39, i64 %12, i1 false) #18
  %40 = getelementptr inbounds float, float* %24, i64 %38
  store float* %40, float** %25, align 8, !alias.scope !77
  %41 = bitcast float** %25 to i64*
  %42 = bitcast i8* %23 to float*
  %43 = icmp eq float* %40, %42
  %44 = bitcast i8* %23 to float*
  br i1 %43, label %57, label %45

; <label>:45:                                     ; preds = %37
  %46 = ptrtoint float* %40 to i64
  %47 = sub i64 %46, %31
  %48 = ashr exact i64 %47, 2
  %49 = bitcast i8* %23 to float*
  %50 = bitcast i8* %23 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 0, i32 0, i32 0
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 0, i32 1
  store i32 1, i32* %53, align 4
  %54 = icmp ugt i64 %48, 1
  br i1 %54, label %73, label %55

; <label>:55:                                     ; preds = %73, %45
  %56 = bitcast i8* %23 to float*
  br label %57

; <label>:57:                                     ; preds = %55, %32, %37
  %58 = phi i64* [ %41, %37 ], [ %35, %32 ], [ %41, %55 ]
  %59 = phi float* [ %44, %37 ], [ %36, %32 ], [ %56, %55 ]
  %60 = icmp eq float* %59, null
  br i1 %60, label %66, label %61

; <label>:61:                                     ; preds = %57
  %62 = ptrtoint float* %59 to i64
  store i64 %62, i64* %58, align 8
  %63 = bitcast float* %59 to i8*
  call void @_ZdlPv(i8* %63) #20
  %64 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  %65 = load float*, float** %64, align 8
  br label %66

; <label>:66:                                     ; preds = %57, %61
  %67 = phi float* [ %65, %61 ], [ %15, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #18
  %68 = icmp eq float* %67, null
  br i1 %68, label %72, label %69

; <label>:69:                                     ; preds = %66
  %70 = ptrtoint float* %67 to i64
  store i64 %70, i64* %8, align 8
  %71 = bitcast float* %67 to i8*
  call void @_ZdlPv(i8* %71) #20
  br label %72

; <label>:72:                                     ; preds = %66, %69
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #18
  ret void

; <label>:73:                                     ; preds = %45, %73
  %74 = phi i64 [ %80, %73 ], [ 1, %45 ]
  %75 = getelementptr inbounds float, float* %49, i64 %74
  %76 = bitcast float* %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %74, i32 0, i32 0
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %74, i32 1
  store i32 1, i32* %79, align 4
  %80 = add nuw i64 %74, 1
  %81 = icmp ult i64 %80, %48
  br i1 %81, label %73, label %55, !llvm.loop !80
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_19GetMatrixEPKNS_14TConstantUnionEj(%"class.angle::Matrix"* noalias sret, %"class.sh::TConstantUnion"*, i32) unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.41", align 8
  %5 = alloca float, align 4
  %6 = alloca %"class.angle::Matrix", align 8
  %7 = bitcast %"class.std::__1::vector.41"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #18
  %8 = mul i32 %2, %2
  %9 = zext i32 %8 to i64
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %11, label %14

; <label>:11:                                     ; preds = %3
  %12 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %13 = bitcast float** %12 to i64*
  br label %24

; <label>:14:                                     ; preds = %3
  %15 = bitcast float* %5 to i8*
  %16 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  br label %71

; <label>:18:                                     ; preds = %82
  %19 = bitcast float** %16 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.std::__1::vector.41"* %4 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = inttoptr i64 %22 to float*
  br label %24

; <label>:24:                                     ; preds = %11, %18
  %25 = phi i64* [ %13, %11 ], [ %19, %18 ]
  %26 = phi float* [ null, %11 ], [ %23, %18 ]
  %27 = phi i64 [ 0, %11 ], [ %22, %18 ]
  %28 = phi i64 [ 0, %11 ], [ %20, %18 ]
  %29 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #18
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 0, i64 24, i1 false) #18
  %30 = sub i64 %28, %27
  %31 = ashr exact i64 %30, 2
  %32 = icmp eq i64 %30, 0
  br i1 %32, label %52, label %33

; <label>:33:                                     ; preds = %24
  %34 = icmp ugt i64 %31, 4611686018427387903
  br i1 %34, label %35, label %37

; <label>:35:                                     ; preds = %33
  %36 = bitcast %"class.angle::Matrix"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %36) #12
  unreachable

; <label>:37:                                     ; preds = %33
  %38 = call i8* @_Znwm(i64 %30) #20
  %39 = bitcast i8* %38 to float*
  %40 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %41 = bitcast float** %40 to i8**
  store i8* %38, i8** %41, align 8
  %42 = bitcast %"class.angle::Matrix"* %6 to i8**
  store i8* %38, i8** %42, align 8
  %43 = getelementptr inbounds float, float* %39, i64 %31
  %44 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %43, float** %44, align 8
  %45 = ptrtoint float* %26 to i64
  %46 = sub i64 %28, %45
  %47 = icmp sgt i64 %46, 0
  br i1 %47, label %48, label %52

; <label>:48:                                     ; preds = %37
  %49 = lshr exact i64 %46, 2
  %50 = bitcast float* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %38, i8* align 4 %50, i64 %46, i1 false) #18
  %51 = getelementptr inbounds float, float* %39, i64 %49
  store float* %51, float** %40, align 8
  br label %52

; <label>:52:                                     ; preds = %24, %37, %48
  %53 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 1
  store i32 %2, i32* %53, align 8
  %54 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 2
  store i32 %2, i32* %54, align 4
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* sret %0, %"class.angle::Matrix"* nonnull %6)
  %55 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 0
  %56 = load float*, float** %55, align 8
  %57 = icmp eq float* %56, null
  br i1 %57, label %63, label %58

; <label>:58:                                     ; preds = %52
  %59 = ptrtoint float* %56 to i64
  %60 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %61 = bitcast float** %60 to i64*
  store i64 %59, i64* %61, align 8
  %62 = bitcast float* %56 to i8*
  call void @_ZdlPv(i8* %62) #20
  br label %63

; <label>:63:                                     ; preds = %52, %58
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #18
  %64 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 0
  %65 = load float*, float** %64, align 8
  %66 = icmp eq float* %65, null
  br i1 %66, label %70, label %67

; <label>:67:                                     ; preds = %63
  %68 = ptrtoint float* %65 to i64
  store i64 %68, i64* %25, align 8
  %69 = bitcast float* %65 to i8*
  call void @_ZdlPv(i8* %69) #20
  br label %70

; <label>:70:                                     ; preds = %63, %67
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #18
  ret void

; <label>:71:                                     ; preds = %82, %14
  %72 = phi i64 [ 0, %14 ], [ %83, %82 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #18
  %73 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %1, i64 %72
  %74 = call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* %73) #18
  store float %74, float* %5, align 4
  %75 = load float*, float** %16, align 8
  %76 = load float*, float** %17, align 8
  %77 = icmp ult float* %75, %76
  br i1 %77, label %78, label %81

; <label>:78:                                     ; preds = %71
  store float %74, float* %75, align 4
  %79 = load float*, float** %16, align 8
  %80 = getelementptr inbounds float, float* %79, i64 1
  store float* %80, float** %16, align 8
  br label %82

; <label>:81:                                     ; preds = %71
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_(%"class.std::__1::vector.41"* nonnull %4, float* nonnull dereferenceable(4) %5) #18
  br label %82

; <label>:82:                                     ; preds = %78, %81
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #18
  %83 = add nuw nsw i64 %72, 1
  %84 = icmp eq i64 %83, %9
  br i1 %84, label %18, label %71
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca [4 x [9 x float]], align 16
  %3 = alloca %"class.angle::Matrix", align 8
  %4 = alloca %"class.angle::Matrix", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = alloca %"class.angle::Matrix", align 8
  %7 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  switch i32 %8, label %394 [
    i32 2, label %9
    i32 3, label %27
    i32 4, label %77
  ]

; <label>:9:                                      ; preds = %1
  %10 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = load float, float* %12, align 4
  %14 = load i32, i32* %10, align 4
  %15 = add i32 %14, 1
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %12, i64 %16
  %18 = load float, float* %17, align 4
  %19 = fmul float %13, %18
  %20 = getelementptr inbounds float, float* %12, i64 1
  %21 = load float, float* %20, align 4
  %22 = zext i32 %14 to i64
  %23 = getelementptr inbounds float, float* %12, i64 %22
  %24 = load float, float* %23, align 4
  %25 = fmul float %21, %24
  %26 = fsub float %19, %25
  br label %394

; <label>:27:                                     ; preds = %1
  %28 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %29 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = load float*, float** %29, align 8
  %31 = load float, float* %30, align 4
  %32 = load i32, i32* %28, align 4
  %33 = add i32 %32, 1
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds float, float* %30, i64 %34
  %36 = load float, float* %35, align 4
  %37 = fmul float %31, %36
  %38 = shl i32 %32, 1
  %39 = add i32 %38, 2
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds float, float* %30, i64 %40
  %42 = load float, float* %41, align 4
  %43 = fmul float %37, %42
  %44 = getelementptr inbounds float, float* %30, i64 1
  %45 = load float, float* %44, align 4
  %46 = add i32 %32, 2
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %30, i64 %47
  %49 = load float, float* %48, align 4
  %50 = fmul float %45, %49
  %51 = zext i32 %38 to i64
  %52 = getelementptr inbounds float, float* %30, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fmul float %50, %53
  %55 = fadd float %43, %54
  %56 = getelementptr inbounds float, float* %30, i64 2
  %57 = load float, float* %56, align 4
  %58 = zext i32 %32 to i64
  %59 = getelementptr inbounds float, float* %30, i64 %58
  %60 = load float, float* %59, align 4
  %61 = fmul float %57, %60
  %62 = or i32 %38, 1
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %30, i64 %63
  %65 = load float, float* %64, align 4
  %66 = fmul float %61, %65
  %67 = fadd float %55, %66
  %68 = fmul float %36, %57
  %69 = fmul float %53, %68
  %70 = fsub float %67, %69
  %71 = fmul float %45, %60
  %72 = fmul float %42, %71
  %73 = fsub float %70, %72
  %74 = fmul float %31, %49
  %75 = fmul float %74, %65
  %76 = fsub float %73, %75
  br label %394

; <label>:77:                                     ; preds = %1
  %78 = bitcast [4 x [9 x float]]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %78) #18
  %79 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  %80 = load i32, i32* %79, align 4
  %81 = add i32 %80, 1
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %84 = load float*, float** %83, align 8
  %85 = getelementptr inbounds float, float* %84, i64 %82
  %86 = bitcast float* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = bitcast [4 x [9 x float]]* %2 to i32*
  store i32 %87, i32* %88, align 16
  %89 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 1
  %90 = shl i32 %80, 1
  %91 = or i32 %90, 1
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds float, float* %84, i64 %92
  %94 = bitcast float* %93 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = bitcast float* %89 to i32*
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 2
  %98 = mul i32 %80, 3
  %99 = add i32 %98, 1
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds float, float* %84, i64 %100
  %102 = bitcast float* %101 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = bitcast float* %97 to i32*
  store i32 %103, i32* %104, align 8
  %105 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 3
  %106 = add i32 %80, 2
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds float, float* %84, i64 %107
  %109 = bitcast float* %108 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = bitcast float* %105 to i32*
  store i32 %110, i32* %111, align 4
  %112 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 4
  %113 = add i32 %90, 2
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds float, float* %84, i64 %114
  %116 = bitcast float* %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = bitcast float* %112 to i32*
  store i32 %117, i32* %118, align 16
  %119 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 5
  %120 = add i32 %98, 2
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %84, i64 %121
  %123 = bitcast float* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = bitcast float* %119 to i32*
  store i32 %124, i32* %125, align 4
  %126 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 6
  %127 = add i32 %80, 3
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %84, i64 %128
  %130 = bitcast float* %129 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = bitcast float* %126 to i32*
  store i32 %131, i32* %132, align 8
  %133 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 7
  %134 = add i32 %90, 3
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %84, i64 %135
  %137 = bitcast float* %136 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = bitcast float* %133 to i32*
  store i32 %138, i32* %139, align 4
  %140 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 8
  %141 = add i32 %98, 3
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds float, float* %84, i64 %142
  %144 = bitcast float* %143 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = bitcast float* %140 to i32*
  store i32 %145, i32* %146, align 16
  %147 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1
  %148 = zext i32 %80 to i64
  %149 = getelementptr inbounds float, float* %84, i64 %148
  %150 = bitcast float* %149 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = bitcast [9 x float]* %147 to i32*
  store i32 %151, i32* %152, align 4
  %153 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 1
  %154 = zext i32 %90 to i64
  %155 = getelementptr inbounds float, float* %84, i64 %154
  %156 = bitcast float* %155 to i32*
  %157 = load i32, i32* %156, align 4
  %158 = bitcast float* %153 to i32*
  store i32 %157, i32* %158, align 4
  %159 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 2
  %160 = zext i32 %98 to i64
  %161 = getelementptr inbounds float, float* %84, i64 %160
  %162 = bitcast float* %161 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = bitcast float* %159 to i32*
  store i32 %163, i32* %164, align 4
  %165 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 3
  %166 = load i32, i32* %109, align 4
  %167 = bitcast float* %165 to i32*
  store i32 %166, i32* %167, align 4
  %168 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 4
  %169 = load i32, i32* %116, align 4
  %170 = bitcast float* %168 to i32*
  store i32 %169, i32* %170, align 4
  %171 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 5
  %172 = load i32, i32* %123, align 4
  %173 = bitcast float* %171 to i32*
  store i32 %172, i32* %173, align 4
  %174 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 6
  %175 = load i32, i32* %130, align 4
  %176 = bitcast float* %174 to i32*
  store i32 %175, i32* %176, align 4
  %177 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 7
  %178 = load i32, i32* %137, align 4
  %179 = bitcast float* %177 to i32*
  store i32 %178, i32* %179, align 4
  %180 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 8
  %181 = load i32, i32* %144, align 4
  %182 = bitcast float* %180 to i32*
  store i32 %181, i32* %182, align 4
  %183 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2
  %184 = load i32, i32* %150, align 4
  %185 = bitcast [9 x float]* %183 to i32*
  store i32 %184, i32* %185, align 8
  %186 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 1
  %187 = load i32, i32* %156, align 4
  %188 = bitcast float* %186 to i32*
  store i32 %187, i32* %188, align 4
  %189 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 2
  %190 = load i32, i32* %162, align 4
  %191 = bitcast float* %189 to i32*
  store i32 %190, i32* %191, align 8
  %192 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 3
  %193 = load i32, i32* %86, align 4
  %194 = bitcast float* %192 to i32*
  store i32 %193, i32* %194, align 4
  %195 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 4
  %196 = load i32, i32* %94, align 4
  %197 = bitcast float* %195 to i32*
  store i32 %196, i32* %197, align 8
  %198 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 5
  %199 = load i32, i32* %102, align 4
  %200 = bitcast float* %198 to i32*
  store i32 %199, i32* %200, align 4
  %201 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 6
  %202 = load i32, i32* %130, align 4
  %203 = bitcast float* %201 to i32*
  store i32 %202, i32* %203, align 8
  %204 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 7
  %205 = load i32, i32* %137, align 4
  %206 = bitcast float* %204 to i32*
  store i32 %205, i32* %206, align 4
  %207 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 8
  %208 = load i32, i32* %144, align 4
  %209 = bitcast float* %207 to i32*
  store i32 %208, i32* %209, align 8
  %210 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 0
  %211 = load i32, i32* %150, align 4
  %212 = bitcast float* %210 to i32*
  store i32 %211, i32* %212, align 4
  %213 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 1
  %214 = load i32, i32* %156, align 4
  %215 = bitcast float* %213 to i32*
  store i32 %214, i32* %215, align 4
  %216 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 2
  %217 = load i32, i32* %162, align 4
  %218 = bitcast float* %216 to i32*
  store i32 %217, i32* %218, align 4
  %219 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 3
  %220 = load i32, i32* %86, align 4
  %221 = bitcast float* %219 to i32*
  store i32 %220, i32* %221, align 4
  %222 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 4
  %223 = load i32, i32* %94, align 4
  %224 = bitcast float* %222 to i32*
  store i32 %223, i32* %224, align 4
  %225 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 5
  %226 = load i32, i32* %102, align 4
  %227 = bitcast float* %225 to i32*
  store i32 %226, i32* %227, align 4
  %228 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 6
  %229 = load i32, i32* %109, align 4
  %230 = bitcast float* %228 to i32*
  store i32 %229, i32* %230, align 4
  %231 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 7
  %232 = load i32, i32* %116, align 4
  %233 = bitcast float* %231 to i32*
  store i32 %232, i32* %233, align 4
  %234 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 8
  %235 = load i32, i32* %123, align 4
  %236 = bitcast float* %234 to i32*
  store i32 %235, i32* %236, align 4
  %237 = load float, float* %84, align 4
  %238 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %238) #18
  %239 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %238, i8 0, i64 24, i1 false) #18
  %240 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 1
  store i32 3, i32* %240, align 8
  %241 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 2
  store i32 3, i32* %241, align 4
  %242 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %243 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %244

; <label>:244:                                    ; preds = %260, %77
  %245 = phi float* [ null, %77 ], [ %262, %260 ]
  %246 = phi float* [ null, %77 ], [ %261, %260 ]
  %247 = phi i64 [ 0, %77 ], [ %258, %260 ]
  %248 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 0, i64 %247
  %249 = icmp eq float* %246, %245
  br i1 %249, label %256, label %250

; <label>:250:                                    ; preds = %244
  %251 = bitcast float* %248 to i32*
  %252 = load i32, i32* %251, align 4
  %253 = bitcast float* %246 to i32*
  store i32 %252, i32* %253, align 4
  %254 = load float*, float** %242, align 8
  %255 = getelementptr inbounds float, float* %254, i64 1
  store float* %255, float** %242, align 8
  br label %257

; <label>:256:                                    ; preds = %244
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(%"class.std::__1::vector.41"* nonnull %239, float* nonnull dereferenceable(4) %248) #18
  br label %257

; <label>:257:                                    ; preds = %256, %250
  %258 = add nuw nsw i64 %247, 1
  %259 = icmp eq i64 %258, 9
  br i1 %259, label %263, label %260

; <label>:260:                                    ; preds = %257
  %261 = load float*, float** %242, align 8
  %262 = load float*, float** %243, align 8
  br label %244

; <label>:263:                                    ; preds = %257
  %264 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %3)
  %265 = load float*, float** %83, align 8
  %266 = getelementptr inbounds float, float* %265, i64 1
  %267 = load float, float* %266, align 4
  %268 = bitcast %"class.angle::Matrix"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %268) #18
  %269 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %268, i8 0, i64 24, i1 false) #18
  %270 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 1
  store i32 3, i32* %270, align 8
  %271 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 2
  store i32 3, i32* %271, align 4
  %272 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 1
  %273 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %274

; <label>:274:                                    ; preds = %290, %263
  %275 = phi float* [ null, %263 ], [ %292, %290 ]
  %276 = phi float* [ null, %263 ], [ %291, %290 ]
  %277 = phi i64 [ 0, %263 ], [ %288, %290 ]
  %278 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 1, i64 %277
  %279 = icmp eq float* %276, %275
  br i1 %279, label %286, label %280

; <label>:280:                                    ; preds = %274
  %281 = bitcast float* %278 to i32*
  %282 = load i32, i32* %281, align 4
  %283 = bitcast float* %276 to i32*
  store i32 %282, i32* %283, align 4
  %284 = load float*, float** %272, align 8
  %285 = getelementptr inbounds float, float* %284, i64 1
  store float* %285, float** %272, align 8
  br label %287

; <label>:286:                                    ; preds = %274
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(%"class.std::__1::vector.41"* nonnull %269, float* nonnull dereferenceable(4) %278) #18
  br label %287

; <label>:287:                                    ; preds = %286, %280
  %288 = add nuw nsw i64 %277, 1
  %289 = icmp eq i64 %288, 9
  br i1 %289, label %293, label %290

; <label>:290:                                    ; preds = %287
  %291 = load float*, float** %272, align 8
  %292 = load float*, float** %273, align 8
  br label %274

; <label>:293:                                    ; preds = %287
  %294 = fmul float %237, %264
  %295 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %4)
  %296 = fmul float %267, %295
  %297 = load float*, float** %83, align 8
  %298 = getelementptr inbounds float, float* %297, i64 2
  %299 = load float, float* %298, align 4
  %300 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %300) #18
  %301 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %300, i8 0, i64 24, i1 false) #18
  %302 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 1
  store i32 3, i32* %302, align 8
  %303 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 2
  store i32 3, i32* %303, align 4
  %304 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %305 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %306

; <label>:306:                                    ; preds = %322, %293
  %307 = phi float* [ null, %293 ], [ %324, %322 ]
  %308 = phi float* [ null, %293 ], [ %323, %322 ]
  %309 = phi i64 [ 0, %293 ], [ %320, %322 ]
  %310 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 2, i64 %309
  %311 = icmp eq float* %308, %307
  br i1 %311, label %318, label %312

; <label>:312:                                    ; preds = %306
  %313 = bitcast float* %310 to i32*
  %314 = load i32, i32* %313, align 4
  %315 = bitcast float* %308 to i32*
  store i32 %314, i32* %315, align 4
  %316 = load float*, float** %304, align 8
  %317 = getelementptr inbounds float, float* %316, i64 1
  store float* %317, float** %304, align 8
  br label %319

; <label>:318:                                    ; preds = %306
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(%"class.std::__1::vector.41"* nonnull %301, float* nonnull dereferenceable(4) %310) #18
  br label %319

; <label>:319:                                    ; preds = %318, %312
  %320 = add nuw nsw i64 %309, 1
  %321 = icmp eq i64 %320, 9
  br i1 %321, label %325, label %322

; <label>:322:                                    ; preds = %319
  %323 = load float*, float** %304, align 8
  %324 = load float*, float** %305, align 8
  br label %306

; <label>:325:                                    ; preds = %319
  %326 = fsub float %294, %296
  %327 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %5)
  %328 = fmul float %299, %327
  %329 = load float*, float** %83, align 8
  %330 = getelementptr inbounds float, float* %329, i64 3
  %331 = load float, float* %330, align 4
  %332 = bitcast %"class.angle::Matrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %332) #18
  %333 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %332, i8 0, i64 24, i1 false) #18
  %334 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 1
  store i32 3, i32* %334, align 8
  %335 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 2
  store i32 3, i32* %335, align 4
  %336 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 1
  %337 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %338

; <label>:338:                                    ; preds = %354, %325
  %339 = phi float* [ null, %325 ], [ %356, %354 ]
  %340 = phi float* [ null, %325 ], [ %355, %354 ]
  %341 = phi i64 [ 0, %325 ], [ %352, %354 ]
  %342 = getelementptr inbounds [4 x [9 x float]], [4 x [9 x float]]* %2, i64 0, i64 3, i64 %341
  %343 = icmp eq float* %340, %339
  br i1 %343, label %350, label %344

; <label>:344:                                    ; preds = %338
  %345 = bitcast float* %342 to i32*
  %346 = load i32, i32* %345, align 4
  %347 = bitcast float* %340 to i32*
  store i32 %346, i32* %347, align 4
  %348 = load float*, float** %336, align 8
  %349 = getelementptr inbounds float, float* %348, i64 1
  store float* %349, float** %336, align 8
  br label %351

; <label>:350:                                    ; preds = %338
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(%"class.std::__1::vector.41"* nonnull %333, float* nonnull dereferenceable(4) %342) #18
  br label %351

; <label>:351:                                    ; preds = %350, %344
  %352 = add nuw nsw i64 %341, 1
  %353 = icmp eq i64 %352, 9
  br i1 %353, label %357, label %354

; <label>:354:                                    ; preds = %351
  %355 = load float*, float** %336, align 8
  %356 = load float*, float** %337, align 8
  br label %338

; <label>:357:                                    ; preds = %351
  %358 = fadd float %326, %328
  %359 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %6)
  %360 = fmul float %331, %359
  %361 = fsub float %358, %360
  %362 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %6, i64 0, i32 0, i32 0, i32 0
  %363 = load float*, float** %362, align 8
  %364 = icmp eq float* %363, null
  br i1 %364, label %369, label %365

; <label>:365:                                    ; preds = %357
  %366 = ptrtoint float* %363 to i64
  %367 = bitcast float** %336 to i64*
  store i64 %366, i64* %367, align 8
  %368 = bitcast float* %363 to i8*
  call void @_ZdlPv(i8* %368) #20
  br label %369

; <label>:369:                                    ; preds = %357, %365
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %332) #18
  %370 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  %371 = load float*, float** %370, align 8
  %372 = icmp eq float* %371, null
  br i1 %372, label %377, label %373

; <label>:373:                                    ; preds = %369
  %374 = ptrtoint float* %371 to i64
  %375 = bitcast float** %304 to i64*
  store i64 %374, i64* %375, align 8
  %376 = bitcast float* %371 to i8*
  call void @_ZdlPv(i8* %376) #20
  br label %377

; <label>:377:                                    ; preds = %369, %373
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %300) #18
  %378 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %4, i64 0, i32 0, i32 0, i32 0
  %379 = load float*, float** %378, align 8
  %380 = icmp eq float* %379, null
  br i1 %380, label %385, label %381

; <label>:381:                                    ; preds = %377
  %382 = ptrtoint float* %379 to i64
  %383 = bitcast float** %272 to i64*
  store i64 %382, i64* %383, align 8
  %384 = bitcast float* %379 to i8*
  call void @_ZdlPv(i8* %384) #20
  br label %385

; <label>:385:                                    ; preds = %377, %381
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %268) #18
  %386 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  %387 = load float*, float** %386, align 8
  %388 = icmp eq float* %387, null
  br i1 %388, label %393, label %389

; <label>:389:                                    ; preds = %385
  %390 = ptrtoint float* %387 to i64
  %391 = bitcast float** %242 to i64*
  store i64 %390, i64* %391, align 8
  %392 = bitcast float* %387 to i8*
  call void @_ZdlPv(i8* %392) #20
  br label %393

; <label>:393:                                    ; preds = %385, %389
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %238) #18
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %78) #18
  br label %394

; <label>:394:                                    ; preds = %1, %393, %27, %9
  %395 = phi float [ %361, %393 ], [ %76, %27 ], [ %26, %9 ], [ 0.000000e+00, %1 ]
  ret float %395
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5angle6MatrixIfE7inverseEv(%"class.angle::Matrix"* noalias sret, %"class.angle::Matrix"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.angle::Matrix", align 8
  %4 = alloca %"class.std::__1::vector.41", align 8
  %5 = alloca %"class.angle::Matrix", align 8
  %6 = alloca %"class.std::__1::vector.41", align 8
  %7 = bitcast %"class.angle::Matrix"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #18
  %8 = bitcast %"class.std::__1::vector.41"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #18
  %9 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast float** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.angle::Matrix"* %1 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #18
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %2
  %18 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  br label %67

; <label>:19:                                     ; preds = %2
  %20 = icmp ugt i64 %15, 4611686018427387903
  br i1 %20, label %21, label %23

; <label>:21:                                     ; preds = %19
  %22 = bitcast %"class.std::__1::vector.41"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %22) #12
  unreachable

; <label>:23:                                     ; preds = %19
  %24 = tail call i8* @_Znwm(i64 %14) #20
  %25 = bitcast i8* %24 to float*
  %26 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %27 = bitcast float** %26 to i8**
  store i8* %24, i8** %27, align 8
  %28 = bitcast %"class.std::__1::vector.41"* %4 to i8**
  store i8* %24, i8** %28, align 8
  %29 = getelementptr inbounds float, float* %25, i64 %15
  %30 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %29, float** %30, align 8
  %31 = add nsw i64 %15, -1
  %32 = and i64 %15, 3
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %43, label %34

; <label>:34:                                     ; preds = %23, %34
  %35 = phi float* [ %39, %34 ], [ %25, %23 ]
  %36 = phi i64 [ %40, %34 ], [ %15, %23 ]
  %37 = phi i64 [ %41, %34 ], [ %32, %23 ]
  store float 0.000000e+00, float* %35, align 4
  %38 = load float*, float** %26, align 8
  %39 = getelementptr inbounds float, float* %38, i64 1
  store float* %39, float** %26, align 8
  %40 = add i64 %36, -1
  %41 = add i64 %37, -1
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %34, !llvm.loop !81

; <label>:43:                                     ; preds = %34, %23
  %44 = phi float* [ undef, %23 ], [ %39, %34 ]
  %45 = phi float* [ %25, %23 ], [ %39, %34 ]
  %46 = phi i64 [ %15, %23 ], [ %40, %34 ]
  %47 = icmp ult i64 %31, 3
  br i1 %47, label %61, label %48

; <label>:48:                                     ; preds = %43, %48
  %49 = phi float* [ %58, %48 ], [ %45, %43 ]
  %50 = phi i64 [ %59, %48 ], [ %46, %43 ]
  store float 0.000000e+00, float* %49, align 4
  %51 = load float*, float** %26, align 8
  %52 = getelementptr inbounds float, float* %51, i64 1
  store float* %52, float** %26, align 8
  store float 0.000000e+00, float* %52, align 4
  %53 = load float*, float** %26, align 8
  %54 = getelementptr inbounds float, float* %53, i64 1
  store float* %54, float** %26, align 8
  store float 0.000000e+00, float* %54, align 4
  %55 = load float*, float** %26, align 8
  %56 = getelementptr inbounds float, float* %55, i64 1
  store float* %56, float** %26, align 8
  store float 0.000000e+00, float* %56, align 4
  %57 = load float*, float** %26, align 8
  %58 = getelementptr inbounds float, float* %57, i64 1
  store float* %58, float** %26, align 8
  %59 = add i64 %50, -4
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %48

; <label>:61:                                     ; preds = %48, %43
  %62 = phi float* [ %44, %43 ], [ %58, %48 ]
  %63 = ptrtoint float* %62 to i64
  %64 = bitcast %"class.std::__1::vector.41"* %4 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = inttoptr i64 %65 to float*
  br label %67

; <label>:67:                                     ; preds = %17, %61
  %68 = phi float** [ %18, %17 ], [ %26, %61 ]
  %69 = phi float* [ null, %17 ], [ %66, %61 ]
  %70 = phi i64 [ 0, %17 ], [ %65, %61 ]
  %71 = phi i64 [ 0, %17 ], [ %63, %61 ]
  %72 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #18
  %76 = bitcast float** %68 to i64*
  %77 = sub i64 %71, %70
  %78 = ashr exact i64 %77, 2
  %79 = icmp eq i64 %77, 0
  br i1 %79, label %100, label %80

; <label>:80:                                     ; preds = %67
  %81 = icmp ugt i64 %78, 4611686018427387903
  br i1 %81, label %82, label %84

; <label>:82:                                     ; preds = %80
  %83 = bitcast %"class.angle::Matrix"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %83) #12
  unreachable

; <label>:84:                                     ; preds = %80
  %85 = tail call i8* @_Znwm(i64 %77) #20
  %86 = bitcast i8* %85 to float*
  %87 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %88 = bitcast float** %87 to i8**
  store i8* %85, i8** %88, align 8
  %89 = bitcast %"class.angle::Matrix"* %3 to i8**
  store i8* %85, i8** %89, align 8
  %90 = getelementptr inbounds float, float* %86, i64 %78
  %91 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %90, float** %91, align 8
  %92 = ptrtoint float* %69 to i64
  %93 = sub i64 %71, %92
  %94 = icmp sgt i64 %93, 0
  %95 = bitcast i8* %85 to i32*
  br i1 %94, label %96, label %100

; <label>:96:                                     ; preds = %84
  %97 = lshr exact i64 %93, 2
  %98 = bitcast float* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %85, i8* align 4 %98, i64 %93, i1 false) #18
  %99 = getelementptr inbounds float, float* %86, i64 %97
  store float* %99, float** %87, align 8
  br label %100

; <label>:100:                                    ; preds = %67, %84, %96
  %101 = phi float* [ %86, %84 ], [ %86, %96 ], [ null, %67 ]
  %102 = phi i32* [ %95, %84 ], [ %95, %96 ], [ null, %67 ]
  %103 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 1
  store i32 %73, i32* %103, align 8
  %104 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 2
  store i32 %75, i32* %104, align 4
  %105 = icmp eq float* %69, null
  br i1 %105, label %110, label %106

; <label>:106:                                    ; preds = %100
  %107 = ptrtoint float* %69 to i64
  store i64 %107, i64* %76, align 8
  %108 = bitcast float* %69 to i8*
  tail call void @_ZdlPv(i8* %108) #20
  %109 = load i32, i32* %72, align 8
  br label %110

; <label>:110:                                    ; preds = %100, %106
  %111 = phi i32 [ %73, %100 ], [ %109, %106 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #18
  switch i32 %111, label %1086 [
    i32 2, label %112
    i32 3, label %137
    i32 4, label %261
  ]

; <label>:112:                                    ; preds = %110
  %113 = load i32, i32* %74, align 4
  %114 = add i32 %113, 1
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %117 = load float*, float** %116, align 8
  %118 = getelementptr inbounds float, float* %117, i64 %115
  %119 = bitcast float* %118 to i32*
  %120 = load i32, i32* %119, align 4
  store i32 %120, i32* %102, align 4
  %121 = zext i32 %113 to i64
  %122 = getelementptr inbounds float, float* %117, i64 %121
  %123 = load float, float* %122, align 4
  %124 = fsub float -0.000000e+00, %123
  %125 = getelementptr inbounds float, float* %101, i64 1
  store float %124, float* %125, align 4
  %126 = getelementptr inbounds float, float* %117, i64 1
  %127 = load float, float* %126, align 4
  %128 = fsub float -0.000000e+00, %127
  %129 = zext i32 %75 to i64
  %130 = getelementptr inbounds float, float* %101, i64 %129
  store float %128, float* %130, align 4
  %131 = bitcast float* %117 to i32*
  %132 = load i32, i32* %131, align 4
  %133 = add i32 %75, 1
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds float, float* %101, i64 %134
  %136 = bitcast float* %135 to i32*
  store i32 %132, i32* %136, align 4
  br label %1086

; <label>:137:                                    ; preds = %110
  %138 = load i32, i32* %74, align 4
  %139 = add i32 %138, 1
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %142 = load float*, float** %141, align 8
  %143 = getelementptr inbounds float, float* %142, i64 %140
  %144 = load float, float* %143, align 4
  %145 = shl i32 %138, 1
  %146 = add i32 %145, 2
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %142, i64 %147
  %149 = load float, float* %148, align 4
  %150 = fmul float %144, %149
  %151 = or i32 %145, 1
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %142, i64 %152
  %154 = load float, float* %153, align 4
  %155 = add i32 %138, 2
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %142, i64 %156
  %158 = load float, float* %157, align 4
  %159 = fmul float %154, %158
  %160 = fsub float %150, %159
  %161 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  store float %160, float* %101, align 4
  %162 = zext i32 %138 to i64
  %163 = getelementptr inbounds float, float* %142, i64 %162
  %164 = load float, float* %163, align 4
  %165 = load float, float* %148, align 4
  %166 = fmul float %164, %165
  %167 = zext i32 %145 to i64
  %168 = getelementptr inbounds float, float* %142, i64 %167
  %169 = load float, float* %168, align 4
  %170 = load float, float* %157, align 4
  %171 = fmul float %169, %170
  %172 = fsub float %166, %171
  %173 = fsub float -0.000000e+00, %172
  %174 = getelementptr inbounds float, float* %101, i64 1
  store float %173, float* %174, align 4
  %175 = load float, float* %163, align 4
  %176 = load float, float* %153, align 4
  %177 = fmul float %175, %176
  %178 = load float, float* %168, align 4
  %179 = load float, float* %143, align 4
  %180 = fmul float %178, %179
  %181 = fsub float %177, %180
  %182 = getelementptr inbounds float, float* %101, i64 2
  store float %181, float* %182, align 4
  %183 = getelementptr inbounds float, float* %142, i64 1
  %184 = load float, float* %183, align 4
  %185 = load float, float* %148, align 4
  %186 = fmul float %184, %185
  %187 = load float, float* %153, align 4
  %188 = getelementptr inbounds float, float* %142, i64 2
  %189 = load float, float* %188, align 4
  %190 = fmul float %187, %189
  %191 = fsub float %186, %190
  %192 = fsub float -0.000000e+00, %191
  %193 = zext i32 %75 to i64
  %194 = getelementptr inbounds float, float* %101, i64 %193
  store float %192, float* %194, align 4
  %195 = load float, float* %142, align 4
  %196 = load float, float* %148, align 4
  %197 = fmul float %195, %196
  %198 = load float, float* %168, align 4
  %199 = load float, float* %188, align 4
  %200 = fmul float %198, %199
  %201 = fsub float %197, %200
  %202 = add i32 %75, 1
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds float, float* %101, i64 %203
  store float %201, float* %204, align 4
  %205 = load float, float* %142, align 4
  %206 = load float, float* %153, align 4
  %207 = fmul float %205, %206
  %208 = load float, float* %168, align 4
  %209 = load float, float* %183, align 4
  %210 = fmul float %208, %209
  %211 = fsub float %207, %210
  %212 = fsub float -0.000000e+00, %211
  %213 = add i32 %75, 2
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds float, float* %101, i64 %214
  store float %212, float* %215, align 4
  %216 = load float, float* %183, align 4
  %217 = load float, float* %157, align 4
  %218 = fmul float %216, %217
  %219 = load float, float* %143, align 4
  %220 = load float, float* %188, align 4
  %221 = fmul float %219, %220
  %222 = fsub float %218, %221
  %223 = shl i32 %75, 1
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds float, float* %101, i64 %224
  store float %222, float* %225, align 4
  %226 = load float, float* %142, align 4
  %227 = load float, float* %157, align 4
  %228 = fmul float %226, %227
  %229 = load float, float* %163, align 4
  %230 = load float, float* %188, align 4
  %231 = fmul float %229, %230
  %232 = fsub float %228, %231
  %233 = fsub float -0.000000e+00, %232
  %234 = load i32, i32* %104, align 4
  %235 = shl i32 %234, 1
  %236 = or i32 %235, 1
  %237 = zext i32 %236 to i64
  %238 = load float*, float** %161, align 8
  %239 = getelementptr inbounds float, float* %238, i64 %237
  store float %233, float* %239, align 4
  %240 = load float*, float** %141, align 8
  %241 = load float, float* %240, align 4
  %242 = load i32, i32* %74, align 4
  %243 = add i32 %242, 1
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds float, float* %240, i64 %244
  %246 = load float, float* %245, align 4
  %247 = fmul float %241, %246
  %248 = zext i32 %242 to i64
  %249 = getelementptr inbounds float, float* %240, i64 %248
  %250 = load float, float* %249, align 4
  %251 = getelementptr inbounds float, float* %240, i64 1
  %252 = load float, float* %251, align 4
  %253 = fmul float %250, %252
  %254 = fsub float %247, %253
  %255 = load i32, i32* %104, align 4
  %256 = shl i32 %255, 1
  %257 = add i32 %256, 2
  %258 = zext i32 %257 to i64
  %259 = load float*, float** %161, align 8
  %260 = getelementptr inbounds float, float* %259, i64 %258
  store float %254, float* %260, align 4
  br label %1086

; <label>:261:                                    ; preds = %110
  %262 = load i32, i32* %74, align 4
  %263 = add i32 %262, 1
  %264 = zext i32 %263 to i64
  %265 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %266 = load float*, float** %265, align 8
  %267 = getelementptr inbounds float, float* %266, i64 %264
  %268 = load float, float* %267, align 4
  %269 = shl i32 %262, 1
  %270 = add i32 %269, 2
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds float, float* %266, i64 %271
  %273 = load float, float* %272, align 4
  %274 = fmul float %268, %273
  %275 = mul i32 %262, 3
  %276 = add i32 %275, 3
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds float, float* %266, i64 %277
  %279 = load float, float* %278, align 4
  %280 = fmul float %274, %279
  %281 = or i32 %269, 1
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds float, float* %266, i64 %282
  %284 = load float, float* %283, align 4
  %285 = add i32 %275, 2
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds float, float* %266, i64 %286
  %288 = load float, float* %287, align 4
  %289 = fmul float %284, %288
  %290 = add i32 %262, 3
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds float, float* %266, i64 %291
  %293 = load float, float* %292, align 4
  %294 = fmul float %289, %293
  %295 = fadd float %280, %294
  %296 = add i32 %275, 1
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds float, float* %266, i64 %297
  %299 = load float, float* %298, align 4
  %300 = add i32 %262, 2
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds float, float* %266, i64 %301
  %303 = load float, float* %302, align 4
  %304 = fmul float %299, %303
  %305 = add i32 %269, 3
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds float, float* %266, i64 %306
  %308 = load float, float* %307, align 4
  %309 = fmul float %304, %308
  %310 = fadd float %295, %309
  %311 = fmul float %268, %288
  %312 = fmul float %311, %308
  %313 = fsub float %310, %312
  %314 = fmul float %284, %303
  %315 = fmul float %279, %314
  %316 = fsub float %313, %315
  %317 = fmul float %273, %299
  %318 = fmul float %293, %317
  %319 = fsub float %316, %318
  %320 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  store float %319, float* %101, align 4
  %321 = zext i32 %262 to i64
  %322 = getelementptr inbounds float, float* %266, i64 %321
  %323 = load float, float* %322, align 4
  %324 = load float, float* %272, align 4
  %325 = fmul float %323, %324
  %326 = load float, float* %278, align 4
  %327 = fmul float %325, %326
  %328 = zext i32 %269 to i64
  %329 = getelementptr inbounds float, float* %266, i64 %328
  %330 = load float, float* %329, align 4
  %331 = load float, float* %287, align 4
  %332 = fmul float %330, %331
  %333 = load float, float* %292, align 4
  %334 = fmul float %332, %333
  %335 = fadd float %327, %334
  %336 = zext i32 %275 to i64
  %337 = getelementptr inbounds float, float* %266, i64 %336
  %338 = load float, float* %337, align 4
  %339 = load float, float* %302, align 4
  %340 = fmul float %338, %339
  %341 = load float, float* %307, align 4
  %342 = fmul float %340, %341
  %343 = fadd float %335, %342
  %344 = fmul float %323, %331
  %345 = fmul float %344, %341
  %346 = fsub float %343, %345
  %347 = fmul float %330, %339
  %348 = fmul float %326, %347
  %349 = fsub float %346, %348
  %350 = fmul float %324, %338
  %351 = fmul float %333, %350
  %352 = fsub float %349, %351
  %353 = fsub float -0.000000e+00, %352
  %354 = getelementptr inbounds float, float* %101, i64 1
  store float %353, float* %354, align 4
  %355 = load float, float* %322, align 4
  %356 = load float, float* %283, align 4
  %357 = fmul float %355, %356
  %358 = load float, float* %278, align 4
  %359 = fmul float %357, %358
  %360 = load float, float* %329, align 4
  %361 = load float, float* %298, align 4
  %362 = fmul float %360, %361
  %363 = load float, float* %292, align 4
  %364 = fmul float %362, %363
  %365 = fadd float %359, %364
  %366 = load float, float* %337, align 4
  %367 = load float, float* %267, align 4
  %368 = fmul float %366, %367
  %369 = load float, float* %307, align 4
  %370 = fmul float %368, %369
  %371 = fadd float %365, %370
  %372 = fmul float %355, %361
  %373 = fmul float %372, %369
  %374 = fsub float %371, %373
  %375 = fmul float %360, %367
  %376 = fmul float %358, %375
  %377 = fsub float %374, %376
  %378 = fmul float %356, %366
  %379 = fmul float %363, %378
  %380 = fsub float %377, %379
  %381 = load float*, float** %320, align 8
  %382 = getelementptr inbounds float, float* %381, i64 2
  store float %380, float* %382, align 4
  %383 = load i32, i32* %74, align 4
  %384 = zext i32 %383 to i64
  %385 = load float*, float** %265, align 8
  %386 = getelementptr inbounds float, float* %385, i64 %384
  %387 = load float, float* %386, align 4
  %388 = shl i32 %383, 1
  %389 = or i32 %388, 1
  %390 = zext i32 %389 to i64
  %391 = getelementptr inbounds float, float* %385, i64 %390
  %392 = load float, float* %391, align 4
  %393 = fmul float %387, %392
  %394 = mul i32 %383, 3
  %395 = add i32 %394, 2
  %396 = zext i32 %395 to i64
  %397 = getelementptr inbounds float, float* %385, i64 %396
  %398 = load float, float* %397, align 4
  %399 = fmul float %393, %398
  %400 = zext i32 %388 to i64
  %401 = getelementptr inbounds float, float* %385, i64 %400
  %402 = load float, float* %401, align 4
  %403 = add i32 %394, 1
  %404 = zext i32 %403 to i64
  %405 = getelementptr inbounds float, float* %385, i64 %404
  %406 = load float, float* %405, align 4
  %407 = fmul float %402, %406
  %408 = add i32 %383, 2
  %409 = zext i32 %408 to i64
  %410 = getelementptr inbounds float, float* %385, i64 %409
  %411 = load float, float* %410, align 4
  %412 = fmul float %407, %411
  %413 = fadd float %399, %412
  %414 = zext i32 %394 to i64
  %415 = getelementptr inbounds float, float* %385, i64 %414
  %416 = load float, float* %415, align 4
  %417 = add i32 %383, 1
  %418 = zext i32 %417 to i64
  %419 = getelementptr inbounds float, float* %385, i64 %418
  %420 = load float, float* %419, align 4
  %421 = fmul float %416, %420
  %422 = add i32 %388, 2
  %423 = zext i32 %422 to i64
  %424 = getelementptr inbounds float, float* %385, i64 %423
  %425 = load float, float* %424, align 4
  %426 = fmul float %421, %425
  %427 = fadd float %413, %426
  %428 = fmul float %387, %406
  %429 = fmul float %428, %425
  %430 = fsub float %427, %429
  %431 = fmul float %402, %420
  %432 = fmul float %398, %431
  %433 = fsub float %430, %432
  %434 = fmul float %392, %416
  %435 = fmul float %411, %434
  %436 = fsub float %433, %435
  %437 = fsub float -0.000000e+00, %436
  %438 = getelementptr inbounds float, float* %381, i64 3
  store float %437, float* %438, align 4
  %439 = load float*, float** %265, align 8
  %440 = getelementptr inbounds float, float* %439, i64 1
  %441 = load float, float* %440, align 4
  %442 = load i32, i32* %74, align 4
  %443 = shl i32 %442, 1
  %444 = add i32 %443, 2
  %445 = zext i32 %444 to i64
  %446 = getelementptr inbounds float, float* %439, i64 %445
  %447 = load float, float* %446, align 4
  %448 = fmul float %441, %447
  %449 = mul i32 %442, 3
  %450 = add i32 %449, 3
  %451 = zext i32 %450 to i64
  %452 = getelementptr inbounds float, float* %439, i64 %451
  %453 = load float, float* %452, align 4
  %454 = fmul float %448, %453
  %455 = or i32 %443, 1
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds float, float* %439, i64 %456
  %458 = load float, float* %457, align 4
  %459 = add i32 %449, 2
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds float, float* %439, i64 %460
  %462 = load float, float* %461, align 4
  %463 = fmul float %458, %462
  %464 = getelementptr inbounds float, float* %439, i64 3
  %465 = load float, float* %464, align 4
  %466 = fmul float %463, %465
  %467 = fadd float %454, %466
  %468 = add i32 %449, 1
  %469 = zext i32 %468 to i64
  %470 = getelementptr inbounds float, float* %439, i64 %469
  %471 = load float, float* %470, align 4
  %472 = getelementptr inbounds float, float* %439, i64 2
  %473 = load float, float* %472, align 4
  %474 = fmul float %471, %473
  %475 = add i32 %443, 3
  %476 = zext i32 %475 to i64
  %477 = getelementptr inbounds float, float* %439, i64 %476
  %478 = load float, float* %477, align 4
  %479 = fmul float %474, %478
  %480 = fadd float %467, %479
  %481 = fmul float %441, %462
  %482 = fmul float %481, %478
  %483 = fsub float %480, %482
  %484 = fmul float %458, %473
  %485 = fmul float %453, %484
  %486 = fsub float %483, %485
  %487 = fmul float %447, %471
  %488 = fmul float %465, %487
  %489 = fsub float %486, %488
  %490 = fsub float -0.000000e+00, %489
  %491 = load i32, i32* %104, align 4
  %492 = zext i32 %491 to i64
  %493 = getelementptr inbounds float, float* %381, i64 %492
  store float %490, float* %493, align 4
  %494 = load float*, float** %265, align 8
  %495 = load float, float* %494, align 4
  %496 = load i32, i32* %74, align 4
  %497 = shl i32 %496, 1
  %498 = add i32 %497, 2
  %499 = zext i32 %498 to i64
  %500 = getelementptr inbounds float, float* %494, i64 %499
  %501 = load float, float* %500, align 4
  %502 = fmul float %495, %501
  %503 = mul i32 %496, 3
  %504 = add i32 %503, 3
  %505 = zext i32 %504 to i64
  %506 = getelementptr inbounds float, float* %494, i64 %505
  %507 = load float, float* %506, align 4
  %508 = fmul float %502, %507
  %509 = zext i32 %497 to i64
  %510 = getelementptr inbounds float, float* %494, i64 %509
  %511 = load float, float* %510, align 4
  %512 = add i32 %503, 2
  %513 = zext i32 %512 to i64
  %514 = getelementptr inbounds float, float* %494, i64 %513
  %515 = load float, float* %514, align 4
  %516 = fmul float %511, %515
  %517 = getelementptr inbounds float, float* %494, i64 3
  %518 = load float, float* %517, align 4
  %519 = fmul float %516, %518
  %520 = fadd float %508, %519
  %521 = zext i32 %503 to i64
  %522 = getelementptr inbounds float, float* %494, i64 %521
  %523 = load float, float* %522, align 4
  %524 = getelementptr inbounds float, float* %494, i64 2
  %525 = load float, float* %524, align 4
  %526 = fmul float %523, %525
  %527 = add i32 %497, 3
  %528 = zext i32 %527 to i64
  %529 = getelementptr inbounds float, float* %494, i64 %528
  %530 = load float, float* %529, align 4
  %531 = fmul float %526, %530
  %532 = fadd float %520, %531
  %533 = fmul float %495, %515
  %534 = fmul float %533, %530
  %535 = fsub float %532, %534
  %536 = fmul float %511, %525
  %537 = fmul float %507, %536
  %538 = fsub float %535, %537
  %539 = fmul float %501, %523
  %540 = fmul float %518, %539
  %541 = fsub float %538, %540
  %542 = load i32, i32* %104, align 4
  %543 = add i32 %542, 1
  %544 = zext i32 %543 to i64
  %545 = load float*, float** %320, align 8
  %546 = getelementptr inbounds float, float* %545, i64 %544
  store float %541, float* %546, align 4
  %547 = load float*, float** %265, align 8
  %548 = load float, float* %547, align 4
  %549 = load i32, i32* %74, align 4
  %550 = shl i32 %549, 1
  %551 = or i32 %550, 1
  %552 = zext i32 %551 to i64
  %553 = getelementptr inbounds float, float* %547, i64 %552
  %554 = load float, float* %553, align 4
  %555 = fmul float %548, %554
  %556 = mul i32 %549, 3
  %557 = add i32 %556, 3
  %558 = zext i32 %557 to i64
  %559 = getelementptr inbounds float, float* %547, i64 %558
  %560 = load float, float* %559, align 4
  %561 = fmul float %555, %560
  %562 = zext i32 %550 to i64
  %563 = getelementptr inbounds float, float* %547, i64 %562
  %564 = load float, float* %563, align 4
  %565 = add i32 %556, 1
  %566 = zext i32 %565 to i64
  %567 = getelementptr inbounds float, float* %547, i64 %566
  %568 = load float, float* %567, align 4
  %569 = fmul float %564, %568
  %570 = getelementptr inbounds float, float* %547, i64 3
  %571 = load float, float* %570, align 4
  %572 = fmul float %569, %571
  %573 = fadd float %561, %572
  %574 = zext i32 %556 to i64
  %575 = getelementptr inbounds float, float* %547, i64 %574
  %576 = load float, float* %575, align 4
  %577 = getelementptr inbounds float, float* %547, i64 1
  %578 = load float, float* %577, align 4
  %579 = fmul float %576, %578
  %580 = add i32 %550, 3
  %581 = zext i32 %580 to i64
  %582 = getelementptr inbounds float, float* %547, i64 %581
  %583 = load float, float* %582, align 4
  %584 = fmul float %579, %583
  %585 = fadd float %573, %584
  %586 = fmul float %548, %568
  %587 = fmul float %586, %583
  %588 = fsub float %585, %587
  %589 = fmul float %564, %578
  %590 = fmul float %560, %589
  %591 = fsub float %588, %590
  %592 = fmul float %554, %576
  %593 = fmul float %571, %592
  %594 = fsub float %591, %593
  %595 = fsub float -0.000000e+00, %594
  %596 = load i32, i32* %104, align 4
  %597 = add i32 %596, 2
  %598 = zext i32 %597 to i64
  %599 = load float*, float** %320, align 8
  %600 = getelementptr inbounds float, float* %599, i64 %598
  store float %595, float* %600, align 4
  %601 = load float*, float** %265, align 8
  %602 = load float, float* %601, align 4
  %603 = load i32, i32* %74, align 4
  %604 = shl i32 %603, 1
  %605 = or i32 %604, 1
  %606 = zext i32 %605 to i64
  %607 = getelementptr inbounds float, float* %601, i64 %606
  %608 = load float, float* %607, align 4
  %609 = fmul float %602, %608
  %610 = mul i32 %603, 3
  %611 = add i32 %610, 2
  %612 = zext i32 %611 to i64
  %613 = getelementptr inbounds float, float* %601, i64 %612
  %614 = load float, float* %613, align 4
  %615 = fmul float %609, %614
  %616 = zext i32 %604 to i64
  %617 = getelementptr inbounds float, float* %601, i64 %616
  %618 = load float, float* %617, align 4
  %619 = add i32 %610, 1
  %620 = zext i32 %619 to i64
  %621 = getelementptr inbounds float, float* %601, i64 %620
  %622 = load float, float* %621, align 4
  %623 = fmul float %618, %622
  %624 = getelementptr inbounds float, float* %601, i64 2
  %625 = load float, float* %624, align 4
  %626 = fmul float %623, %625
  %627 = fadd float %615, %626
  %628 = zext i32 %610 to i64
  %629 = getelementptr inbounds float, float* %601, i64 %628
  %630 = load float, float* %629, align 4
  %631 = getelementptr inbounds float, float* %601, i64 1
  %632 = load float, float* %631, align 4
  %633 = fmul float %630, %632
  %634 = add i32 %604, 2
  %635 = zext i32 %634 to i64
  %636 = getelementptr inbounds float, float* %601, i64 %635
  %637 = load float, float* %636, align 4
  %638 = fmul float %633, %637
  %639 = fadd float %627, %638
  %640 = fmul float %602, %622
  %641 = fmul float %640, %637
  %642 = fsub float %639, %641
  %643 = fmul float %618, %632
  %644 = fmul float %614, %643
  %645 = fsub float %642, %644
  %646 = fmul float %608, %630
  %647 = fmul float %625, %646
  %648 = fsub float %645, %647
  %649 = load i32, i32* %104, align 4
  %650 = add i32 %649, 3
  %651 = zext i32 %650 to i64
  %652 = load float*, float** %320, align 8
  %653 = getelementptr inbounds float, float* %652, i64 %651
  store float %648, float* %653, align 4
  %654 = load float*, float** %265, align 8
  %655 = getelementptr inbounds float, float* %654, i64 1
  %656 = load float, float* %655, align 4
  %657 = load i32, i32* %74, align 4
  %658 = add i32 %657, 2
  %659 = zext i32 %658 to i64
  %660 = getelementptr inbounds float, float* %654, i64 %659
  %661 = load float, float* %660, align 4
  %662 = fmul float %656, %661
  %663 = mul i32 %657, 3
  %664 = add i32 %663, 3
  %665 = zext i32 %664 to i64
  %666 = getelementptr inbounds float, float* %654, i64 %665
  %667 = load float, float* %666, align 4
  %668 = fmul float %662, %667
  %669 = add i32 %657, 1
  %670 = zext i32 %669 to i64
  %671 = getelementptr inbounds float, float* %654, i64 %670
  %672 = load float, float* %671, align 4
  %673 = add i32 %663, 2
  %674 = zext i32 %673 to i64
  %675 = getelementptr inbounds float, float* %654, i64 %674
  %676 = load float, float* %675, align 4
  %677 = fmul float %672, %676
  %678 = getelementptr inbounds float, float* %654, i64 3
  %679 = load float, float* %678, align 4
  %680 = fmul float %677, %679
  %681 = fadd float %668, %680
  %682 = add i32 %663, 1
  %683 = zext i32 %682 to i64
  %684 = getelementptr inbounds float, float* %654, i64 %683
  %685 = load float, float* %684, align 4
  %686 = getelementptr inbounds float, float* %654, i64 2
  %687 = load float, float* %686, align 4
  %688 = fmul float %685, %687
  %689 = add i32 %657, 3
  %690 = zext i32 %689 to i64
  %691 = getelementptr inbounds float, float* %654, i64 %690
  %692 = load float, float* %691, align 4
  %693 = fmul float %688, %692
  %694 = fadd float %681, %693
  %695 = fmul float %656, %676
  %696 = fmul float %695, %692
  %697 = fsub float %694, %696
  %698 = fmul float %672, %687
  %699 = fmul float %667, %698
  %700 = fsub float %697, %699
  %701 = fmul float %661, %685
  %702 = fmul float %679, %701
  %703 = fsub float %700, %702
  %704 = load i32, i32* %104, align 4
  %705 = shl i32 %704, 1
  %706 = zext i32 %705 to i64
  %707 = load float*, float** %320, align 8
  %708 = getelementptr inbounds float, float* %707, i64 %706
  store float %703, float* %708, align 4
  %709 = load float*, float** %265, align 8
  %710 = load float, float* %709, align 4
  %711 = load i32, i32* %74, align 4
  %712 = add i32 %711, 2
  %713 = zext i32 %712 to i64
  %714 = getelementptr inbounds float, float* %709, i64 %713
  %715 = load float, float* %714, align 4
  %716 = fmul float %710, %715
  %717 = mul i32 %711, 3
  %718 = add i32 %717, 3
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds float, float* %709, i64 %719
  %721 = load float, float* %720, align 4
  %722 = fmul float %716, %721
  %723 = zext i32 %711 to i64
  %724 = getelementptr inbounds float, float* %709, i64 %723
  %725 = load float, float* %724, align 4
  %726 = add i32 %717, 2
  %727 = zext i32 %726 to i64
  %728 = getelementptr inbounds float, float* %709, i64 %727
  %729 = load float, float* %728, align 4
  %730 = fmul float %725, %729
  %731 = getelementptr inbounds float, float* %709, i64 3
  %732 = load float, float* %731, align 4
  %733 = fmul float %730, %732
  %734 = fadd float %722, %733
  %735 = zext i32 %717 to i64
  %736 = getelementptr inbounds float, float* %709, i64 %735
  %737 = load float, float* %736, align 4
  %738 = getelementptr inbounds float, float* %709, i64 2
  %739 = load float, float* %738, align 4
  %740 = fmul float %737, %739
  %741 = add i32 %711, 3
  %742 = zext i32 %741 to i64
  %743 = getelementptr inbounds float, float* %709, i64 %742
  %744 = load float, float* %743, align 4
  %745 = fmul float %740, %744
  %746 = fadd float %734, %745
  %747 = fmul float %710, %729
  %748 = fmul float %747, %744
  %749 = fsub float %746, %748
  %750 = fmul float %725, %739
  %751 = fmul float %721, %750
  %752 = fsub float %749, %751
  %753 = fmul float %715, %737
  %754 = fmul float %732, %753
  %755 = fsub float %752, %754
  %756 = fsub float -0.000000e+00, %755
  %757 = load i32, i32* %104, align 4
  %758 = shl i32 %757, 1
  %759 = or i32 %758, 1
  %760 = zext i32 %759 to i64
  %761 = load float*, float** %320, align 8
  %762 = getelementptr inbounds float, float* %761, i64 %760
  store float %756, float* %762, align 4
  %763 = load float*, float** %265, align 8
  %764 = load float, float* %763, align 4
  %765 = load i32, i32* %74, align 4
  %766 = add i32 %765, 1
  %767 = zext i32 %766 to i64
  %768 = getelementptr inbounds float, float* %763, i64 %767
  %769 = load float, float* %768, align 4
  %770 = fmul float %764, %769
  %771 = mul i32 %765, 3
  %772 = add i32 %771, 3
  %773 = zext i32 %772 to i64
  %774 = getelementptr inbounds float, float* %763, i64 %773
  %775 = load float, float* %774, align 4
  %776 = fmul float %770, %775
  %777 = zext i32 %765 to i64
  %778 = getelementptr inbounds float, float* %763, i64 %777
  %779 = load float, float* %778, align 4
  %780 = add i32 %771, 1
  %781 = zext i32 %780 to i64
  %782 = getelementptr inbounds float, float* %763, i64 %781
  %783 = load float, float* %782, align 4
  %784 = fmul float %779, %783
  %785 = getelementptr inbounds float, float* %763, i64 3
  %786 = load float, float* %785, align 4
  %787 = fmul float %784, %786
  %788 = fadd float %776, %787
  %789 = zext i32 %771 to i64
  %790 = getelementptr inbounds float, float* %763, i64 %789
  %791 = load float, float* %790, align 4
  %792 = getelementptr inbounds float, float* %763, i64 1
  %793 = load float, float* %792, align 4
  %794 = fmul float %791, %793
  %795 = add i32 %765, 3
  %796 = zext i32 %795 to i64
  %797 = getelementptr inbounds float, float* %763, i64 %796
  %798 = load float, float* %797, align 4
  %799 = fmul float %794, %798
  %800 = fadd float %788, %799
  %801 = fmul float %764, %783
  %802 = fmul float %801, %798
  %803 = fsub float %800, %802
  %804 = fmul float %779, %793
  %805 = fmul float %775, %804
  %806 = fsub float %803, %805
  %807 = fmul float %769, %791
  %808 = fmul float %786, %807
  %809 = fsub float %806, %808
  %810 = load i32, i32* %104, align 4
  %811 = shl i32 %810, 1
  %812 = add i32 %811, 2
  %813 = zext i32 %812 to i64
  %814 = load float*, float** %320, align 8
  %815 = getelementptr inbounds float, float* %814, i64 %813
  store float %809, float* %815, align 4
  %816 = load float*, float** %265, align 8
  %817 = load float, float* %816, align 4
  %818 = load i32, i32* %74, align 4
  %819 = add i32 %818, 1
  %820 = zext i32 %819 to i64
  %821 = getelementptr inbounds float, float* %816, i64 %820
  %822 = load float, float* %821, align 4
  %823 = fmul float %817, %822
  %824 = mul i32 %818, 3
  %825 = add i32 %824, 2
  %826 = zext i32 %825 to i64
  %827 = getelementptr inbounds float, float* %816, i64 %826
  %828 = load float, float* %827, align 4
  %829 = fmul float %823, %828
  %830 = zext i32 %818 to i64
  %831 = getelementptr inbounds float, float* %816, i64 %830
  %832 = load float, float* %831, align 4
  %833 = add i32 %824, 1
  %834 = zext i32 %833 to i64
  %835 = getelementptr inbounds float, float* %816, i64 %834
  %836 = load float, float* %835, align 4
  %837 = fmul float %832, %836
  %838 = getelementptr inbounds float, float* %816, i64 2
  %839 = load float, float* %838, align 4
  %840 = fmul float %837, %839
  %841 = fadd float %829, %840
  %842 = zext i32 %824 to i64
  %843 = getelementptr inbounds float, float* %816, i64 %842
  %844 = load float, float* %843, align 4
  %845 = getelementptr inbounds float, float* %816, i64 1
  %846 = load float, float* %845, align 4
  %847 = fmul float %844, %846
  %848 = add i32 %818, 2
  %849 = zext i32 %848 to i64
  %850 = getelementptr inbounds float, float* %816, i64 %849
  %851 = load float, float* %850, align 4
  %852 = fmul float %847, %851
  %853 = fadd float %841, %852
  %854 = fmul float %817, %836
  %855 = fmul float %854, %851
  %856 = fsub float %853, %855
  %857 = fmul float %832, %846
  %858 = fmul float %828, %857
  %859 = fsub float %856, %858
  %860 = fmul float %822, %844
  %861 = fmul float %839, %860
  %862 = fsub float %859, %861
  %863 = fsub float -0.000000e+00, %862
  %864 = load i32, i32* %104, align 4
  %865 = shl i32 %864, 1
  %866 = add i32 %865, 3
  %867 = zext i32 %866 to i64
  %868 = load float*, float** %320, align 8
  %869 = getelementptr inbounds float, float* %868, i64 %867
  store float %863, float* %869, align 4
  %870 = load float*, float** %265, align 8
  %871 = getelementptr inbounds float, float* %870, i64 1
  %872 = load float, float* %871, align 4
  %873 = load i32, i32* %74, align 4
  %874 = add i32 %873, 2
  %875 = zext i32 %874 to i64
  %876 = getelementptr inbounds float, float* %870, i64 %875
  %877 = load float, float* %876, align 4
  %878 = fmul float %872, %877
  %879 = shl i32 %873, 1
  %880 = add i32 %879, 3
  %881 = zext i32 %880 to i64
  %882 = getelementptr inbounds float, float* %870, i64 %881
  %883 = load float, float* %882, align 4
  %884 = fmul float %878, %883
  %885 = add i32 %873, 1
  %886 = zext i32 %885 to i64
  %887 = getelementptr inbounds float, float* %870, i64 %886
  %888 = load float, float* %887, align 4
  %889 = add i32 %879, 2
  %890 = zext i32 %889 to i64
  %891 = getelementptr inbounds float, float* %870, i64 %890
  %892 = load float, float* %891, align 4
  %893 = fmul float %888, %892
  %894 = getelementptr inbounds float, float* %870, i64 3
  %895 = load float, float* %894, align 4
  %896 = fmul float %893, %895
  %897 = fadd float %884, %896
  %898 = or i32 %879, 1
  %899 = zext i32 %898 to i64
  %900 = getelementptr inbounds float, float* %870, i64 %899
  %901 = load float, float* %900, align 4
  %902 = getelementptr inbounds float, float* %870, i64 2
  %903 = load float, float* %902, align 4
  %904 = fmul float %901, %903
  %905 = add i32 %873, 3
  %906 = zext i32 %905 to i64
  %907 = getelementptr inbounds float, float* %870, i64 %906
  %908 = load float, float* %907, align 4
  %909 = fmul float %904, %908
  %910 = fadd float %897, %909
  %911 = fmul float %872, %892
  %912 = fmul float %911, %908
  %913 = fsub float %910, %912
  %914 = fmul float %888, %903
  %915 = fmul float %883, %914
  %916 = fsub float %913, %915
  %917 = fmul float %877, %901
  %918 = fmul float %895, %917
  %919 = fsub float %916, %918
  %920 = fsub float -0.000000e+00, %919
  %921 = load i32, i32* %104, align 4
  %922 = mul i32 %921, 3
  %923 = zext i32 %922 to i64
  %924 = load float*, float** %320, align 8
  %925 = getelementptr inbounds float, float* %924, i64 %923
  store float %920, float* %925, align 4
  %926 = load float*, float** %265, align 8
  %927 = load float, float* %926, align 4
  %928 = load i32, i32* %74, align 4
  %929 = add i32 %928, 2
  %930 = zext i32 %929 to i64
  %931 = getelementptr inbounds float, float* %926, i64 %930
  %932 = load float, float* %931, align 4
  %933 = fmul float %927, %932
  %934 = shl i32 %928, 1
  %935 = add i32 %934, 3
  %936 = zext i32 %935 to i64
  %937 = getelementptr inbounds float, float* %926, i64 %936
  %938 = load float, float* %937, align 4
  %939 = fmul float %933, %938
  %940 = zext i32 %928 to i64
  %941 = getelementptr inbounds float, float* %926, i64 %940
  %942 = load float, float* %941, align 4
  %943 = add i32 %934, 2
  %944 = zext i32 %943 to i64
  %945 = getelementptr inbounds float, float* %926, i64 %944
  %946 = load float, float* %945, align 4
  %947 = fmul float %942, %946
  %948 = getelementptr inbounds float, float* %926, i64 3
  %949 = load float, float* %948, align 4
  %950 = fmul float %947, %949
  %951 = fadd float %939, %950
  %952 = zext i32 %934 to i64
  %953 = getelementptr inbounds float, float* %926, i64 %952
  %954 = load float, float* %953, align 4
  %955 = getelementptr inbounds float, float* %926, i64 2
  %956 = load float, float* %955, align 4
  %957 = fmul float %954, %956
  %958 = add i32 %928, 3
  %959 = zext i32 %958 to i64
  %960 = getelementptr inbounds float, float* %926, i64 %959
  %961 = load float, float* %960, align 4
  %962 = fmul float %957, %961
  %963 = fadd float %951, %962
  %964 = fmul float %927, %946
  %965 = fmul float %964, %961
  %966 = fsub float %963, %965
  %967 = fmul float %942, %956
  %968 = fmul float %938, %967
  %969 = fsub float %966, %968
  %970 = fmul float %932, %954
  %971 = fmul float %949, %970
  %972 = fsub float %969, %971
  %973 = load i32, i32* %104, align 4
  %974 = mul i32 %973, 3
  %975 = add i32 %974, 1
  %976 = zext i32 %975 to i64
  %977 = load float*, float** %320, align 8
  %978 = getelementptr inbounds float, float* %977, i64 %976
  store float %972, float* %978, align 4
  %979 = load float*, float** %265, align 8
  %980 = load float, float* %979, align 4
  %981 = load i32, i32* %74, align 4
  %982 = add i32 %981, 1
  %983 = zext i32 %982 to i64
  %984 = getelementptr inbounds float, float* %979, i64 %983
  %985 = load float, float* %984, align 4
  %986 = fmul float %980, %985
  %987 = shl i32 %981, 1
  %988 = add i32 %987, 3
  %989 = zext i32 %988 to i64
  %990 = getelementptr inbounds float, float* %979, i64 %989
  %991 = load float, float* %990, align 4
  %992 = fmul float %986, %991
  %993 = zext i32 %981 to i64
  %994 = getelementptr inbounds float, float* %979, i64 %993
  %995 = load float, float* %994, align 4
  %996 = or i32 %987, 1
  %997 = zext i32 %996 to i64
  %998 = getelementptr inbounds float, float* %979, i64 %997
  %999 = load float, float* %998, align 4
  %1000 = fmul float %995, %999
  %1001 = getelementptr inbounds float, float* %979, i64 3
  %1002 = load float, float* %1001, align 4
  %1003 = fmul float %1000, %1002
  %1004 = fadd float %992, %1003
  %1005 = zext i32 %987 to i64
  %1006 = getelementptr inbounds float, float* %979, i64 %1005
  %1007 = load float, float* %1006, align 4
  %1008 = getelementptr inbounds float, float* %979, i64 1
  %1009 = load float, float* %1008, align 4
  %1010 = fmul float %1007, %1009
  %1011 = add i32 %981, 3
  %1012 = zext i32 %1011 to i64
  %1013 = getelementptr inbounds float, float* %979, i64 %1012
  %1014 = load float, float* %1013, align 4
  %1015 = fmul float %1010, %1014
  %1016 = fadd float %1004, %1015
  %1017 = fmul float %980, %999
  %1018 = fmul float %1017, %1014
  %1019 = fsub float %1016, %1018
  %1020 = fmul float %995, %1009
  %1021 = fmul float %991, %1020
  %1022 = fsub float %1019, %1021
  %1023 = fmul float %985, %1007
  %1024 = fmul float %1002, %1023
  %1025 = fsub float %1022, %1024
  %1026 = fsub float -0.000000e+00, %1025
  %1027 = load i32, i32* %104, align 4
  %1028 = mul i32 %1027, 3
  %1029 = add i32 %1028, 2
  %1030 = zext i32 %1029 to i64
  %1031 = load float*, float** %320, align 8
  %1032 = getelementptr inbounds float, float* %1031, i64 %1030
  store float %1026, float* %1032, align 4
  %1033 = load float*, float** %265, align 8
  %1034 = load float, float* %1033, align 4
  %1035 = load i32, i32* %74, align 4
  %1036 = add i32 %1035, 1
  %1037 = zext i32 %1036 to i64
  %1038 = getelementptr inbounds float, float* %1033, i64 %1037
  %1039 = load float, float* %1038, align 4
  %1040 = fmul float %1034, %1039
  %1041 = shl i32 %1035, 1
  %1042 = add i32 %1041, 2
  %1043 = zext i32 %1042 to i64
  %1044 = getelementptr inbounds float, float* %1033, i64 %1043
  %1045 = load float, float* %1044, align 4
  %1046 = fmul float %1040, %1045
  %1047 = zext i32 %1035 to i64
  %1048 = getelementptr inbounds float, float* %1033, i64 %1047
  %1049 = load float, float* %1048, align 4
  %1050 = or i32 %1041, 1
  %1051 = zext i32 %1050 to i64
  %1052 = getelementptr inbounds float, float* %1033, i64 %1051
  %1053 = load float, float* %1052, align 4
  %1054 = fmul float %1049, %1053
  %1055 = getelementptr inbounds float, float* %1033, i64 2
  %1056 = load float, float* %1055, align 4
  %1057 = fmul float %1054, %1056
  %1058 = fadd float %1046, %1057
  %1059 = zext i32 %1041 to i64
  %1060 = getelementptr inbounds float, float* %1033, i64 %1059
  %1061 = load float, float* %1060, align 4
  %1062 = getelementptr inbounds float, float* %1033, i64 1
  %1063 = load float, float* %1062, align 4
  %1064 = fmul float %1061, %1063
  %1065 = add i32 %1035, 2
  %1066 = zext i32 %1065 to i64
  %1067 = getelementptr inbounds float, float* %1033, i64 %1066
  %1068 = load float, float* %1067, align 4
  %1069 = fmul float %1064, %1068
  %1070 = fadd float %1058, %1069
  %1071 = fmul float %1034, %1053
  %1072 = fmul float %1071, %1068
  %1073 = fsub float %1070, %1072
  %1074 = fmul float %1049, %1063
  %1075 = fmul float %1045, %1074
  %1076 = fsub float %1073, %1075
  %1077 = fmul float %1039, %1061
  %1078 = fmul float %1056, %1077
  %1079 = fsub float %1076, %1078
  %1080 = load i32, i32* %104, align 4
  %1081 = mul i32 %1080, 3
  %1082 = add i32 %1081, 3
  %1083 = zext i32 %1082 to i64
  %1084 = load float*, float** %320, align 8
  %1085 = getelementptr inbounds float, float* %1084, i64 %1083
  store float %1079, float* %1085, align 4
  br label %1086

; <label>:1086:                                   ; preds = %110, %261, %137, %112
  %1087 = bitcast %"class.angle::Matrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1087) #18
  call void @_ZNK5angle6MatrixIfE9transposeEv(%"class.angle::Matrix"* nonnull sret %5, %"class.angle::Matrix"* nonnull %3)
  %1088 = call float @_ZNK5angle6MatrixIfE11determinantEv(%"class.angle::Matrix"* nonnull %1)
  %1089 = bitcast %"class.std::__1::vector.41"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1089) #18
  %1090 = load i64, i64* %10, align 8
  %1091 = load i64, i64* %12, align 8
  %1092 = sub i64 %1090, %1091
  %1093 = ashr exact i64 %1092, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1089, i8 0, i64 24, i1 false) #18
  %1094 = icmp eq i64 %1092, 0
  br i1 %1094, label %1095, label %1097

; <label>:1095:                                   ; preds = %1086
  %1096 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %6, i64 0, i32 0, i32 1
  br label %1145

; <label>:1097:                                   ; preds = %1086
  %1098 = icmp ugt i64 %1093, 4611686018427387903
  br i1 %1098, label %1099, label %1101

; <label>:1099:                                   ; preds = %1097
  %1100 = bitcast %"class.std::__1::vector.41"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1100) #12
  unreachable

; <label>:1101:                                   ; preds = %1097
  %1102 = call i8* @_Znwm(i64 %1092) #20
  %1103 = bitcast i8* %1102 to float*
  %1104 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %6, i64 0, i32 0, i32 1
  %1105 = bitcast float** %1104 to i8**
  store i8* %1102, i8** %1105, align 8
  %1106 = bitcast %"class.std::__1::vector.41"* %6 to i8**
  store i8* %1102, i8** %1106, align 8
  %1107 = getelementptr inbounds float, float* %1103, i64 %1093
  %1108 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %1107, float** %1108, align 8
  %1109 = add nsw i64 %1093, -1
  %1110 = and i64 %1093, 3
  %1111 = icmp eq i64 %1110, 0
  br i1 %1111, label %1121, label %1112

; <label>:1112:                                   ; preds = %1101, %1112
  %1113 = phi float* [ %1117, %1112 ], [ %1103, %1101 ]
  %1114 = phi i64 [ %1118, %1112 ], [ %1093, %1101 ]
  %1115 = phi i64 [ %1119, %1112 ], [ %1110, %1101 ]
  store float 0.000000e+00, float* %1113, align 4
  %1116 = load float*, float** %1104, align 8
  %1117 = getelementptr inbounds float, float* %1116, i64 1
  store float* %1117, float** %1104, align 8
  %1118 = add i64 %1114, -1
  %1119 = add i64 %1115, -1
  %1120 = icmp eq i64 %1119, 0
  br i1 %1120, label %1121, label %1112, !llvm.loop !82

; <label>:1121:                                   ; preds = %1112, %1101
  %1122 = phi float* [ undef, %1101 ], [ %1117, %1112 ]
  %1123 = phi float* [ %1103, %1101 ], [ %1117, %1112 ]
  %1124 = phi i64 [ %1093, %1101 ], [ %1118, %1112 ]
  %1125 = icmp ult i64 %1109, 3
  br i1 %1125, label %1139, label %1126

; <label>:1126:                                   ; preds = %1121, %1126
  %1127 = phi float* [ %1136, %1126 ], [ %1123, %1121 ]
  %1128 = phi i64 [ %1137, %1126 ], [ %1124, %1121 ]
  store float 0.000000e+00, float* %1127, align 4
  %1129 = load float*, float** %1104, align 8
  %1130 = getelementptr inbounds float, float* %1129, i64 1
  store float* %1130, float** %1104, align 8
  store float 0.000000e+00, float* %1130, align 4
  %1131 = load float*, float** %1104, align 8
  %1132 = getelementptr inbounds float, float* %1131, i64 1
  store float* %1132, float** %1104, align 8
  store float 0.000000e+00, float* %1132, align 4
  %1133 = load float*, float** %1104, align 8
  %1134 = getelementptr inbounds float, float* %1133, i64 1
  store float* %1134, float** %1104, align 8
  store float 0.000000e+00, float* %1134, align 4
  %1135 = load float*, float** %1104, align 8
  %1136 = getelementptr inbounds float, float* %1135, i64 1
  store float* %1136, float** %1104, align 8
  %1137 = add i64 %1128, -4
  %1138 = icmp eq i64 %1137, 0
  br i1 %1138, label %1139, label %1126

; <label>:1139:                                   ; preds = %1126, %1121
  %1140 = phi float* [ %1122, %1121 ], [ %1136, %1126 ]
  %1141 = ptrtoint float* %1140 to i64
  %1142 = bitcast %"class.std::__1::vector.41"* %6 to i64*
  %1143 = load i64, i64* %1142, align 8
  %1144 = inttoptr i64 %1143 to float*
  br label %1145

; <label>:1145:                                   ; preds = %1095, %1139
  %1146 = phi float** [ %1096, %1095 ], [ %1104, %1139 ]
  %1147 = phi float* [ null, %1095 ], [ %1144, %1139 ]
  %1148 = phi i64 [ 0, %1095 ], [ %1143, %1139 ]
  %1149 = phi i64 [ 0, %1095 ], [ %1141, %1139 ]
  %1150 = load i32, i32* %72, align 8
  %1151 = load i32, i32* %74, align 4
  %1152 = bitcast %"class.angle::Matrix"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1152, i8 0, i64 24, i1 false) #18
  %1153 = bitcast float** %1146 to i64*
  %1154 = sub i64 %1149, %1148
  %1155 = ashr exact i64 %1154, 2
  %1156 = icmp eq i64 %1154, 0
  br i1 %1156, label %1176, label %1157

; <label>:1157:                                   ; preds = %1145
  %1158 = icmp ugt i64 %1155, 4611686018427387903
  br i1 %1158, label %1159, label %1161

; <label>:1159:                                   ; preds = %1157
  %1160 = bitcast %"class.angle::Matrix"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1160) #12
  unreachable

; <label>:1161:                                   ; preds = %1157
  %1162 = call i8* @_Znwm(i64 %1154) #20
  %1163 = bitcast i8* %1162 to float*
  %1164 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %1165 = bitcast float** %1164 to i8**
  store i8* %1162, i8** %1165, align 8
  %1166 = bitcast %"class.angle::Matrix"* %0 to i8**
  store i8* %1162, i8** %1166, align 8
  %1167 = getelementptr inbounds float, float* %1163, i64 %1155
  %1168 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %1167, float** %1168, align 8
  %1169 = ptrtoint float* %1147 to i64
  %1170 = sub i64 %1149, %1169
  %1171 = icmp sgt i64 %1170, 0
  br i1 %1171, label %1172, label %1176

; <label>:1172:                                   ; preds = %1161
  %1173 = lshr exact i64 %1170, 2
  %1174 = bitcast float* %1147 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1162, i8* align 4 %1174, i64 %1170, i1 false) #18
  %1175 = getelementptr inbounds float, float* %1163, i64 %1173
  store float* %1175, float** %1164, align 8
  br label %1176

; <label>:1176:                                   ; preds = %1145, %1161, %1172
  %1177 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  store i32 %1150, i32* %1177, align 8
  %1178 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  store i32 %1151, i32* %1178, align 4
  %1179 = icmp eq float* %1147, null
  br i1 %1179, label %1184, label %1180

; <label>:1180:                                   ; preds = %1176
  %1181 = ptrtoint float* %1147 to i64
  store i64 %1181, i64* %1153, align 8
  %1182 = bitcast float* %1147 to i8*
  call void @_ZdlPv(i8* %1182) #20
  %1183 = load i32, i32* %72, align 8
  br label %1184

; <label>:1184:                                   ; preds = %1176, %1180
  %1185 = phi i32 [ %1150, %1176 ], [ %1183, %1180 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1089) #18
  %1186 = icmp eq i32 %1185, 0
  br i1 %1186, label %1187, label %1189

; <label>:1187:                                   ; preds = %1184
  %1188 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  br label %1229

; <label>:1189:                                   ; preds = %1184
  %1190 = fcmp une float %1088, 0.000000e+00
  %1191 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 2
  %1192 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 0
  %1193 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %1194 = load i32, i32* %74, align 4
  br label %1195

; <label>:1195:                                   ; preds = %1189, %1202
  %1196 = phi i32 [ %1185, %1189 ], [ %1203, %1202 ]
  %1197 = phi i32 [ %1194, %1189 ], [ %1204, %1202 ]
  %1198 = phi i32 [ 0, %1189 ], [ %1205, %1202 ]
  %1199 = icmp eq i32 %1197, 0
  br i1 %1199, label %1202, label %1207

; <label>:1200:                                   ; preds = %1218
  %1201 = load i32, i32* %72, align 8
  br label %1202

; <label>:1202:                                   ; preds = %1200, %1195
  %1203 = phi i32 [ %1201, %1200 ], [ %1196, %1195 ]
  %1204 = phi i32 [ %1227, %1200 ], [ 0, %1195 ]
  %1205 = add nuw i32 %1198, 1
  %1206 = icmp ult i32 %1205, %1203
  br i1 %1206, label %1195, label %1229

; <label>:1207:                                   ; preds = %1195, %1218
  %1208 = phi i32 [ %1226, %1218 ], [ 0, %1195 ]
  br i1 %1190, label %1209, label %1218

; <label>:1209:                                   ; preds = %1207
  %1210 = load i32, i32* %1191, align 4
  %1211 = mul i32 %1210, %1198
  %1212 = add i32 %1211, %1208
  %1213 = zext i32 %1212 to i64
  %1214 = load float*, float** %1192, align 8
  %1215 = getelementptr inbounds float, float* %1214, i64 %1213
  %1216 = load float, float* %1215, align 4
  %1217 = fdiv float %1216, %1088
  br label %1218

; <label>:1218:                                   ; preds = %1207, %1209
  %1219 = phi float [ %1217, %1209 ], [ 0.000000e+00, %1207 ]
  %1220 = load i32, i32* %1178, align 4
  %1221 = mul i32 %1220, %1198
  %1222 = add i32 %1221, %1208
  %1223 = zext i32 %1222 to i64
  %1224 = load float*, float** %1193, align 8
  %1225 = getelementptr inbounds float, float* %1224, i64 %1223
  store float %1219, float* %1225, align 4
  %1226 = add nuw i32 %1208, 1
  %1227 = load i32, i32* %74, align 4
  %1228 = icmp ult i32 %1226, %1227
  br i1 %1228, label %1207, label %1200

; <label>:1229:                                   ; preds = %1202, %1187
  %1230 = phi float** [ %1188, %1187 ], [ %1192, %1202 ]
  %1231 = load float*, float** %1230, align 8
  %1232 = icmp eq float* %1231, null
  br i1 %1232, label %1238, label %1233

; <label>:1233:                                   ; preds = %1229
  %1234 = ptrtoint float* %1231 to i64
  %1235 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %5, i64 0, i32 0, i32 0, i32 1
  %1236 = bitcast float** %1235 to i64*
  store i64 %1234, i64* %1236, align 8
  %1237 = bitcast float* %1231 to i8*
  call void @_ZdlPv(i8* %1237) #20
  br label %1238

; <label>:1238:                                   ; preds = %1229, %1233
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1087) #18
  %1239 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 0
  %1240 = load float*, float** %1239, align 8
  %1241 = icmp eq float* %1240, null
  br i1 %1241, label %1247, label %1242

; <label>:1242:                                   ; preds = %1238
  %1243 = ptrtoint float* %1240 to i64
  %1244 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %3, i64 0, i32 0, i32 0, i32 1
  %1245 = bitcast float** %1244 to i64*
  store i64 %1243, i64* %1245, align 8
  %1246 = bitcast float* %1240 to i8*
  call void @_ZdlPv(i8* %1246) #20
  br label %1247

; <label>:1247:                                   ; preds = %1238, %1242
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #18
  ret void
}

declare zeroext i1 @_ZNK2sh14TConstantUnioneqEj(%"class.sh::TConstantUnion"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2sh20TIntermConstantUnion18foldFloatTypeUnaryERKNS_14TConstantUnionEPFffEPS1_(%"class.sh::TIntermConstantUnion"* nocapture readnone, %"class.sh::TConstantUnion"* dereferenceable(8), float (float)* nocapture, %"class.sh::TConstantUnion"* nocapture) local_unnamed_addr #0 align 2 {
  %5 = tail call float @_ZNK2sh14TConstantUnion9getFConstEv(%"class.sh::TConstantUnion"* nonnull %1) #18
  %6 = tail call float %2(float %5) #18
  %7 = bitcast %"class.sh::TConstantUnion"* %3 to float*
  store float %6, float* %7, align 4
  %8 = getelementptr inbounds %"class.sh::TConstantUnion", %"class.sh::TConstantUnion"* %3, i64 0, i32 1
  store i32 1, i32* %8, align 4
  ret void
}

; Function Attrs: nounwind
declare float @sinf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @cosf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @tanf(float) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

; Function Attrs: nounwind
declare float @asinf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @acosf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @atanf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @sinhf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @coshf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @tanhf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @asinhf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @acoshf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @atanhf(float) local_unnamed_addr #8

; Function Attrs: nounwind readnone
declare float @floorf(float) local_unnamed_addr #9

; Function Attrs: nounwind readnone
declare float @truncf(float) local_unnamed_addr #9

; Function Attrs: nounwind readnone
declare float @roundf(float) local_unnamed_addr #9

; Function Attrs: nounwind
declare float @modff(float, float* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #7

; Function Attrs: nounwind readnone
declare float @ceilf(float) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #7

; Function Attrs: nounwind
declare float @expf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @logf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @exp2f(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @sqrtf(float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @atan2f(float, float) local_unnamed_addr #8

; Function Attrs: nounwind
declare float @powf(float, float) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5angle6MatrixIfE8compMultERKS1_(%"class.angle::Matrix"* noalias sret, %"class.angle::Matrix"*, %"class.angle::Matrix"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::vector.41", align 8
  %5 = bitcast %"class.std::__1::vector.41"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #18
  %6 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.angle::Matrix"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #18
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %3
  %15 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  br label %64

; <label>:16:                                     ; preds = %3
  %17 = icmp ugt i64 %12, 4611686018427387903
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %16
  %19 = bitcast %"class.std::__1::vector.41"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %19) #12
  unreachable

; <label>:20:                                     ; preds = %16
  %21 = tail call i8* @_Znwm(i64 %11) #20
  %22 = bitcast i8* %21 to float*
  %23 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 1
  %24 = bitcast float** %23 to i8**
  store i8* %21, i8** %24, align 8
  %25 = bitcast %"class.std::__1::vector.41"* %4 to i8**
  store i8* %21, i8** %25, align 8
  %26 = getelementptr inbounds float, float* %22, i64 %12
  %27 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store float* %26, float** %27, align 8
  %28 = add nsw i64 %12, -1
  %29 = and i64 %12, 3
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %40, label %31

; <label>:31:                                     ; preds = %20, %31
  %32 = phi float* [ %36, %31 ], [ %22, %20 ]
  %33 = phi i64 [ %37, %31 ], [ %12, %20 ]
  %34 = phi i64 [ %38, %31 ], [ %29, %20 ]
  store float 0.000000e+00, float* %32, align 4
  %35 = load float*, float** %23, align 8
  %36 = getelementptr inbounds float, float* %35, i64 1
  store float* %36, float** %23, align 8
  %37 = add i64 %33, -1
  %38 = add i64 %34, -1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %31, !llvm.loop !83

; <label>:40:                                     ; preds = %31, %20
  %41 = phi float* [ undef, %20 ], [ %36, %31 ]
  %42 = phi float* [ %22, %20 ], [ %36, %31 ]
  %43 = phi i64 [ %12, %20 ], [ %37, %31 ]
  %44 = icmp ult i64 %28, 3
  br i1 %44, label %58, label %45

; <label>:45:                                     ; preds = %40, %45
  %46 = phi float* [ %55, %45 ], [ %42, %40 ]
  %47 = phi i64 [ %56, %45 ], [ %43, %40 ]
  store float 0.000000e+00, float* %46, align 4
  %48 = load float*, float** %23, align 8
  %49 = getelementptr inbounds float, float* %48, i64 1
  store float* %49, float** %23, align 8
  store float 0.000000e+00, float* %49, align 4
  %50 = load float*, float** %23, align 8
  %51 = getelementptr inbounds float, float* %50, i64 1
  store float* %51, float** %23, align 8
  store float 0.000000e+00, float* %51, align 4
  %52 = load float*, float** %23, align 8
  %53 = getelementptr inbounds float, float* %52, i64 1
  store float* %53, float** %23, align 8
  store float 0.000000e+00, float* %53, align 4
  %54 = load float*, float** %23, align 8
  %55 = getelementptr inbounds float, float* %54, i64 1
  store float* %55, float** %23, align 8
  %56 = add i64 %47, -4
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %45

; <label>:58:                                     ; preds = %45, %40
  %59 = phi float* [ %41, %40 ], [ %55, %45 ]
  %60 = ptrtoint float* %59 to i64
  %61 = bitcast %"class.std::__1::vector.41"* %4 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = inttoptr i64 %62 to float*
  br label %64

; <label>:64:                                     ; preds = %14, %58
  %65 = phi float** [ %15, %14 ], [ %23, %58 ]
  %66 = phi float* [ null, %14 ], [ %63, %58 ]
  %67 = phi i64 [ 0, %14 ], [ %62, %58 ]
  %68 = phi i64 [ 0, %14 ], [ %60, %58 ]
  %69 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = bitcast %"class.angle::Matrix"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 24, i1 false) #18
  %74 = bitcast float** %65 to i64*
  %75 = sub i64 %68, %67
  %76 = ashr exact i64 %75, 2
  %77 = icmp eq i64 %75, 0
  br i1 %77, label %97, label %78

; <label>:78:                                     ; preds = %64
  %79 = icmp ugt i64 %76, 4611686018427387903
  br i1 %79, label %80, label %82

; <label>:80:                                     ; preds = %78
  %81 = bitcast %"class.angle::Matrix"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %81) #12
  unreachable

; <label>:82:                                     ; preds = %78
  %83 = tail call i8* @_Znwm(i64 %75) #20
  %84 = bitcast i8* %83 to float*
  %85 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %86 = bitcast float** %85 to i8**
  store i8* %83, i8** %86, align 8
  %87 = bitcast %"class.angle::Matrix"* %0 to i8**
  store i8* %83, i8** %87, align 8
  %88 = getelementptr inbounds float, float* %84, i64 %76
  %89 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %88, float** %89, align 8
  %90 = ptrtoint float* %66 to i64
  %91 = sub i64 %68, %90
  %92 = icmp sgt i64 %91, 0
  br i1 %92, label %93, label %97

; <label>:93:                                     ; preds = %82
  %94 = lshr exact i64 %91, 2
  %95 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* align 4 %95, i64 %91, i1 false) #18
  %96 = getelementptr inbounds float, float* %84, i64 %94
  store float* %96, float** %85, align 8
  br label %97

; <label>:97:                                     ; preds = %64, %82, %93
  %98 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  store i32 %70, i32* %98, align 8
  %99 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  store i32 %72, i32* %99, align 4
  %100 = icmp eq float* %66, null
  br i1 %100, label %105, label %101

; <label>:101:                                    ; preds = %97
  %102 = ptrtoint float* %66 to i64
  store i64 %102, i64* %74, align 8
  %103 = bitcast float* %66 to i8*
  tail call void @_ZdlPv(i8* %103) #20
  %104 = load i32, i32* %69, align 8
  br label %105

; <label>:105:                                    ; preds = %97, %101
  %106 = phi i32 [ %70, %97 ], [ %104, %101 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #18
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %152, label %108

; <label>:108:                                    ; preds = %105
  %109 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %110 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %2, i64 0, i32 2
  %111 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %2, i64 0, i32 0, i32 0, i32 0
  %112 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %113 = load i32, i32* %71, align 4
  br label %114

; <label>:114:                                    ; preds = %108, %121
  %115 = phi i32 [ %106, %108 ], [ %122, %121 ]
  %116 = phi i32 [ %113, %108 ], [ %123, %121 ]
  %117 = phi i32 [ 0, %108 ], [ %124, %121 ]
  %118 = icmp eq i32 %116, 0
  br i1 %118, label %121, label %126

; <label>:119:                                    ; preds = %126
  %120 = load i32, i32* %69, align 8
  br label %121

; <label>:121:                                    ; preds = %119, %114
  %122 = phi i32 [ %120, %119 ], [ %115, %114 ]
  %123 = phi i32 [ %150, %119 ], [ 0, %114 ]
  %124 = add nuw i32 %117, 1
  %125 = icmp ult i32 %124, %122
  br i1 %125, label %114, label %152

; <label>:126:                                    ; preds = %114, %126
  %127 = phi i32 [ %150, %126 ], [ %116, %114 ]
  %128 = phi i32 [ %149, %126 ], [ 0, %114 ]
  %129 = mul i32 %127, %117
  %130 = add i32 %129, %128
  %131 = zext i32 %130 to i64
  %132 = load float*, float** %109, align 8
  %133 = getelementptr inbounds float, float* %132, i64 %131
  %134 = load float, float* %133, align 4
  %135 = load i32, i32* %110, align 4
  %136 = mul i32 %135, %117
  %137 = add i32 %136, %128
  %138 = zext i32 %137 to i64
  %139 = load float*, float** %111, align 8
  %140 = getelementptr inbounds float, float* %139, i64 %138
  %141 = load float, float* %140, align 4
  %142 = fmul float %134, %141
  %143 = load i32, i32* %99, align 4
  %144 = mul i32 %143, %117
  %145 = add i32 %144, %128
  %146 = zext i32 %145 to i64
  %147 = load float*, float** %112, align 8
  %148 = getelementptr inbounds float, float* %147, i64 %146
  store float %142, float* %148, align 4
  %149 = add nuw i32 %128, 1
  %150 = load i32, i32* %71, align 4
  %151 = icmp ult i32 %149, %150
  br i1 %151, label %126, label %119

; <label>:152:                                    ; preds = %121, %105
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5angle6MatrixIfE12outerProductERKS1_(%"class.angle::Matrix"* noalias sret, %"class.angle::Matrix"*, %"class.angle::Matrix"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %2, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = mul i32 %7, %5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %17, label %10

; <label>:10:                                     ; preds = %3
  %11 = zext i32 %8 to i64
  %12 = shl nuw nsw i64 %11, 2
  %13 = tail call i8* @_Znwm(i64 %12) #20
  %14 = getelementptr i8, i8* %13, i64 %12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %13, i8 0, i64 %12, i1 false)
  %15 = ptrtoint i8* %13 to i64
  %16 = ptrtoint i8* %14 to i64
  br label %17

; <label>:17:                                     ; preds = %10, %3
  %18 = phi i64 [ 0, %3 ], [ %16, %10 ]
  %19 = phi i64 [ 0, %3 ], [ %15, %10 ]
  %20 = bitcast %"class.angle::Matrix"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #18
  %21 = sub i64 %18, %19
  %22 = ashr exact i64 %21, 2
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %41, label %24

; <label>:24:                                     ; preds = %17
  %25 = icmp ugt i64 %22, 4611686018427387903
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %24
  %27 = bitcast %"class.angle::Matrix"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #12
  unreachable

; <label>:28:                                     ; preds = %24
  %29 = tail call i8* @_Znwm(i64 %21) #20
  %30 = bitcast i8* %29 to float*
  %31 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 1
  %32 = bitcast float** %31 to i8**
  store i8* %29, i8** %32, align 8
  %33 = bitcast %"class.angle::Matrix"* %0 to i8**
  store i8* %29, i8** %33, align 8
  %34 = getelementptr inbounds float, float* %30, i64 %22
  %35 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store float* %34, float** %35, align 8
  %36 = icmp sgt i64 %21, 0
  br i1 %36, label %37, label %41

; <label>:37:                                     ; preds = %28
  %38 = lshr exact i64 %21, 2
  %39 = inttoptr i64 %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %29, i8* align 4 %39, i64 %21, i1 false) #18
  %40 = getelementptr inbounds float, float* %30, i64 %38
  store float* %40, float** %31, align 8
  br label %41

; <label>:41:                                     ; preds = %17, %28, %37
  %42 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 1
  store i32 %7, i32* %42, align 8
  %43 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 2
  store i32 %5, i32* %43, align 4
  %44 = icmp eq i64 %19, 0
  br i1 %44, label %48, label %45

; <label>:45:                                     ; preds = %41
  %46 = inttoptr i64 %19 to i8*
  tail call void @_ZdlPv(i8* %46) #20
  %47 = load i32, i32* %6, align 8
  br label %48

; <label>:48:                                     ; preds = %41, %45
  %49 = phi i32 [ %7, %41 ], [ %47, %45 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %88, label %51

; <label>:51:                                     ; preds = %48
  %52 = icmp eq i32 %5, 0
  %53 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 2
  %54 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %1, i64 0, i32 0, i32 0, i32 0
  %55 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %2, i64 0, i32 0, i32 0, i32 0
  %56 = getelementptr inbounds %"class.angle::Matrix", %"class.angle::Matrix"* %0, i64 0, i32 0, i32 0, i32 0
  %57 = zext i32 %5 to i64
  br label %58

; <label>:58:                                     ; preds = %51, %63
  %59 = phi i32 [ %49, %51 ], [ %64, %63 ]
  %60 = phi i32 [ 0, %51 ], [ %65, %63 ]
  br i1 %52, label %63, label %67

; <label>:61:                                     ; preds = %67
  %62 = load i32, i32* %6, align 8
  br label %63

; <label>:63:                                     ; preds = %61, %58
  %64 = phi i32 [ %62, %61 ], [ %59, %58 ]
  %65 = add nuw i32 %60, 1
  %66 = icmp ult i32 %65, %64
  br i1 %66, label %58, label %88

; <label>:67:                                     ; preds = %58, %67
  %68 = phi i64 [ %86, %67 ], [ 0, %58 ]
  %69 = load i32, i32* %53, align 4
  %70 = mul i32 %69, %60
  %71 = zext i32 %70 to i64
  %72 = load float*, float** %54, align 8
  %73 = getelementptr inbounds float, float* %72, i64 %71
  %74 = load float, float* %73, align 4
  %75 = load float*, float** %55, align 8
  %76 = getelementptr inbounds float, float* %75, i64 %68
  %77 = load float, float* %76, align 4
  %78 = fmul float %74, %77
  %79 = load i32, i32* %43, align 4
  %80 = mul i32 %79, %60
  %81 = trunc i64 %68 to i32
  %82 = add i32 %80, %81
  %83 = zext i32 %82 to i64
  %84 = load float*, float** %56, align 8
  %85 = getelementptr inbounds float, float* %84, i64 %83
  store float %78, float* %85, align 4
  %86 = add nuw nsw i64 %68, 1
  %87 = icmp eq i64 %86, %57
  br i1 %87, label %61, label %67

; <label>:88:                                     ; preds = %63, %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh28TIntermPreprocessorDirectiveC2ENS_21PreprocessorDirectiveENS_15ImmutableStringE(%"class.sh::TIntermPreprocessorDirective"* nocapture, i32, i8*, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 0, i32 1, i32 0
  %7 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh28TIntermPreprocessorDirectiveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %8 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 1
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 2, i32 0
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %"class.sh::TIntermPreprocessorDirective", %"class.sh::TIntermPreprocessorDirective"* %0, i64 0, i32 2, i32 1
  store i64 %3, i64* %10, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2sh28TIntermPreprocessorDirectiveD2Ev(%"class.sh::TIntermPreprocessorDirective"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2sh28TIntermPreprocessorDirectiveD0Ev(%"class.sh::TIntermPreprocessorDirective"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK2sh28TIntermPreprocessorDirective13getChildCountEv(%"class.sh::TIntermPreprocessorDirective"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i64 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.sh::TIntermNode"* @_ZNK2sh28TIntermPreprocessorDirective12getChildNodeEm(%"class.sh::TIntermPreprocessorDirective"* nocapture readnone, i64) unnamed_addr #3 align 2 {
  ret %"class.sh::TIntermNode"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh11TIntermNodeD2Ev(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh12TIntermTypedD0Ev(%"class.sh::TIntermTyped"*) unnamed_addr #10 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @_ZN2sh11TIntermNode8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZN2sh12TIntermTyped10getAsTypedEv(%"class.sh::TIntermTyped"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermTyped"* %0
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermConstantUnion"* @_ZN2sh11TIntermNode18getAsConstantUnionEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermConstantUnion"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermFunctionDefinition"* @_ZN2sh11TIntermNode23getAsFunctionDefinitionEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermFunctionDefinition"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermAggregate"* @_ZN2sh11TIntermNode14getAsAggregateEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermAggregate"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBlock"* @_ZN2sh11TIntermNode10getAsBlockEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermBlock"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermFunctionPrototype"* @_ZN2sh11TIntermNode26getAsFunctionPrototypeNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermFunctionPrototype"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermInvariantDeclaration"* @_ZN2sh11TIntermNode29getAsInvariantDeclarationNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermInvariantDeclaration"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermDeclaration"* @_ZN2sh11TIntermNode20getAsDeclarationNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermDeclaration"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSwizzle"* @_ZN2sh11TIntermNode16getAsSwizzleNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermSwizzle"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBinary"* @_ZN2sh11TIntermNode15getAsBinaryNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermBinary"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermUnary"* @_ZN2sh11TIntermNode14getAsUnaryNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermUnary"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTernary"* @_ZN2sh11TIntermNode16getAsTernaryNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermTernary"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermIfElse"* @_ZN2sh11TIntermNode15getAsIfElseNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermIfElse"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSwitch"* @_ZN2sh11TIntermNode15getAsSwitchNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermSwitch"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermCase"* @_ZN2sh11TIntermNode13getAsCaseNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermCase"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSymbol"* @_ZN2sh11TIntermNode15getAsSymbolNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermSymbol"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermLoop"* @_ZN2sh11TIntermNode13getAsLoopNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermLoop"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBranch"* @_ZN2sh11TIntermNode15getAsBranchNodeEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermBranch"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermPreprocessorDirective"* @_ZN2sh11TIntermNode26getAsPreprocessorDirectiveEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermPreprocessorDirective"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZN2sh12TIntermTyped4foldEPNS_12TDiagnosticsE(%"class.sh::TIntermTyped"*, %"class.sh::TDiagnostics"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermTyped"* %0
}

; Function Attrs: inlinehint norecurse nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh13TIntermSymbolD0Ev(%"class.sh::TIntermSymbol"*) unnamed_addr #11 comdat align 2 {
  ret void
}

declare void @_ZN2sh13TIntermSymbol8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermSymbol"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh13TIntermSymbol5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermSymbol"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermSymbol"* @_ZN2sh13TIntermSymbol15getAsSymbolNodeEv(%"class.sh::TIntermSymbol"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermSymbol"* %0
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh13TIntermSymbol16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermSymbol"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZNK2sh13TIntermSymbol8deepCopyEv(%"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %2, i64 32) #18
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* nonnull align 4 %7, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermSymbolE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 24
  %9 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %0, i64 0, i32 1
  %10 = bitcast %"class.sh::TVariable"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast i8* %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = bitcast i8* %3 to %"class.sh::TIntermTyped"*
  ret %"class.sh::TIntermTyped"* %13
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2sh13TIntermSymbol14hasSideEffectsEv(%"class.sh::TIntermSymbol"*) unnamed_addr #6 comdat align 2 {
  ret i1 false
}

; Function Attrs: inlinehint norecurse nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh20TIntermConstantUnionD0Ev(%"class.sh::TIntermConstantUnion"*) unnamed_addr #11 comdat align 2 {
  ret void
}

declare void @_ZN2sh20TIntermConstantUnion8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh20TIntermConstantUnion5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermConstantUnion"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermConstantUnion"* @_ZN2sh20TIntermConstantUnion18getAsConstantUnionEv(%"class.sh::TIntermConstantUnion"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermConstantUnion"* %0
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh20TIntermConstantUnion16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermConstantUnion"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZNK2sh20TIntermConstantUnion8deepCopyEv(%"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %2, i64 160) #18
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* nonnull align 4 %7, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 24
  %9 = bitcast i8* %8 to %"class.sh::TType"*
  %10 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %9, %"class.sh::TType"* nonnull dereferenceable(128) %10) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh20TIntermConstantUnionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %0, i64 0, i32 1
  %12 = bitcast %"class.sh::TConstantUnion"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %3, i64 152
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = bitcast i8* %3 to %"class.sh::TIntermTyped"*
  ret %"class.sh::TIntermTyped"* %16
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2sh20TIntermConstantUnion14hasSideEffectsEv(%"class.sh::TIntermConstantUnion"*) unnamed_addr #6 comdat align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(128) %"class.sh::TType"* @_ZNK2sh17TIntermExpression7getTypeEv(%"class.sh::TIntermExpression"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermExpression", %"class.sh::TIntermExpression"* %0, i64 0, i32 1
  ret %"class.sh::TType"* %2
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermAggregateD2Ev(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"** %5, null
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %1
  %8 = ptrtoint %"class.sh::TIntermNode"** %5 to i64
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  store i64 %8, i64* %10, align 8
  br label %11

; <label>:11:                                     ; preds = %1, %7
  ret void
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermAggregateD0Ev(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 1, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %4, align 8
  %6 = icmp eq %"class.sh::TIntermNode"** %5, null
  br i1 %6, label %11, label %7

; <label>:7:                                      ; preds = %1
  %8 = ptrtoint %"class.sh::TIntermNode"** %5 to i64
  %9 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  store i64 %8, i64* %10, align 8
  br label %11

; <label>:11:                                     ; preds = %1, %7
  ret void
}

declare void @_ZN2sh16TIntermAggregate8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermAggregate"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh16TIntermAggregate5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermAggregate"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermAggregate"* @_ZN2sh16TIntermAggregate14getAsAggregateEv(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermAggregate"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZNK2sh16TIntermAggregate8deepCopyEv(%"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %2, i64 208) #18
  %4 = bitcast i8* %3 to %"class.sh::TIntermAggregate"*
  tail call void @_ZN2sh16TIntermAggregateC2ERKS0_(%"class.sh::TIntermAggregate"* %4, %"class.sh::TIntermAggregate"* dereferenceable(208) %0)
  %5 = bitcast i8* %3 to %"class.sh::TIntermTyped"*
  ret %"class.sh::TIntermTyped"* %5
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TVector.15"* @_ZN2sh16TIntermAggregate11getSequenceEv(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2
  ret %"class.sh::TVector.15"* %2
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TVector.15"* @_ZNK2sh16TIntermAggregate11getSequenceEv(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 0, i32 2
  ret %"class.sh::TVector.15"* %2
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn160_N2sh16TIntermAggregateD1Ev(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 -1, i32 0, i32 0, i32 1, i32 5, i32 1
  %3 = bitcast i32* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i32, i32* %2, i64 40
  %5 = bitcast i32* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i32, i32* %2, i64 42
  %7 = bitcast i32* %6 to %"class.sh::TIntermNode"***
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = icmp eq %"class.sh::TIntermNode"** %8, null
  br i1 %9, label %14, label %10

; <label>:10:                                     ; preds = %1
  %11 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %12 = getelementptr inbounds i32, i32* %2, i64 44
  %13 = bitcast i32* %12 to i64*
  store i64 %11, i64* %13, align 8
  br label %14

; <label>:14:                                     ; preds = %1, %10
  ret void
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn160_N2sh16TIntermAggregateD0Ev(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 -1, i32 0, i32 0, i32 1, i32 5, i32 1
  %3 = bitcast i32* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i32, i32* %2, i64 40
  %5 = bitcast i32* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [36 x i8*], [6 x i8*] }, { [36 x i8*], [6 x i8*] }* @_ZTVN2sh16TIntermAggregateE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i32, i32* %2, i64 42
  %7 = bitcast i32* %6 to %"class.sh::TIntermNode"***
  %8 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %7, align 8
  %9 = icmp eq %"class.sh::TIntermNode"** %8, null
  br i1 %9, label %14, label %10

; <label>:10:                                     ; preds = %1
  %11 = ptrtoint %"class.sh::TIntermNode"** %8 to i64
  %12 = getelementptr inbounds i32, i32* %2, i64 44
  %13 = bitcast i32* %12 to i64*
  store i64 %11, i64* %13, align 8
  br label %14

; <label>:14:                                     ; preds = %1, %10
  ret void
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TVector.15"* @_ZThn160_N2sh16TIntermAggregate11getSequenceEv(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 -1, i32 0, i32 0, i32 1, i32 5, i32 1
  %3 = getelementptr inbounds i32, i32* %2, i64 42
  %4 = bitcast i32* %3 to %"class.sh::TVector.15"*
  ret %"class.sh::TVector.15"* %4
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TVector.15"* @_ZThn160_NK2sh16TIntermAggregate11getSequenceEv(%"class.sh::TIntermAggregate"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %0, i64 -1, i32 0, i32 0, i32 1, i32 5, i32 1
  %3 = getelementptr inbounds i32, i32* %2, i64 42
  %4 = bitcast i32* %3 to %"class.sh::TVector.15"*
  ret %"class.sh::TVector.15"* %4
}

; Function Attrs: inlinehint norecurse nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh13TIntermBinaryD0Ev(%"class.sh::TIntermBinary"*) unnamed_addr #11 comdat align 2 {
  ret void
}

declare void @_ZN2sh13TIntermBinary8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBinary"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh13TIntermBinary5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermBinary"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermBinary"* @_ZN2sh13TIntermBinary15getAsBinaryNodeEv(%"class.sh::TIntermBinary"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermBinary"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZNK2sh13TIntermBinary8deepCopyEv(%"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %3 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %2, i64 184) #18
  %4 = bitcast i8* %3 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh12TIntermTypedE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %6 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.sh::TSourceLoc"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* nonnull align 4 %7, i64 16, i1 false) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh17TIntermExpressionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %8 = getelementptr inbounds i8, i8* %3, i64 24
  %9 = bitcast i8* %8 to %"class.sh::TType"*
  %10 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 0, i32 1
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* nonnull %9, %"class.sh::TType"* nonnull dereferenceable(128) %10) #18
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh15TIntermOperatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %11 = getelementptr inbounds i8, i8* %3, i64 152
  %12 = bitcast i8* %11 to i32*
  %13 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %12, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [34 x i8*] }, { [34 x i8*] }* @_ZTVN2sh13TIntermBinaryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %15 = getelementptr inbounds i8, i8* %3, i64 176
  %16 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 4
  %17 = load i8, i8* %16, align 8, !range !33
  store i8 %17, i8* %15, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %19 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %18, align 8
  %20 = bitcast %"class.sh::TIntermTyped"* %19 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %21 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %21, i64 26
  %23 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %22, align 8
  %24 = tail call %"class.sh::TIntermTyped"* %23(%"class.sh::TIntermTyped"* %19) #18
  %25 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %26 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %25, align 8
  %27 = bitcast %"class.sh::TIntermTyped"* %26 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %28 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %28, i64 26
  %30 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %29, align 8
  %31 = tail call %"class.sh::TIntermTyped"* %30(%"class.sh::TIntermTyped"* %26) #18
  %32 = getelementptr inbounds i8, i8* %3, i64 160
  %33 = bitcast i8* %32 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %24, %"class.sh::TIntermTyped"** %33, align 8
  %34 = getelementptr inbounds i8, i8* %3, i64 168
  %35 = bitcast i8* %34 to %"class.sh::TIntermTyped"**
  store %"class.sh::TIntermTyped"* %31, %"class.sh::TIntermTyped"** %35, align 8
  %36 = bitcast i8* %3 to %"class.sh::TIntermTyped"*
  ret %"class.sh::TIntermTyped"* %36
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2sh13TIntermBinary14hasSideEffectsEv(%"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = tail call zeroext i1 @_Z12IsAssignment9TOperator(i32 %3) #18
  br i1 %4, label %21, label %5

; <label>:5:                                      ; preds = %1
  %6 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 2
  %7 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %6, align 8
  %8 = bitcast %"class.sh::TIntermTyped"* %7 to i1 (%"class.sh::TIntermTyped"*)***
  %9 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %8, align 8
  %10 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %9, i64 30
  %11 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %10, align 8
  %12 = tail call zeroext i1 %11(%"class.sh::TIntermTyped"* %7) #18
  br i1 %12, label %21, label %13

; <label>:13:                                     ; preds = %5
  %14 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %0, i64 0, i32 3
  %15 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %14, align 8
  %16 = bitcast %"class.sh::TIntermTyped"* %15 to i1 (%"class.sh::TIntermTyped"*)***
  %17 = load i1 (%"class.sh::TIntermTyped"*)**, i1 (%"class.sh::TIntermTyped"*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %17, i64 30
  %19 = load i1 (%"class.sh::TIntermTyped"*)*, i1 (%"class.sh::TIntermTyped"*)** %18, align 8
  %20 = tail call zeroext i1 %19(%"class.sh::TIntermTyped"* %15) #18
  br label %21

; <label>:21:                                     ; preds = %13, %5, %1
  %22 = phi i1 [ true, %5 ], [ true, %1 ], [ %20, %13 ]
  ret i1 %22
}

declare void @_ZN2sh28TIntermPreprocessorDirective8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermTraverser"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh28TIntermPreprocessorDirective5visitENS_5VisitEPNS_16TIntermTraverserE(%"class.sh::TIntermPreprocessorDirective"*, i32, %"class.sh::TIntermTraverser"*) unnamed_addr #1

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermTyped"* @_ZN2sh11TIntermNode10getAsTypedEv(%"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermTyped"* null
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden %"class.sh::TIntermPreprocessorDirective"* @_ZN2sh28TIntermPreprocessorDirective26getAsPreprocessorDirectiveEv(%"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #6 comdat align 2 {
  ret %"class.sh::TIntermPreprocessorDirective"* %0
}

; Function Attrs: norecurse nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh28TIntermPreprocessorDirective16replaceChildNodeEPNS_11TIntermNodeES2_(%"class.sh::TIntermPreprocessorDirective"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*) unnamed_addr #6 comdat align 2 {
  ret i1 false
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh17TIntermExpressionD0Ev(%"class.sh::TIntermExpression"*) unnamed_addr #10 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #1

declare i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator*, i64) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh15TIntermOperatorD0Ev(%"class.sh::TIntermOperator"*) unnamed_addr #10 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2sh15TIntermOperator14hasSideEffectsEv(%"class.sh::TIntermOperator"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TIntermOperator", %"class.sh::TIntermOperator"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = tail call zeroext i1 @_Z12IsAssignment9TOperator(i32 %3) #18
  ret i1 %4
}

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #12

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIi14pool_allocatorIiEE6assignIPiEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.24"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %1 to i64
  %5 = ptrtoint i32* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.24"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %82, label %17

; <label>:17:                                     ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %4
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

; <label>:30:                                     ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #18
  br label %33

; <label>:33:                                     ; preds = %17, %30
  br i1 %23, label %34, label %80

; <label>:34:                                     ; preds = %33
  %35 = icmp eq i32* %25, %2
  br i1 %35, label %154, label %36

; <label>:36:                                     ; preds = %34
  %37 = load i32*, i32** %18, align 8
  %38 = xor i64 %22, -1
  %39 = getelementptr i32, i32* %2, i64 %38
  %40 = ptrtoint i32* %39 to i64
  %41 = sub i64 %40, %4
  %42 = lshr i64 %41, 2
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 3
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %56, label %46

; <label>:46:                                     ; preds = %36, %46
  %47 = phi i32* [ %53, %46 ], [ %37, %36 ]
  %48 = phi i32* [ %51, %46 ], [ %24, %36 ]
  %49 = phi i64 [ %54, %46 ], [ %44, %36 ]
  %50 = load i32, i32* %48, align 4
  store i32 %50, i32* %47, align 4
  %51 = getelementptr inbounds i32, i32* %48, i64 1
  %52 = load i32*, i32** %18, align 8
  %53 = getelementptr inbounds i32, i32* %52, i64 1
  store i32* %53, i32** %18, align 8
  %54 = add i64 %49, -1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %46, !llvm.loop !84

; <label>:56:                                     ; preds = %46, %36
  %57 = phi i32* [ %37, %36 ], [ %53, %46 ]
  %58 = phi i32* [ %24, %36 ], [ %51, %46 ]
  %59 = icmp ult i64 %41, 12
  br i1 %59, label %154, label %60

; <label>:60:                                     ; preds = %56, %60
  %61 = phi i32* [ %78, %60 ], [ %57, %56 ]
  %62 = phi i32* [ %76, %60 ], [ %58, %56 ]
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %61, align 4
  %64 = getelementptr inbounds i32, i32* %62, i64 1
  %65 = load i32*, i32** %18, align 8
  %66 = getelementptr inbounds i32, i32* %65, i64 1
  store i32* %66, i32** %18, align 8
  %67 = load i32, i32* %64, align 4
  store i32 %67, i32* %66, align 4
  %68 = getelementptr inbounds i32, i32* %62, i64 2
  %69 = load i32*, i32** %18, align 8
  %70 = getelementptr inbounds i32, i32* %69, i64 1
  store i32* %70, i32** %18, align 8
  %71 = load i32, i32* %68, align 4
  store i32 %71, i32* %70, align 4
  %72 = getelementptr inbounds i32, i32* %62, i64 3
  %73 = load i32*, i32** %18, align 8
  %74 = getelementptr inbounds i32, i32* %73, i64 1
  store i32* %74, i32** %18, align 8
  %75 = load i32, i32* %72, align 4
  store i32 %75, i32* %74, align 4
  %76 = getelementptr inbounds i32, i32* %62, i64 4
  %77 = load i32*, i32** %18, align 8
  %78 = getelementptr inbounds i32, i32* %77, i64 1
  store i32* %78, i32** %18, align 8
  %79 = icmp eq i32* %76, %2
  br i1 %79, label %154, label %60

; <label>:80:                                     ; preds = %33
  %81 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %81, i32** %18, align 8
  br label %154

; <label>:82:                                     ; preds = %3
  %83 = icmp eq i64 %12, 0
  br i1 %83, label %86, label %84

; <label>:84:                                     ; preds = %82
  %85 = bitcast %"class.std::__1::vector.24"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #18
  br label %86

; <label>:86:                                     ; preds = %82, %84
  %87 = phi i64 [ %10, %82 ], [ 0, %84 ]
  %88 = icmp ugt i64 %7, 4611686018427387903
  br i1 %88, label %89, label %91

; <label>:89:                                     ; preds = %86
  %90 = bitcast %"class.std::__1::vector.24"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %90) #12
  unreachable

; <label>:91:                                     ; preds = %86
  %92 = ashr exact i64 %87, 2
  %93 = icmp ult i64 %92, 2305843009213693951
  br i1 %93, label %94, label %101

; <label>:94:                                     ; preds = %91
  %95 = ashr exact i64 %87, 1
  %96 = icmp ult i64 %95, %7
  br i1 %96, label %101, label %97

; <label>:97:                                     ; preds = %94
  %98 = icmp ugt i64 %95, 4611686018427387903
  br i1 %98, label %99, label %101

; <label>:99:                                     ; preds = %97
  %100 = bitcast %"class.std::__1::vector.24"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %100) #12
  unreachable

; <label>:101:                                    ; preds = %94, %91, %97
  %102 = phi i64 [ %95, %97 ], [ 4611686018427387903, %91 ], [ %7, %94 ]
  %103 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %104 = shl i64 %102, 2
  %105 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* nonnull %103, i64 %104) #18
  %106 = bitcast i8* %105 to i32*
  %107 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %0, i64 0, i32 0, i32 1
  %108 = bitcast i32** %107 to i8**
  store i8* %105, i8** %108, align 8
  %109 = bitcast %"class.std::__1::vector.24"* %0 to i8**
  store i8* %105, i8** %109, align 8
  %110 = getelementptr inbounds i32, i32* %106, i64 %102
  store i32* %110, i32** %8, align 8
  %111 = icmp eq i32* %1, %2
  br i1 %111, label %154, label %112

; <label>:112:                                    ; preds = %101
  %113 = getelementptr i32, i32* %2, i64 -1
  %114 = ptrtoint i32* %113 to i64
  %115 = sub i64 %114, %4
  %116 = lshr i64 %115, 2
  %117 = add nuw nsw i64 %116, 1
  %118 = and i64 %117, 3
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %130, label %120

; <label>:120:                                    ; preds = %112, %120
  %121 = phi i32* [ %127, %120 ], [ %106, %112 ]
  %122 = phi i32* [ %125, %120 ], [ %1, %112 ]
  %123 = phi i64 [ %128, %120 ], [ %118, %112 ]
  %124 = load i32, i32* %122, align 4
  store i32 %124, i32* %121, align 4
  %125 = getelementptr inbounds i32, i32* %122, i64 1
  %126 = load i32*, i32** %107, align 8
  %127 = getelementptr inbounds i32, i32* %126, i64 1
  store i32* %127, i32** %107, align 8
  %128 = add i64 %123, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %120, !llvm.loop !85

; <label>:130:                                    ; preds = %120, %112
  %131 = phi i32* [ %106, %112 ], [ %127, %120 ]
  %132 = phi i32* [ %1, %112 ], [ %125, %120 ]
  %133 = icmp ult i64 %115, 12
  br i1 %133, label %154, label %134

; <label>:134:                                    ; preds = %130, %134
  %135 = phi i32* [ %152, %134 ], [ %131, %130 ]
  %136 = phi i32* [ %150, %134 ], [ %132, %130 ]
  %137 = load i32, i32* %136, align 4
  store i32 %137, i32* %135, align 4
  %138 = getelementptr inbounds i32, i32* %136, i64 1
  %139 = load i32*, i32** %107, align 8
  %140 = getelementptr inbounds i32, i32* %139, i64 1
  store i32* %140, i32** %107, align 8
  %141 = load i32, i32* %138, align 4
  store i32 %141, i32* %140, align 4
  %142 = getelementptr inbounds i32, i32* %136, i64 2
  %143 = load i32*, i32** %107, align 8
  %144 = getelementptr inbounds i32, i32* %143, i64 1
  store i32* %144, i32** %107, align 8
  %145 = load i32, i32* %142, align 4
  store i32 %145, i32* %144, align 4
  %146 = getelementptr inbounds i32, i32* %136, i64 3
  %147 = load i32*, i32** %107, align 8
  %148 = getelementptr inbounds i32, i32* %147, i64 1
  store i32* %148, i32** %107, align 8
  %149 = load i32, i32* %146, align 4
  store i32 %149, i32* %148, align 4
  %150 = getelementptr inbounds i32, i32* %136, i64 4
  %151 = load i32*, i32** %107, align 8
  %152 = getelementptr inbounds i32, i32* %151, i64 1
  store i32* %152, i32** %107, align 8
  %153 = icmp eq i32* %150, %2
  br i1 %153, label %154, label %134

; <label>:154:                                    ; preds = %56, %60, %130, %134, %101, %80, %34
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #14

declare dereferenceable(24) %"class.std::__1::basic_string.33"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string.33"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_(%"class.std::__1::vector.41"*, float* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %0, i64 0, i32 0, i32 1
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.41"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 2
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 4611686018427387903
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %2
  %13 = bitcast %"class.std::__1::vector.41"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 2
  %20 = icmp ult i64 %19, 2305843009213693951
  br i1 %20, label %21, label %29

; <label>:21:                                     ; preds = %14
  %22 = ashr exact i64 %18, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

; <label>:26:                                     ; preds = %21
  %27 = icmp ugt i64 %24, 4611686018427387903
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %26
  tail call void @abort() #12
  unreachable

; <label>:29:                                     ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 4611686018427387903, %14 ]
  %31 = shl i64 %30, 2
  %32 = tail call i8* @_Znwm(i64 %31) #20
  %33 = bitcast i8* %32 to float*
  br label %34

; <label>:34:                                     ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi i8* [ %32, %29 ], [ null, %21 ]
  %37 = phi float* [ %33, %29 ], [ null, %21 ]
  %38 = getelementptr inbounds float, float* %37, i64 %9
  %39 = getelementptr inbounds float, float* %37, i64 %35
  %40 = ptrtoint float* %39 to i64
  %41 = bitcast float* %1 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = bitcast float* %38 to i32*
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds float, float* %38, i64 1
  %45 = ptrtoint float* %44 to i64
  %46 = ptrtoint float* %37 to i64
  %47 = icmp sgt i64 %8, 0
  br i1 %47, label %48, label %50

; <label>:48:                                     ; preds = %34
  %49 = inttoptr i64 %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %49, i64 %8, i1 false) #18
  br label %50

; <label>:50:                                     ; preds = %34, %48
  store i64 %46, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %40, i64* %16, align 8
  %51 = icmp eq i64 %7, 0
  br i1 %51, label %54, label %52

; <label>:52:                                     ; preds = %50
  %53 = inttoptr i64 %7 to i8*
  tail call void @_ZdlPv(i8* %53) #20
  br label %54

; <label>:54:                                     ; preds = %50, %52
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #15

; Function Attrs: nobuiltin
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #16

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #17

declare float @_ZN2gl16float16ToFloat32Et(i16 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE21__push_back_slow_pathIRKS3_EEvOT_(%"class.std::__1::vector.16"*, %"class.sh::TIntermNode"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TIntermNode"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %2
  %13 = bitcast %"class.std::__1::vector.16"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.sh::TIntermNode"*** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %32, label %26

; <label>:26:                                     ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 2305843009213693951, %14 ]
  %28 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %29 = shl i64 %27, 3
  %30 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* nonnull %28, i64 %29) #18
  %31 = bitcast i8* %30 to %"class.sh::TIntermNode"**
  br label %32

; <label>:32:                                     ; preds = %21, %26
  %33 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %34 = phi %"class.sh::TIntermNode"** [ %31, %26 ], [ null, %21 ]
  %35 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 %9
  %36 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 %33
  %37 = ptrtoint %"class.sh::TIntermNode"** %36 to i64
  %38 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.sh::TIntermNode"** %35 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 1
  %42 = ptrtoint %"class.sh::TIntermNode"** %41 to i64
  %43 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 0
  %44 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %43, align 8
  %45 = ptrtoint %"class.sh::TIntermNode"** %44 to i64
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %3, align 8
  %47 = icmp eq %"class.sh::TIntermNode"** %46, %44
  br i1 %47, label %176, label %48

; <label>:48:                                     ; preds = %32
  %49 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %50 = ptrtoint %"class.sh::TIntermNode"** %49 to i64
  %51 = sub i64 %50, %45
  %52 = lshr i64 %51, 3
  %53 = xor i64 %52, -1
  %54 = add nsw i64 %9, %53
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %56 = ptrtoint %"class.sh::TIntermNode"** %55 to i64
  %57 = sub i64 %56, %45
  %58 = lshr i64 %57, 3
  %59 = add nuw nsw i64 %58, 1
  %60 = icmp ult i64 %59, 4
  br i1 %60, label %105, label %61

; <label>:61:                                     ; preds = %48
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %63 = ptrtoint %"class.sh::TIntermNode"** %62 to i64
  %64 = sub i64 %63, %45
  %65 = lshr i64 %64, 3
  %66 = xor i64 %65, -1
  %67 = add nsw i64 %9, %66
  %68 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 %67
  %69 = xor i64 %65, -1
  %70 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %69
  %71 = icmp ult %"class.sh::TIntermNode"** %68, %46
  %72 = icmp ult %"class.sh::TIntermNode"** %70, %35
  %73 = and i1 %71, %72
  br i1 %73, label %105, label %74

; <label>:74:                                     ; preds = %61
  %75 = and i64 %59, 3
  %76 = sub nsw i64 %59, %75
  %77 = xor i64 %58, -1
  %78 = add nsw i64 %75, %77
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 %78
  %80 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %78
  %81 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 -1
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  br label %83

; <label>:83:                                     ; preds = %83, %74
  %84 = phi i64 [ 0, %74 ], [ %101, %83 ]
  %85 = sub i64 0, %84
  %86 = sub i64 0, %84
  %87 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 %85
  %88 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %82, i64 %86
  %89 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %88, i64 -1
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !86
  %92 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %88, i64 -2
  %93 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !86
  %96 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %87, i64 -1
  %97 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %97, align 8, !alias.scope !89, !noalias !86
  %98 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %87, i64 -2
  %99 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %98, i64 -1
  %100 = bitcast %"class.sh::TIntermNode"** %99 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %100, align 8, !alias.scope !89, !noalias !86
  %101 = add i64 %84, 4
  %102 = icmp eq i64 %101, %76
  br i1 %102, label %103, label %83, !llvm.loop !91

; <label>:103:                                    ; preds = %83
  %104 = icmp eq i64 %75, 0
  br i1 %104, label %174, label %105

; <label>:105:                                    ; preds = %103, %61, %48
  %106 = phi %"class.sh::TIntermNode"** [ %35, %61 ], [ %35, %48 ], [ %79, %103 ]
  %107 = phi %"class.sh::TIntermNode"** [ %46, %61 ], [ %46, %48 ], [ %80, %103 ]
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 -1
  %109 = ptrtoint %"class.sh::TIntermNode"** %108 to i64
  %110 = sub i64 %109, %45
  %111 = lshr i64 %110, 3
  %112 = add nuw nsw i64 %111, 1
  %113 = and i64 %112, 7
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %126, label %115

; <label>:115:                                    ; preds = %105, %115
  %116 = phi %"class.sh::TIntermNode"** [ %119, %115 ], [ %106, %105 ]
  %117 = phi %"class.sh::TIntermNode"** [ %120, %115 ], [ %107, %105 ]
  %118 = phi i64 [ %124, %115 ], [ %113, %105 ]
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -1
  %121 = bitcast %"class.sh::TIntermNode"** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %"class.sh::TIntermNode"** %119 to i64*
  store i64 %122, i64* %123, align 8
  %124 = add i64 %118, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %115, !llvm.loop !92

; <label>:126:                                    ; preds = %115, %105
  %127 = phi %"class.sh::TIntermNode"** [ %106, %105 ], [ %119, %115 ]
  %128 = phi %"class.sh::TIntermNode"** [ %107, %105 ], [ %120, %115 ]
  %129 = icmp ult i64 %110, 56
  br i1 %129, label %174, label %130

; <label>:130:                                    ; preds = %126, %130
  %131 = phi %"class.sh::TIntermNode"** [ %168, %130 ], [ %127, %126 ]
  %132 = phi %"class.sh::TIntermNode"** [ %169, %130 ], [ %128, %126 ]
  %133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -1
  %134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -1
  %135 = bitcast %"class.sh::TIntermNode"** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast %"class.sh::TIntermNode"** %133 to i64*
  store i64 %136, i64* %137, align 8
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -2
  %139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -2
  %140 = bitcast %"class.sh::TIntermNode"** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %"class.sh::TIntermNode"** %138 to i64*
  store i64 %141, i64* %142, align 8
  %143 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -3
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -3
  %145 = bitcast %"class.sh::TIntermNode"** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast %"class.sh::TIntermNode"** %143 to i64*
  store i64 %146, i64* %147, align 8
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -4
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -4
  %150 = bitcast %"class.sh::TIntermNode"** %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.sh::TIntermNode"** %148 to i64*
  store i64 %151, i64* %152, align 8
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -5
  %154 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -5
  %155 = bitcast %"class.sh::TIntermNode"** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %"class.sh::TIntermNode"** %153 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -6
  %159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -6
  %160 = bitcast %"class.sh::TIntermNode"** %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = bitcast %"class.sh::TIntermNode"** %158 to i64*
  store i64 %161, i64* %162, align 8
  %163 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -7
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -7
  %165 = bitcast %"class.sh::TIntermNode"** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  store i64 %166, i64* %167, align 8
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -8
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -8
  %170 = bitcast %"class.sh::TIntermNode"** %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  store i64 %171, i64* %172, align 8
  %173 = icmp eq %"class.sh::TIntermNode"** %169, %44
  br i1 %173, label %174, label %130, !llvm.loop !93

; <label>:174:                                    ; preds = %126, %130, %103
  %175 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 %54
  br label %176

; <label>:176:                                    ; preds = %32, %174
  %177 = phi %"class.sh::TIntermNode"** [ %175, %174 ], [ %35, %32 ]
  %178 = ptrtoint %"class.sh::TIntermNode"** %177 to i64
  store i64 %178, i64* %6, align 8
  store i64 %42, i64* %4, align 8
  store i64 %37, i64* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE21__push_back_slow_pathIS3_EEvOT_(%"class.std::__1::vector.16"*, %"class.sh::TIntermNode"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TIntermNode"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %2
  %13 = bitcast %"class.std::__1::vector.16"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.sh::TIntermNode"*** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %32, label %26

; <label>:26:                                     ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 2305843009213693951, %14 ]
  %28 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %29 = shl i64 %27, 3
  %30 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* nonnull %28, i64 %29) #18
  %31 = bitcast i8* %30 to %"class.sh::TIntermNode"**
  br label %32

; <label>:32:                                     ; preds = %21, %26
  %33 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %34 = phi %"class.sh::TIntermNode"** [ %31, %26 ], [ null, %21 ]
  %35 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 %9
  %36 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 %33
  %37 = ptrtoint %"class.sh::TIntermNode"** %36 to i64
  %38 = bitcast %"class.sh::TIntermNode"** %1 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.sh::TIntermNode"** %35 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 1
  %42 = ptrtoint %"class.sh::TIntermNode"** %41 to i64
  %43 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 0
  %44 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %43, align 8
  %45 = ptrtoint %"class.sh::TIntermNode"** %44 to i64
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %3, align 8
  %47 = icmp eq %"class.sh::TIntermNode"** %46, %44
  br i1 %47, label %176, label %48

; <label>:48:                                     ; preds = %32
  %49 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %50 = ptrtoint %"class.sh::TIntermNode"** %49 to i64
  %51 = sub i64 %50, %45
  %52 = lshr i64 %51, 3
  %53 = xor i64 %52, -1
  %54 = add nsw i64 %9, %53
  %55 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %56 = ptrtoint %"class.sh::TIntermNode"** %55 to i64
  %57 = sub i64 %56, %45
  %58 = lshr i64 %57, 3
  %59 = add nuw nsw i64 %58, 1
  %60 = icmp ult i64 %59, 4
  br i1 %60, label %105, label %61

; <label>:61:                                     ; preds = %48
  %62 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %63 = ptrtoint %"class.sh::TIntermNode"** %62 to i64
  %64 = sub i64 %63, %45
  %65 = lshr i64 %64, 3
  %66 = xor i64 %65, -1
  %67 = add nsw i64 %9, %66
  %68 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 %67
  %69 = xor i64 %65, -1
  %70 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %69
  %71 = icmp ult %"class.sh::TIntermNode"** %68, %46
  %72 = icmp ult %"class.sh::TIntermNode"** %70, %35
  %73 = and i1 %71, %72
  br i1 %73, label %105, label %74

; <label>:74:                                     ; preds = %61
  %75 = and i64 %59, 3
  %76 = sub nsw i64 %59, %75
  %77 = xor i64 %58, -1
  %78 = add nsw i64 %75, %77
  %79 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 %78
  %80 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 %78
  %81 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %35, i64 -1
  %82 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  br label %83

; <label>:83:                                     ; preds = %83, %74
  %84 = phi i64 [ 0, %74 ], [ %101, %83 ]
  %85 = sub i64 0, %84
  %86 = sub i64 0, %84
  %87 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %81, i64 %85
  %88 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %82, i64 %86
  %89 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %88, i64 -1
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !94
  %92 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %88, i64 -2
  %93 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8, !alias.scope !94
  %96 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %87, i64 -1
  %97 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %97, align 8, !alias.scope !97, !noalias !94
  %98 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %87, i64 -2
  %99 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %98, i64 -1
  %100 = bitcast %"class.sh::TIntermNode"** %99 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %100, align 8, !alias.scope !97, !noalias !94
  %101 = add i64 %84, 4
  %102 = icmp eq i64 %101, %76
  br i1 %102, label %103, label %83, !llvm.loop !99

; <label>:103:                                    ; preds = %83
  %104 = icmp eq i64 %75, 0
  br i1 %104, label %174, label %105

; <label>:105:                                    ; preds = %103, %61, %48
  %106 = phi %"class.sh::TIntermNode"** [ %35, %61 ], [ %35, %48 ], [ %79, %103 ]
  %107 = phi %"class.sh::TIntermNode"** [ %46, %61 ], [ %46, %48 ], [ %80, %103 ]
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 -1
  %109 = ptrtoint %"class.sh::TIntermNode"** %108 to i64
  %110 = sub i64 %109, %45
  %111 = lshr i64 %110, 3
  %112 = add nuw nsw i64 %111, 1
  %113 = and i64 %112, 7
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %126, label %115

; <label>:115:                                    ; preds = %105, %115
  %116 = phi %"class.sh::TIntermNode"** [ %119, %115 ], [ %106, %105 ]
  %117 = phi %"class.sh::TIntermNode"** [ %120, %115 ], [ %107, %105 ]
  %118 = phi i64 [ %124, %115 ], [ %113, %105 ]
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %116, i64 -1
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %117, i64 -1
  %121 = bitcast %"class.sh::TIntermNode"** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %"class.sh::TIntermNode"** %119 to i64*
  store i64 %122, i64* %123, align 8
  %124 = add i64 %118, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %115, !llvm.loop !100

; <label>:126:                                    ; preds = %115, %105
  %127 = phi %"class.sh::TIntermNode"** [ %106, %105 ], [ %119, %115 ]
  %128 = phi %"class.sh::TIntermNode"** [ %107, %105 ], [ %120, %115 ]
  %129 = icmp ult i64 %110, 56
  br i1 %129, label %174, label %130

; <label>:130:                                    ; preds = %126, %130
  %131 = phi %"class.sh::TIntermNode"** [ %168, %130 ], [ %127, %126 ]
  %132 = phi %"class.sh::TIntermNode"** [ %169, %130 ], [ %128, %126 ]
  %133 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -1
  %134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -1
  %135 = bitcast %"class.sh::TIntermNode"** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast %"class.sh::TIntermNode"** %133 to i64*
  store i64 %136, i64* %137, align 8
  %138 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -2
  %139 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -2
  %140 = bitcast %"class.sh::TIntermNode"** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %"class.sh::TIntermNode"** %138 to i64*
  store i64 %141, i64* %142, align 8
  %143 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -3
  %144 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -3
  %145 = bitcast %"class.sh::TIntermNode"** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast %"class.sh::TIntermNode"** %143 to i64*
  store i64 %146, i64* %147, align 8
  %148 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -4
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -4
  %150 = bitcast %"class.sh::TIntermNode"** %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.sh::TIntermNode"** %148 to i64*
  store i64 %151, i64* %152, align 8
  %153 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -5
  %154 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -5
  %155 = bitcast %"class.sh::TIntermNode"** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %"class.sh::TIntermNode"** %153 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -6
  %159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -6
  %160 = bitcast %"class.sh::TIntermNode"** %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = bitcast %"class.sh::TIntermNode"** %158 to i64*
  store i64 %161, i64* %162, align 8
  %163 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -7
  %164 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -7
  %165 = bitcast %"class.sh::TIntermNode"** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"class.sh::TIntermNode"** %163 to i64*
  store i64 %166, i64* %167, align 8
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 -8
  %169 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %132, i64 -8
  %170 = bitcast %"class.sh::TIntermNode"** %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = bitcast %"class.sh::TIntermNode"** %168 to i64*
  store i64 %171, i64* %172, align 8
  %173 = icmp eq %"class.sh::TIntermNode"** %169, %44
  br i1 %173, label %174, label %130, !llvm.loop !101

; <label>:174:                                    ; preds = %126, %130, %103
  %175 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %34, i64 %54
  br label %176

; <label>:176:                                    ; preds = %32, %174
  %177 = phi %"class.sh::TIntermNode"** [ %175, %174 ], [ %35, %32 ]
  %178 = ptrtoint %"class.sh::TIntermNode"** %177 to i64
  store i64 %178, i64* %6, align 8
  store i64 %42, i64* %4, align 8
  store i64 %37, i64* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIi14pool_allocatorIiEE21__push_back_slow_pathIRKiEEvOT_(%"class.std::__1::vector.24"*, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %0, i64 0, i32 0, i32 1
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.24"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 2
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 4611686018427387903
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %2
  %13 = bitcast %"class.std::__1::vector.24"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 2
  %20 = icmp ult i64 %19, 2305843009213693951
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %14
  %22 = ashr exact i64 %18, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %32, label %26

; <label>:26:                                     ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 4611686018427387903, %14 ]
  %28 = tail call %class.TPoolAllocator* @_Z22GetGlobalPoolAllocatorv() #18
  %29 = shl i64 %27, 2
  %30 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* nonnull %28, i64 %29) #18
  %31 = bitcast i8* %30 to i32*
  br label %32

; <label>:32:                                     ; preds = %21, %26
  %33 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %34 = phi i32* [ %31, %26 ], [ null, %21 ]
  %35 = getelementptr inbounds i32, i32* %34, i64 %9
  %36 = getelementptr inbounds i32, i32* %34, i64 %33
  %37 = ptrtoint i32* %36 to i64
  %38 = load i32, i32* %1, align 4
  store i32 %38, i32* %35, align 4
  %39 = getelementptr inbounds i32, i32* %35, i64 1
  %40 = ptrtoint i32* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %0, i64 0, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8
  %43 = ptrtoint i32* %42 to i64
  %44 = load i32*, i32** %3, align 8
  %45 = icmp eq i32* %44, %42
  br i1 %45, label %156, label %46

; <label>:46:                                     ; preds = %32
  %47 = getelementptr i32, i32* %44, i64 -1
  %48 = ptrtoint i32* %47 to i64
  %49 = sub i64 %48, %43
  %50 = lshr i64 %49, 2
  %51 = xor i64 %50, -1
  %52 = add nsw i64 %9, %51
  %53 = getelementptr i32, i32* %44, i64 -1
  %54 = ptrtoint i32* %53 to i64
  %55 = sub i64 %54, %43
  %56 = lshr i64 %55, 2
  %57 = add nuw nsw i64 %56, 1
  %58 = icmp ult i64 %57, 8
  br i1 %58, label %103, label %59

; <label>:59:                                     ; preds = %46
  %60 = getelementptr i32, i32* %44, i64 -1
  %61 = ptrtoint i32* %60 to i64
  %62 = sub i64 %61, %43
  %63 = lshr i64 %62, 2
  %64 = xor i64 %63, -1
  %65 = add nsw i64 %9, %64
  %66 = getelementptr i32, i32* %34, i64 %65
  %67 = xor i64 %63, -1
  %68 = getelementptr i32, i32* %44, i64 %67
  %69 = icmp ult i32* %66, %44
  %70 = icmp ult i32* %68, %35
  %71 = and i1 %69, %70
  br i1 %71, label %103, label %72

; <label>:72:                                     ; preds = %59
  %73 = and i64 %57, 7
  %74 = sub nsw i64 %57, %73
  %75 = xor i64 %56, -1
  %76 = add nsw i64 %73, %75
  %77 = getelementptr i32, i32* %35, i64 %76
  %78 = getelementptr i32, i32* %44, i64 %76
  %79 = getelementptr i32, i32* %35, i64 -1
  %80 = getelementptr i32, i32* %44, i64 -1
  br label %81

; <label>:81:                                     ; preds = %81, %72
  %82 = phi i64 [ 0, %72 ], [ %99, %81 ]
  %83 = sub i64 0, %82
  %84 = sub i64 0, %82
  %85 = getelementptr inbounds i32, i32* %79, i64 %83
  %86 = getelementptr inbounds i32, i32* %80, i64 %84
  %87 = getelementptr inbounds i32, i32* %86, i64 -3
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !102
  %90 = getelementptr inbounds i32, i32* %86, i64 -4
  %91 = getelementptr inbounds i32, i32* %90, i64 -3
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !102
  %94 = getelementptr inbounds i32, i32* %85, i64 -3
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %95, align 4, !alias.scope !105, !noalias !102
  %96 = getelementptr inbounds i32, i32* %85, i64 -4
  %97 = getelementptr inbounds i32, i32* %96, i64 -3
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %98, align 4, !alias.scope !105, !noalias !102
  %99 = add i64 %82, 8
  %100 = icmp eq i64 %99, %74
  br i1 %100, label %101, label %81, !llvm.loop !107

; <label>:101:                                    ; preds = %81
  %102 = icmp eq i64 %73, 0
  br i1 %102, label %154, label %103

; <label>:103:                                    ; preds = %101, %59, %46
  %104 = phi i32* [ %35, %59 ], [ %35, %46 ], [ %77, %101 ]
  %105 = phi i32* [ %44, %59 ], [ %44, %46 ], [ %78, %101 ]
  %106 = getelementptr i32, i32* %105, i64 -1
  %107 = ptrtoint i32* %106 to i64
  %108 = sub i64 %107, %43
  %109 = lshr i64 %108, 2
  %110 = add nuw nsw i64 %109, 1
  %111 = and i64 %110, 7
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %122, label %113

; <label>:113:                                    ; preds = %103, %113
  %114 = phi i32* [ %117, %113 ], [ %104, %103 ]
  %115 = phi i32* [ %118, %113 ], [ %105, %103 ]
  %116 = phi i64 [ %120, %113 ], [ %111, %103 ]
  %117 = getelementptr inbounds i32, i32* %114, i64 -1
  %118 = getelementptr inbounds i32, i32* %115, i64 -1
  %119 = load i32, i32* %118, align 4
  store i32 %119, i32* %117, align 4
  %120 = add i64 %116, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %113, !llvm.loop !108

; <label>:122:                                    ; preds = %113, %103
  %123 = phi i32* [ %104, %103 ], [ %117, %113 ]
  %124 = phi i32* [ %105, %103 ], [ %118, %113 ]
  %125 = icmp ult i64 %108, 28
  br i1 %125, label %154, label %126

; <label>:126:                                    ; preds = %122, %126
  %127 = phi i32* [ %150, %126 ], [ %123, %122 ]
  %128 = phi i32* [ %151, %126 ], [ %124, %122 ]
  %129 = getelementptr inbounds i32, i32* %127, i64 -1
  %130 = getelementptr inbounds i32, i32* %128, i64 -1
  %131 = load i32, i32* %130, align 4
  store i32 %131, i32* %129, align 4
  %132 = getelementptr inbounds i32, i32* %127, i64 -2
  %133 = getelementptr inbounds i32, i32* %128, i64 -2
  %134 = load i32, i32* %133, align 4
  store i32 %134, i32* %132, align 4
  %135 = getelementptr inbounds i32, i32* %127, i64 -3
  %136 = getelementptr inbounds i32, i32* %128, i64 -3
  %137 = load i32, i32* %136, align 4
  store i32 %137, i32* %135, align 4
  %138 = getelementptr inbounds i32, i32* %127, i64 -4
  %139 = getelementptr inbounds i32, i32* %128, i64 -4
  %140 = load i32, i32* %139, align 4
  store i32 %140, i32* %138, align 4
  %141 = getelementptr inbounds i32, i32* %127, i64 -5
  %142 = getelementptr inbounds i32, i32* %128, i64 -5
  %143 = load i32, i32* %142, align 4
  store i32 %143, i32* %141, align 4
  %144 = getelementptr inbounds i32, i32* %127, i64 -6
  %145 = getelementptr inbounds i32, i32* %128, i64 -6
  %146 = load i32, i32* %145, align 4
  store i32 %146, i32* %144, align 4
  %147 = getelementptr inbounds i32, i32* %127, i64 -7
  %148 = getelementptr inbounds i32, i32* %128, i64 -7
  %149 = load i32, i32* %148, align 4
  store i32 %149, i32* %147, align 4
  %150 = getelementptr inbounds i32, i32* %127, i64 -8
  %151 = getelementptr inbounds i32, i32* %128, i64 -8
  %152 = load i32, i32* %151, align 4
  store i32 %152, i32* %150, align 4
  %153 = icmp eq i32* %151, %42
  br i1 %153, label %154, label %126, !llvm.loop !109

; <label>:154:                                    ; preds = %122, %126, %101
  %155 = getelementptr i32, i32* %34, i64 %52
  br label %156

; <label>:156:                                    ; preds = %32, %154
  %157 = phi i32* [ %155, %154 ], [ %35, %32 ]
  %158 = ptrtoint i32* %157 to i64
  store i64 %158, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %37, i64* %16, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #14

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(%"class.std::__1::vector.41"*, float* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %0, i64 0, i32 0, i32 1
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.41"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 2
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 4611686018427387903
  br i1 %11, label %12, label %14

; <label>:12:                                     ; preds = %2
  %13 = bitcast %"class.std::__1::vector.41"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

; <label>:14:                                     ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 2
  %20 = icmp ult i64 %19, 2305843009213693951
  br i1 %20, label %21, label %29

; <label>:21:                                     ; preds = %14
  %22 = ashr exact i64 %18, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

; <label>:26:                                     ; preds = %21
  %27 = icmp ugt i64 %24, 4611686018427387903
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %26
  tail call void @abort() #12
  unreachable

; <label>:29:                                     ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 4611686018427387903, %14 ]
  %31 = shl i64 %30, 2
  %32 = tail call i8* @_Znwm(i64 %31) #20
  %33 = bitcast i8* %32 to float*
  br label %34

; <label>:34:                                     ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi i8* [ %32, %29 ], [ null, %21 ]
  %37 = phi float* [ %33, %29 ], [ null, %21 ]
  %38 = getelementptr inbounds float, float* %37, i64 %9
  %39 = getelementptr inbounds float, float* %37, i64 %35
  %40 = ptrtoint float* %39 to i64
  %41 = bitcast float* %1 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = bitcast float* %38 to i32*
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds float, float* %38, i64 1
  %45 = ptrtoint float* %44 to i64
  %46 = ptrtoint float* %37 to i64
  %47 = icmp sgt i64 %8, 0
  br i1 %47, label %48, label %50

; <label>:48:                                     ; preds = %34
  %49 = inttoptr i64 %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %49, i64 %8, i1 false) #18
  br label %50

; <label>:50:                                     ; preds = %34, %48
  store i64 %46, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %40, i64* %16, align 8
  %51 = icmp eq i64 %7, 0
  br i1 %51, label %54, label %52

; <label>:52:                                     ; preds = %50
  %53 = inttoptr i64 %7 to i8*
  tail call void @_ZdlPv(i8* %53) #20
  br label %54

; <label>:54:                                     ; preds = %50, %52
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1) #7

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1) #7

declare double @ldexp(double, i32) local_unnamed_addr

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nounwind }
attributes #19 = { nounwind readonly }
attributes #20 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !11}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = distinct !{!23, !11}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !11}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !11}
!32 = distinct !{!32, !3}
!33 = !{i8 0, i8 2}
!34 = distinct !{!34, !3}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !11}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !11}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !11}
!49 = distinct !{!49, !3}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !3}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !11}
!59 = distinct !{!59, !11}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !11}
!66 = distinct !{!66, !11}
!67 = !{i32 0, i32 33}
!68 = !{i64 0, i64 65}
!69 = !{!70}
!70 = distinct !{!70, !71}
!71 = distinct !{!71, !"LVerDomain"}
!72 = !{!73}
!73 = distinct !{!73, !71}
!74 = distinct !{!74, !11}
!75 = distinct !{!75, !11}
!76 = distinct !{!76, !3}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZNK5angle6MatrixIfE8elementsEv: argument 0"}
!79 = distinct !{!79, !"_ZNK5angle6MatrixIfE8elementsEv"}
!80 = distinct !{!80, !3}
!81 = distinct !{!81, !3}
!82 = distinct !{!82, !3}
!83 = distinct !{!83, !3}
!84 = distinct !{!84, !3}
!85 = distinct !{!85, !3}
!86 = !{!87}
!87 = distinct !{!87, !88}
!88 = distinct !{!88, !"LVerDomain"}
!89 = !{!90}
!90 = distinct !{!90, !88}
!91 = distinct !{!91, !11}
!92 = distinct !{!92, !3}
!93 = distinct !{!93, !11}
!94 = !{!95}
!95 = distinct !{!95, !96}
!96 = distinct !{!96, !"LVerDomain"}
!97 = !{!98}
!98 = distinct !{!98, !96}
!99 = distinct !{!99, !11}
!100 = distinct !{!100, !3}
!101 = distinct !{!101, !11}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !11}
!108 = distinct !{!108, !3}
!109 = distinct !{!109, !11}
